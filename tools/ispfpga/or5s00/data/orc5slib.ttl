// $Header: /home/dmsys/pvcs/RCSMigTest/rcs/or5s00/pkg/o5snb/data/RCS/orc5slib.ttl,v 1.6 2004/11/18 21:15:41 liou Exp $

// Translate INPUT/OUTPUT flops to Generic PIC register with proper props
// The EXPRESS keyword tells the client that the is to use the ECLK routing.
IFS1P3BX = FS1P3BX ( DIN ) {
           D; SP; SCLK=CK; PD; Q;
};
OFS1P3BX = FS1P3BX ( DOUT ) {
           D; SP; SCLK=CK; PD; Q;
};
OFE1P3BX = FS1P3BX ( DOUT EXPRESS ) {
           D; SP; ECLK=CK; PD; Q;
};
IFS1P3DX = FS1P3DX ( DIN ) {
           D; SP; SCLK=CK; CD; Q;
};
OFS1P3DX = FS1P3DX ( DOUT ) {
           D; SP; SCLK=CK; CD; Q;
};
OFE1P3DX = FS1P3DX ( DOUT EXPRESS ) {
           D; SP; ECLK=CK; CD; Q;
};

IFS1P3IX = FS1P3IX ( DIN ) {
           D; SP; CD; SCLK=CK; Q;
};
OFS1P3IX = FS1P3IX ( DOUT ) {
           D; SP; CD; SCLK=CK; Q;
};
OFE1P3IX = FS1P3IX ( DOUT EXPRESS ) {
           D; SP; CD; ECLK=CK; Q;
};
IFS1P3JX = FS1P3JX ( DIN ) {
           D; SP; PD; SCLK=CK; Q;
};
OFS1P3JX = FS1P3JX ( DOUT ) {
           D; SP; PD; SCLK=CK; Q;
};
OFE1P3JX = FS1P3JX ( DOUT EXPRESS ) {
           D; SP; PD; ECLK=CK; Q;
};

RDBK = READBK;

// Turn off all unsupported elements

// Turn all *IZ and JZ DIN/DOUT regs. off by forcing pinname mismatch
IFS1P3IZ = FS1P3IZ ( DIN ) {
           D; SP; SCLK=CLK; CD; Q;
};
OFS1P3IZ = FS1P3IZ ( DOUT ) {
           D; SP; SCLK=CLK; CD; Q;
};
OFE1P3IZ = FS1P3IZ ( DOUT EXPRESS ) {
           D; SP; ECLK=CLK; CD; Q;
};
IFS1P3JZ = FS1P3JZ ( DIN ) {
           D; SP; SCLK=CLK; PD; Q;
};
OFS1P3JZ = FS1P3JZ ( DOUT ) {
           D; SP; SCLK=CLK; PD; Q;
};
OFE1P3JZ = FS1P3JZ ( DOUT EXPRESS ) {
           D; SP; ECLK=CLK; PD; Q;
};

// Turn all *IZ and JZ off by forcing pinname mismatch
FS1P3IZ = FS1P3IZ {
           D; SP; CK=CLK; CD; Q;
};
FL1P3IZ = FL1P3IZ {
           D; SP; CK=CLK; CD; Q;
};
FD1P3IZ = FD1P3IZ {
           D; SP; CK=CLK; CD; Q;
};
FD1P3JZ = FD1P3JZ {
           D; SP; CK=ECLK; PD; Q;
};
FL1P3JZ = FL1P3JZ {
           D; SP; CK=ECLK; PD; Q;
};
FS1P3JZ = FS1P3JZ {
           D; SP; CK=ECLK; PD; Q;
};

// Turn off OSCIL by forcing pin mismatch
OSCIL = OSCIL {
        OSC=CK;
};

// Turn off 5G DDRs.
INDDR = INDDR {
         D; CK=ELCK; LSR; RUN; Q0; Q1; LOCK;
};
INDDRX = INDDRX {
         D; CK=ELCK; LSR; RUN; Q0; Q1; LOCK;
};
OUTDDR = OUTDDR {
         D0; D1; CK=ELCK; LSR; Q;
};
OUTDDRX = OUTDDRX {
         D0; D1; CK=ELCK; LSR; Q;
};

// Turn off unsupported lib elements. Controlled by environement var.
CB8 = INCDEC8(RETARGET_ERR);
CU8 = INC8(RETARGET_ERR);
CD8 = DEC8(RETARGET_ERR);

MUX21E = MUX21E(RETARGET_ERR) ;
MUX41E = MUX41E (RETARGET_ERR) ;
MUX81E = MUX81E(RETARGET_ERR) ;
IBMS = IBMS(RETARGET_ERR) ;
IBMPDS = IBMS (RETARGET_ERR) ;
IBMPUS = IBMS (RETARGET_ERR) ;
OB12 = OB12(RETARGET_ERR) ;
OB12F = OB12F(RETARGET_ERR) ;
OBZ12 = OBZ12(RETARGET_ERR) ;
OBZ12F = OBZ12F(RETARGET_ERR) ;
OBZ12PU = OBZ12PU(RETARGET_ERR) ;
OBZ12PD = OBZ12PD(RETARGET_ERR) ;
OBZ12FPU = OBZ12FPU(RETARGET_ERR) ;
OBZ12FPD = OBZ12FPD(RETARGET_ERR) ;
BMZ12 = BMZ12 (RETARGET_ERR) ;
BMZ12PU  = BMZ12PU(RETARGET_ERR) ;
BMZ12PD = BMZ12PD(RETARGET_ERR) ;
BMZ12F = BMZ12F(RETARGET_ERR) ;
BMZ12FPU = BMZ12FPU(RETARGET_ERR) ;
BMZ12FPD = BMZ12FPD(RETARGET_ERR) ;
TBUF = TBUF(RETARGET_ERR) ;
TIBUF = TIBUF(RETARGET_ERR) ;
FADD4 = FADD4(RETARGET_ERR) ;
FSUB4 = FSUB4(RETARGET_ERR) ;
FADSU4 = FADSU4(RETARGET_ERR) ;
FADD8 = FADD8(RETARGET_ERR) ;
FSUB8 = FSUB8(RETARGET_ERR) ;
FADSU8 = FADSU8(RETARGET_ERR) ;
RD4P3B = RD4P3B(RETARGET_ERR) ;
RD4P3D = RD4P3D(RETARGET_ERR) ;
RD4P3I = RD4P3I(RETARGET_ERR) ;
RD4P3J = RD4P3J(RETARGET_ERR) ;
RD4P3IX = RD4PIX(RETARGET_ERR) ;
RD4P3JX = RD4P3JX(RETARGET_ERR) ;
CB4P3BX = CB4P3BX(RETARGET_ERR) ;
CB4P3DX = CB4P3DX(RETARGET_ERR) ;
CB4P3IX = CB4P3IX(RETARGET_ERR) ;
CB4P3JX = CB4P3JX(RETARGET_ERR) ;
CD4P3BX = CD4P3BX(RETARGET_ERR) ;
CD4P3DX = CD4P3DX(RETARGET_ERR) ;
CD4P3IX = CD4P3IX(RETARGET_ERR) ;
CD4P3JX = CD4P3JX(RETARGET_ERR) ;
CU4P3BX = CU4P3BX(RETARGET_ERR) ;
CU4P3DX = CU4P3DX(RETARGET_ERR) ;
CU4P3IX = CU4P3IX(RETARGET_ERR) ;
CU4P3JX = CU4P3JX(RETARGET_ERR) ;
CB8P3BX = CB8P3BX(RETARGET_ERR) ;
CB8P3DX = CB8P3DX(RETARGET_ERR) ;
CB8P3IX = CB8P3IX(RETARGET_ERR) ;
CB8P3JX = CB8P3JX(RETARGET_ERR) ;
CD8P3BX = CD8P3BX(RETARGET_ERR) ;
CD8P3DX = CD8P3DX(RETARGET_ERR) ;
CD8P3IX = CD8P3IX(RETARGET_ERR) ;
CD8P3JX = CD8P3JX(RETARGET_ERR) ;
CU8P3BX = CU8P3BX(RETARGET_ERR) ;
CU8P3DX = CU8P3DX(RETARGET_ERR) ;
CU8P3IX = CU8P3IX(RETARGET_ERR) ;
CU8P3JX = CU8P3JX(RETARGET_ERR) ;
LB8P3BX = LB8P3BX(RETARGET_ERR) ;
LB8P3DX = LB8P3DX(RETARGET_ERR) ;
LB8P3IX = LB8P3IX(RETARGET_ERR) ;
LB8P3JX = LB8P3JX(RETARGET_ERR) ;
LD8P3BX = LD8P3BX(RETARGET_ERR) ;
LD8P3DX = LD8P3DX(RETARGET_ERR) ;
LD8P3IX = LD8P3IX(RETARGET_ERR) ;
LD8P3JX = LD8P3JX(RETARGET_ERR) ;
LU8P3BX = LU8P3BX(RETARGET_ERR) ;
LU8P3DX = LU8P3DX(RETARGET_ERR) ;
LU8P3IX = LU8P3IX(RETARGET_ERR) ;
LU8P3JX = LU8P3JX(RETARGET_ERR) ;
AGEB4 = AGEB4(RETARGET_ERR) ;
ANEB4 = ANEB4(RETARGET_ERR) ;
ALEB4 = ALEB4(RETARGET_ERR) ;
AGEB8 = AGEB8(RETARGET_ERR) ;
ANEB8 = ANEB8(RETARGET_ERR) ;
ALEB8 = ALEB8(RETARGET_ERR) ;
SAND2 = SAND2 (RETARGET_ERR) ;
SAND4  = SAND4(RETARGET_ERR) ;
SAND6 = SAND6(RETARGET_ERR) ;
SAND8 = SAND8(RETARGET_ERR) ;
SAND10 = SAND10(RETARGET_ERR) ;
SOR2 = SOR2 (RETARGET_ERR) ;
SOR4  = SOR4(RETARGET_ERR) ;
SOR6  = SOR6(RETARGET_ERR) ;
SOR8  = SOR8(RETARGET_ERR) ;
SOR10 = SOR10(RETARGET_ERR) ;
SAOI42 = SAOI42(RETARGET_ERR) ;
SAOI44 = SAOI44(RETARGET_ERR) ;
SAOI442 = SAOI442(RETARGET_ERR) ;
