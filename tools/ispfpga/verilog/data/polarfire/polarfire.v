/********************************************************************
        Microsemi POLARFIRE Verilog Library
        NAME: polarfire.v
        DATE: November 4, 2020
        TIME: 6:3:3
        NOTE: This file was automatically generated
*********************************************************************/

`timescale 1 ns / 10 ps

// Used to enable PolarFire specific features
`define polarfire

// LegUp: By default, disable warnings because too many warning messages
// will slow down post-synthesis simulation and flood the log file
`define LEGUP_WARNING_MSG_ON 0

//----------------------------------------------------------------------
//---             VERILOG LIBRRAY PRIMITIVE SECTION                     
//----------------------------------------------------------------------

//---------------------------------------------------------------------
// primitibe module (UDP_DFF) state table definition
// FUNCTION : POSITIVE EDGE TRIGGERED D FLIP-FLOP 
//                     WITH ACTIVE LOW ASYNCHRONOUS LOAD
//                     Q OUTPUT UDP.
//----------------------------------------------------------------------
primitive UDP_DFF (Q, AL, AD, SD, CLK);
  output Q;
  input AL, AD, SD, CLK;
  reg Q;
  table
  //AL    AD   SD   CLK  :  Qn  : Qn+1
     0     0    ?     ?  :  ?   :  0  ;   // Async Data
     0     1    ?     ?  :  ?   :  1  ;
     0     x    ?     ?  :  ?   :  x  ;    
    (?0)   0    ?     ?  :  ?   :  0  ;   // Update output for 
    (?0)   1    ?     ?  :  ?   :  1  ;   // Falling Edge
    (?0)   x    ?     ?  :  ?   :  x  ;
     0    (?0)  ?     ?  :  ?   :  0  ;   // Update output for 
     0    (?1)  ?     ?  :  ?   :  1  ;   // Changes in AD
     0    (?x)  ?     ?  :  ?   :  x  ;
    (?x)   0    ?     ?  :  0   :  0  ;   // Reducing Pessimism due to
    (?x)   1    ?     ?  :  1   :  1  ;   // transitions to X on AL
    (?x)   x    ?     ?  :  ?   :  x  ;                         // I can remove this line
    (?x)   ?    ?     ?  :  x   :  x  ;                         // I can remove this line
    (?x)   0    ?     ?  :  1   :  x  ;                         // I can remove this line
    (?x)   1    ?     ?  :  0   :  x  ;                         // I can remove this line
     x     x    ?     ?  :  ?   :  x  ;                         // I can remove this line
     x     0    ?     ?  :  1   :  x  ;                         // I can remove this line
     x     1    ?     ?  :  0   :  x  ;                         // I can remove this line
     1     ?    0   (01) :  ?   :  0  ;   // Sync Data
     1     ?    1   (01) :  ?   :  1  ;
     1     ?    x   (01) :  ?   :  x  ;
     1     ?    0   (x1) :  0   :  0  ;
     1     ?    1   (x1) :  1   :  1  ;
     1     ?    ?   (x1) :  x   :  x  ;                         // I can remove this line
     1     ?    x   (x1) :  ?   :  x  ;                         // I can remove this line
     1     ?    0   (x1) :  1   :  x  ;                         // I can remove this line
     1     ?    1   (x1) :  0   :  x  ;                         // I can remove this line
     x     1    1   (01) :  ?   :  1  ;
     x     0    0   (01) :  ?   :  0  ;
     x     ?    x   (01) :  ?   :  x  ;
     x     x    ?   (01) :  ?   :  x  ;
     x     1    0   (01) :  ?   :  x  ;
     x     0    1   (01) :  ?   :  x  ;
     x     0    0   (x1) :  0   :  0  ;
     x     1    1   (x1) :  1   :  1  ;
     x     ?    ?   (x1) :  x   :  x  ;
     x     ?    x   (x1) :  ?   :  x  ;
     x     x    ?   (x1) :  ?   :  x  ;
     x     ?    1   (x1) :  0   :  x  ;
    (?1)   ?    ?     ?  :  ?   :  -  ;   // Ignore Rising Edge on AL
     0     ?    ?     *  :  ?   :  -  ;   // Ignore Changes on CLK during Async
     ?     ?    ?   (?0) :  ?   :  -  ;   // Ignore CLK falling edge
     1     *    ?     ?  :  ?   :  -  ;   // Ignore changes on AD during Sync
     ?     ?    *     ?  :  ?   :  -  ;   // Ignore changes on SD during Sync
  endtable
endprimitive

//---------------------------------------------------------------------
// primitibe module (UDP_DL) state table definition
// FUNCTION : POSITIVE EDGE TRIGGERED D LATCH 
//                     WITH ACTIVE LOW ASYNCHRONOUS LOAD
//                     Q OUTPUT UDP.
//----------------------------------------------------------------------
primitive UDP_DL (Q, AL, AD, SD, CLK);
  output Q;
  input AL, AD, SD, CLK;
  reg Q;
  table
  //AL    AD   SD   CLK  :  Qn  : Qn+1
     0     0    ?     ?  :  ?   :  0  ;
     0     1    ?     ?  :  ?   :  1  ;
     0     x    ?     ?  :  ?   :  x  ;
    (?1)   ?    ?     ?  :  ?   :  -  ;
    (?0)   0    ?     ?  :  ?   :  0  ;
    (?0)   1    ?     ?  :  ?   :  1  ;
    (?0)   x    ?     ?  :  ?   :  x  ;
     0    (?0)  ?     ?  :  ?   :  0  ;
     0    (?1)  ?     ?  :  ?   :  1  ;
     0    (?x)  ?     ?  :  ?   :  x  ;
    (?x)   0    ?     ?  :  0   :  0  ;
    (?x)   1    ?     ?  :  1   :  1  ;
    (?x)   x    ?     ?  :  ?   :  x  ;
    (?x)   ?    ?     ?  :  x   :  x  ;
    (?x)   0    ?     ?  :  1   :  x  ;
    (?x)   1    ?     ?  :  0   :  x  ;
     x     0    ?     b  :  0   :  0  ;
     x     1    ?     b  :  1   :  1  ;
     x     x    ?     b  :  ?   :  x  ;
     x     ?    ?     b  :  x   :  x  ;
     x     0    ?     b  :  1   :  x  ;
     x     1    ?     b  :  0   :  x  ;
     1     ?    0     1  :  ?   :  0  ;
     1     ?    1     1  :  ?   :  1  ;
     1     ?    x     1  :  ?   :  x  ;
     1     ?   (?0)   1  :  ?   :  0  ;
     1     ?   (?1)   1  :  ?   :  1  ;
     1     ?   (?x)   1  :  ?   :  x  ;
     1     ?    0  (?1)  :  ?   :  0  ;
     1     ?    1  (?1)  :  ?   :  1  ;
     1     ?    x  (?1)  :  ?   :  x  ;
     1     ?    0  (?x)  :  0   :  0  ;
     1     ?    1  (?x)  :  1   :  1  ;
     1     ?    ?  (?x)  :  x   :  x  ;
     1     ?    x  (?x)  :  ?   :  x  ;
     1     ?    0  (?x)  :  1   :  x  ;
     1     ?    1  (?x)  :  0   :  x  ;
     1     ?    0     x  :  0   :  0  ;
     1     ?    1     x  :  1   :  1  ;
     1     ?    x     x  :  ?   :  x  ;
     1     ?    ?     x  :  x   :  x  ;
     1     ?    1     x  :  0   :  x  ;
     1     ?    0     x  :  1   :  x  ;
     x     1    1     x  :  1   :  1  ;
     x     0    0     x  :  0   :  0  ;
     0     ?    ?     *  :  ?   :  -  ;
     ?     ?    ?  (?0)  :  ?   :  -  ;
     1     *    ?     ?  :  ?   :  -  ;
     0     ?    *     ?  :  ?   :  -  ;
     1     ?    *     0  :  ?   :  -  ;
  endtable
endprimitive

//---------------------------------------------------------------------
// primitibe module (UDP_MUX2) state table definition
// FUNCTION : 2-to-1 MULTIPLEXER
//                     SL = 0  --> Q = A
//                     SL = 1  --> Q = B
//----------------------------------------------------------------------
primitive UDP_MUX2 (Q, A, B, SL);
  output Q;
  input A, B, SL;
  table
    //  A   B   SL  :   Q
    0   0   ?   :   0 ;
    1   1   ?   :   1 ;
    0   ?   0   :   0 ;
    1   ?   0   :   1 ;
    ?   0   1   :   0 ;
    ?   1   1   :   1 ;
    x   ?   0   :   x ;
    ?   x   1   :   x ;
    1   0   x   :   x ;
    0   1   x   :   x ;
  endtable
endprimitive

//---------------------------------------------------------------------
// primitibe module (UDP_GBLAT) state table definition
// FUNCTION : POSITIVE EDGE TRIGGERED D LATCH 
//                     Q OUTPUT UDP.
//----------------------------------------------------------------------
primitive UDP_GBLAT (Q, D, G);
  output Q;
  input D, G;
  reg Q;
  table
  //D    G   :  Qn  : Qn+1
    ?    0   :  ?   :  -  ;
    0    1   :  ?   :  0  ;
    1    1   :  ?   :  1  ;
    x    1   :  ?   :  x  ;
    0    x   :  0   :  0  ;
    1    x   :  1   :  1  ;
    *    0   :  ?   :  -  ;
    0  (01)  :  ?   :  0  ;
    1  (01)  :  ?   :  1  ;
    x  (01)  :  ?   :  x  ;
    ?  (?0)  :  ?   :  -  ;
    0  (?x)  :  0   :  0  ;
    1  (?x)  :  1   :  1  ;
  (?1)   1   :  ?   :  1  ;
  (?0)   1   :  ?   :  0  ;
  (?x)   1   :  ?   :  x  ;
  endtable
endprimitive

//---------------------------------------------------------------------
// primitibe module (UDP_BUFF) state table definition
// FUNCTION : BUFF
//----------------------------------------------------------------------
primitive UDP_BUFF (Y, A);
  output Y;
  input  A;

  table
  //A     :  Y
    0  :  0;
    1  :  1;
    x  :  x;
  endtable
endprimitive

//---------------  END OF VERILOG PRIMITIVE SECTION --------------------

/*--------------------------------------------------------------------
NAME : SLE_Prim
TYPE : FF/Latch
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module SLE_Prim (output Q,
                 input ADn,
                 input ALn,
                 input CLK,
                 input D,
                 input LAT,
                 input SD,
                 input EN,
                 input SLn);
  wire ALn_int;
  
`ifdef rtg4
  parameter POR = 1'b1;
  reg     init_reset;
  initial begin
    init_reset <= ~POR;
    #0.001;
    init_reset <= 1'b1;
  end
  assign ALn_int = init_reset && ALn;
`else
  assign ALn_int = ALn;
`endif

  UDP_MUX2 mux_0(SYNC, SD, D, SLn);
  UDP_MUX2 mux_1(DATA, Q, SYNC, EN);
  
  UDP_DFF  DFF_0(QFF, ALn_int, ADn_, DATA, CLK);
  UDP_DL   DL_1(QL, ALn_int, ADn_, DATA, CLK);
  UDP_MUX2 mux_2(Q, QFF, QL, LAT);  
  
  not  U1(ADn_, ADn);
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


//---------------------------------------------------------------------
// primitibe module (UDP_GBLAT) state table definition
// FUNCTION : POSITIVE EDGE TRIGGERED D LATCH
//                     Q OUTPUT UDP.
//----------------------------------------------------------------------
primitive UDP_GBLAT_T (Q, D, G);
  output Q;
  input D, G;
  reg Q;

  initial
    Q = 1'b1;
  table
  //D    G   :  Qn  : Qn+1
    ?    0   :  ?   :  -  ;
    0    1   :  ?   :  0  ;
    1    1   :  ?   :  1  ;
    x    1   :  ?   :  x  ;
    0    x   :  0   :  0  ;
    1    x   :  1   :  1  ;
    *    0   :  ?   :  -  ;
    0  (01)  :  ?   :  0  ;
    1  (01)  :  ?   :  1  ;
    x  (01)  :  ?   :  x  ;
    ?  (?0)  :  ?   :  -  ;
    0  (?x)  :  0   :  0  ;
    1  (?x)  :  1   :  1  ;
  (?1)   1   :  ?   :  1  ;
  (?0)   1   :  ?   :  0  ;
  (?x)   1   :  ?   :  x  ;
  endtable
endprimitive


`timescale 1ps/1ps
module PIPE_REG(clk,
                d,
                en,
                aln,
                sln,
                lat,
                adn,
                sd,
                q);
                
  parameter WIDTH = 1;
  
  input                 clk, en, aln, sln, lat, adn, sd;
  input   [WIDTH-1 : 0] d;
  output  [WIDTH-1 : 0] q;
            
  genvar i;
  generate
    for(i=0; i<WIDTH; i=i+1) begin : PIPELINE
      SLE_Prim u_reg( .Q( q[i] ), .ADn( adn ), .ALn( aln ), .CLK( clk ), .D( d[i] ), .LAT( lat ), .SD( sd ), .EN( en ), .SLn( sln ) );
    end
  endgenerate
endmodule

`timescale 1ps/1ps
module PIPE_REG_BYPASS (clk,
                        d,
                        en,
                        aln,
                        sln,
                        adn,
                        sd,
                        bypass,
                        q);
                
  parameter WIDTH           = 1;
  parameter WIDE_LOAD_DATA  = 0;
  
  input                                   clk, en, aln, sln, bypass;
  input   [WIDE_LOAD_DATA*(WIDTH-1) : 0]  adn, sd;
  input   [WIDTH-1 : 0]                   d;
  output  [WIDTH-1 : 0]                   q;
            
  assign clk_int    = bypass ? 1'b1 : clk;
  assign lat_int    = bypass ? 1'b1 : 1'b0;
  assign en_int     = bypass ? 1'b1 : en;
  assign sln_int    = bypass ? 1'b1 : sln;
  assign aln_int    = bypass ? 1'b1 : aln;
      
  genvar i;
  generate
    for(i=0; i<WIDTH; i=i+1) begin : PIPELINE
      SLE_Prim u_reg( .Q( q[i] ), .ADn( adn[WIDE_LOAD_DATA * i] ), .ALn( aln_int ), .CLK( clk_int ), .D( d[i] ), .LAT( lat_int ), .SD( sd[WIDE_LOAD_DATA * i] ), .EN( en_int ), .SLn( sln_int ) );
    end
  endgenerate
endmodule

`timescale 1ps/1ps
module REG_BYPASS(BYPASS,
                  IN_CLK, IN_EN, IN_SL_N,
                  OUT_CLK, OUT_LAT_N, OUT_EN, OUT_SL_N);
  
  parameter WIDTH = 1;
  
  input [WIDTH-1 : 0] BYPASS;
  input               IN_CLK;
  input [WIDTH-1 : 0] IN_EN;
  input [WIDTH-1 : 0] IN_SL_N;
  
  output [WIDTH-1 : 0] OUT_CLK;
  output [WIDTH-1 : 0] OUT_LAT_N;
  output [WIDTH-1 : 0] OUT_EN;
  output [WIDTH-1 : 0] OUT_SL_N;
  
  genvar i;
  generate
    for(i=0; i<WIDTH; i=i+1) begin : BYP
      assign OUT_CLK[i]    = BYPASS[i] ? 1'b1 : IN_CLK;
      assign OUT_LAT_N[i]  = BYPASS[i] ? 1'b0 : 1'b1;
      assign OUT_EN[i]     = BYPASS[i] ? 1'b1 : IN_EN[i];
      assign OUT_SL_N[i]   = BYPASS[i] ? 1'b1 : IN_SL_N[i];
    end
  endgenerate
endmodule

`timescale 1ps/1ps
module INPUT_BUF(OUT, IN);
  parameter WIDTH = 1;
  input   [ WIDTH-1 : 0 ]   IN;
  output  [ WIDTH-1 : 0 ]   OUT;
  
  genvar i;
  generate
    for(i=0; i<WIDTH; i=i+1) begin : inbuf
      buf u0  (OUT[i], IN[i]);
    end
  endgenerate
endmodule

`timescale 1ps/1ps
module OUTPUT_PMOS(OUT, IN);
  parameter WIDTH = 1;
  input   [ WIDTH-1 : 0 ]   IN;
  output  [ WIDTH-1 : 0 ]   OUT;
  
  genvar i;
  generate
    for(i=0; i<WIDTH; i=i+1) begin : outpmos
      pmos p0 (OUT[i], IN[i], 0);
    end
  endgenerate
endmodule

module ECC_PIPELINE (D, Q, CLK, ARST_N, SRST_N, EN, ECC_BYPASS, DOUT_BYPASS);
  parameter width = 20;
  
  output  [width-1 : 0] Q;
  input   [width-1 : 0] D;
  input                 CLK;
  input                 ARST_N;
  input                 SRST_N;
  input                 EN;
  input                 ECC_BYPASS;
  input                 DOUT_BYPASS;
  
  wire    [width-1 : 0] q_eccp_byp;     // ECC pipeline + output bypass (just the ECC pipeline register)
  wire    [width-1 : 0] q_eccp_pipe;    // ECC pipeline + output pipeline (the ECC pipeline + output pipeline registers)
  wire    [width-1 : 0] q_necc_pipe;    // No ECC/ECC bypass + output pipeline (just the output pipeline register)
  wire    [width-1 : 0] q_necc_byp;     // No ECC/ECC bypass + output bypass (no pipeline registers)
  
  assign q_necc_byp = D;
  
  genvar i;
  generate
    for(i=0; i<width; i=i+1) begin : PIPE
      // EN and SRST_N drive both the output and ECC pipeline registers
      SLE_Prim upipe1 (.Q(q_eccp_byp[i]), .ADn(1'b1), .ALn(ARST_N), .CLK(CLK), .D(D[i]),
                           .LAT(1'b0), .SD(1'b0), .EN(EN), .SLn(SRST_N));
      
      SLE_Prim upipe2 (.Q(q_eccp_pipe[i]), .ADn(1'b1), .ALn(ARST_N), .CLK(CLK), .D(q_eccp_byp[i]),
                           .LAT(1'b0), .SD(1'b0), .EN(EN), .SLn(SRST_N));
                           
      SLE_Prim upipe3 (.Q(q_necc_pipe[i]), .ADn(1'b1), .ALn(ARST_N), .CLK(CLK), .D(D[i]),
                           .LAT(1'b0), .SD(1'b0), .EN(EN), .SLn(SRST_N));
    end
  endgenerate
  
  assign Q[width-1 : 0] = (ECC_BYPASS === 1'b1) ? ( (DOUT_BYPASS === 1'b1) ? q_necc_byp[width-1:0] : q_necc_pipe[width-1:0] ) :
                                                  ( (DOUT_BYPASS === 1'b1) ? q_eccp_byp[width-1:0] : q_eccp_pipe[width-1:0] );
                                                      
endmodule


/*--------------------------------------------------------------------
NAME : GND
TYPE : comb
LOGIC : Y=1'b0
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module GND(Y);
  output Y;
  supply0 Y;

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : VCC
TYPE : comb
LOGIC : Y=1'b1
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module VCC(Y);
  output Y;
  supply1 Y;

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : ARI1
TYPE : comb
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module ARI1 (output Y,
             output S,
             output FCO,
             input A,
             input B,
             input C,
             input D,
             input FCI);
  
  parameter [19:0] INIT = 20'h0;
  supply1 VCC_0;
  supply0 GND_0;
  
  UDP_MUX2 mux_0(M0, INIT[0],  INIT[4],  D);
  UDP_MUX2 mux_1(M1, INIT[1],  INIT[5],  D);
  UDP_MUX2 mux_2(M2, INIT[2],  INIT[6],  D);
  UDP_MUX2 mux_3(M3, INIT[3],  INIT[7],  D);
  UDP_MUX2 mux_4(M4, INIT[8],  INIT[12], D);
  UDP_MUX2 mux_5(M5, INIT[9],  INIT[13], D);
  UDP_MUX2 mux_6(M6, INIT[10], INIT[14], D);
  UDP_MUX2 mux_7(M7, INIT[11], INIT[15], D);
  
  UDP_MUX2 mux_8 (M8,  M0,  M2,  C);
  UDP_MUX2 mux_9 (M9,  M1,  M3,  C);
  UDP_MUX2 mux_10(M10, M4,  M6,  C);
  UDP_MUX2 mux_11(M11, M5,  M7,  C);
  
  UDP_MUX2 mux_12(F0, M8,  M9,  B);
  UDP_MUX2 mux_13(F1, M10, M11, B);
  
  UDP_MUX2 mux_14(G0, GND_0, VCC_0, INIT[17]);
  UDP_MUX2 mux_15(G1, F0, F1, INIT[17]);
  UDP_MUX2 mux_16(G, G0, G1, INIT[16]);
  
  UDP_MUX2 mux_17(P0, GND_0, Y, INIT[18]);
  
  UDP_MUX2 mux_18(Y , F0, F1, A);
  or  U0(P, P0, INIT[19]);
  xor U1(S, Y, FCI);
  UDP_MUX2 mux_19(FCO, G, FCI, P);

  specify
    specparam PATHPULSE$      = (0.001, 0.001);
    specparam tpdLH           = (0.01:0.01:0.01);
    specparam tpdHL           = (0.01:0.01:0.01);
    specparam MacroType       = "comb";

    //pin to pin path delay 
    (A => Y )     = ( tpdLH, tpdHL );
    (B => Y )     = ( tpdLH, tpdHL );
    (C => Y )     = ( tpdLH, tpdHL );
    (D => Y )     = ( tpdLH, tpdHL );
    (A => S )     = ( tpdLH, tpdHL );
    (B => S )     = ( tpdLH, tpdHL );
    (C => S )     = ( tpdLH, tpdHL );
    (D => S )     = ( tpdLH, tpdHL );
    (FCI => S )   = ( tpdLH, tpdHL );
    (A => FCO )   = ( tpdLH, tpdHL );
    (B => FCO )   = ( tpdLH, tpdHL );
    (C => FCO )   = ( tpdLH, tpdHL );
    (D => FCO )   = ( tpdLH, tpdHL );
    (FCI => FCO ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : CFG4
TYPE : comb
LOGIC: 4-INPUT LUT
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CFG4 (output Y,
             input A,
             input B,
             input C,
             input D);

  parameter [15:0] INIT = 16'h0;
  parameter LUT_FUNCTION = "";
  
  UDP_MUX2 mux_0(M0, INIT[0], INIT[8], D);
  UDP_MUX2 mux_1(M1, INIT[1], INIT[9], D);
  UDP_MUX2 mux_2(M2, INIT[2], INIT[10], D);
  UDP_MUX2 mux_3(M3, INIT[3], INIT[11], D);
  UDP_MUX2 mux_4(M4, INIT[4], INIT[12], D);
  UDP_MUX2 mux_5(M5, INIT[5], INIT[13], D);
  UDP_MUX2 mux_6(M6, INIT[6], INIT[14], D);
  UDP_MUX2 mux_7(M7, INIT[7], INIT[15], D);
  
  UDP_MUX2 mux_8(M8, M0, M4, C);
  UDP_MUX2 mux_9(M9, M1, M5, C);
  UDP_MUX2 mux_10(M10, M2, M6, C);
  UDP_MUX2 mux_11(M11, M3, M7, C);
  
  UDP_MUX2 mux_12(M12, M8, M10, B);
  UDP_MUX2 mux_13(M13, M9, M11, B);
  
  UDP_MUX2 mux_14(Y , M12, M13, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType = "comb";

    //pin to pin path delay 
    if ( A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( B ) ( B => Y ) = ( tpdLH, tpdHL );
    if ( C ) ( C => Y ) = ( tpdLH, tpdHL );
    if ( D ) ( D => Y ) = ( tpdLH, tpdHL );
    
    if ( ~A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( ~B ) ( B => Y ) = ( tpdLH, tpdHL );
    if ( ~C ) ( C => Y ) = ( tpdLH, tpdHL );
    if ( ~D ) ( D => Y ) = ( tpdLH, tpdHL );
  endspecify   
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : CFG3
TYPE : comb
LOGIC: 3-INPUT LUT
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CFG3 (output Y,
             input A,
             input B,
             input C);

  parameter [7:0] INIT = 8'h0;
  parameter LUT_FUNCTION = "";
  
  UDP_MUX2 mux_0(M0, INIT[0], INIT[4], C);
  UDP_MUX2 mux_1(M1, INIT[1], INIT[5], C);
  UDP_MUX2 mux_2(M2, INIT[2], INIT[6], C);
  UDP_MUX2 mux_3(M3, INIT[3], INIT[7], C);
  UDP_MUX2 mux_4(M4, M0, M2, B);
  UDP_MUX2 mux_5(M5, M1, M3, B);
  UDP_MUX2 mux_6(Y , M4, M5, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    if ( A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( B ) ( B => Y ) = ( tpdLH, tpdHL );
    if ( C ) ( C => Y ) = ( tpdLH, tpdHL );
    
    if ( ~A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( ~B ) ( B => Y ) = ( tpdLH, tpdHL );
    if ( ~C ) ( C => Y ) = ( tpdLH, tpdHL );
  endspecify   
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : CFG2
TYPE : comb
LOGIC: 2-INPUT LUT
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CFG2 (output Y,
             input A,
             input B);

  parameter [3:0] INIT = 4'h0;
  parameter LUT_FUNCTION = "";
  
  UDP_MUX2 mux_0(M0, INIT[0], INIT[2], B);
  UDP_MUX2 mux_1(M1, INIT[1], INIT[3], B);
  UDP_MUX2 mux_2(Y , M0, M1, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    if ( A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( B ) ( B => Y ) = ( tpdLH, tpdHL );
    
    if ( ~A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( ~B ) ( B => Y ) = ( tpdLH, tpdHL );
  endspecify   
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : CFG1
TYPE : comb
LOGIC: 1-INPUT LUT
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CFG1 (output Y,
             input A);

  parameter [1:0] INIT = 2'h0;
  parameter LUT_FUNCTION = "";
  
  not INV_0(A_, A);  
  and U0 (M0, INIT[0], A_);
  and U1 (M1, INIT[1], A );  
  or  U2 (Y, M0, M1);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    if ( A ) ( A => Y ) = ( tpdLH, tpdHL );
    if ( ~A ) ( A => Y ) = ( tpdLH, tpdHL );
  endspecify   
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : CFG0
TYPE : comb
LOGIC: 0-INPUT LUT
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CFG0 (output Y);

  parameter INIT = 1'h0;
  parameter LUT_FUNCTION = "";
  
  buf  U0 (Y, INIT);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";

    //pin to pin path delay 
  endspecify   
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : INV
TYPE : comb
EQN : Y = !A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INV(output Y, input A);

  not	U0(Y, A);

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    (A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : INV_BA
TYPE : comb
EQN : Y = !A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INV_BA(output Y, input A);

  not	U0(Y, A);

endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : INVD
TYPE : comb
EQN : Y = !A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INVD(output Y, input A);

  not	U0(Y, A);

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    (A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : BUFF
TYPE : comb
LOGIC : Y = A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BUFF(output Y, input A);
  
  buf	U0(Y, A);

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    (A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : BUFD
TYPE : comb
LOGIC : Y = A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BUFD(output Y, input A);
  
  buf	U0(Y, A);

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    (A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NAND3
TYPE : comb
LOGIC : Y = !(A B C)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NAND3(output Y, input A, input B, input C);
	CFG3 #('h7f) U0(.Y(Y), .A(A), .B(B), .C(C));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : MX2
TYPE : comb
LOGIC : Y = (A !S) + (B S)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module MX2(output Y, input A, input B, input S);
	CFG3 #('hca) U0(.Y(Y), .A(A), .B(B), .C(S));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : AND3
TYPE : comb
LOGIC : Y = A B C
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module AND3(output Y, input A, input B, input C);
	CFG3 #('h80) U0(.Y(Y), .A(A), .B(B), .C(C));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : OR2
TYPE : comb
LOGIC : Y = A + B
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OR2(output Y, input A, input B);
	CFG2 #('he) U0(.Y(Y), .A(A), .B(B));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : XOR2
TYPE : comb
LOGIC : Y = A ^ B
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module XOR2(output Y, input A, input B);
	CFG2 #('h6) U0(.Y(Y), .A(A), .B(B));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NOR2
TYPE : comb
LOGIC : Y = !(A + B)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NOR2(output Y, input A, input B);
	CFG2 #('h1) U0(.Y(Y), .A(A), .B(B));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : AND2
TYPE : comb
LOGIC : Y = A B
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module AND2(output Y, input A, input B);
	CFG2 #('h8) U0(.Y(Y), .A(A), .B(B));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : OR3
TYPE : comb
LOGIC : Y = A + B + C
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OR3(output Y, input A, input B, input C);
	CFG3 #('hfe) U0(.Y(Y), .A(A), .B(B), .C(C));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : XOR3
TYPE : comb
LOGIC : Y = A ^ B ^ C
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module XOR3(output Y, input A, input B, input C);
	CFG3 #('h96) U0(.Y(Y), .A(A), .B(B), .C(C));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NOR3
TYPE : comb
LOGIC : Y = !(A + B + C)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NOR3(output Y, input A, input B, input C);
	CFG3 #('h01) U0(.Y(Y), .A(A), .B(B), .C(C));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NAND2
TYPE : comb
LOGIC : Y = !(A B)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NAND2(output Y, input A, input B);
	CFG2 #('h7) U0(.Y(Y), .A(A), .B(B));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : AND4
TYPE : comb
LOGIC : Y = A B C D
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module AND4(output Y, input A, input B, input C, input D);
	CFG4 #('h8000) U0(.Y(Y), .A(A), .B(B), .C(C), .D(D));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NAND4
TYPE : comb
LOGIC : Y = !(A B C D)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NAND4(output Y, input A, input B, input C, input D);
	CFG4 #('h7fff) U0(.Y(Y), .A(A), .B(B), .C(C), .D(D));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : OR4
TYPE : comb
LOGIC : Y = A + B + C + D
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OR4(output Y, input A, input B, input C, input D);
	CFG4 #('hfffe) U0(.Y(Y), .A(A), .B(B), .C(C), .D(D));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : NOR4
TYPE : comb
LOGIC : Y = !(A + B + C + D)
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module NOR4(output Y, input A, input B, input C, input D);
	CFG4 #('h0001) U0(.Y(Y), .A(A), .B(B), .C(C), .D(D));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : XOR4
TYPE : comb
LOGIC : Y = A ^ B ^ C ^ D
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module XOR4(output Y, input A, input B, input C, input D);
	CFG4 #('h6996) U0(.Y(Y), .A(A), .B(B), .C(C), .D(D));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : XOR8
TYPE : comb
LOGIC : Y = A ^ B ^ C ^ D ^ E ^ F ^ G ^ H
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module XOR8(output Y, input A, input B, input C, input D, input E, input F, input G, input H);
	ARI1 #('h46996) U0(.Y(), .S(), .FCO(co), .A(A), .B(B), .C(C), .D(D), .FCI(1'b1));
  ARI1 #('h06996) U1(.Y(), .S(Y), .FCO(), .A(E), .B(F), .C(G), .D(H), .FCI(co));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : MX4
TYPE : comb
LOGIC : Y = !S0 !S1 D0 + S0 !S1 D1 + !S0 S1 D2 + S0 S1 D3
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module MX4(output Y, input D0, input D1, input D2, input D3, input S0, input S1);
	CFG4 #('hF0CA) U0(.Y(Y0), .A(D0), .B(D1), .C(S0), .D(S1));
  CFG4 #('hE4AA) U1(.Y(Y), .A(Y0), .B(D2), .C(D3), .D(S1));
endmodule
`endcelldefine

/*--------------------------------------------------------------------
NAME : BUFD_DELAY
TYPE : comb
LOGIC : Y = A
---------------------------------------------------------------------*/
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BUFD_DELAY(output Y, input A);
  
  parameter [1:0] INIT = 2'h0;
  parameter LUT_FUNCTION = "";
  
  buf	U0(Y, A);

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";
    
    //pin to pin path delay 
    (A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine


/*--------------------------------------------------------------------
NAME : CFG1A
TYPE : comb
LOGIC: buffer
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG1A (output Y,
             input A,
             input B,
             input C,
             input D);

  buf (Y, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
    ( B => Y ) = ( tpdLH, tpdHL );
    ( C => Y ) = ( tpdLH, tpdHL );
    ( D => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : CFG1B
TYPE : comb
LOGIC: buffer
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG1B (output Y,
             input A,
             input B,
             input C,
             input D);

  buf (Y, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
    ( B => Y ) = ( tpdLH, tpdHL );
    ( C => Y ) = ( tpdLH, tpdHL );
    ( D => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : CFG1C
TYPE : comb
LOGIC: buffer
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG1C (output Y,
             input A,
             input B,
             input C,
             input D);

  buf (Y, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
    ( B => Y ) = ( tpdLH, tpdHL );
    ( C => Y ) = ( tpdLH, tpdHL );
    ( D => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : CFG1D
TYPE : comb
LOGIC: buffer
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG1D (output Y,
             input A);

  buf (Y, A);
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : CFG4A
TYPE : comb
LOGIC: 4-INPUT LUT
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG4A (output Y,
             input A,
             input B,
             input C,
             input D);

  parameter [15:0] INIT = 16'h0;
  parameter LUT_FUNCTION = "";
  
  CFG4 #(.INIT(INIT)) u0 (.A(A), .B(B), .C(C), .D(D), .Y(Y));
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
    ( B => Y ) = ( tpdLH, tpdHL );
    ( C => Y ) = ( tpdLH, tpdHL );
    ( D => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : CFG4_ROM
TYPE : comb
LOGIC: 4-INPUT LUT
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module CFG4_ROM(output Y,
                input A,
                input B,
                input C,
                input D);

  parameter [15:0] INIT = 16'h0;
  parameter LUT_FUNCTION = "";
  
  CFG4 #(.INIT(INIT)) u0 (.A(A), .B(B), .C(C), .D(D), .Y(Y));
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( A => Y ) = ( tpdLH, tpdHL );
    ( B => Y ) = ( tpdLH, tpdHL );
    ( C => Y ) = ( tpdLH, tpdHL );
    ( D => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : LCLKBUF
TYPE : io
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module LCLKBUF(output Y,
               input PAD);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  CLKBUF U0(.Y(Y), .PAD(PAD));
  
  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( PAD => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : LCLKBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module LCLKBUF_DIFF(input PADP,
                    input PADN,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  CLKBUF_DIFF U0(.Y(Y), .PADP(PADP), .PADN(PADN));

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    ( PADP => Y ) = ( tpdLH, tpdHL );
    ( PADN => Y ) = ( tpdLH, tpdHL );
  endspecify
endmodule

/*--------------------------------------------------------------------
NAME : ARI1_CC
TYPE : comb
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 1 ps
module ARI1_CC (output Y,
                output S,
                output P,
                output Y3,
                output Y3A,
                output FCO,
                input FCI,
                input A,
                input B,
                input C,
                input D,
                input CC);
  
  parameter [19:0] INIT = 20'h0;
  supply1 VCC_0;
  supply0 GND_0;
  
  
  UDP_MUX2 mux_0(M0, INIT[0],  INIT[4],  D);
  UDP_MUX2 mux_1(M1, INIT[1],  INIT[5],  D);
  UDP_MUX2 mux_2(M2, INIT[2],  INIT[6],  D);
  UDP_MUX2 mux_3(M3, INIT[3],  INIT[7],  D);
  UDP_MUX2 mux_4(M4, INIT[8],  INIT[12], D);
  UDP_MUX2 mux_5(M5, INIT[9],  INIT[13], D);
  UDP_MUX2 mux_6(M6, INIT[10], INIT[14], D);
  UDP_MUX2 mux_7(M7, INIT[11], INIT[15], D);
  
  UDP_MUX2 mux_8 (M8,  M0,  M2,  C);
  UDP_MUX2 mux_9 (M9,  M1,  M3,  C);
  UDP_MUX2 mux_10(M10, M4,  M6,  C);
  UDP_MUX2 mux_11(M11, M5,  M7,  C);
  
  UDP_MUX2 mux_12(F0, M8,  M9,  B);
  UDP_MUX2 mux_13(F1, M10, M11, B);
  
  UDP_MUX2 mux_14(G0, GND_0, VCC_0, INIT[17]);
  UDP_MUX2 mux_15(G1, F0, F1, INIT[17]);
  UDP_MUX2 mux_16(G, G0, G1, INIT[16]);
  
  UDP_MUX2 mux_17(P0, GND_0, Y, INIT[18]);
  
  UDP_MUX2 mux_18(Y , F0, F1, A);
  or  U0(P, P0, INIT[19]);
  xor U1(S, Y, CC);
  
  not U2(Y3, G);
  //assign Y3 = F1;
  assign Y3A = F0;

  specify
    specparam PATHPULSE$    = (0.001, 0.001);
    specparam tpdLH         = (0.01:0.01:0.01);
    specparam tpdHL         = (0.01:0.01:0.01);
    specparam MacroType     = "comb";

    //pin to pin path delay 
    (A => Y )     = ( tpdLH, tpdHL );
    (B => Y )     = ( tpdLH, tpdHL );
    (C => Y )     = ( tpdLH, tpdHL );
    (D => Y )     = ( tpdLH, tpdHL );
    (A => S )     = ( tpdLH, tpdHL );
    (B => S )     = ( tpdLH, tpdHL );
    (C => S )     = ( tpdLH, tpdHL );
    (D => S )     = ( tpdLH, tpdHL );
    (CC => S )    = ( tpdLH, tpdHL );
    (A => P )     = ( tpdLH, tpdHL );
    (B => P )     = ( tpdLH, tpdHL );
    (C => P )     = ( tpdLH, tpdHL );
    (D => P )     = ( tpdLH, tpdHL );
    (B => Y3 )    = ( tpdLH, tpdHL );
    (C => Y3 )    = ( tpdLH, tpdHL );
    (D => Y3 )    = ( tpdLH, tpdHL );
    (B => Y3A )   = ( tpdLH, tpdHL );
    (C => Y3A )   = ( tpdLH, tpdHL );
    (D => Y3A )   = ( tpdLH, tpdHL );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : FCINIT_BUFF
 CELL TYPE : comb
 CELL LOGIC : FCO = A
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module FCINIT_BUFF (output FCO,
                    input A);

  buf  U0 (FCO, A);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
    specparam tpdLH_A_to_FCO = (0.01:0.01:0.01);
		specparam tpdHL_A_to_FCO = (0.01:0.01:0.01);

    //pin to pin path delay 
    (A => FCO ) = ( tpdLH_A_to_FCO, tpdHL_A_to_FCO );
  endspecify   
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : FCEND_BUFF
 CELL TYPE : comb
 CELL LOGIC : CO = FCI
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module FCEND_BUFF (output CO,
                   input FCI);

  buf  U0 (CO, FCI);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
    specparam tpdLH_FCI_to_CO = (0.01:0.01:0.01);
		specparam tpdHL_FCI_to_CO = (0.01:0.01:0.01);

    //pin to pin path delay 
    (FCI => CO ) = ( tpdLH_FCI_to_CO, tpdHL_FCI_to_CO );
  endspecify   
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : FCINIT_BUFF_CC
 CELL TYPE : comb
 CELL LOGIC : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module FCINIT_BUFF_CC (output P,
                       output Y3,
                       output Y3A,
                       output FCO,
                       input A,
                       input CC);
  
  wire S, Y, FCI;
  
  ARI1_CC #('h1AAAA) U0 (.A(1'b0), .C(1'b0), .D(1'b0), .CC(1'b0), .B(A), .Y3(Y3), .Y3A(Y3A), .P(P), .S(S), .Y(Y), .FCI(FCI), .FCO(FCO));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
    specparam tpdLH_A_to_P  = (0.01:0.01:0.01);
		specparam tpdHL_A_to_P  = (0.01:0.01:0.01);
    specparam tpdLH_A_to_UB = (0.01:0.01:0.01);
		specparam tpdHL_A_to_UB = (0.01:0.01:0.01);

    //pin to pin path delay 
    (A => P ) = ( tpdLH_A_to_P, tpdHL_A_to_P );
    (A => Y3 ) = ( tpdLH_A_to_UB, tpdHL_A_to_UB );
    (A => Y3A ) = ( tpdLH_A_to_UB, tpdHL_A_to_UB );
  endspecify   
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : FCEND_BUFF_CC
 CELL TYPE : comb
 CELL LOGIC : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module FCEND_BUFF_CC (output CO,
                      output P,
                      output Y3,
                      output Y3A,
                      input FCI,
                      input CC);
  wire Y;
  
  ARI1_CC #('h00000) U0 (.A(1'b0), .B(1'b0), .C(1'b0), .D(1'b0), .CC(CC), .Y3(Y3), .Y3A(Y3A), .P(P), .S(CO), .Y(Y), .FCI(FCI), .FCO(FCO));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
    specparam tpdLH_CC_to_CO  = (0.01:0.01:0.01);
		specparam tpdHL_CC_to_CO  = (0.01:0.01:0.01);

    //pin to pin path delay 
    (CC => CO ) = ( tpdLH_CC_to_CO, tpdHL_CC_to_CO );
  endspecify   
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : CC_CONFIG
 CELL TYPE : comb
 CELL LOGIC : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 1 ps
module CC_CONFIG(CO, CC, CI, P, Y3, Y3A);

  output        CO;
  output [0:11] CC;
  input         CI;
  input [0:11]  P;
  input [0:11]  Y3;
  input [0:11]  Y3A;
  
  wire [0:11] UB;
  assign UB = Y3;
  
  not       (CI_, CI);
  UDP_MUX2  (CC1_, UB[0], CI_, P[0]);
  UDP_MUX2  (CC2_, UB[1], CC1_, P[1]);
  UDP_MUX2  (CC21, UB[1], UB[0], P[1]);
  UDP_MUX2  (CC22, UB[2], CC21, P[2]);
  not       (CC22_, CC22);
  and U6(P2, P[0], P[1], P[2]);
  UDP_MUX2 U7(CC[3], CC22_, CI, P2);
  
  not U8(CC3_, CC[3]);
  UDP_MUX2 U9(CC4_, UB[3], CC3_, P[3]);
  UDP_MUX2 U10(CC5_, UB[4], CC4_, P[4]);  
  UDP_MUX2 U11(CC51, UB[4], UB[3], P[4]);
  UDP_MUX2 U12(CC52, UB[5], CC51, P[5]);
  not U13(CC52_, CC52);
  and U14(P5, P[3], P[4], P[5]);
  UDP_MUX2 U15(CC[6], CC52_, CC[3], P5);
  
  not U16(UB6_, UB[6]);
  not U17(UB7_, UB[7]);
  not U18(UB8_, UB[8]);
  UDP_MUX2 U19(CC[7], UB6_, CC[6], P[6]);
  UDP_MUX2 U20(CC[8], UB7_, CC[7], P[7]);
  UDP_MUX2 U21(CC81, UB7_, UB6_, P[7]);
  UDP_MUX2 U22(CC82, UB8_, CC81, P[8]);
  not U23(CC82_, CC82);
  and U24(P8, P[6], P[7], P[8]);
  UDP_MUX2 U25(CC9_, CC82_, CC6_, P8);
  
  not U26(UB9_, UB[9]);
  not U27(UB10_, UB[10]);
  not U28(UB11_, UB[11]);
  UDP_MUX2 U29(CC[10], UB9_, CC[9], P[9]);
  UDP_MUX2 U30(CC[11], UB10_, CC[10], P[10]);
  UDP_MUX2 U31(CC111, UB10_, UB9_, P[10]);
  UDP_MUX2 U32(CC112, UB11_, CC111, P[11]);
  not U33(CC112_, CC112);
  and U34(P11, P[9], P[10], P[11]);
  UDP_MUX2 U35(CO_, CC112_, CC9_, P11);
  
  
  assign CC[0] = CI;
  not U36(CC[1], CC1_);
  not U37(CC[2], CC2_);
  not U38(CC[4], CC4_);
  not U39(CC[5], CC5_);
  not U40(CC6_, CC[6]);
  not U41(CC[9], CC9_);
  not U42(CO, CO_);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "comb";
    specparam tpdLH  = (0.01:0.01:0.01);
		specparam tpdHL  = (0.01:0.01:0.01);
    
    (CI => CC[0] ) = ( tpdLH, tpdHL );
    (CI => CC[1] ) = ( tpdLH, tpdHL );
    (CI => CC[2] ) = ( tpdLH, tpdHL );
    (CI => CC[3] ) = ( tpdLH, tpdHL );
    (CI => CC[4] ) = ( tpdLH, tpdHL );
    (CI => CC[5] ) = ( tpdLH, tpdHL );
    (CI => CC[6] ) = ( tpdLH, tpdHL );
    (CI => CC[7] ) = ( tpdLH, tpdHL );
    (CI => CC[8] ) = ( tpdLH, tpdHL );
    (CI => CC[9] ) = ( tpdLH, tpdHL );
    (CI => CC[10] ) = ( tpdLH, tpdHL );
    (CI => CC[11] ) = ( tpdLH, tpdHL );
    (CI => CO ) = ( tpdLH, tpdHL );
    (P[0] => CC[1] ) = ( tpdLH, tpdHL );
    (P[0] => CC[2] ) = ( tpdLH, tpdHL );
    (P[0] => CC[3] ) = ( tpdLH, tpdHL );
    (P[0] => CC[4] ) = ( tpdLH, tpdHL );
    (P[0] => CC[5] ) = ( tpdLH, tpdHL );
    (P[0] => CC[6] ) = ( tpdLH, tpdHL );
    (P[0] => CC[7] ) = ( tpdLH, tpdHL );
    (P[0] => CC[8] ) = ( tpdLH, tpdHL );
    (P[0] => CC[9] ) = ( tpdLH, tpdHL );
    (P[0] => CC[10] ) = ( tpdLH, tpdHL );
    (P[0] => CC[11] ) = ( tpdLH, tpdHL );
    (P[0] => CO ) = ( tpdLH, tpdHL );
    (P[1] => CC[2] ) = ( tpdLH, tpdHL );
    (P[1] => CC[3] ) = ( tpdLH, tpdHL );
    (P[1] => CC[4] ) = ( tpdLH, tpdHL );
    (P[1] => CC[5] ) = ( tpdLH, tpdHL );
    (P[1] => CC[6] ) = ( tpdLH, tpdHL );
    (P[1] => CC[7] ) = ( tpdLH, tpdHL );
    (P[1] => CC[8] ) = ( tpdLH, tpdHL );
    (P[1] => CC[9] ) = ( tpdLH, tpdHL );
    (P[1] => CC[10] ) = ( tpdLH, tpdHL );
    (P[1] => CC[11] ) = ( tpdLH, tpdHL );
    (P[1] => CO ) = ( tpdLH, tpdHL );    
    (P[2] => CC[3] ) = ( tpdLH, tpdHL );
    (P[2] => CC[4] ) = ( tpdLH, tpdHL );
    (P[2] => CC[5] ) = ( tpdLH, tpdHL );
    (P[2] => CC[6] ) = ( tpdLH, tpdHL );
    (P[2] => CC[7] ) = ( tpdLH, tpdHL );
    (P[2] => CC[8] ) = ( tpdLH, tpdHL );
    (P[2] => CC[9] ) = ( tpdLH, tpdHL );
    (P[2] => CC[10] ) = ( tpdLH, tpdHL );
    (P[2] => CC[11] ) = ( tpdLH, tpdHL );
    (P[2] => CO ) = ( tpdLH, tpdHL );    
    (P[3] => CC[4] ) = ( tpdLH, tpdHL );
    (P[3] => CC[5] ) = ( tpdLH, tpdHL );
    (P[3] => CC[6] ) = ( tpdLH, tpdHL );
    (P[3] => CC[7] ) = ( tpdLH, tpdHL );
    (P[3] => CC[8] ) = ( tpdLH, tpdHL );
    (P[3] => CC[9] ) = ( tpdLH, tpdHL );
    (P[3] => CC[10] ) = ( tpdLH, tpdHL );
    (P[3] => CC[11] ) = ( tpdLH, tpdHL );
    (P[3] => CO ) = ( tpdLH, tpdHL );    
    (P[4] => CC[5] ) = ( tpdLH, tpdHL );
    (P[4] => CC[6] ) = ( tpdLH, tpdHL );
    (P[4] => CC[7] ) = ( tpdLH, tpdHL );
    (P[4] => CC[8] ) = ( tpdLH, tpdHL );
    (P[4] => CC[9] ) = ( tpdLH, tpdHL );
    (P[4] => CC[10] ) = ( tpdLH, tpdHL );
    (P[4] => CC[11] ) = ( tpdLH, tpdHL );
    (P[4] => CO ) = ( tpdLH, tpdHL );    
    (P[5] => CC[6] ) = ( tpdLH, tpdHL );
    (P[5] => CC[7] ) = ( tpdLH, tpdHL );
    (P[5] => CC[8] ) = ( tpdLH, tpdHL );
    (P[5] => CC[9] ) = ( tpdLH, tpdHL );
    (P[5] => CC[10] ) = ( tpdLH, tpdHL );
    (P[5] => CC[11] ) = ( tpdLH, tpdHL );
    (P[5] => CO ) = ( tpdLH, tpdHL );    
    (P[6] => CC[7] ) = ( tpdLH, tpdHL );
    (P[6] => CC[8] ) = ( tpdLH, tpdHL );
    (P[6] => CC[9] ) = ( tpdLH, tpdHL );
    (P[6] => CC[10] ) = ( tpdLH, tpdHL );
    (P[6] => CC[11] ) = ( tpdLH, tpdHL );
    (P[6] => CO ) = ( tpdLH, tpdHL );    
    (P[7] => CC[8] ) = ( tpdLH, tpdHL );
    (P[7] => CC[9] ) = ( tpdLH, tpdHL );
    (P[7] => CC[10] ) = ( tpdLH, tpdHL );
    (P[7] => CC[11] ) = ( tpdLH, tpdHL );
    (P[7] => CO ) = ( tpdLH, tpdHL );    
    (P[8] => CC[9] ) = ( tpdLH, tpdHL );
    (P[8] => CC[10] ) = ( tpdLH, tpdHL );
    (P[8] => CC[11] ) = ( tpdLH, tpdHL );
    (P[8] => CO ) = ( tpdLH, tpdHL );    
    (P[9] => CC[10] ) = ( tpdLH, tpdHL );
    (P[9] => CC[11] ) = ( tpdLH, tpdHL );
    (P[9] => CO ) = ( tpdLH, tpdHL );
    (P[10] => CC[11] ) = ( tpdLH, tpdHL );
    (P[10] => CO ) = ( tpdLH, tpdHL );
    (P[11] => CO ) = ( tpdLH, tpdHL );
    
    (Y3[0] => CC[1] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[2] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[0] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[0] => CO ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[2] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[1] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[1] => CO ) = ( tpdLH, tpdHL );    
    (Y3[2] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[2] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[2] => CO ) = ( tpdLH, tpdHL );    
    (Y3[3] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[3] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[3] => CO ) = ( tpdLH, tpdHL );    
    (Y3[4] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[4] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[4] => CO ) = ( tpdLH, tpdHL );    
    (Y3[5] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3[5] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[5] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[5] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[5] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[5] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[5] => CO ) = ( tpdLH, tpdHL );    
    (Y3[6] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3[6] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[6] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[6] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[6] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[6] => CO ) = ( tpdLH, tpdHL );    
    (Y3[7] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3[7] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[7] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[7] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[7] => CO ) = ( tpdLH, tpdHL );    
    (Y3[8] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3[8] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[8] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[8] => CO ) = ( tpdLH, tpdHL );    
    (Y3[9] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3[9] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[9] => CO ) = ( tpdLH, tpdHL );
    (Y3[10] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3[10] => CO ) = ( tpdLH, tpdHL );
    (Y3[11] => CO ) = ( tpdLH, tpdHL );
    
    (Y3A[0] => CC[1] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[2] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[0] => CO ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[2] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[1] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[2] => CC[3] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[2] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[3] => CC[4] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[3] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[4] => CC[5] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[4] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[5] => CC[6] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[5] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[6] => CC[7] ) = ( tpdLH, tpdHL );
    (Y3A[6] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[6] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[6] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[6] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[6] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[7] => CC[8] ) = ( tpdLH, tpdHL );
    (Y3A[7] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[7] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[7] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[7] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[8] => CC[9] ) = ( tpdLH, tpdHL );
    (Y3A[8] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[8] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[8] => CO ) = ( tpdLH, tpdHL );    
    (Y3A[9] => CC[10] ) = ( tpdLH, tpdHL );
    (Y3A[9] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[9] => CO ) = ( tpdLH, tpdHL );
    (Y3A[10] => CC[11] ) = ( tpdLH, tpdHL );
    (Y3A[10] => CO ) = ( tpdLH, tpdHL );
    (Y3A[11] => CO ) = ( tpdLH, tpdHL );
  endspecify

endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults




/*==============  Sequential Elements ==============*/

/*--------------------------------------------------------------------
NAME : SLE
TYPE : FF/Latch
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module SLE (output Q,
            input ADn,
            input ALn,
            input CLK,
            input D,
            input LAT,
            input SD,
            input EN,
            input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);

`ifdef rtg4
  SLE_RT_Prim DF_0 (.Q(Q), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .DELEN(1'b0),
                 .SD(SD), .EN(EN), .SLn(SLn));
`else
  SLE_Prim DF_0 (.Q(Q), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
`endif
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )  
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (D => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1E1C0 (output Q, input  D, input  CLK, input  E, input  CLR);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
  SLE_RT DFF_0(.Q(Q), .ADn(VCC_0), .ALn(CLR), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`else
	SLE DFF_0(.Q(Q), .ADn(VCC_0), .ALn(CLR), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1P0 (output Q, input  D, input  CLK, input  PRE);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
  SLE_RT DFF_0(.Q(Q), .ADn(GND_0), .ALn(PRE), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`else
	SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(PRE), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1E1 (output Q, input  D, input  CLK, input  E);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
	SLE_RT DFF_0(.Q(Q), .ADn(VCC_0), .ALn(VCC_0), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`else
  SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(VCC_0), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1E1P0 (output Q, input  D, input  CLK, input  E, input  PRE);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
	SLE_RT DFF_0(.Q(Q), .ADn(GND_0), .ALn(PRE), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`else
	SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(PRE), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(E), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1 (output Q, input  D, input  CLK);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
	SLE_RT DFF_0(.Q(Q), .ADn(VCC_0), .ALn(VCC_0), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`else
	SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(VCC_0), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DFN1C0 (output Q, input  D, input  CLK, input  CLR);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;
`ifdef rtg4
	SLE_RT DFF_0(.Q(Q), .ADn(VCC_0), .ALn(CLR), .CLK(CLK), 
          .D(D), .DELEN(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`else
	SLE DFF_0(.Q(Q), .ADn(VCC_0), .ALn(CLR), .CLK(CLK), 
          .D(D), .LAT(GND_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
`endif
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults


`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module SLE_INIT (output Q,
                input ADn,
                input ALn,
                input CLK,
                input D,
                input LAT,
                input SD,
                input EN,
                input SLn);
  
  reg NOTIFY_REG;
  reg Q_initial;
  wire Q_wire;
  parameter SLE_INITIAL_VALUE = 2;

  initial begin
    Q_initial = (SLE_INITIAL_VALUE == 1) ? 1'b1 : ((SLE_INITIAL_VALUE == 0) ? 1'b0 : ((SLE_INITIAL_VALUE == 2) ? ({$random} % 2) : 1'bx));
  end
  
  always @(Q_wire) Q_initial = Q_wire;
  
  pmos pmos_0     ( Q, Q_initial, 0 );
  pmos pmos_1     ( Q, Q_wire, (Q_wire===1'bx) ? 1'b1 : 1'b0 );
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim DF_0 (.Q(Q_wire), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )  
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (D => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : SLE_DEBUG
TYPE : FF/Latch
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module SLE_DEBUG (output Q,
            input ADn,
            input ALn,
            input CLK,
            input D,
            input LAT,
            input SD,
            input EN,
            input SLn);
  
  reg NOTIFY_REG;
  parameter       NAME      = "";
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim DF_0 (.Q(Q), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )  
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (D => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults
`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DLN1 (output Q, input  D, input  G);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;

	SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(VCC_0), .CLK(G), 
          .D(D), .LAT(VCC_0), .SD(GND_0), .EN(VCC_0), .SLn(VCC_0)); 
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DLN1C0 (output Q, input  D, input  G, input  CLR);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;

	SLE DFF_0(.Q(Q), .ADn(VCC_0), .ALn(CLR), .CLK(G), 
          .D(D), .LAT(VCC_0), .SD(GND_0), .EN(CLR), .SLn(VCC_0)); 
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults

`suppress_faults 
`enable_portfaults 
`celldefine 
`delay_mode_path 
`timescale 1 ns / 10 ps
module DLN1P0 (output Q, input  D, input  G, input  PRE);
	reg NOTIFY_REG;
	supply1 VCC_0;
	supply0 GND_0;

	SLE DFF_0(.Q(Q), .ADn(GND_0), .ALn(PRE), .CLK(G), 
          .D(D), .LAT(VCC_0), .SD(GND_0), .EN(PRE), .SLn(VCC_0)); 
endmodule 
`endcelldefine 
`disable_portfaults 
`nosuppress_faults



/*--------------------------------------------------------------------
NAME : CFG4_IP_ABCD
TYPE : shadowcomb
LOGIC: IPB = B
---------------------------------------------------------------------*/
`delay_mode_path
`timescale 1 ps / 1 ps
module CFG4_IP_ABCD(input   A, 
                    input   B, 
                    input   C, 
                    input   D, 
                    output  Y, 
                    output  IPB, 
                    output  IPC, 
                    output  IPD );
  not   (IPB, B);
  not   (IPC, C);
  not   (IPD, D);
  
  parameter [15:0] INIT = 16'h0;
  parameter LUT_FUNCTION = "";
  
  UDP_MUX2 mux_0(M0, INIT[0], INIT[8], D);
  UDP_MUX2 mux_1(M1, INIT[1], INIT[9], D);
  UDP_MUX2 mux_2(M2, INIT[2], INIT[10], D);
  UDP_MUX2 mux_3(M3, INIT[3], INIT[11], D);
  UDP_MUX2 mux_4(M4, INIT[4], INIT[12], D);
  UDP_MUX2 mux_5(M5, INIT[5], INIT[13], D);
  UDP_MUX2 mux_6(M6, INIT[6], INIT[14], D);
  UDP_MUX2 mux_7(M7, INIT[7], INIT[15], D);
  
  UDP_MUX2 mux_8(M8, M0, M4, C);
  UDP_MUX2 mux_9(M9, M1, M5, C);
  UDP_MUX2 mux_10(M10, M2, M6, C);
  UDP_MUX2 mux_11(M11, M3, M7, C);
  
  UDP_MUX2 mux_12(M12, M8, M10, B);
  UDP_MUX2 mux_13(M13, M9, M11, B);
  
  UDP_MUX2 mux_14(Y , M12, M13, A);
  
  specify
    specparam PATHPULSE$     = (1, 1);
    specparam tpdLH = (10:10:10);
    specparam tpdHL = (10:10:10);
    specparam MacroType = "shadowcomb";

    //pin to pin path delay
    (A => Y )   = ( tpdLH, tpdHL );
    (B => Y )   = ( tpdLH, tpdHL );
    (C => Y )   = ( tpdLH, tpdHL );
    (D => Y )   = ( tpdLH, tpdHL );
    (B => IPB ) = ( tpdLH, tpdHL );
    (C => IPC ) = ( tpdLH, tpdHL );
    (D => IPD ) = ( tpdLH, tpdHL );
  endspecify
  
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : SLE_IP_EN
TYPE : shadowcomb
LOGIC: IPCLKn =~ CLK
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 1 ps
module SLE_IP_EN (output IPEN,
                  input EN);

  buf U0(IPEN, EN);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_EN_to_IPENn = (0.01:0.01:0.01);
    specparam tpdHL_EN_to_IPENn = (0.01:0.01:0.01);
    specparam MacroType = "shadowseq";

    //pin to pin path delay
    (EN => IPEN ) = ( tpdLH_EN_to_IPENn, tpdHL_EN_to_IPENn );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

 /*--------------------------------------------------------------------
NAME : IP_INTERFACE
TYPE : ip_interface
LOGIC: IPA = A; IPB = B; IPC = C
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IP_INTERFACE (output IPA,
                     output IPB,
                     output IPC,
                     input A,
                     input B,
                     input C);

  buf U0(IPA, A);
  buf U1(IPB, B);
  buf U2(IPC, C);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_A_to_IPA = (0.01:0.01:0.01);
    specparam tpdHL_A_to_IPA = (0.01:0.01:0.01);
    specparam tpdLH_B_to_IPB = (0.01:0.01:0.01);
    specparam tpdHL_B_to_IPB = (0.01:0.01:0.01);
    specparam tpdLH_C_to_IPC = (0.01:0.01:0.01);
    specparam tpdHL_C_to_IPC = (0.01:0.01:0.01);
    specparam MacroType = "ip_interface";

    //pin to pin path delay
    (A => IPA ) = ( tpdLH_A_to_IPA, tpdHL_A_to_IPA );
    (B => IPB ) = ( tpdLH_B_to_IPB, tpdHL_B_to_IPB );
    (C => IPC ) = ( tpdLH_C_to_IPC, tpdHL_C_to_IPC );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : IOPAD_IN
 CELL TYPE : comb
 CELL LOGIC : Y=PAD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_IN(Y,
`ifdef rtg4
                Y_HW,
`endif
                PAD);
  input PAD;
  output Y;
`ifdef rtg4
  output Y_HW;
`endif

  reg   NOTIFY_REG;
  buf BUF_U_00(Y,PAD);
`ifdef rtg4
  buf BUF_U_01(Y_HW,PAD);
`endif

  specify
		specparam tpdLH_PAD_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y = (0.01:0.01:0.01);
		specparam PATHPULSE$     = (0.01, 0.01);
    specparam MacroType = "io";
		
    //pin to pin path delay 
		(PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
`ifdef rtg4
    (PAD => Y_HW ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
`endif
    
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
   endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : IOPAD_TRI
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_TRI(PAD,D,E);
  input D,E;
  output PAD;

  reg NOTIFY_REG;
  bufif1   U1210(PAD, D, E);

  specify
		specparam tpdLH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
		specparam MacroType = "io";

		//pin to pin path delay 
		(E => PAD ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD);
    (D => PAD ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : IOPAD_BI
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E ; Y=PAD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_BI(Y,
`ifdef rtg4
                Y_HW,
`endif
                D,
                E,
                PAD);
  input D,E;
  output Y;
`ifdef rtg4
  output Y_HW;
`endif
  inout PAD;

  reg NOTIFY_REG;
  bufif1   U1213(PAD, D, E);
  buf	BUF_U_01(Y,PAD);
`ifdef rtg4
  buf BUF_U_02(Y_HW,PAD);
`endif

  specify
    specparam MacroType = "iopad";
    specparam tpdLH_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_PAD_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
    
    //pin to pin path delay 
    (E => PAD ) = ( tpdLH_E_to_PAD, tpdHL_E_to_PAD, tpdLZ_E_to_PAD, tpdZH_E_to_PAD, tpdHZ_E_to_PAD, tpdZL_E_to_PAD );
    (D => PAD ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    (D => Y )   = ( tpdLH_D_to_Y, tpdHL_D_to_Y );
    (E => Y )   = ( tpdLH_E_to_Y, tpdHL_E_to_Y );
    (PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
`ifdef rtg4
    (D => Y_HW )   = ( tpdLH_D_to_Y, tpdHL_D_to_Y );
    (E => Y_HW )   = ( tpdLH_E_to_Y, tpdHL_E_to_Y );
    (PAD => Y_HW ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
`endif
    
    //Controls Pulse Width
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_DELAY
TYPE : iopad
EQN  : IOUT_P = IOUT_IN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_DELAY (input IOUT_IN,
`ifdef rtg4
                    output IOUT_HW_P,
                    input  GB_IN,
`endif
                    output IOUT_P);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, IOUT_IN);
  buf	U1(IOUT_P,IOUT_IN);
`ifdef rtg4
  buf	U2(IOUT_HW_P,GB_IN);
`endif

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$            = (0.01, 0.01);
    specparam tpdLH_IOUTIN_to_IOUTP = (0.01:0.01:0.01);
    specparam tpdHL_IOUTIN_to_IOUTP = (0.01:0.01:0.01);

    //pin to pin path delay 
    (IOUT_IN => IOUT_P) = ( tpdLH_IOUTIN_to_IOUTP, tpdHL_IOUTIN_to_IOUTP );
`ifdef rtg4
    (GB_IN => IOUT_HW_P) = ( tpdLH_IOUTIN_to_IOUTP, tpdHL_IOUTIN_to_IOUTP );
`endif
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_VDD
TYPE : iopad
EQN  : IOUT_IN = IOUT_VDD
          : OIN_VDD = OIN_P @ ( EIN_P == 1'b1 )
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_VDD(input OIN_P,
                  input EIN_P,
                  input IOUT_VDD,
                  output OIN_VDD,
`ifdef rtg4
                  output GB_IN,
`endif
                  output EIN_VDD,
                  output IOUT_IN);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, IOUT_IN);
  buf	U1(IOUT_IN, IOUT_VDD);
  bufif1 U2(OIN_VDD, OIN_P, 1'b1);
  buf	U3(EIN_VDD, EIN_P);
`ifdef rtg4
  buf	U4(GB_IN, IOUT_VDD);
`endif
  
  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$              = (0.01, 0.01);
    specparam tpdLH_IOUTVDD_to_IOUTIN = (0.01:0.01:0.01);
    specparam tpdHL_IOUTVDD_to_IOUTIN = (0.01:0.01:0.01);
    specparam tpdLH_EINP_to_EINVDD    = (0.01:0.01:0.01);
    specparam tpdHL_EINP_to_EINVDD    = (0.01:0.01:0.01);
    specparam tpdLH_EINP_to_OINVDD    = (0.0:0.0:0.0);
		specparam tpdHL_EINP_to_OINVDD    = (0.0:0.0:0.0);
		specparam tpdLZ_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdZL_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdHZ_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdZH_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdLH_OINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdHL_OINP_to_OINVDD    = (0.01:0.01:0.01);

    //pin to pin path delay 
    (IOUT_VDD => IOUT_IN) = ( tpdLH_IOUTVDD_to_IOUTIN, tpdHL_IOUTVDD_to_IOUTIN );
    //(EIN_P => OIN_VDD )   = ( tpdLH_EINP_to_OINVDD,tpdHL_EINP_to_OINVDD,tpdLZ_EINP_to_OINVDD,tpdZH_EINP_to_OINVDD,tpdHZ_EINP_to_OINVDD,tpdZL_EINP_to_OINVDD);
    (OIN_P => OIN_VDD )   = ( tpdLH_OINP_to_OINVDD,tpdHL_OINP_to_OINVDD);
`ifdef rtg4
    (IOUT_VDD => GB_IN)   = ( tpdLH_IOUTVDD_to_IOUTIN, tpdHL_IOUTVDD_to_IOUTIN );
`endif    
    (EIN_P => EIN_VDD )   = ( tpdLH_EINP_to_EINVDD,tpdHL_EINP_to_EINVDD);
    
    $width(negedge OIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge OIN_P, 0.0, 0, NOTIFY_REG);
    $width(negedge EIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge EIN_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_IN_VDDI
TYPE : iopad
EQN  : IOUT_VDD = PAD_P
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_IN_VDDI (input PAD_P,
                      output IOUT_VDD);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, PAD_P);
  buf	U1(IOUT_VDD,PAD_P);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$            = (0.01, 0.01);
    specparam tpdLH_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdHL_PADP_to_IOUTVDD = (0.01:0.01:0.01);

    //pin to pin path delay 
    (PAD_P => IOUT_VDD) = ( tpdLH_PADP_to_IOUTVDD, tpdHL_PADP_to_IOUTVDD );
    
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_TRI_VDDI
TYPE : iopad
EQN  : PAD_P = OIN_VDD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_TRI_VDDI(input OIN_VDD,
                      input EIN_VDD,
                      output PAD_P);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, PAD_P);
  bufif1	 U1(PAD_P,OIN_VDD, EIN_VDD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$           = (0.01, 0.01);
    specparam tpdLH_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdLZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZH_EINVDD_to_PADP = (0.01:0.01:0.01);

    //pin to pin path delay 
    (OIN_VDD => PAD_P) = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    (EIN_VDD => PAD_P) = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
    
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_BI_VDDI
TYPE : iopad
EQN  : PAD_P = OIN_VDD
          : IOUT_VDD = PAD_P
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_BI_VDDI (input OIN_VDD,
                      input EIN_VDD,
                      inout PAD_P,
                      output IOUT_VDD);
  reg NOTIFY_REG;
  
  UDP_BUFF ux(Y_int, OIN_VDD);
  buf	U1(IOUT_VDD,PAD_P);
  bufif1 U2(PAD_P,OIN_VDD,EIN_VDD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$            = (0.01, 0.01);
    specparam tpdLH_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdHL_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdLH_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdLZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZH_EINVDD_to_PADP = (0.01:0.01:0.01);

    //pin to pin path delay 
    (PAD_P => IOUT_VDD) = ( tpdLH_PADP_to_IOUTVDD, tpdHL_PADP_to_IOUTVDD );
    (OIN_VDD => PAD_P)  = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    (EIN_VDD => PAD_P)  = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
    (EIN_VDD => IOUT_VDD)  = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
    (OIN_VDD => IOUT_VDD)  = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IO_TEST
TYPE : io
EQN  : Y = D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IO_TEST(input D,
               input E,
               output Y);
  reg NOTIFY_REG;

  buf U0(Y, D);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
    specparam tpdLH_D_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_D_to_Y = (0.01:0.01:0.01);
                
		//pin to pin path delay 
		(D => Y ) = ( tpdLH_D_to_Y, tpdHL_D_to_Y );
   endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOIN_IB
TYPE : io
EQN  : Y = YIN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOIN_IB(input YIN,
               input E,
               output Y);
  reg NOTIFY_REG;
  buf	U0(Y,YIN);
`ifdef polarfire
  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;
`endif
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "io";
    specparam tpdLH_YIN_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_YIN_to_Y = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(YIN => Y ) = ( tpdLH_YIN_to_Y, tpdHL_YIN_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IO_UNUSED
TYPE : io
EQN  : Y = YIN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IO_UNUSED(input YIN,
                 output Y);
  reg NOTIFY_REG;
  buf	U0(Y,YIN);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "io";
    specparam tpdLH_YIN_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_YIN_to_Y = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(YIN => Y ) = ( tpdLH_YIN_to_Y, tpdHL_YIN_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOTRI_OB_EB
TYPE : io
EQN  : DOUT = D; EOUT = E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOTRI_OB_EB(input D,
                   input E,
                   output DOUT,
                   output EOUT);
  reg NOTIFY_REG;
  
  buf	U0(DOUT,D);
  buf	U1(EOUT,E);
`ifdef polarfire
  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;
`endif
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "io";
    specparam tpdLH_D_to_DOUT = (0.01:0.01:0.01);
		specparam tpdHL_D_to_DOUT = (0.01:0.01:0.01);
		specparam tpdLH_E_to_EOUT = (0.01:0.01:0.01);
		specparam tpdHL_E_to_EOUT = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(D => DOUT ) = ( tpdLH_D_to_DOUT, tpdHL_D_to_DOUT );
		(E => EOUT ) = ( tpdLH_E_to_EOUT, tpdHL_E_to_EOUT );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOBI_IB_OB_EB
TYPE : io
EQN  : DOUT = D; EOUT = E; Y = YIN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOBI_IB_OB_EB(input D,
                     input E,
                     input YIN,
                     output DOUT,
                     output EOUT,
                     output Y);
  reg NOTIFY_REG;
`ifdef polarfire
  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;
`endif

  buf	U0(DOUT,D);
  buf	U1(EOUT,E);
  buf	U2(Y,YIN);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
    specparam tpdLH_D_to_DOUT = (0.01:0.01:0.01);
		specparam tpdHL_D_to_DOUT = (0.01:0.01:0.01);
		specparam tpdLH_E_to_EOUT = (0.01:0.01:0.01);
		specparam tpdHL_E_to_EOUT = (0.01:0.01:0.01);
		specparam tpdLH_YIN_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_YIN_to_Y  = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(D => DOUT ) = ( tpdLH_D_to_DOUT, tpdHL_D_to_DOUT );
		(E => EOUT ) = ( tpdLH_E_to_EOUT, tpdHL_E_to_EOUT );
		(YIN => Y )  = ( tpdLH_YIN_to_Y, tpdHL_YIN_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : LIVE_FB_PROBES
TYPE : io
EQN  : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module LIVE_FB_PROBES(output PRBA,
                      output PRBB);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : LIVE_PROBE_FB
TYPE : io
EQN  : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module LIVE_PROBE_FB(output PROBE_A,
                      output PROBE_B);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : PRB_IB
TYPE : io
EQN  : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module PRB_IB(output Y);

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOINFF_BYPASS
TYPE : io
EQN  : Y = A
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOINFF_BYPASS (input A,
                      output Y);
  reg NOTIFY_REG;
  buf	U0(Y,A);

  specify
    specparam MacroType = "io";
    specparam tpdLH_A_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_A_to_Y = (0.01:0.01:0.01);
		specparam PATHPULSE$   = (0.01, 0.01);
    
		//pin to pin path delay 
		(A => Y ) = ( tpdLH_A_to_Y, tpdHL_A_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOOUTFF_BYPASS
TYPE : io
EQN  : Y = A
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOOUTFF_BYPASS (input A,
                      output Y);
  reg NOTIFY_REG;
  buf	U0(Y,A);

  specify
    specparam MacroType = "io";
    specparam tpdLH_A_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_A_to_Y = (0.01:0.01:0.01);
		specparam PATHPULSE$   = (0.01, 0.01);
    
		//pin to pin path delay 
		(A => Y ) = ( tpdLH_A_to_Y, tpdHL_A_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOENFF_BYPASS
TYPE : io
EQN  : Y = A
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOENFF_BYPASS (input A,
                      output Y);
  reg NOTIFY_REG;
  buf	U0(Y,A);

  specify
    specparam MacroType = "io";
    specparam tpdLH_A_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_A_to_Y = (0.01:0.01:0.01);
    specparam PATHPULSE$   = (0.01, 0.01);
		
		//pin to pin path delay 
		(A => Y ) = ( tpdLH_A_to_Y, tpdHL_A_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_VCCA
TYPE : iopad
EQN  : IOUT_IN = IOUT_VDD
          : OIN_VDD = OIN_P @ ( EIN_P == 1'b1 )
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_VCCA(input OIN_P,
                  input EIN_P,
                  input IOUT_VDD,
                  output OIN_VDD,
                  output EIN_VDD,
                  output IOUT_IN);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, IOUT_IN);
  buf	U1(IOUT_IN, IOUT_VDD);
  bufif1 U2(OIN_VDD, OIN_P, EIN_P);
  buf	U3(EIN_VDD, EIN_P);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$              = (0.01, 0.01);
    specparam tpdLH_IOUTVDD_to_IOUTIN = (0.01:0.01:0.01);
    specparam tpdHL_IOUTVDD_to_IOUTIN = (0.01:0.01:0.01);
    specparam tpdLH_EINP_to_EINVDD    = (0.01:0.01:0.01);
    specparam tpdHL_EINP_to_EINVDD    = (0.01:0.01:0.01);
    specparam tpdLH_EINP_to_OINVDD    = (0.0:0.0:0.0);
		specparam tpdHL_EINP_to_OINVDD    = (0.0:0.0:0.0);
		specparam tpdLZ_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdZL_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdHZ_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdZH_EINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdLH_OINP_to_OINVDD    = (0.01:0.01:0.01);
		specparam tpdHL_OINP_to_OINVDD    = (0.01:0.01:0.01);

    //pin to pin path delay 
    (IOUT_VDD => IOUT_IN) = ( tpdLH_IOUTVDD_to_IOUTIN, tpdHL_IOUTVDD_to_IOUTIN );
    (EIN_P => OIN_VDD )   = ( tpdLH_EINP_to_OINVDD,tpdHL_EINP_to_OINVDD,tpdLZ_EINP_to_OINVDD,tpdZH_EINP_to_OINVDD,tpdHZ_EINP_to_OINVDD,tpdZL_EINP_to_OINVDD);
    (OIN_P => OIN_VDD )   = ( tpdLH_OINP_to_OINVDD,tpdHL_OINP_to_OINVDD);
    (EIN_P => EIN_VDD )   = ( tpdLH_EINP_to_EINVDD,tpdHL_EINP_to_EINVDD);
    
    $width(negedge OIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge OIN_P, 0.0, 0, NOTIFY_REG);
    $width(negedge EIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge EIN_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_IN_VCCI
TYPE : iopad
EQN  : IOUT_VDD = PAD_P
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_IN_VCCI (input PAD_P,
                      output IOUT_VDD);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, PAD_P);
  buf	U1(IOUT_VDD,PAD_P);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$            = (0.01, 0.01);
    specparam tpdLH_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdHL_PADP_to_IOUTVDD = (0.01:0.01:0.01);

    //pin to pin path delay 
    (PAD_P => IOUT_VDD) = ( tpdLH_PADP_to_IOUTVDD, tpdHL_PADP_to_IOUTVDD );
    
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_TRI_VCCI
TYPE : iopad
EQN  : PAD_P = OIN_VDD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_TRI_VCCI(input OIN_VDD,
                      input EIN_VDD,
                      output PAD_P);
  reg NOTIFY_REG;
  
  UDP_BUFF u0(Y_int, PAD_P);
  bufif1	 U1(PAD_P,OIN_VDD, EIN_VDD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$           = (0.01, 0.01);
    specparam tpdLH_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdLZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZH_EINVDD_to_PADP = (0.01:0.01:0.01);

    //pin to pin path delay 
    (OIN_VDD => PAD_P) = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    (EIN_VDD => PAD_P) = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPAD_BI_VCCI
TYPE : iopad
EQN  : PAD_P = OIN_VDD
          : IOUT_VDD = PAD_P
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_BI_VCCI (input OIN_VDD,
                      input EIN_VDD,
                      inout PAD_P,
                      output IOUT_VDD);
  reg NOTIFY_REG;
  
  UDP_BUFF ux(Y_int, OIN_VDD);
  buf	U1(IOUT_VDD,PAD_P);
  bufif1 U2(PAD_P,OIN_VDD,EIN_VDD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$            = (0.01, 0.01);
    specparam tpdLH_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdHL_PADP_to_IOUTVDD = (0.01:0.01:0.01);
    specparam tpdLH_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_OINVDD_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdLZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZL_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdHZ_EINVDD_to_PADP = (0.01:0.01:0.01);
		specparam tpdZH_EINVDD_to_PADP = (0.01:0.01:0.01);

    //pin to pin path delay 
    (PAD_P => IOUT_VDD) = ( tpdLH_PADP_to_IOUTVDD, tpdHL_PADP_to_IOUTVDD );
    (OIN_VDD => PAD_P)  = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    (EIN_VDD => PAD_P)  = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
    (EIN_VDD => IOUT_VDD)  = ( tpdLH_EINVDD_to_PADP,tpdHL_EINVDD_to_PADP,tpdLZ_EINVDD_to_PADP,tpdZH_EINVDD_to_PADP,tpdHZ_EINVDD_to_PADP,tpdZL_EINVDD_to_PADP);
    (OIN_VDD => IOUT_VDD)  = ( tpdLH_OINVDD_to_PADP, tpdHL_OINVDD_to_PADP );
    
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOINFF
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOINFF (output Q,
               input ADn,
               input ALn,
               input CLK,
               input D,
               input LAT,
               input SD,
               input EN,
               input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim DF_0 (.Q(Q), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType         = "ioff";
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )  
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: D))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && SLn )                                    // SAR 93188
      (EN => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (D => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
    
    // SAR 93188
    $setup(posedge EN, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge EN, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge EN, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOINFF_TEST
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOINFF_TEST (output QR,
                    output QF,
                    input ADn,
                    input ALn,
                    input CLK,
                    input D,
                    input LAT,
                    input SD,
                    input EN,
                    input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim latch (.Q(DF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(1'b1),
                 .SD(1'b1), .EN(ALn), .SLn(1'b1));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType          = "ioff";
    specparam   tSetup           = (0.0);
    specparam   tHold            = (0.0);
    specparam   tWidth           = (0.0);
    specparam   tpdLH_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QF   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QF   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QR +: D))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);   // CLK2QR
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QR +: SD))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);  // CLK2QR
    if ( !LAT )
      (negedge ALn => (QR +: ADn))  = (tpdLH_AL_to_QR, tpdHL_AL_to_QR);    // ALB2QR
      
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QF +: D))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);   // CLK2QF
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QF +: SD))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);  // CLK2QF
    if ( !LAT )
      (negedge ALn => (QF +: ADn))  = (tpdLH_AL_to_QF, tpdHL_AL_to_QF);    // ALB2QF
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2QR
      (posedge CLK => (QR +: D))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2QR
      (posedge CLK => (QR +: SD))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (QR +: D))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (QR +: SD))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2QR Transperant Mode
      (D => QR)  = (tpdLH_D_to_QR, tpdHL_D_to_QR);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2QR
      (posedge SLn => (QR +: D))   = (tpdLH_SL_to_QR, tpdHL_SL_to_QR);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2QR
      (posedge ALn => (QR +: D))  = (tpdLH_AL_to_QR, tpdHL_AL_to_QR);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2QR
      (posedge ALn => (QR +: SD))  = (tpdLH_AL_to_QR, tpdHL_AL_to_QR);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2QR
      (negedge SLn => (QR +: SD))  = (tpdLH_SLn_to_QR, tpdHL_SLn_to_QR);  
    if ( LAT && !EN )                                                // Activating ALn ALn2QR
      (negedge ALn => (QR +: ADn)) = (tpdLH_ALn_to_QR, tpdHL_ALn_to_QR);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge D, tHold, NOTIFY_REG);
    
    // Data setup and hold timing checks for the f_reg latch
    $setup(posedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : DDR_IN
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module DDR_IN  (output QR,
                output QF,
                input ADn,
                input ALn,
                input CLK,
                input D,
                input SD,
                input EN,
                input SLn);
  
  reg NOTIFY_REG;
  wire LAT;
  
  assign LAT = 1'b0;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim latch (.Q(DF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(1'b1),
                 .SD(1'b1), .EN(ALn), .SLn(1'b1));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType          = "ioff";
    specparam   tSetup           = (0.0);
    specparam   tHold            = (0.0);
    specparam   tWidth           = (0.0);
    specparam   tpdLH_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QF   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QF   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QR +: D))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);   // CLK2QR
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QR +: SD))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);  // CLK2QR
    if ( !LAT )
      (negedge ALn => (QR +: ADn))  = (tpdLH_AL_to_QR, tpdHL_AL_to_QR);    // ALB2QR
      
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QF +: D))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);   // CLK2QF
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QF +: SD))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);  // CLK2QF
    if ( !LAT )
      (negedge ALn => (QF +: ADn))  = (tpdLH_AL_to_QF, tpdHL_AL_to_QF);    // ALB2QF
    
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Data setup and hold timing checks for the f_reg latch
    $setup(posedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : DDR_IN_UNIT
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module DDR_IN_UNIT (output QR,
                    output QF,
                    input ADn,
                    input ALn,
                    input CLK,
                    input D,
                    input SD,
                    input EN,
                    input SLn,
                    input LAT);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim latch (.Q(DF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(D), .LAT(1'b1),
                 .SD(1'b1), .EN(ALn), .SLn(1'b1));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType          = "ioff";
    specparam   tSetup           = (0.0);
    specparam   tHold            = (0.0);
    specparam   tWidth           = (0.0);
    specparam   tpdLH_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QF  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_QR    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_QR  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QR   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QF   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QF   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QR +: D))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);   // CLK2QR
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QR +: SD))  = (tpdLH_CLK_to_QR, tpdHL_CLK_to_QR);  // CLK2QR
    if ( !LAT )
      (negedge ALn => (QR +: ADn))  = (tpdLH_AL_to_QR, tpdHL_AL_to_QR);    // ALB2QR
      
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QF +: D))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);   // CLK2QF
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (QF +: SD))  = (tpdLH_CLK_to_QF, tpdHL_CLK_to_QF);  // CLK2QF
    if ( !LAT )
      (negedge ALn => (QF +: ADn))  = (tpdLH_AL_to_QF, tpdHL_AL_to_QF);    // ALB2QF
    
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge D, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge D, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge D, tHold, NOTIFY_REG);
    
    // Data setup and hold timing checks for the f_reg latch
    $setup(posedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge D, negedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, posedge D, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable2, negedge D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOOEFF_TEST
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOOEFF_TEST (output Q,
                    output QRDn,
                    input ADn,
                    input ALn,
                    input CLK,
                    input DR,
                    input DF,
                    input SDR,
                    input LAT,
                    input SD,
                    input EN,
                    input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DR), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF), .LAT(1'b0),
                 .SD(SD), .EN(EN), .SLn(SLn));
  or sdr_0(SEL, CLK, SDR);
  UDP_MUX2 mux_0(Q, QF, QR, SEL);
  not qrd_0(QRDn, QF);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType           = "ioff";
    specparam   tSetup            = (0.0);
    specparam   tHold             = (0.0);
    specparam   tWidth            = (0.0);
    specparam   tpdLH_CLK_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_CLK_to_QRDn = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QRDn = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q      = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q      = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QRDn  = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QRDn  = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (Q +: DR))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && SLn )
      (negedge CLK => (Q +: DF))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
      
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QRDn +: DF))  = (tpdLH_CLK_to_QRDn, tpdHL_CLK_to_QRDn);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (QRDn +: SD))  = (tpdLH_CLK_to_QRDn, tpdHL_CLK_to_QRDn);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (QRDn +: ADn))  = (tpdLH_AL_to_QRDn, tpdHL_AL_to_QRDn);    // ALB2Q
        
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: DR))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2QR
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: DR))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (DR => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: DR))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: DR))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge DR, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DR, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DR, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DR, tHold, NOTIFY_REG);
    
    $setup(posedge DF, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DF, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DF, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DF, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge DR, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge DR, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge DR, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge DR, tHold, NOTIFY_REG);
    
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOOEFF
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOOEFF (output Q,
               input ADn,
               input ALn,
               input CLK,
               input Dn,
               input SDR,
               input LAT,
               input SD,
               input EN,
               input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  not dn_0(Dn_, Dn);
  
  SLE_Prim DF_0 (.Q(Q), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(Dn_), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType         = "ioff";
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )  
      (posedge CLK => (Q +: Dn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )  
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: Dn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: Dn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (Dn => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && SLn )                                    // SAR 93188
      (EN => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: Dn))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: Dn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge Dn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge Dn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge Dn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge Dn, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge Dn, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge Dn, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge Dn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge Dn, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
    
    // SAR 93188
    $setup(posedge EN, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge EN, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge EN, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOOEFF_TEST_UNIT
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOOEFF_TEST_UNIT (output Q,
                         output QRDn,
                         input ADn,
                         input ALn,
                         input CLK,
                         input DRn,
                         input DFn,
                         input SDR,
                         input LAT,
                         input SD,
                         input EN,
                         input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  not dr_0(DR_, DRn);
  not df_0(DF_, DFn);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DR_), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF_), .LAT(1'b0),
                 .SD(SD), .EN(EN), .SLn(SLn));
  or sdr_0(SEL, CLK, SDR);
  UDP_MUX2 mux_0(Q, QF, QR, SEL);
  not qrd_0(QRDn, QF);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType           = "ioff";
    specparam   tSetup            = (0.0);
    specparam   tHold             = (0.0);
    specparam   tWidth            = (0.0);
    specparam   tpdLH_CLK_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_CLK_to_QRDn = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_QRDn = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q      = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q      = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q     = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_QRDn  = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_QRDn  = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (Q +: DRn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && SLn )
      (negedge CLK => (Q +: DFn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
      
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (QRDn +: DFn))  = (tpdLH_CLK_to_QRDn, tpdHL_CLK_to_QRDn);   // CLK2Q
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (QRDn +: SD))  = (tpdLH_CLK_to_QRDn, tpdHL_CLK_to_QRDn);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (QRDn +: ADn))  = (tpdLH_AL_to_QRDn, tpdHL_AL_to_QRDn);    // ALB2Q
        
    // Latch mode
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (posedge CLK => (Q +: DRn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2QR
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  
    if ( LAT && ALn && EN && SLn )                                     // CLK2Q
      (negedge CLK => (Q +: DRn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && EN && !SLn )                                    // CLK2Q
      (negedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);    
    if ( LAT && ALn && CLK && EN && SLn )                              // D2Q Transperant Mode
      (DRn => Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( LAT && ALn && CLK && EN )                                    // Deactivating SLn SL2Q
      (posedge SLn => (Q +: DRn))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( LAT && EN && CLK && SLn )                                    // Deactivating ALn AL2Q
      (posedge ALn => (Q +: DRn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && EN && CLK && !SLn )                                   // Deactivating ALn AL2Q
      (posedge ALn => (Q +: SD))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( LAT && ALn && CLK && EN )                                    // Activating SLn SLn2Q
      (negedge SLn => (Q +: SD))  = (tpdLH_SLn_to_Q, tpdHL_SLn_to_Q);  
    if ( LAT && !EN )                                                // Activating ALn ALn2Q
      (negedge ALn => (Q +: ADn)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge DRn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DRn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DRn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DRn, tHold, NOTIFY_REG);
    
    $setup(posedge DFn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DFn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DFn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DFn, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge DRn, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $setup(negedge DRn, negedge CLK &&& Enable5, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, posedge DRn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable5, negedge DRn, tHold, NOTIFY_REG);
    
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $setup(negedge SLn, negedge CLK &&& Enable6, tSetup, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, posedge SLn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable6, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable7, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    $hold (negedge CLK &&& Enable7, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
    $recovery(posedge ALn, negedge CLK &&& Enable7, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : DDR_OUT
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module DDR_OUT (output Q,
                input ADn,
                input ALn,
                input CLK,
                input DR,
                input DF,
                input SD,
                input EN,
                input SLn);
  
  reg NOTIFY_REG;
  wire LAT;
  
  assign LAT = 1'b0;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DR), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF), .LAT(1'b0),
                 .SD(SD), .EN(EN), .SLn(SLn));
  UDP_MUX2 mux_0(Q, QF, QR, CLK);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType          = "ioff";
    specparam   tSetup           = (0.0);
    specparam   tHold            = (0.0);
    specparam   tWidth           = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q    = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (Q +: DR))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && SLn )
      (negedge CLK => (Q +: DF))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q

    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge DR, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DR, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DR, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DR, tHold, NOTIFY_REG);
    
    $setup(posedge DF, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DF, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DF, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DF, tHold, NOTIFY_REG);
    
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : DDR_OE_UNIT
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module DDR_OE_UNIT (output Q,
                    input ADn,
                    input ALn,
                    input CLK,
                    input DRn,
                    input DFn,
                    input SDR,
                    input LAT,
                    input SD,
                    input EN,
                    input SLn);
  
  reg NOTIFY_REG;
  
  // FF Enables
  and  U0(Enable0, LAT_, EN, ALn, SLn);
  and  U1(Enable1, LAT_, EN, ALn);
  and  U2(Enable2, LAT_, ALn);
  and  U3(Enable3, LAT_, EN);
  buf  U4(Enable4, LAT_);
  
  // Latch Enables
  and  U5(Enable5, LAT, EN, ALn, SLn);
  and  U6(Enable6, LAT, EN, ALn);
  buf  U7(Enable7, LAT);
  
  not  U10(LAT_, LAT);
  
  not dr_0(DR_, DRn);
  not df_0(DF_, DFn);
  
  SLE_Prim r_reg (.Q(QR), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DR_), .LAT(LAT),
                 .SD(SD), .EN(EN), .SLn(SLn));
  SLE_Prim f_reg (.Q(QF), .ADn(ADn), .ALn(ALn), .CLK(CLK), .D(DF_), .LAT(1'b0),
                 .SD(SD), .EN(EN), .SLn(SLn));
  or sdr_0(SEL, CLK, SDR);
  UDP_MUX2 mux_0(Q, QF, QR, SEL);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType          = "ioff";
    specparam   tSetup           = (0.0);
    specparam   tHold            = (0.0);
    specparam   tWidth           = (0.0);
    specparam   tpdLH_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_SLn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SLn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q    = (0.01:0.01:0.01);
    
    //Output Path Delays
    // FF mode
    if ( !LAT && ALn && EN && SLn )
      (posedge CLK => (Q +: DRn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    if ( !LAT && ALn && EN && SLn )
      (negedge CLK => (Q +: DFn))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);   // CLK2Q
    
    if ( !LAT && ALn && EN && !SLn )
      (posedge CLK => (Q +: SD))  = (tpdLH_CLK_to_Q, tpdHL_CLK_to_Q);  // CLK2Q
    if ( !LAT )
      (negedge ALn => (Q +: ADn))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q

    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge DRn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DRn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DRn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DRn, tHold, NOTIFY_REG);
    
    $setup(posedge DFn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $setup(negedge DFn, posedge CLK &&& Enable0, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, posedge DFn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable0, negedge DFn, tHold, NOTIFY_REG);
    
    //Controls Setup and Hold times
    $setup(posedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $setup(negedge SLn, posedge CLK &&& Enable1, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, posedge SLn, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable1, negedge SLn, tHold, NOTIFY_REG);
    
    $setup(posedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $setup(negedge EN, posedge CLK &&& Enable2, tSetup, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, posedge EN, tHold, NOTIFY_REG);
    $hold (posedge CLK &&& Enable2, negedge EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK &&& Enable4, 0.0, 0, NOTIFY_REG);
    $width(negedge ALn            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge CLK &&& Enable3, posedge ALn, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge ALn, posedge CLK &&& Enable3, tSetup, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOINFF
TYPE : IOFF
EQN  : Q = FF/LATCH
---------------------------------------------------------------------*/
`timescale 1 ns / 10 ps
module IOREG (/* INFF */
               output IN_Q,
               output IN_BYP,
               input  IN_AD_N,
               input  AL_N,
               input  IN_CLK,
               input  IN_D,
               input  IN_LAT_N,
               input  IN_SD_N,
               input  IN_EN,
               input  IN_SL,
               /* OUTFF */
               output OUT_Q,
               input  OUT_AD_N,
               input  OUT_CLK,
               input  OUT_D,
               input  OUT_LAT_N,
               input  OUT_SD_N,
               input  OUT_EN,
               input  OUT_SL,
               /* OEFF */
               output OE_Q,
               input  OE_AD_N,
               input  OE_D,
               input  OE_LAT_N,
               input  OE_SD_N);
  
  reg NOTIFY_REG;

  parameter             TX_CLK_EN                                                   = 1'b0;
  parameter             RX_CLK_EN                                                   = 1'b0;
  parameter             RX_CLK_INV                                                  = 1'b0;
  parameter             TX_CLK_INV                                                  = 1'b0;
  parameter             TX_OE_CLK_INV                                               = 1'b0;
  parameter             INFF_EN_INV                                                 = 1'b0;
  parameter             OUTFF_EN_INV                                                = 1'b0;
  parameter             OEFF_EN_INV                                                 = 1'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;
  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;

  wire          [9:0]   rx_data_int;
  
  SLE_Prim u_inff ( .Q    (IN_Q_zd),
                  .ADn  (IN_AD_N),
                  .ALn  (AL_N),
                  .CLK  ( RX_CLK_EN & (RX_CLK_INV ^ IN_CLK) ),
                  .D    (IN_D),
                  .LAT  (~IN_LAT_N),
                  .SD   (~IN_SD_N),
                  .EN   ( INFF_EN_INV ^ IN_EN ),
                  .SLn  (~IN_SL)  );
                  
  assign IN_BYP = (RX_MODE === 4'b0) ? IN_D : 1'bx;
  assign IN_Q = (RX_MODE === 4'b0) ? IN_Q_zd : 1'bx;
  
  SLE_Prim u_outff( .Q    (OUT_Q_zd),
                  .ADn  (OUT_AD_N),
                  .ALn  (AL_N),
                  .CLK  ( TX_CLK_EN & (TX_CLK_INV ^ OUT_CLK) ),
                  .D    (OUT_D),
                  .LAT  (~OUT_LAT_N),
                  .SD   (~OUT_SD_N),
                  .EN   ( OUTFF_EN_INV ^ OUT_EN ),
                  .SLn  (~OUT_SL)  );
                  
  SLE_Prim u_oeff ( .Q    (OE_Q_zd),
                  .ADn  (OE_AD_N),
                  .ALn  (AL_N),
                  .CLK  ( TX_CLK_EN & (TX_OE_CLK_INV ^ OUT_CLK) ),
                  .D    (OE_D),
                  .LAT  (~OE_LAT_N),
                  .SD   (~OE_SD_N),
                  .EN   ( OEFF_EN_INV ^ OUT_EN ),
                  .SLn  (~OUT_SL)  );
  assign OUT_Q = (TX_MODE[6:5] === 2'b00) ? OUT_D : ( (TX_MODE[6:5] === 2'b01) ?  OUT_Q_zd : 1'bx );
  assign OE_Q = (TX_OE_MODE === 3'b000) ? OE_D :
                ((TX_OE_MODE === 3'b001) ? OE_Q_zd :
                ((TX_OE_MODE === 3'b100) ? ~OE_D :
                ((TX_OE_MODE === 3'b101) ? ~OE_Q_zd :
                ((TX_OE_MODE === 3'b111) ? 1'b0 : 1'bx ))));
/*
  assign IN_Q = rx_data_int[1];
  assign IN_BYP = rx_data_int[0];
  
  IOD #(.RX_CLK_INV     ( RX_CLK_INV  ),
        .TX_CLK_INV     ( TX_CLK_INV ),
        .TX_OE_CLK_INV  ( TX_OE_CLK_INV ),
        .INFF_EN_INV    ( INFF_EN_INV ),
        .OUTFF_EN_INV   ( OUTFF_EN_INV ),
        .OEFF_EN_INV    ( OEFF_EN_INV ),
        .TX_OE_MODE     ( TX_OE_MODE ),
        .TX_MODE        ( TX_MODE ),
        .RX_MODE        ( RX_MODE ),
        .DELAY_LINE_MODE( DELAY_LINE_MODE ),
        .RX_DELAY_VAL   ( RX_DELAY_VAL ),
        .RX_DELAY_VAL_X2( RX_DELAY_VAL_X2 ),
        .TX_DELAY_VAL   ( TX_DELAY_VAL ),
        .INPUT_DELAY_SEL( INPUT_DELAY_SEL ),
        .TX_CLK_EN      ( TX_CLK_EN ),
        .RX_CLK_EN      ( RX_CLK_EN ) )
    u0(
            .CDR_CLK_A_SEL_8                  ( ),
            .CDR_CLK_A_SEL_9                  ( ),
            .CDR_CLK_A_SEL_10                 ( ),
            .CDR_CLK_B_SEL                    ( ),
            .SWITCH                           ( ),
            .DDR_DO_READ                      ( ),
            .EYE_MONITOR_EARLY                ( ),
            .EYE_MONITOR_LATE                 ( ),
            .RX_DATA                          ( rx_data_int[9:0] ),
            .DELAY_LINE_OUT_OF_RANGE          ( ),
            .CDR_CLR_NEXT_CLK_N               ( ),
            .TX_DATA                          ( {7'b0, OUT_D} ),
            .OE_DATA                          ( {3'b0, OE_D} ),
            .RX_BIT_SLIP                      ( 1'b0 ),
            .EYE_MONITOR_CLEAR_FLAGS          ( 1'b0 ),
            .DELAY_LINE_MOVE                  ( 1'b0 ),
            .DELAY_LINE_DIRECTION             ( 1'b0 ),
            .DELAY_LINE_LOAD                  ( 1'b0 ),
            .ODT_EN                           ( 1'b0 ),
            .RX_P                             ( IN_D ),
            .RX_N                             ( 1'b0 ),
            .ARST_N                           ( 1'b0 ),
            .HS_IO_CLK                        ( 6'b0 ),
            .RX_CLK                           ( IN_CLK ),
            .TX_CLK                           ( OUT_CLK ),
            .RX_DQS_90                        ( 2'b0 ),
            .TX_DQS                           ( 1'b0 ),
            .TX_DQS_270                       ( 1'b0 ),
            .FIFO_WR_PTR                      ( 3'b0 ),
            .FIFO_RD_PTR                      ( 3'b0 ),
            .TX                               ( OUT_Q ),
            .OE                               ( OE_Q ),
            .CDR_CLK                          ( 1'b0 ),
            .CDR_NEXT_CLK                     ( 1'b0 ),
            .EYE_MONITOR_LANE_WIDTH           ( 3'b0 ),
            .RX_SYNC_RST                      ( 1'b0 ),
            .TX_SYNC_RST                      ( 1'b0 ),
            .TX_DATA_OUT_9                    ( ),
            .TX_DATA_OUT_8                    ( ),
            .AL_N_OUT                         ( ),
            .OUTFF_SL_OUT                     ( ),
            .OUTFF_EN_OUT                     ( ),
            .INFF_SL_OUT                      ( ),
            .INFF_EN_OUT                      ( ),
            .RX_CLK_OUT                       ( ),
            .TX_CLK_OUT                       ( ),
            .INFF_SL                          ( IN_SL ),
            .INFF_EN                          ( IN_EN ),
            .OUTFF_SL                         ( OUT_SL ),
            .OUTFF_EN                         ( OUT_EN ),
            .AL_N                             ( AL_N ),
            .OEFF_LAT_N                       ( OE_LAT_N ),
            .OEFF_SD_N                        ( OE_SD_N ),
            .OEFF_AD_N                        ( OE_AD_N ),
            .INFF_LAT_N                       ( IN_LAT_N ),
            .INFF_SD_N                        ( IN_SD_N ),
            .INFF_AD_N                        ( IN_AD_N ),
            .OUTFF_LAT_N                      ( OUT_LAT_N ),
            .OUTFF_SD_N                       ( OUT_SD_N ),
            .OUTFF_AD_N                       ( OUT_AD_N ),
            .TX_DATA_9                        ( 1'b0 ),
            .TX_DATA_8                        ( 1'b0 ) );
*/

  // FF Enables
  and  (Enable0_IN, IN_LAT_N, IN_EN, AL_N, !IN_SL);
  and  (Enable1_IN, IN_LAT_N, IN_EN, AL_N);
  and  (Enable2_IN, IN_LAT_N, AL_N);
  and  (Enable3_IN, IN_LAT_N, IN_EN);
  buf  (Enable4_IN, IN_LAT_N);
  
  // Latch Enables
  and  (Enable5_IN, !IN_LAT_N, IN_EN, AL_N, !IN_SL);
  and  (Enable6_IN, !IN_LAT_N, IN_EN, AL_N);
  buf  (Enable7_IN, !IN_LAT_N);
  
  // FF Enables
  and  (Enable0_OUT, OUT_LAT_N, OUT_EN, AL_N, !OUT_SL);
  and  (Enable1_OUT, OUT_LAT_N, OUT_EN, AL_N);
  and  (Enable2_OUT, OUT_LAT_N, AL_N);
  and  (Enable3_OUT, OUT_LAT_N, OUT_EN);
  buf  (Enable4_OUT, OUT_LAT_N);
  
  // Latch Enables
  and  (Enable5_OUT, !OUT_LAT_N, OUT_EN, AL_N, !OUT_SL);
  and  (Enable6_OUT, !OUT_LAT_N, OUT_EN, AL_N);
  buf  (Enable7_OUT, !OUT_LAT_N);
  
  
    // FF Enables
  and  (Enable0_OE, OE_LAT_N, OUT_EN, AL_N, !OUT_SL);
  and  (Enable1_OE, OE_LAT_N, OUT_EN, AL_N);
  and  (Enable2_OE, OE_LAT_N, AL_N);
  and  (Enable3_OE, OE_LAT_N, OUT_EN);
  buf  (Enable4_OE, OE_LAT_N);
  
  // Latch Enables
  and  (Enable5_OE, !OE_LAT_N, OUT_EN, AL_N, !OUT_SL);
  and  (Enable6_OE, !OE_LAT_N, OUT_EN, AL_N);
  buf  (Enable7_OE, !OE_LAT_N);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam   tSetup          = (0.0);
    specparam   tHold           = (0.0);
    specparam   tWidth          = (0.0);
    specparam   tpdLH_IN_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_IN_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdHL_D_to_Q    = (0.01:0.01:0.01);
    specparam   tpdLH_IN_SL_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_IN_SL_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_ALn_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_SL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdHL_AL_to_Q   = (0.01:0.01:0.01);
    specparam   tpdLH_OUT_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_OUT_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_OUT_SL_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_OUT_SL_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_OE_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_OE_CLK_to_Q  = (0.01:0.01:0.01);
    specparam   tpdLH_OE_SL_to_Q  = (0.01:0.01:0.01);
    specparam   tpdHL_OE_SL_to_Q  = (0.01:0.01:0.01);
    specparam tpdLH_A_to_Y     = (0.01:0.01:0.01);
    specparam tpdHL_A_to_Y     = (0.01:0.01:0.01);

    (IN_D => IN_BYP ) = ( tpdLH_A_to_Y, tpdHL_A_to_Y );

    //Output Path Delays
    // FF mode
    if ( IN_LAT_N && AL_N && IN_EN && IN_SL )  
      (posedge IN_CLK => (IN_Q +: IN_D))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);   // IN_CLK2Q
    if ( IN_LAT_N && AL_N && IN_EN && !IN_SL )  
      (posedge IN_CLK => (IN_Q +: IN_SD_N))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);  // IN_CLK2Q
    if ( IN_LAT_N )
      (negedge AL_N => (IN_Q +: IN_AD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( !IN_LAT_N && AL_N && IN_EN && IN_SL )                                     // IN_CLK2Q
      (posedge IN_CLK => (IN_Q +: IN_D))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);    
    if ( !IN_LAT_N && AL_N && IN_EN && !IN_SL )                                    // IN_CLK2Q
      (posedge IN_CLK => (IN_Q +: IN_SD_N))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);    
    if ( !IN_LAT_N && AL_N && IN_EN && IN_SL )                                     // IN_CLK2Q
      (negedge IN_CLK => (IN_Q +: IN_D))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);    
    if ( !IN_LAT_N && AL_N && IN_EN && !IN_SL )                                    // IN_CLK2Q
      (negedge IN_CLK => (IN_Q +: IN_SD_N))  = (tpdLH_IN_CLK_to_Q, tpdHL_IN_CLK_to_Q);    
    if ( !IN_LAT_N && AL_N && IN_CLK && IN_EN && IN_SL )                              // D2Q Transperant Mode
      (IN_D => IN_Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( !IN_LAT_N && AL_N && IN_CLK && IN_EN )                                    // Deactivating IN_SL SL2Q
      (posedge IN_SL => (IN_Q +: IN_D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( !IN_LAT_N && IN_EN && IN_CLK && IN_SL )                                    // Deactivating AL_N AL2Q
      (posedge AL_N => (IN_Q +: IN_D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !IN_LAT_N && IN_EN && IN_CLK && !IN_SL )                                   // Deactivating AL_N AL2Q
      (posedge AL_N => (IN_Q +: IN_SD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !IN_LAT_N && AL_N && IN_CLK && IN_EN )                                    // Activating IN_SL IN_SL2Q
      (negedge IN_SL => (IN_Q +: IN_SD_N))  = (tpdLH_IN_SL_to_Q, tpdHL_IN_SL_to_Q);  
    if ( !IN_LAT_N && !IN_EN )                                                // Activating AL_N ALn2Q
      (negedge AL_N => (IN_Q +: IN_AD_N)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge IN_D, posedge IN_CLK &&& Enable0_IN, tSetup, NOTIFY_REG);
    $setup(negedge IN_D, posedge IN_CLK &&& Enable0_IN, tSetup, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable0_IN, posedge IN_D, tHold, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable0_IN, negedge IN_D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge IN_D, negedge IN_CLK &&& Enable5_IN, tSetup, NOTIFY_REG);
    $setup(negedge IN_D, negedge IN_CLK &&& Enable5_IN, tSetup, NOTIFY_REG);
    $hold (negedge IN_CLK &&& Enable5_IN, posedge IN_D, tHold, NOTIFY_REG);
    $hold (negedge IN_CLK &&& Enable5_IN, negedge IN_D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge IN_SL, posedge IN_CLK &&& Enable1_IN, tSetup, NOTIFY_REG);
    $setup(negedge IN_SL, posedge IN_CLK &&& Enable1_IN, tSetup, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable1_IN, posedge IN_SL, tHold, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable1_IN, negedge IN_SL, tHold, NOTIFY_REG);
    
    $setup(posedge IN_SL, negedge IN_CLK &&& Enable6_IN, tSetup, NOTIFY_REG);
    $setup(negedge IN_SL, negedge IN_CLK &&& Enable6_IN, tSetup, NOTIFY_REG);
    $hold (negedge IN_CLK &&& Enable6_IN, posedge IN_SL, tHold, NOTIFY_REG);
    $hold (negedge IN_CLK &&& Enable6_IN, negedge IN_SL, tHold, NOTIFY_REG);
    
    $setup(posedge IN_EN, posedge IN_CLK &&& Enable2_IN, tSetup, NOTIFY_REG);
    $setup(negedge IN_EN, posedge IN_CLK &&& Enable2_IN, tSetup, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable2_IN, posedge IN_EN, tHold, NOTIFY_REG);
    $hold (posedge IN_CLK &&& Enable2_IN, negedge IN_EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge IN_CLK &&& Enable4_IN, 0.0, 0, NOTIFY_REG);
    $width(negedge IN_CLK &&& Enable4_IN, 0.0, 0, NOTIFY_REG);
    $width(posedge IN_CLK &&& Enable7_IN, 0.0, 0, NOTIFY_REG);
    $width(negedge IN_CLK &&& Enable7_IN, 0.0, 0, NOTIFY_REG);
    $width(negedge AL_N            , 0.0, 0, NOTIFY_REG);
    $width(posedge AL_N            , 0.0, 0, NOTIFY_REG);

    
    // Asynchronous Controls Removal
    $hold (posedge IN_CLK &&& Enable3_IN, posedge AL_N, tHold, NOTIFY_REG);
    $hold (negedge IN_CLK &&& Enable7_IN, posedge AL_N, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge AL_N, posedge IN_CLK &&& Enable3_IN, tSetup, NOTIFY_REG);
    $recovery(posedge AL_N, negedge IN_CLK &&& Enable7_IN, tSetup, NOTIFY_REG);
    
    
    
        //Output Path Delays
    // FF mode
    if ( OUT_LAT_N && AL_N && OUT_EN && OUT_SL )  
      (posedge OUT_CLK => (OUT_Q +: OUT_D))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);   // OUT_CLK2Q
    if ( OUT_LAT_N && AL_N && OUT_EN && !OUT_SL )  
      (posedge OUT_CLK => (OUT_Q +: OUT_SD_N))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);  // OUT_CLK2Q
    if ( OUT_LAT_N )
      (negedge AL_N => (OUT_Q +: OUT_AD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( !OUT_LAT_N && AL_N && OUT_EN && OUT_SL )                                     // OUT_CLK2Q
      (posedge OUT_CLK => (OUT_Q +: OUT_D))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);    
    if ( !OUT_LAT_N && AL_N && OUT_EN && !OUT_SL )                                    // OUT_CLK2Q
      (posedge OUT_CLK => (OUT_Q +: OUT_SD_N))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);    
    if ( !OUT_LAT_N && AL_N && OUT_EN && OUT_SL )                                     // OUT_CLK2Q
      (negedge OUT_CLK => (OUT_Q +: OUT_D))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);    
    if ( !OUT_LAT_N && AL_N && OUT_EN && !OUT_SL )                                    // OUT_CLK2Q
      (negedge OUT_CLK => (OUT_Q +: OUT_SD_N))  = (tpdLH_OUT_CLK_to_Q, tpdHL_OUT_CLK_to_Q);    
    if ( !OUT_LAT_N && AL_N && OUT_CLK && OUT_EN && OUT_SL )                              // D2Q Transperant Mode
      (OUT_D => OUT_Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( !OUT_LAT_N && AL_N && OUT_CLK && OUT_EN )                                    // Deactivating OUT_SL SL2Q
      (posedge OUT_SL => (OUT_Q +: OUT_D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( !OUT_LAT_N && OUT_EN && OUT_CLK && OUT_SL )                                    // Deactivating AL_N AL2Q
      (posedge AL_N => (OUT_Q +: OUT_D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !OUT_LAT_N && OUT_EN && OUT_CLK && !OUT_SL )                                   // Deactivating AL_N AL2Q
      (posedge AL_N => (OUT_Q +: OUT_SD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !OUT_LAT_N && AL_N && OUT_CLK && OUT_EN )                                    // Activating OUT_SL OUT_SL2Q
      (negedge OUT_SL => (OUT_Q +: OUT_SD_N))  = (tpdLH_OUT_SL_to_Q, tpdHL_OUT_SL_to_Q);  
    if ( !OUT_LAT_N && !OUT_EN )                                                // Activating AL_N ALn2Q
      (negedge AL_N => (OUT_Q +: OUT_AD_N)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge OUT_D, posedge OUT_CLK &&& Enable0_OUT, tSetup, NOTIFY_REG);
    $setup(negedge OUT_D, posedge OUT_CLK &&& Enable0_OUT, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable0_OUT, posedge OUT_D, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable0_OUT, negedge OUT_D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge OUT_D, negedge OUT_CLK &&& Enable5_OUT, tSetup, NOTIFY_REG);
    $setup(negedge OUT_D, negedge OUT_CLK &&& Enable5_OUT, tSetup, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable5_OUT, posedge OUT_D, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable5_OUT, negedge OUT_D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge OUT_SL, posedge OUT_CLK &&& Enable1_OUT, tSetup, NOTIFY_REG);
    $setup(negedge OUT_SL, posedge OUT_CLK &&& Enable1_OUT, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable1_OUT, posedge OUT_SL, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable1_OUT, negedge OUT_SL, tHold, NOTIFY_REG);
    
    $setup(posedge OUT_SL, negedge OUT_CLK &&& Enable6_OUT, tSetup, NOTIFY_REG);
    $setup(negedge OUT_SL, negedge OUT_CLK &&& Enable6_OUT, tSetup, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable6_OUT, posedge OUT_SL, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable6_OUT, negedge OUT_SL, tHold, NOTIFY_REG);
    
    $setup(posedge OUT_EN, posedge OUT_CLK &&& Enable2_OUT, tSetup, NOTIFY_REG);
    $setup(negedge OUT_EN, posedge OUT_CLK &&& Enable2_OUT, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable2_OUT, posedge OUT_EN, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable2_OUT, negedge OUT_EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge OUT_CLK &&& Enable4_OUT, 0.0, 0, NOTIFY_REG);
    $width(negedge OUT_CLK &&& Enable4_OUT, 0.0, 0, NOTIFY_REG);
    $width(posedge OUT_CLK &&& Enable7_OUT, 0.0, 0, NOTIFY_REG);
    $width(negedge OUT_CLK &&& Enable7_OUT, 0.0, 0, NOTIFY_REG);
    $width(negedge AL_N            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge OUT_CLK &&& Enable3_OUT, posedge AL_N, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable7_OUT, posedge AL_N, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge AL_N, posedge OUT_CLK &&& Enable3_OUT, tSetup, NOTIFY_REG);
    $recovery(posedge AL_N, negedge OUT_CLK &&& Enable7_OUT, tSetup, NOTIFY_REG);
    
    
    //Output Path Delays
    // FF mode
    if ( OE_LAT_N && AL_N && OUT_EN && OUT_SL )  
      (posedge OUT_CLK => (OE_Q +: OE_D))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);   // OUT_CLK2Q
    if ( OE_LAT_N && AL_N && OUT_EN && !OUT_SL )  
      (posedge OUT_CLK => (OE_Q +: OE_SD_N))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);  // OUT_CLK2Q
    if ( OE_LAT_N )
      (negedge AL_N => (OE_Q +: OE_AD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);    // ALB2Q
    
    // Latch mode
    if ( !OE_LAT_N && AL_N && OUT_EN && OUT_SL )                                     // OUT_CLK2Q
      (posedge OUT_CLK => (OE_Q +: OE_D))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);    
    if ( !OE_LAT_N && AL_N && OUT_EN && !OUT_SL )                                    // OUT_CLK2Q
      (posedge OUT_CLK => (OE_Q +: OE_SD_N))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);    
    if ( !OE_LAT_N && AL_N && OUT_EN && OUT_SL )                                     // OUT_CLK2Q
      (negedge OUT_CLK => (OE_Q +: OE_D))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);    
    if ( !OE_LAT_N && AL_N && OUT_EN && !OUT_SL )                                    // OUT_CLK2Q
      (negedge OUT_CLK => (OE_Q +: OE_SD_N))  = (tpdLH_OE_CLK_to_Q, tpdHL_OE_CLK_to_Q);    
    if ( !OE_LAT_N && AL_N && OUT_CLK && OUT_EN && OUT_SL )                              // D2Q Transperant Mode
      (OE_D => OE_Q)  = (tpdLH_D_to_Q, tpdHL_D_to_Q);
    if ( !OE_LAT_N && AL_N && OUT_CLK && OUT_EN )                                    // Deactivating OUT_SL SL2Q
      (posedge OUT_SL => (OE_Q +: OE_D))   = (tpdLH_SL_to_Q, tpdHL_SL_to_Q);
    if ( !OE_LAT_N && OUT_EN && OUT_CLK && OUT_SL )                                    // Deactivating AL_N AL2Q
      (posedge AL_N => (OE_Q +: OE_D))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !OE_LAT_N && OUT_EN && OUT_CLK && !OUT_SL )                                   // Deactivating AL_N AL2Q
      (posedge AL_N => (OE_Q +: OE_SD_N))  = (tpdLH_AL_to_Q, tpdHL_AL_to_Q);          
    if ( !OE_LAT_N && AL_N && OUT_CLK && OUT_EN )                                    // Activating OUT_SL OUT_SL2Q
      (negedge OUT_SL => (OE_Q +: OE_SD_N))  = (tpdLH_OE_SL_to_Q, tpdHL_OE_SL_to_Q);  
    if ( !OE_LAT_N && !OUT_EN )                                                // Activating AL_N ALn2Q
      (negedge AL_N => (OE_Q +: OE_AD_N)) = (tpdLH_ALn_to_Q, tpdHL_ALn_to_Q);   
   
    //Inputs setup and hold times
    // FF Data setup and hold timing checks
    $setup(posedge OE_D, posedge OUT_CLK &&& Enable0_OE, tSetup, NOTIFY_REG);
    $setup(negedge OE_D, posedge OUT_CLK &&& Enable0_OE, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable0_OE, posedge OE_D, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable0_OE, negedge OE_D, tHold, NOTIFY_REG);
    
    // Latch Data setup and hold timing checks
    $setup(posedge OE_D, negedge OUT_CLK &&& Enable5_OE, tSetup, NOTIFY_REG);
    $setup(negedge OE_D, negedge OUT_CLK &&& Enable5_OE, tSetup, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable5_OE, posedge OE_D, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable5_OE, negedge OE_D, tHold, NOTIFY_REG);
   
    //Controls Setup and Hold times
    $setup(posedge OUT_SL, posedge OUT_CLK &&& Enable1_OE, tSetup, NOTIFY_REG);
    $setup(negedge OUT_SL, posedge OUT_CLK &&& Enable1_OE, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable1_OE, posedge OUT_SL, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable1_OE, negedge OUT_SL, tHold, NOTIFY_REG);
    
    $setup(posedge OUT_SL, negedge OUT_CLK &&& Enable6_OE, tSetup, NOTIFY_REG);
    $setup(negedge OUT_SL, negedge OUT_CLK &&& Enable6_OE, tSetup, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable6_OE, posedge OUT_SL, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable6_OE, negedge OUT_SL, tHold, NOTIFY_REG);
    
    $setup(posedge OUT_EN, posedge OUT_CLK &&& Enable2_OE, tSetup, NOTIFY_REG);
    $setup(negedge OUT_EN, posedge OUT_CLK &&& Enable2_OE, tSetup, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable2_OE, posedge OUT_EN, tHold, NOTIFY_REG);
    $hold (posedge OUT_CLK &&& Enable2_OE, negedge OUT_EN, tHold, NOTIFY_REG);
        
    //Controls Pulse Width
    $width(posedge OUT_CLK &&& Enable4_OE, 0.0, 0, NOTIFY_REG);
    $width(negedge OUT_CLK &&& Enable4_OE, 0.0, 0, NOTIFY_REG);
    $width(posedge OUT_CLK &&& Enable7_OE, 0.0, 0, NOTIFY_REG);
    $width(negedge OUT_CLK &&& Enable7_OE, 0.0, 0, NOTIFY_REG);
    $width(negedge AL_N            , 0.0, 0, NOTIFY_REG);
    
    // Asynchronous Controls Removal
    $hold (posedge OUT_CLK &&& Enable3_OE, posedge AL_N, tHold, NOTIFY_REG);
    $hold (negedge OUT_CLK &&& Enable7_OE, posedge AL_N, tHold, NOTIFY_REG);
    
    // Asynchronous Controls Recovery
    $recovery(posedge AL_N, posedge OUT_CLK &&& Enable3_OE, tSetup, NOTIFY_REG);
    $recovery(posedge AL_N, negedge OUT_CLK &&& Enable7_OE, tSetup, NOTIFY_REG);

    $period( posedge IN_CLK, 0.0, NOTIFY_REG );
    $period( negedge IN_CLK, 0.0, NOTIFY_REG );
    $period( posedge OUT_CLK, 0.0, NOTIFY_REG );
    $period( negedge OUT_CLK, 0.0, NOTIFY_REG );

  endspecify
  
endmodule
  

/*---------------------------------------------------------------
NAME : RGB
TYPE : RGB
LOGIC: Y = A @ EN
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ps / 1 ps
module RGB (input A,
           input EN,
           output Y);

  reg NOTIFY_REG;
  parameter SIM_PA5M300T = 1'b1;
  
  UDP_GBLAT_T gb_t(Q_t, EN, An);
  UDP_GBLAT gb_xt(Q_xt, EN, An);
  assign Q = SIM_PA5M300T ? Q_t : Q_xt;
  not U0(An, A);
  nand U1(Y, A, Q);
  
  specify
    specparam PATHPULSE$      = (1.0, 1.0);
    specparam MacroType       = "Global";
    specparam tpdLH           = (10.0:10.0:10.0);
    specparam tpdHL           = (10.0:10.0:10.0);
    
    // Path Delays
    (negedge A => (Y +: 1'b0)) = (tpdLH, tpdHL);
    (posedge A => (Y +: EN))   = (tpdLH, tpdHL);
    
    // Setup and Hold Timing Checks
    $setup(posedge EN, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge EN, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge EN, 0.0, NOTIFY_REG);    
    $hold (posedge A, negedge EN, 0.0, NOTIFY_REG);
    
    // Minimum Pulse Width Timing Checks
    $width(posedge A, 0.0, 0, NOTIFY_REG);
    $width(negedge A, 0.0, 0, NOTIFY_REG);
    $period(posedge A, 0.0, NOTIFY_REG);
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : RGCLKINT
TYPE : RGB
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module RGCLKINT (input A,
                 input EN,
                 output Y);

  reg NOTIFY_REG;
  
  wire Q;
  UDP_GBLAT_T gb_0(Q, EN, An);
  not U0(An, A);
  and U1(Y, A, Q);
  
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : RCLKINT
TYPE : RGB
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module RCLKINT (input A,
                output Y);

  reg NOTIFY_REG;
  
  //RGB rgb_0(.A(A), .EN(1'b1), .Y(Yn));
  //not U0(Y, Yn);
  buf (Y, A);
  
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : GB
TYPE : GLOBAL
LOGIC: Y = A @ EN
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ps / 1 ps
module GB (input A,
           input EN,
           output Y);

  reg NOTIFY_REG;
  parameter SIM_PA5M300T = 1'b1;
  
  UDP_GBLAT_T gb_t(Q_t, EN, An);
  UDP_GBLAT gb_xt(Q_xt, EN, An);
  assign Q = SIM_PA5M300T ? Q_t : Q_xt;
  not U0(An, A);
  and U1(Y, A, Q);
  
  specify
    specparam PATHPULSE$      = (1.0, 1.0);
    specparam MacroType       = "Global";
    specparam tpdLH           = (10:10:10);
    specparam tpdHL           = (10:10:10);
    
    // Path Delays
    (negedge A => (Y +: 1'b0)) = (tpdLH, tpdHL);
    (posedge A => (Y +: EN))   = (tpdLH, tpdHL);
    
    // Setup and Hold Timing Checks
    $setup(posedge EN, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge EN, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge EN, 0.0, NOTIFY_REG);    
    $hold (posedge A, negedge EN, 0.0, NOTIFY_REG);
    
    // Minimum Pulse Width Timing Checks
    $width(posedge A, 0.0, 0, NOTIFY_REG);
    $width(negedge A, 0.0, 0, NOTIFY_REG);
    $period(posedge A, 0.0, NOTIFY_REG);
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : GCLKINT
TYPE : GLOBAL
LOGIC: Y = A @ EN
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module GCLKINT (input A,
                input EN,
                output Y);

  wire Q;
  UDP_GBLAT_T gb_0(Q, EN, An);
  not (An, A);
  and (Y, A, Q);
  
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : CLKINT
TYPE : GB
LOGIC: Y = A
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CLKINT (input A,
               output Y);

  //GB U0(.A(A), .EN(1'b1), .Y(Y));
  wire Q;
  UDP_GBLAT_T gb_0(Q, 1'b1, An);
  not (An, A);
  and (Y, A, Q);
  
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : CLKINT_PRESERVE
TYPE : GB
LOGIC: Y = A
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CLKINT_PRESERVE (input A,
                        output Y);

  reg NOTIFY_REG;
  
  wire Q;
  UDP_GBLAT_T gb_0(Q, 1'b1, An);
  not (An, A);
  and (Y, A, Q);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType       = "gb";
    specparam tpdLH_A_to_Y  = (0.01:0.01:0.01);
    specparam tpdHL_A_to_Y  = (0.01:0.01:0.01);
    specparam tpdLH_An_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_An_to_Y = (0.01:0.01:0.01);
    
    // Path Delays
    (negedge A => (Y +: 1'b0)) = (tpdLH_An_to_Y, tpdHL_An_to_Y);
    (posedge A => (Y +: 1'b1)) = (tpdLH_A_to_Y, tpdHL_A_to_Y);
    
    // Setup and Hold Timing Checks
    
    // Minimum Pulse Width Timing Checks
    $width(posedge A, 0.0, 0, NOTIFY_REG);
    $width(negedge A, 0.0, 0, NOTIFY_REG);
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : CLKBUF
TYPE : GB
EQN  : Y = PAD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CLKBUF(output Y,
              input PAD);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  wire Q;
  UDP_GBLAT_T gb_0(Q, 1'b1, An);
  not (An, PAD);
  and (Y, PAD, Q);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType       = "gb";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam tpdLH_PADn_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PADn_to_Y = (0.01:0.01:0.01);
    
    // Path Delays
    (negedge PAD => (Y +: 1'b0)) = (tpdLH_PADn_to_Y, tpdHL_PADn_to_Y);
    (posedge PAD => (Y +: 1'b1)) = (tpdLH_PAD_to_Y, tpdHL_PAD_to_Y);
    
    // Setup and Hold Timing Checks
    
    // Minimum Pulse Width Timing Checks
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : GCLKBUF
TYPE : GB
LOGIC: Y = A @ EN
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module GCLKBUF (input PAD,
                input EN,
                output Y);

  parameter IOSTD = "";
  reg NOTIFY_REG;
  parameter SIM_PA5M300T = 1'b1;
  
  UDP_GBLAT_T gb_t(Q, EN, PADn);
  not U0(PADn, PAD);
  and U1(Y, PAD, Q);
    
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType       = "gb";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam tpdLH_PADn_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PADn_to_Y = (0.01:0.01:0.01);
    
    // Path Delays
    (negedge PAD => (Y +: 1'b0)) = (tpdLH_PADn_to_Y, tpdHL_PADn_to_Y);
    (posedge PAD => (Y +: EN))   = (tpdLH_PAD_to_Y, tpdHL_PAD_to_Y);
    
    // Setup and Hold Timing Checks
    $setup(posedge EN, posedge PAD, 0.0, NOTIFY_REG);
    $setup(negedge EN, posedge PAD, 0.0, NOTIFY_REG);
    $hold (posedge PAD, posedge EN, 0.0, NOTIFY_REG);    
    $hold (posedge PAD, negedge EN, 0.0, NOTIFY_REG);
    
    // Minimum Pulse Width Timing Checks
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : OUTBUF
TYPE : iopad
EQN  : PAD = D
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF(output PAD,
              input D);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  buf	U0(PAD,D);
  
  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    
    //pin to pin path delay 
    (D => PAD ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    
    //Controls Pulse Width
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : INBUF
TYPE : iopad
EQN  : Y = PAD
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INBUF(output Y,
             input PAD);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  buf U0(Y,PAD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_PAD_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y = (0.01:0.01:0.01);
    
    //pin to pin path delay 
    (PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    //Controls Pulse Width
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : TRIBUFF
TYPE : iopad
EQN  : PAD = D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF(output PAD,
               input D,
               input E);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1 U0(PAD, D, E);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    
    //pin to pin path delay 
    (E => PAD ) = ( tpdLH_E_to_PAD, tpdHL_E_to_PAD, tpdLZ_E_to_PAD, tpdZH_E_to_PAD, tpdHZ_E_to_PAD, tpdZL_E_to_PAD );
    (D => PAD ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    
    //Controls Pulse Width
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : BIBUF
TYPE : iopad
EQN  : Y = PAD; PAD = D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BIBUF(output Y,
             input D,
             input E,
             inout PAD);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1 U0(PAD, D, E);
  buf	   U1(Y,PAD);

  specify
    specparam MacroType = "iopad";
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_PAD_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y = (0.01:0.01:0.01);
    
    //pin to pin path delay 
    (E => PAD ) = ( tpdLH_E_to_PAD, tpdHL_E_to_PAD, tpdLZ_E_to_PAD, tpdZH_E_to_PAD, tpdHZ_E_to_PAD, tpdZL_E_to_PAD );
    (D => PAD ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    (D => Y )   = ( tpdLH_D_to_Y, tpdHL_D_to_Y );
    (E => Y )   = ( tpdLH_E_to_Y, tpdHL_E_to_Y );
    (PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    //Controls Pulse Width
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults
/*--------------------------------------------------------------------
NAME : LIVE_PROBE
TYPE : io
EQN  : 
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module LIVE_PROBE(output PROBE_READ_DATA);
  assign PROBE_READ_DATA = 1'b0;
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
		specparam MacroType = "io";
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOIN_IB_E
TYPE : io
EQN  : Y = YIN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOIN_IB_E(input YIN,
                 input E,
                 output Y);
  reg NOTIFY_REG;
  buf	U0(Y,YIN);

  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "io";
    specparam tpdLH_YIN_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_YIN_to_Y = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(YIN => Y ) = ( tpdLH_YIN_to_Y, tpdHL_YIN_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOIN_IB_E_ODT
TYPE : io
EQN  : Y = YIN
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOIN_IB_E_ODT(input YIN,
                     input ODT_EN,
                     input E,
                     output Y);
  reg NOTIFY_REG;
  buf	U0(Y,YIN);

  parameter     [1:0]   INPUT_DELAY_SEL                                             = 2'b0;
  parameter     [6:0]   TX_MODE                                                     = 7'b0;
  parameter     [3:0]   RX_MODE                                                     = 4'b0;
  parameter     [2:0]   TX_OE_MODE                                                  = 3'b0;
  parameter     [1:0]   DELAY_LINE_MODE                                             = 2'b0;
  parameter     [6:0]   RX_DELAY_VAL                                                = 7'b0;
  parameter             RX_DELAY_VAL_X2                                             = 1'b0;
  parameter     [6:0]   TX_DELAY_VAL                                                = 7'b0;

  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType = "io";
    specparam tpdLH_YIN_to_Y = (0.01:0.01:0.01);
		specparam tpdHL_YIN_to_Y = (0.01:0.01:0.01);
		
		//pin to pin path delay 
		(YIN => Y ) = ( tpdLH_YIN_to_Y, tpdHL_YIN_to_Y );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*---------------------------------------------------------------
NAME : ICB_CLKINT
TYPE : GB
LOGIC: Y = A
-----------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module ICB_CLKINT(input A,
                  output Y);

  reg NOTIFY_REG;
  
  buf U0(Y, A);
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam MacroType       = "gb";
    specparam tpdLH_A_to_Y  = (0.01:0.01:0.01);
    specparam tpdHL_A_to_Y  = (0.01:0.01:0.01);
    specparam tpdLH_An_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_An_to_Y = (0.01:0.01:0.01);
    
    // Path Delays
    (negedge A => (Y +: 1'b0)) = (tpdLH_An_to_Y, tpdHL_An_to_Y);
    (posedge A => (Y +: 1'b1)) = (tpdLH_A_to_Y, tpdHL_A_to_Y);
    
    // Setup and Hold Timing Checks
    
    // Minimum Pulse Width Timing Checks
    $width(posedge A, 0.0, 0, NOTIFY_REG);
    $width(negedge A, 0.0, 0, NOTIFY_REG);
    
    $period( posedge A, 0.0, NOTIFY_REG );
 endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : INBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INBUF_DIFF(input PADP,
                  input PADN,
                  output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;
  pmos  u2(Y, temp, 1'b0);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
        temp = 1'bx;
  end
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(PADP => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    $width(negedge PADP, 0.0, 0, NOTIFY_REG);
    $width(posedge PADP, 0.0, 0, NOTIFY_REG);
    $width(negedge PADN, 0.0, 0, NOTIFY_REG);
    $width(posedge PADN, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : CLKBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CLKBUF_DIFF(input PADP,
                   input PADN,
                   output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;
  pmos  u2(Y, temp, 1'b0);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
        temp = 1'bx;
  end
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(PADP => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    $width(negedge PADP, 0.0, 0, NOTIFY_REG);
    $width(posedge PADP, 0.0, 0, NOTIFY_REG);
    $width(negedge PADN, 0.0, 0, NOTIFY_REG);
    $width(posedge PADN, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : CLKBUF_DIFF_ODT
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module CLKBUF_DIFF_ODT(input PADP,
                       input PADN,
                       input ODT_EN,
                       output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;
  pmos  u2(Y, temp, 1'b0);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
        temp = 1'bx;
  end
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(PADP => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    $width(negedge PADP, 0.0, 0, NOTIFY_REG);
    $width(posedge PADP, 0.0, 0, NOTIFY_REG);
    $width(negedge PADN, 0.0, 0, NOTIFY_REG);
    $width(posedge PADN, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : GCLKBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module GCLKBUF_DIFF(input PADP,
                    input PADN,
                    input EN,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;
  //pmos  u2(Y, temp, 1'b0);
  
  UDP_GBLAT gb_0(Q, EN, _temp);
  not u0(Qn, Q);
  not u1(_temp, temp);
  nor u3(Y, _temp, Qn);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
        temp = 1'bx;
  end
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(PADP => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    // Setup and Hold Timing Checks
    $setup(posedge EN, posedge PADP, 0.0, NOTIFY_REG);
    $setup(negedge EN, posedge PADP, 0.0, NOTIFY_REG);
    $hold (posedge PADP, posedge EN, 0.0, NOTIFY_REG);    
    $hold (posedge PADP, negedge EN, 0.0, NOTIFY_REG);
    
    $setup(posedge EN, negedge PADN, 0.0, NOTIFY_REG);
    $setup(negedge EN, negedge PADN, 0.0, NOTIFY_REG);
    $hold (negedge PADN, posedge EN, 0.0, NOTIFY_REG);    
    $hold (negedge PADN, negedge EN, 0.0, NOTIFY_REG);
    
    $width(negedge PADP, 0.0, 0, NOTIFY_REG);
    $width(posedge PADP, 0.0, 0, NOTIFY_REG);
    $width(negedge PADN, 0.0, 0, NOTIFY_REG);
    $width(posedge PADN, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : OUTBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF_DIFF (output PADP,
                    output PADN,
                    input D);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  buf u0(PADP, D);
  not u1(PADN, D);
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_D_to_PAD  = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(D => PADP ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
		(D => PADN ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : BIBUF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BIBUF_DIFF(inout PADP,
                  inout PADN,
                  input D,
                  input E,
                  output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;

  bufif1  u0(PADP, D, E);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, E);
  pmos    u3(Y, temp, 1'b0);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
      temp = 1'bx;
  end

  specify
    specparam tpdLH_E_to_PADP = ( 0.0:0.0:0.0 );
    specparam tpdHL_E_to_PADP = ( 0.0:0.0:0.0 );
    specparam tpdLH_E_to_PADN = ( 0.0:0.0:0.0 );
    specparam tpdHL_E_to_PADN = ( 0.0:0.0:0.0 );
    specparam tpdLZ_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdLH_PADP_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_PADP_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdLH_PADN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_PADN_to_Y = ( 0.01:0.01:0.01 );
    specparam PATHPULSE$       = (0.01, 0.01);
    specparam MacroType = "io";

    //pin to pin path delay 
    ( E => PADP ) = ( tpdLH_E_to_PADP,tpdHL_E_to_PADP,tpdLZ_E_to_PADP,tpdZH_E_to_PADP,tpdHZ_E_to_PADP,tpdZL_E_to_PADP );
    ( E => PADN ) = ( tpdLH_E_to_PADN,tpdHL_E_to_PADN,tpdLZ_E_to_PADN,tpdZH_E_to_PADN,tpdHZ_E_to_PADN,tpdZL_E_to_PADN );

    ( D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP );
    ( D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN );

    ( D => Y )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( E => Y )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( PADP => Y ) = ( tpdLH_PADP_to_Y, tpdHL_PADP_to_Y );
    ( PADN => Y ) = ( tpdLH_PADN_to_Y, tpdHL_PADN_to_Y );

    $width( negedge PADP, 0.0, 0, NOTIFY_REG );
    $width( posedge PADP, 0.0, 0, NOTIFY_REG );
    $width( negedge PADN, 0.0, 0, NOTIFY_REG );
    $width( posedge PADN, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : TRIBUFF_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF_DIFF(output PADP,
                    output PADN,
                    input D,
                    input E);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1  u0(PADP, D, E);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, E);

  specify
    specparam tpdLH_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdLH_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdLZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADN = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADN = (0.01:0.01:0.01);
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    //pin to pin path delay 
    (E => PADP ) = ( tpdLH_E_to_PADP,tpdHL_E_to_PADP,tpdLZ_E_to_PADP,tpdZH_E_to_PADP,tpdHZ_E_to_PADP,tpdZL_E_to_PADP);
    (E => PADN ) = ( tpdLH_E_to_PADN,tpdHL_E_to_PADN,tpdLZ_E_to_PADN,tpdZH_E_to_PADN,tpdHZ_E_to_PADN,tpdZL_E_to_PADN);

    (D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN);

    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME : IOPADN_IN
TYPE : iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_IN (input   PAD,
                  output  Y);
  reg NOTIFY_REG;
  not u0(Y, PAD);

  specify
    specparam MacroType = "io";

    (PAD => Y) = (0.01:0.01:0.01, 0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
    
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME  : IOPADN_TRI
 TYPE: iopad
---------------------------------------------------------------------*/      
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_TRI(output  PAD,
                  input   D,
                  input   E);
  reg NOTIFY_REG;
  not u0 (_D, D);
  bufif1 u1 (PAD, _D, E);

  specify
    specparam MacroType = "io";
    (E  => PAD) = (0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01); 
    (D => PAD) = (0.01:0.01:0.01, 0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
    
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME : IOPADN_BI
 TYPE : iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_BI (inout   PAD,
                  output  Y,
                  input   D,
                  input   E);
  reg NOTIFY_REG;
  reg temp;
  
  not     u0(_D, D);
  bufif1  u1(PAD, _D, E);
  buf     u2(Y, PAD);

  specify
    specparam tpdLH_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdLH_DB_to_PAD = ( 0.01:0.01:0.01 );
    specparam tpdHL_DB_to_PAD = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_N2POUT = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_N2POUT = ( 0.01:0.01:0.01 );
    specparam PATHPULSE$       = (0.01, 0.01);
    specparam MacroType = "io";

    //pin to pin path delay 
    ( E => PAD ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( D => PAD ) = ( tpdLH_DB_to_PAD,tpdHL_DB_to_PAD );
    ( PAD => Y ) = ( tpdLH_PAD_to_N2POUT, tpdHL_PAD_to_N2POUT );
    ( D => Y ) = ( tpdLH_PAD_to_N2POUT, tpdHL_PAD_to_N2POUT );
    ( E => Y ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    $width( negedge PAD, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME: IOPADP_IN
 TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_IN (output Y,
                  input  PAD,
                  input  N2PIN_P);
 
  reg NOTIFY_REG;
  
  buf u0(Y, PAD);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (PAD => Y) = (0.01:0.01:0.01, 0.01:0.01:0.01); 
    (N2PIN_P => Y) = (0.01:0.01:0.01, 0.01:0.01:0.01);

    $width(negedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME: IOPADP_IN_MIPI
 TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_IN_MIPI(output Y,
                      input  PAD,
                      input  N2PIN_P,
                      input  E);
 
  reg NOTIFY_REG;
  
  buf u0(Y, PAD);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (PAD => Y) = (0.01:0.01:0.01, 0.01:0.01:0.01); 
    (N2PIN_P => Y) = (0.01:0.01:0.01, 0.01:0.01:0.01);

    $width(negedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME  : IOPADP_TRI
TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_TRI(output PAD,
                  input  D,
                  input  E);
  reg NOTIFY_REG;
  bufif1 u0 (PAD, D, E);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (E => PAD) = (0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01); 
    (D => PAD) = (0.01:0.01:0.01, 0.01:0.01:0.01);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPADP_BI
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_BI (inout  PAD,
                  output Y,
                  input  N2PIN_P,
                  input  D,
                  input  E);
  reg NOTIFY_REG;
  reg temp;
  
  bufif1 u0 (PAD, D, E);
  pmos   u1 (Y, temp, 1'b0);

  always @( PAD or N2PIN_P ) begin
    if ((PAD == 1'b1) && (N2PIN_P == 1'b0))
      temp = 1'b1;
    else if ((PAD == 1'b0) && (N2PIN_P == 1'b1))
      temp = 1'b0;
    else
      temp = 1'bx;
  end


  specify
    specparam tpdLH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdLH_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( E => PAD )    = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( D => PAD )    = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD );
    ( D => Y )   = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( E => Y )   = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( PAD => Y )   = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    ( N2PIN_P => Y ) = ( tpdLH_N2PIN_to_Y, tpdHL_N2PIN_to_Y );

    $width( negedge PAD, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD, 0.0, 0, NOTIFY_REG );
    $width( negedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IO_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IO_DIFF (input  YIN);
  reg NOTIFY_REG;
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    $width( negedge YIN, 0.0, 0, NOTIFY_REG );
    $width( posedge YIN, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults



/*--------------------------------------------------------------------
NAME : INBUF_DIFF_MIPI
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module INBUF_DIFF_MIPI (input PADP,
                        input PADN,
                        input HS_SEL,
                        output Y,
                        output YN);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;
  pmos  u2(Y, temp, 1'b0);
  assign YN = HS_SEL ? ~temp : PADN;

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else if (HS_SEL == 1'b0)
      temp = PADP;
    else
      temp = 1'bx;
  end
    
  specify
		specparam MacroType = "io";
    specparam tpdLH_PAD_to_Y  = (0.01:0.01:0.01);
		specparam tpdHL_PAD_to_Y  = (0.01:0.01:0.01);
    specparam PATHPULSE$       = (0.01, 0.01);
		
		//pin to pin path delay 
		(PADP => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    (PADP => YN) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
		(PADN => YN) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    $width(negedge PADP, 0.0, 0, NOTIFY_REG);
    $width(posedge PADP, 0.0, 0, NOTIFY_REG);
    $width(negedge PADN, 0.0, 0, NOTIFY_REG);
    $width(posedge PADN, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : BIBUF_DIFF_DQS
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module BIBUF_DIFF_DQS(inout PADP,
                      inout PADN,
                      input D,
                      input E,
                      output Y,
                      output YN);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  reg temp;

  bufif1  u0(PADP, D, E);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, E);
  pmos    u3(Y, temp, 1'b0);
  pmos    u4(YN, ~temp, 1'b0);

  always @(PADP or PADN) begin
    if ((PADP == 1'b1) && (PADN == 1'b0))
      temp = 1'b1;
    else if ((PADP == 1'b0) && (PADN == 1'b1))
      temp = 1'b0;
    else
      temp = 1'bx;
  end

  specify
    specparam tpdLH_E_to_PADP = ( 0.0:0.0:0.0 );
    specparam tpdHL_E_to_PADP = ( 0.0:0.0:0.0 );
    specparam tpdLH_E_to_PADN = ( 0.0:0.0:0.0 );
    specparam tpdHL_E_to_PADN = ( 0.0:0.0:0.0 );
    specparam tpdLZ_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PADP = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PADN = ( 0.01:0.01:0.01 );
    specparam tpdLH_PADP_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_PADP_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdLH_PADN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_PADN_to_Y = ( 0.01:0.01:0.01 );
    specparam PATHPULSE$       = (0.01, 0.01);
    specparam MacroType = "io";

    //pin to pin path delay 
    ( E => PADP ) = ( tpdLH_E_to_PADP,tpdHL_E_to_PADP,tpdLZ_E_to_PADP,tpdZH_E_to_PADP,tpdHZ_E_to_PADP,tpdZL_E_to_PADP );
    ( E => PADN ) = ( tpdLH_E_to_PADN,tpdHL_E_to_PADN,tpdLZ_E_to_PADN,tpdZH_E_to_PADN,tpdHZ_E_to_PADN,tpdZL_E_to_PADN );

    ( D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP );
    ( D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN );

    ( D => Y )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( E => Y )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( PADP => Y ) = ( tpdLH_PADP_to_Y, tpdHL_PADP_to_Y );
    ( PADN => Y ) = ( tpdLH_PADN_to_Y, tpdHL_PADN_to_Y );

    $width( negedge PADP, 0.0, 0, NOTIFY_REG );
    $width( posedge PADP, 0.0, 0, NOTIFY_REG );
    $width( negedge PADN, 0.0, 0, NOTIFY_REG );
    $width( posedge PADN, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults
/*--------------------------------------------------------------------
NAME : IOPAD_FEEDBACK
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPAD_FEEDBACK(Y,
                      D,
                      E,
                      PAD);
  input D,E;
  output Y;
  inout PAD;

  reg NOTIFY_REG;
  bufif1   U1213(PAD, D, E);
  buf	BUF_U_01(Y,PAD);

  specify
    specparam MacroType = "iopad";
    specparam tpdLH_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PAD = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam tpdLH_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_D_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdHL_E_to_Y   = (0.01:0.01:0.01);
    specparam tpdLH_PAD_to_Y = (0.01:0.01:0.01);
    specparam tpdHL_PAD_to_Y = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
    
    //pin to pin path delay 
    (E => PAD ) = ( tpdLH_E_to_PAD, tpdHL_E_to_PAD, tpdLZ_E_to_PAD, tpdZH_E_to_PAD, tpdHZ_E_to_PAD, tpdZL_E_to_PAD );
    (D => PAD ) = ( tpdLH_D_to_PAD, tpdHL_D_to_PAD );
    (D => Y )   = ( tpdLH_D_to_Y, tpdHL_D_to_Y );
    (E => Y )   = ( tpdLH_E_to_Y, tpdHL_E_to_Y );
    (PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    
    //Controls Pulse Width
    $width(negedge PAD, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD, 0.0, 0, NOTIFY_REG);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPADP_FEEDBACK
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_FEEDBACK (inout  PAD,
                  output Y,
                  input  N2PIN_P,
                  input  D,
                  input  E);
  reg NOTIFY_REG;
  reg temp;
  
  bufif1 u0 (PAD, D, E);
  pmos   u1 (Y, temp, 1'b0);

  always @( PAD or N2PIN_P ) begin
    if ((PAD == 1'b1) && (N2PIN_P == 1'b0))
      temp = 1'b1;
    else if ((PAD == 1'b0) && (N2PIN_P == 1'b1))
      temp = 1'b0;
    else
      temp = 1'bx;
  end


  specify
    specparam tpdLH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdLH_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( E => PAD )    = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( D => PAD )    = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD );
    ( D => Y )   = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( E => Y )   = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( D => Y )   = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    ( E => Y )   = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    ( N2PIN_P => Y ) = ( tpdLH_N2PIN_to_Y, tpdHL_N2PIN_to_Y );
    ( PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );


    $width( negedge PAD, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD, 0.0, 0, NOTIFY_REG );
    $width( negedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME : IOPADN_FEEDBACK
 TYPE : iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_FEEDBACK (inout   PAD,
                  output  Y,
                  input   D,
                  input   E);
  reg NOTIFY_REG;
  reg temp;
  
  not     u0(_D, D);
  bufif1  u1(PAD, _D, E);
  buf     u2(Y, PAD);

 specify
    specparam tpdLH_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD  = ( 0.01:0.01:0.01 );
    specparam tpdLH_DB_to_PAD = ( 0.01:0.01:0.01 );
    specparam tpdHL_DB_to_PAD = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_N2POUT = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_N2POUT = ( 0.01:0.01:0.01 );
    specparam PATHPULSE$       = (0.01, 0.01);
    specparam MacroType = "io";

    //pin to pin path delay 
    ( E => PAD ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( D => PAD ) = ( tpdLH_DB_to_PAD,tpdHL_DB_to_PAD );
    ( D => Y ) = ( tpdLH_PAD_to_N2POUT, tpdHL_PAD_to_N2POUT );
    ( E => Y ) = ( tpdLH_PAD_to_N2POUT, tpdHL_PAD_to_N2POUT );
    ( PAD => Y ) = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );

    $width( negedge PAD, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD, 0.0, 0, NOTIFY_REG );
    $width( negedge D, 0.0, 0, NOTIFY_REG );
    $width( posedge D, 0.0, 0, NOTIFY_REG );
    $width( negedge E, 0.0, 0, NOTIFY_REG );
    $width( posedge E, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : TRIBUFF_FEEDBACK
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF_FEEDBACK(PAD,D,E,Y);
  input D,E;
  output PAD;
  output Y;

  reg NOTIFY_REG;
  bufif1   U1210(PAD, D, E);
  buf     (Y, PAD);

  specify
		specparam tpdLH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
		specparam MacroType = "io";

		//pin to pin path delay 
		(E => PAD ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD);
    (D => PAD ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (D => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (E => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : OUTBUF_FEEDBACK
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF_FEEDBACK(PAD,D,Y);
  input D;
  output PAD;
  output Y;

  reg NOTIFY_REG;
  bufif1   U1210(PAD, D, 1'b1);
  buf     (Y, PAD);

  specify
		specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
		specparam MacroType = "io";

		//pin to pin path delay 
    (D => PAD ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (D => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : TRIBUFF_FEEDBACK_IOG
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF_FEEDBACK_IOG(PAD,D,E,Y);
  input D,E;
  output PAD;
  output Y;

  reg NOTIFY_REG;
  bufif1   U1210(PAD, D, E);
  buf     (Y, PAD);

  specify
		specparam tpdLH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZL_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdHZ_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdZH_E_to_PAD = (0.01:0.01:0.01);
		specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
		specparam MacroType = "io";

		//pin to pin path delay 
		(E => PAD ) = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD);
    (D => PAD ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (D => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (E => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 CELL NAME : OUTBUF_FEEDBACK_IOG
 CELL TYPE : comb
 CELL LOGIC : PAD=D@E
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF_FEEDBACK_IOG(PAD,D,Y);
  input D;
  output PAD;
  output Y;

  reg NOTIFY_REG;
  bufif1   U1210(PAD, D, 1'b1);
  buf      (Y, PAD);
  
  specify
		specparam tpdLH_D_to_PAD = (0.01:0.01:0.01);
		specparam tpdHL_D_to_PAD = (0.01:0.01:0.01);
    specparam PATHPULSE$     = (0.01, 0.01);
		specparam MacroType = "io";

		//pin to pin path delay 
    (D => PAD ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    (D => Y ) = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD);
    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule

`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : TRIBUFF_FEEDBACK_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF_FEEDBACK_DIFF(output PADP,
                    output PADN,
                    input D,
                    input E,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1  u0(PADP, D, E);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, E);
  buf       (Y, PADP);

  specify
    specparam tpdLH_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdLH_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdLZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADN = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADN = (0.01:0.01:0.01);
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    //pin to pin path delay 
    (E => PADP ) = ( tpdLH_E_to_PADP,tpdHL_E_to_PADP,tpdLZ_E_to_PADP,tpdZH_E_to_PADP,tpdHZ_E_to_PADP,tpdZL_E_to_PADP);
    (E => PADN ) = ( tpdLH_E_to_PADN,tpdHL_E_to_PADN,tpdLZ_E_to_PADN,tpdZH_E_to_PADN,tpdHZ_E_to_PADN,tpdZL_E_to_PADN);

    (D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN);
    (D => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (E => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);

    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : OUTBUF_FEEDBACK_DIFF
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF_FEEDBACK_DIFF(output PADP,
                    output PADN,
                    input D,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1  u0(PADP, D, 1'b1);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, 1'b1);
  buf       (Y, PADP);

  specify
    specparam tpdLH_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADN = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADN = (0.01:0.01:0.01);
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    //pin to pin path delay 
    (D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN);
    (D => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);

    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : TRIBUFF_FEEDBACK_DIFF_IOG
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module TRIBUFF_FEEDBACK_DIFF_IOG(output PADP,
                    output PADN,
                    input D,
                    input E,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1  u0(PADP, D, E);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, E);
  buf       (Y, PADP);

  specify
    specparam tpdLH_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADP = (0.0:0.0:0.0);
    specparam tpdLH_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdHL_E_to_PADN = (0.0:0.0:0.0);
    specparam tpdLZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADP = (0.01:0.01:0.01);
    specparam tpdLZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZL_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdHZ_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdZH_E_to_PADN = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADN = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADN = (0.01:0.01:0.01);
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    //pin to pin path delay 
    (E => PADP ) = ( tpdLH_E_to_PADP,tpdHL_E_to_PADP,tpdLZ_E_to_PADP,tpdZH_E_to_PADP,tpdHZ_E_to_PADP,tpdZL_E_to_PADP);
    (E => PADN ) = ( tpdLH_E_to_PADN,tpdHL_E_to_PADN,tpdLZ_E_to_PADN,tpdZH_E_to_PADN,tpdHZ_E_to_PADN,tpdZL_E_to_PADN);

    (D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN);
    (D => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (E => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);

    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
    $width(negedge E, 0.0, 0, NOTIFY_REG);
    $width(posedge E, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : OUTBUF_FEEDBACK_DIFF_IOG
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module OUTBUF_FEEDBACK_DIFF_IOG(output PADP,
                    output PADN,
                    input D,
                    output Y);
  parameter IOSTD = "";
  reg NOTIFY_REG;
  
  bufif1  u0(PADP, D, 1'b1);
  not     u1(D_tmp, D);
  bufif1  u2(PADN, D_tmp, 1'b1);
  buf       (Y, PADP);

  specify
    specparam tpdLH_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADP = (0.01:0.01:0.01);
    specparam tpdLH_D_to_PADN = (0.01:0.01:0.01);
    specparam tpdHL_D_to_PADN = (0.01:0.01:0.01);
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    //pin to pin path delay 
    (D => PADP ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);
    (D => PADN ) = ( tpdLH_D_to_PADN,tpdHL_D_to_PADN);
    (D => Y ) = ( tpdLH_D_to_PADP,tpdHL_D_to_PADP);

    $width(negedge D, 0.0, 0, NOTIFY_REG);
    $width(posedge D, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOPADN_VCCA
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPADN_VCCA (output IOUT_IN,
                    output EIN_VDD,
                    output OIN_VDD,
                    input  OIN_P,
                    input  EIN_P,
`ifdef rtg4
                    output GB_IN,
`endif
                    input  IOUT_VDD);
  reg NOTIFY_REG;
  
  buf u0 (IOUT_IN, IOUT_VDD);
  buf u1 (EIN_VDD, EIN_P);
  buf u2 (OIN_VDD, OIN_P);
`ifdef rtg4
  buf u3 (GB_IN, IOUT_VDD);
`endif

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( EIN_P => EIN_VDD )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( OIN_P => OIN_VDD )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( IOUT_VDD => IOUT_IN ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
`ifdef rtg4
    ( IOUT_VDD => GB_IN ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
`endif
    $width( negedge OIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge OIN_P, 0.0, 0, NOTIFY_REG );
    $width( negedge EIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge EIN_P, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOPADN_BI_VCCI
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_BI_VCCI (inout  PAD_P,
                       output IOUT_VDD,
                       input  OIN_VDD,
                       input  EIN_VDD);
  reg NOTIFY_REG;
  reg temp;
  
  not    u2 (_OIN_VDD, OIN_VDD);
  bufif1 u0 (PAD_P, _OIN_VDD, EIN_VDD);
  pmos   u1 (IOUT_VDD, temp, 1'b0);

  always @( PAD_P ) begin
    if ((PAD_P == 1'b1))
      temp = 1'b0;
    else if ((PAD_P == 1'b0))
      temp = 1'b1;
    else
      temp = 1'bx;
  end


  specify
    specparam tpdLH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdLH_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( EIN_VDD => PAD_P )    = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( OIN_VDD => PAD_P )    = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD );
    ( OIN_VDD => IOUT_VDD ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( EIN_VDD => IOUT_VDD ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( PAD_P => IOUT_VDD )   = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    $width( negedge PAD_P, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD_P, 0.0, 0, NOTIFY_REG );
    $width( negedge OIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( posedge OIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( negedge EIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( posedge EIN_VDD, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME: IOPADN_IN_VCCI
 TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_IN_VCCI (output IOUT_VDD,
                       input  PAD_P);
 
  reg NOTIFY_REG;
  
  not u0(IOUT_VDD, PAD_P);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (PAD_P => IOUT_VDD)        = (0.01:0.01:0.01, 0.01:0.01:0.01); 
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME  : IOPADN_TRI_VCCI
TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADN_TRI_VCCI(output PAD_P,
                       input  OIN_VDD,
                       input  EIN_VDD);
  reg NOTIFY_REG;
  not    u2 (_OIN_VDD, OIN_VDD);
  bufif1 u0 (PAD_P, _OIN_VDD, EIN_VDD);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (EIN_VDD => PAD_P) = (0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01); 
    (OIN_VDD => PAD_P) = (0.01:0.01:0.01, 0.01:0.01:0.01);
    $width(negedge OIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(posedge OIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(negedge EIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(posedge EIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME : IOPADP_VCCA
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps
module IOPADP_VCCA (output IOUT_IN,
                    output EIN_VDD,
                    output OIN_VDD,
                    input  OIN_P,
                    input  EIN_P,
`ifdef rtg4
                    output GB_IN,
`endif
                    input  IOUT_VDD);
  reg NOTIFY_REG;
  
  buf u0 (IOUT_IN, IOUT_VDD);
  buf u1 (EIN_VDD, EIN_P);
  buf u2 (OIN_VDD, OIN_P);
`ifdef rtg4
  buf u3 (GB_IN, IOUT_VDD);
`endif

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( EIN_P => EIN_VDD )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( OIN_P => OIN_VDD )    = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( IOUT_VDD => IOUT_IN ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
`ifdef rtg4
    ( IOUT_VDD => GB_IN ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
`endif
    $width( negedge OIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge OIN_P, 0.0, 0, NOTIFY_REG );
    $width( negedge EIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge EIN_P, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults


/*--------------------------------------------------------------------
NAME : IOPADP_BI_VCCI
TYPE : io
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_BI_VCCI (inout  PAD_P,
                       output IOUT_VDD,
                       input  N2PIN_P,
                       input  OIN_VDD,
                       input  EIN_VDD);
  reg NOTIFY_REG;
  reg temp;
  
  bufif1 u0 (PAD_P, OIN_VDD, EIN_VDD);
  pmos   u1 (IOUT_VDD, temp, 1'b0);

  always @(PAD_P or N2PIN_P) begin
    if ((PAD_P == 1'b1) && (N2PIN_P == 1'b1))
      temp = 1'b1;
    else if ((PAD_P == 1'b0) && (N2PIN_P == 1'b0))
      temp = 1'b0;
    else
        temp = 1'bx;
  end


  specify
    specparam tpdLH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZL_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHZ_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdZH_E_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdHL_D_to_PAD   = ( 0.01:0.01:0.01 );
    specparam tpdLH_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdHL_PAD_to_Y   = ( 0.01:0.01:0.01 );
    specparam tpdLH_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam tpdHL_N2PIN_to_Y = ( 0.01:0.01:0.01 );
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);

    ( EIN_VDD => PAD_P )    = ( tpdLH_E_to_PAD,tpdHL_E_to_PAD,tpdLZ_E_to_PAD,tpdZH_E_to_PAD,tpdHZ_E_to_PAD,tpdZL_E_to_PAD );
    ( OIN_VDD => PAD_P )    = ( tpdLH_D_to_PAD,tpdHL_D_to_PAD );
    ( OIN_VDD => IOUT_VDD ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( EIN_VDD => IOUT_VDD ) = ( 0.01:0.01:0.01, 0.01:0.01:0.01 );
    ( PAD_P => IOUT_VDD )   = ( tpdLH_PAD_to_Y, tpdHL_PAD_to_Y );
    ( N2PIN_P => IOUT_VDD ) = ( tpdLH_N2PIN_to_Y, tpdHL_N2PIN_to_Y );
    $width( negedge PAD_P, 0.0, 0, NOTIFY_REG );
    $width( posedge PAD_P, 0.0, 0, NOTIFY_REG );
    $width( negedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( posedge N2PIN_P, 0.0, 0, NOTIFY_REG );
    $width( negedge OIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( posedge OIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( negedge EIN_VDD, 0.0, 0, NOTIFY_REG );
    $width( posedge EIN_VDD, 0.0, 0, NOTIFY_REG );
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
 NAME: IOPADP_IN_VCCI
 TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_IN_VCCI (output IOUT_VDD,
                       input  PAD_P,
                       input  N2PIN_P);
 
  reg NOTIFY_REG;
  reg temp;
  buf u0(IOUT_VDD, temp);
  
  always @(PAD_P or N2PIN_P) begin
    if ((PAD_P == 1'b1) && (N2PIN_P == 1'b1))
      temp = 1'b1;
    else if ((PAD_P == 1'b0) && (N2PIN_P == 1'b0))
      temp = 1'b0;
    else
        temp = 1'bx;
  end

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (PAD_P => IOUT_VDD)        = (0.01:0.01:0.01, 0.01:0.01:0.01); 
    (N2PIN_P => IOUT_VDD)      = (0.01:0.01:0.01, 0.01:0.01:0.01);
    $width(negedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(posedge N2PIN_P, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

/*--------------------------------------------------------------------
NAME  : IOPADP_TRI_VCCI
TYPE: iopad
---------------------------------------------------------------------*/
`suppress_faults
`enable_portfaults
`celldefine
`delay_mode_path
`timescale 1 ns / 10 ps

module IOPADP_TRI_VCCI(output PAD_P,
                       input  OIN_VDD,
                       input  EIN_VDD);
  reg NOTIFY_REG;
  bufif1 u0 (PAD_P, OIN_VDD, EIN_VDD);

  specify
    specparam MacroType = "io";
    specparam PATHPULSE$       = (0.01, 0.01);
    (EIN_VDD => PAD_P) = (0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01,0.01:0.01:0.01); 
    (OIN_VDD => PAD_P) = (0.01:0.01:0.01, 0.01:0.01:0.01);
    $width(negedge OIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(posedge OIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(negedge EIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(posedge EIN_VDD, 0.0, 0, NOTIFY_REG);
    $width(negedge PAD_P, 0.0, 0, NOTIFY_REG);
    $width(posedge PAD_P, 0.0, 0, NOTIFY_REG);
  endspecify
endmodule
`endcelldefine
`disable_portfaults
`nosuppress_faults

`timescale 1 ps / 1 ps
module RAM_DLY (input  [17:0] IN,
                output [17:0] OUT);
  
  assign OUT[17:0] = IN[17:0];
  
  specify
    ( IN[0] *> (OUT[0]+:OUT[0]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[1] *> (OUT[1]+:OUT[1]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[2] *> (OUT[2]+:OUT[2]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[3] *> (OUT[3]+:OUT[3]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[4] *> (OUT[4]+:OUT[4]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[5] *> (OUT[5]+:OUT[5]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[6] *> (OUT[6]+:OUT[6]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[7] *> (OUT[7]+:OUT[7]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[8] *> (OUT[8]+:OUT[8]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[9] *> (OUT[9]+:OUT[9]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[10] *> (OUT[10]+:OUT[10]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[11] *> (OUT[11]+:OUT[11]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[12] *> (OUT[12]+:OUT[12]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[13] *> (OUT[13]+:OUT[13]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[14] *> (OUT[14]+:OUT[14]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[15] *> (OUT[15]+:OUT[15]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[16] *> (OUT[16]+:OUT[16]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
    ( IN[17] *> (OUT[17]+:OUT[17]) ) = (50.0:50.0:50.0, 50.0:50.0:50.0);
  endspecify
endmodule
`endcelldefine


`timescale 1 ps / 1 ps
module RAM64x12_IP (
                    R_DATA,R_ADDR,BLK_EN,
                    W_CLK,W_ADDR,W_DATA,W_EN,
                    ACCESS_BUSY, BUSY_FB,
                    DSH, ENSH,
                    DSH_IN, ENSH_IN);
            
  parameter TC2CRWH = 0;
  parameter TC2CWRH = 1;

  output [11:0]   R_DATA;
  input  [5:0]    R_ADDR;
  input           BLK_EN;
  
  input           W_CLK, W_EN;
  input  [5:0]    W_ADDR;
  input  [11:0]   W_DATA;  
  
  output          ACCESS_BUSY;
  input           BUSY_FB;
  output          DSH, ENSH;
  input           DSH_IN, ENSH_IN;
  
  reg [11:0] MEM_64_12 [0:63];
  
  parameter MEMORYFILE  = "";
  parameter RAMINDEX    = "";
  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.
  parameter NO_COLLISION = 0;                         // Used to turn off collision detection.
                                                      // Default = off.  Set to 1 to turn them on.
  parameter COLLISION_LENGTH = 1;
  parameter COLLISION_WARN_MSGS = 3;
  
  parameter INIT0   = 64'hx;
  parameter INIT1   = 64'hx;
  parameter INIT2   = 64'hx;
  parameter INIT3   = 64'hx;
  parameter INIT4   = 64'hx;
  parameter INIT5   = 64'hx;
  parameter INIT6   = 64'hx;
  parameter INIT7   = 64'hx;
  parameter INIT8   = 64'hx;
  parameter INIT9   = 64'hx;
  parameter INIT10  = 64'hx;
  parameter INIT11  = 64'hx;

  reg NOTIFY_REG;
  
  integer collisions_detected;
  
  reg  [5:0]    W_ADDR_lat;
  reg           W_EN_lat;
  reg  [11:0]   W_DATA_lat;

  wire [11:0]   R_DATAP;
  wire [5:0]    R_ADDR_int;
  wire          BLK_EN_int;
  wire          W_CLK_int, W_EN_int;
  wire [5:0]    W_ADDR_int;
  wire [11:0]   W_DATA_int;
  
  reg           collision_w;
  
  assign        ACCESS_BUSY = 1'b0;
  assign        DSH         = DSH_IN;
  assign        ENSH        = ENSH_IN;
  
  OUTPUT_PMOS #(.WIDTH(12)) p0 (.OUT(R_DATA), .IN(R_DATAP));
  
  INPUT_BUF #(.WIDTH(6)) b0 (.OUT(R_ADDR_int), .IN(R_ADDR));
  INPUT_BUF #(.WIDTH(1)) b1 (.OUT(BLK_EN_int), .IN(BLK_EN));
  INPUT_BUF #(.WIDTH(1)) b2 (.OUT(W_CLK_int), .IN(W_CLK));
  INPUT_BUF #(.WIDTH(1)) b3 (.OUT(W_EN_int), .IN(W_EN));
  INPUT_BUF #(.WIDTH(6)) b4 (.OUT(W_ADDR_int), .IN(W_ADDR));
  INPUT_BUF #(.WIDTH(12)) b5 (.OUT(W_DATA_int), .IN(W_DATA));
  
  integer init_loop = 0;
  initial begin
    collisions_detected = 0;
    if ( WARNING_MSGS_ON == 0 )
      $display("Note: RAM64x12 warnings are disabled. Set WARNING_MSGS_ON = 1 to enable warnings.");
      
    if ( COLLISION_WARN_MSGS == 0 )
      $display("Note: SRAM collision warnings are disabled.");
    
    if ( MEMORYFILE != "")
      $readmemb ( MEMORYFILE, MEM_64_12 );
    else begin
      for (init_loop = 0; init_loop < 64; init_loop = init_loop + 1) begin
        MEM_64_12[init_loop][0] = INIT0[init_loop];
        MEM_64_12[init_loop][1] = INIT1[init_loop];
        MEM_64_12[init_loop][2] = INIT2[init_loop];
        MEM_64_12[init_loop][3] = INIT3[init_loop];
        MEM_64_12[init_loop][4] = INIT4[init_loop];
        MEM_64_12[init_loop][5] = INIT5[init_loop];
        MEM_64_12[init_loop][6] = INIT6[init_loop];
        MEM_64_12[init_loop][7] = INIT7[init_loop];
        MEM_64_12[init_loop][8] = INIT8[init_loop];
        MEM_64_12[init_loop][9] = INIT9[init_loop];
        MEM_64_12[init_loop][10] = INIT10[init_loop];
        MEM_64_12[init_loop][11] = INIT11[init_loop];
      end
    end
    collision_w = 1'b0;
  end
  
  always @( collisions_detected ) begin
    if ( (collisions_detected == COLLISION_WARN_MSGS) && (COLLISION_WARN_MSGS > 0) ) begin
      $display("Note: Maximum number of address collision warnings is reached. No more collision messages will be reported.");
      $display("      Instance: %m", $realtime);
    end
  end
 
  //Issue warning message if W_CLK, BLK_EN goes unknown 
  always @(W_CLK_int === 1'bx ) begin
    if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
      $display("Warning : W_CLK went unknown at time %0.1fps. Instance: %m",$realtime);
  end
  
  always @( BLK_EN_int === 1'bx ) begin
    if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
      $display("Warning : BLK_EN went unknown at time %0.1fps. Instance: %m", $realtime);
  end

`ifndef VERIFICATION  
  // [HH] The output itself will never suffer from collision, only a warning message will be shown to the user  
  assign R_DATAP[11:0] = BLK_EN_int ? (collision_w ? 12'bx : MEM_64_12[ R_ADDR_int[5:0] ][11:0]) : 12'b0;
`else
  assign R_DATAP[11:0] = BLK_EN_int ? MEM_64_12[ R_ADDR_int[5:0] ][11:0] : 12'b0;
`endif
  // Collision Detection on read port
  always @( posedge collision_w ) begin
    // Collision, write from write port at the same address. Read operation will be unknown while the write will be successful
    if ( (WARNING_MSGS_ON == 1) && (NO_COLLISION == 0) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
      collisions_detected = collisions_detected + 1;
      $display (" ** Warning: Write and Read from the same address at the same time. Read data from conflicting address is unknown."); 
      $display ("    Time: %0.1fps! Instance: %m ", $realtime );
    end
  end
  
  // We need to call this when the R_ADDR changes, not when BLK_EN goes high
  always @( R_ADDR_int ) begin
    if ( ( ((^R_ADDR_int) === 1'bx) && (BLK_EN_int === 1'b1) ) ) begin
      if ( WARNING_MSGS_ON == 1 )
        $display(" Warning: Illegal address on Read port at time %0.1fps! Instance: %m", $realtime);
    end
  end
                
  // Write Section
  always @(posedge W_CLK_int) begin
    W_ADDR_lat = W_ADDR_int;
    W_DATA_lat   = W_DATA_int;
    W_EN_lat   = W_EN_int;
    
    collision_w = 1'b0;
    
    if( W_EN_lat === 1'b1 ) begin
      //write mode
      if ((^W_ADDR_lat) === 1'bx) begin
        if ( WARNING_MSGS_ON == 1 )
          $display(" Warning: Illegal address on Write port at time %0.1fps! Instance: %m", $realtime);
      end
      else begin
        //MEM_64_12[ W_ADDR_lat[5:0] ] = 'bx;
        MEM_64_12[ W_ADDR_lat[5:0] ] <= W_DATA_lat;
        
        // collision detection
        if ( (R_ADDR_int === W_ADDR_lat) && (BLK_EN_int === 1'b1) && (NO_COLLISION == 0) )
          collision_w = 1'b1;
          collision_w <= #COLLISION_LENGTH 1'b0;
      end
    end
  end
  

  specify
    specparam PATHPULSE$     = (1.0, 1.0);
  
    ( R_ADDR[0] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[0] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( R_ADDR[1] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[1] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( R_ADDR[2] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[2] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( R_ADDR[3] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[3] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( R_ADDR[4] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[4] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);

    ( R_ADDR[5] *> (R_DATA[0]+:R_DATA[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[1]+:R_DATA[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[2]+:R_DATA[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[3]+:R_DATA[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[4]+:R_DATA[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[5]+:R_DATA[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[6]+:R_DATA[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[7]+:R_DATA[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[8]+:R_DATA[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[9]+:R_DATA[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[10]+:R_DATA[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( R_ADDR[5] *> (R_DATA[11]+:R_DATA[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( ENSH_IN => ENSH ) = (1.0:1.0:1.0, 1.0:1.0:1.0);

    ( posedge BLK_EN *> (R_DATA[ 0 ]+:R_DATA[ 0 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 1 ]+:R_DATA[ 1 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 2 ]+:R_DATA[ 2 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 3 ]+:R_DATA[ 3 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 4 ]+:R_DATA[ 4 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 5 ]+:R_DATA[ 5 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 6 ]+:R_DATA[ 6 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 7 ]+:R_DATA[ 7 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 8 ]+:R_DATA[ 8 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 9 ]+:R_DATA[ 9 ]) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 10 ]+:R_DATA[ 10 ]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge BLK_EN *> (R_DATA[ 11 ]+:R_DATA[ 11 ]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge BLK_EN *> (R_DATA[ 0 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 1 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 2 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 3 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 4 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 5 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 6 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 7 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 8 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 9 ]+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 10 ]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge BLK_EN *> (R_DATA[ 11 ]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    $setup(posedge W_ADDR[ 0 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_ADDR[ 1 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_ADDR[ 2 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_ADDR[ 3 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_ADDR[ 4 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_ADDR[ 5 ], posedge W_CLK, 0.0, NOTIFY_REG);

    $setup(negedge W_ADDR[ 0 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_ADDR[ 1 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_ADDR[ 2 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_ADDR[ 3 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_ADDR[ 4 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_ADDR[ 5 ], posedge W_CLK, 0.0, NOTIFY_REG);

    $hold(posedge W_CLK, posedge W_ADDR[ 0 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_ADDR[ 1 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_ADDR[ 2 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_ADDR[ 3 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_ADDR[ 4 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_ADDR[ 5 ], 0.0, NOTIFY_REG);

    $hold(posedge W_CLK, negedge W_ADDR[ 0 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_ADDR[ 1 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_ADDR[ 2 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_ADDR[ 3 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_ADDR[ 4 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_ADDR[ 5 ], 0.0, NOTIFY_REG);
    

    $setup(posedge W_DATA[ 0 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 1 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 2 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 3 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 4 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 5 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 6 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 7 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 8 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 9 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 10 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(posedge W_DATA[ 11 ], posedge W_CLK, 0.0, NOTIFY_REG);

    $setup(negedge W_DATA[ 0 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 1 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 2 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 3 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 4 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 5 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 6 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 7 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 8 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 9 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 10 ], posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_DATA[ 11 ], posedge W_CLK, 0.0, NOTIFY_REG);

    $hold(posedge W_CLK, posedge W_DATA[ 0 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 1 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 2 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 3 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 4 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 5 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 6 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 7 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 8 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 9 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 10 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_DATA[ 11 ], 0.0, NOTIFY_REG);

    $hold(posedge W_CLK, negedge W_DATA[ 0 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 1 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 2 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 3 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 4 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 5 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 6 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 7 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 8 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 9 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 10 ], 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_DATA[ 11 ], 0.0, NOTIFY_REG);

    
    $setup(posedge W_EN, posedge W_CLK, 0.0, NOTIFY_REG);
    $setup(negedge W_EN, posedge W_CLK, 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, posedge W_EN, 0.0, NOTIFY_REG);
    $hold(posedge W_CLK, negedge W_EN, 0.0, NOTIFY_REG);
    
    $width(posedge R_ADDR[5], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[5], 0.0, 0, NOTIFY_REG);
    $width(posedge R_ADDR[4], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[4], 0.0, 0, NOTIFY_REG);
    $width(posedge R_ADDR[3], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[3], 0.0, 0, NOTIFY_REG);
    $width(posedge R_ADDR[2], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[2], 0.0, 0, NOTIFY_REG);
    $width(posedge R_ADDR[1], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[1], 0.0, 0, NOTIFY_REG);
    $width(posedge R_ADDR[0], 0.0, 0, NOTIFY_REG);
    $width(negedge R_ADDR[0], 0.0, 0, NOTIFY_REG);
    $width(posedge BLK_EN, 0.0, 0, NOTIFY_REG);
    $width(posedge W_CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge W_CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge BLK_EN, 0.0, 0, NOTIFY_REG);
    $period(posedge W_CLK, 0.0, NOTIFY_REG);
    
  endspecify
  
endmodule

`timescale 1 ps / 1 ps
module RAM64x12 (   /* Read Port */
                    R_CLK, R_ADDR, R_ADDR_BYPASS, R_ADDR_EN, R_ADDR_SL_N, R_ADDR_SD, R_ADDR_AL_N, R_ADDR_AD_N, 
                    BLK_EN,
                    R_DATA, R_DATA_BYPASS, R_DATA_EN, R_DATA_SL_N, R_DATA_SD, R_DATA_AL_N, R_DATA_AD_N,  
                    /* Write Port */
                    W_CLK, W_ADDR, W_DATA, W_EN,
                    BUSY_FB, ACCESS_BUSY);
            
  input           R_CLK;
  input  [5:0]    R_ADDR;
  input           R_ADDR_BYPASS, R_ADDR_EN, R_ADDR_SL_N, R_ADDR_SD, R_ADDR_AL_N, R_ADDR_AD_N;
  input           BLK_EN;
  output [11:0]   R_DATA;
  input           R_DATA_BYPASS, R_DATA_EN, R_DATA_SL_N, R_DATA_SD, R_DATA_AL_N, R_DATA_AD_N;
  
  input           W_CLK;
  input  [5:0]    W_ADDR;
  input  [11:0]   W_DATA;  
  input           W_EN;

  input           BUSY_FB;
  output          ACCESS_BUSY;
  
  parameter MEMORYFILE  = "";
  parameter RAMINDEX    = "";
  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.
  parameter NO_COLLISION = 0;                         // Used to turn off collision detection.
                                                      // Default = off.  Set to 1 to turn them on.
                                  
  parameter INIT0   = 64'hx;
  parameter INIT1   = 64'hx;
  parameter INIT2   = 64'hx;
  parameter INIT3   = 64'hx;
  parameter INIT4   = 64'hx;
  parameter INIT5   = 64'hx;
  parameter INIT6   = 64'hx;
  parameter INIT7   = 64'hx;
  parameter INIT8   = 64'hx;
  parameter INIT9   = 64'hx;
  parameter INIT10  = 64'hx;
  parameter INIT11  = 64'hx;

  wire [11:0]      R_DATA_comb, R_DATA_reg;
  wire [5:0]       R_ADDR_reg, R_ADDR_comb;
  wire             BLK_EN_reg, BLK_EN_comb;
  
         
  PIPE_REG #( .WIDTH(6) ) 
            u_raddr_reg( .q( R_ADDR_reg ), .adn( R_ADDR_AD_N ), .aln( R_ADDR_AL_N ), .clk( R_CLK ), .d( R_ADDR ), .lat( 1'b0 ), 
                         .sd( R_ADDR_SD ), .en( R_ADDR_EN ), .sln( R_ADDR_SL_N ) );
  PIPE_REG #( .WIDTH(1) ) 
            u_blken_reg( .q( BLK_EN_reg ), .adn( R_ADDR_AD_N ), .aln( R_ADDR_AL_N ), .clk( R_CLK ), .d( BLK_EN ), .lat( 1'b0 ), 
                         .sd( R_ADDR_SD ), .en( R_ADDR_EN ), .sln( R_ADDR_SL_N ) );
  PIPE_REG #( .WIDTH(12) ) 
            u_rdata_reg( .q( R_DATA_reg ), .adn( R_DATA_AD_N ), .aln( R_DATA_AL_N ), .clk( R_CLK ), .d( R_DATA_comb ), .lat( 1'b0 ), 
                         .sd( R_DATA_SD ), .en( R_DATA_EN ), .sln( R_DATA_SL_N ) );
            
  
  assign R_ADDR_comb = R_ADDR_BYPASS ? R_ADDR      : R_ADDR_reg;
  assign BLK_EN_comb = R_ADDR_BYPASS ? BLK_EN      : BLK_EN_reg;
  assign R_DATA      = R_DATA_BYPASS ? R_DATA_comb : R_DATA_reg;

  RAM64x12_IP #(.MEMORYFILE       ( MEMORYFILE ),
                .RAMINDEX(RAMINDEX),
                .WARNING_MSGS_ON  ( WARNING_MSGS_ON ),
                .INIT0(INIT0),
                .INIT1(INIT1),
                .INIT2(INIT2),
                .INIT3(INIT3),
                .INIT4(INIT4),
                .INIT5(INIT5),
                .INIT6(INIT6),
                .INIT7(INIT7),
                .INIT8(INIT8),
                .INIT9(INIT9),
                .INIT10(INIT10),
                .INIT11(INIT11),
                .NO_COLLISION     ( NO_COLLISION ) )
      u0 (.R_DATA       ( R_DATA_comb ),
          .R_ADDR       ( R_ADDR_comb ),
          .BLK_EN       ( BLK_EN_comb ),
          .W_CLK        ( W_CLK ),
          .W_ADDR       ( W_ADDR ),
          .W_DATA       ( W_DATA ),
          .W_EN         ( W_EN ),
          .ACCESS_BUSY  ( ACCESS_BUSY ), 
          .BUSY_FB      ( BUSY_FB ),
          .DSH          ( ),
          .ENSH         ( ),
          .DSH_IN       ( 1'b1 ), 
          .ENSH_IN      ( R_DATA_EN ) );       
endmodule


`delay_mode_path
`timescale 1 ps / 1 ps
module RAM1K20 (/* Data Outputs */
                A_DOUT, 
                B_DOUT, 
                /* FCB Bus Signals */
                ACCESS_BUSY, BUSY_FB,
                /* ECC Inputs/Outputs */
                ECC_EN, ECC_BYPASS, DB_DETECT, SB_CORRECT,
                /* A Port */
                A_CLK, A_DOUT_EN, A_DOUT_SRST_N, A_DOUT_ARST_N, A_BYPASS, 
                A_BLK_EN, A_DIN, A_ADDR, A_WEN, A_REN, A_WIDTH, A_WMODE, 
                /* B Port */
                B_CLK, B_DOUT_EN, B_DOUT_SRST_N, B_DOUT_ARST_N, B_BYPASS, 
                B_BLK_EN, B_DIN, B_ADDR, B_WEN, B_REN, B_WIDTH, B_WMODE);
            
  parameter TC2CWWH = 0;
  parameter TC2CRWH = 0;
  parameter TC2CWRH = 0;
  
  parameter ERROR_PROBABILITY = 0.0;
  parameter CORRECTION_PROBABILITY = 0.0;
  parameter ECC_WARNING_MSGS_ON = 0;
  
  output [19:0] A_DOUT; //port A read data
  output [19:0] B_DOUT; //port B read data
  output        ACCESS_BUSY; //Busy signal from FCB
  output        DB_DETECT; //Double detect flag
  output        SB_CORRECT; //Single-bit correct flag

  input         BUSY_FB; //Lock access to FCB
  input         ECC_EN; //Enable ECC
  input         ECC_BYPASS; //ECC pipeline register select

  input         A_CLK; //port A clock
  input         A_DOUT_EN; //port A pipeline register enable
  input  [2:0]  A_BLK_EN; //port A block selects
  input         A_DOUT_SRST_N; //port A pipeline register synchronous-reset
  input         A_DOUT_ARST_N; //port A pipeline register asynchronous-reset
  input         A_BYPASS; //port A pipeline register select
  input  [19:0] A_DIN; //port A write data
  input  [13:0] A_ADDR; // port A address
  input  [1:0]  A_WEN; //port A write enables (per byte)
  input         A_REN; //port A read enable
  input  [2:0]  A_WIDTH; //port A width/depth mode select
  input  [1:0]  A_WMODE; //port A read-before-write/feed-through-write selects
  
  input         B_CLK; //port B clock
  input         B_DOUT_EN; //port B pipeline register enable
  input  [2:0]  B_BLK_EN; //port B block selects
  input         B_DOUT_SRST_N; //port B pipeline register synchronous-reset
  input         B_DOUT_ARST_N; //port B pipeline register asynchronous-reset
  input         B_BYPASS; //port B pipeline register select
  input  [19:0] B_DIN; //port B write data
  input  [13:0] B_ADDR; //port B address
  input  [1:0]  B_WEN; //port B write enables (per byte)
  input         B_REN; //port B read enable
  input  [2:0]  B_WIDTH; //port B width/depth mode select
  input  [1:0]  B_WMODE; //port B read-before-write/feed-through-write selects
  
  parameter MEMORYFILE  = "";
  parameter RAMINDEX    = "";
  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.
  parameter NO_COLLISION = 0;                         // Used to turn off collision detection.
                                                      // Default = off.  Set to 1 to turn them on.
  parameter COLLISION_WARN_MSGS = -1;
                                  
  parameter INIT0   = 1024'hx;
  parameter INIT1   = 1024'hx;
  parameter INIT2   = 1024'hx;
  parameter INIT3   = 1024'hx;
  parameter INIT4   = 1024'hx;
  parameter INIT5   = 1024'hx;
  parameter INIT6   = 1024'hx;
  parameter INIT7   = 1024'hx;
  parameter INIT8   = 1024'hx;
  parameter INIT9   = 1024'hx;
  parameter INIT10  = 1024'hx;
  parameter INIT11  = 1024'hx;
  parameter INIT12  = 1024'hx;
  parameter INIT13  = 1024'hx;
  parameter INIT14  = 1024'hx;
  parameter INIT15  = 1024'hx;
  parameter INIT16  = 1024'hx;
  parameter INIT17  = 1024'hx;
  parameter INIT18  = 1024'hx;
  parameter INIT19  = 1024'hx;

                                  
  RAM1K20_IP #(.NO_COLLISION(NO_COLLISION),
               .COLLISION_WARN_MSGS(COLLISION_WARN_MSGS),
               .ERROR_PROBABILITY(ERROR_PROBABILITY),
               .CORRECTION_PROBABILITY(CORRECTION_PROBABILITY),
               .ECC_WARNING_MSGS_ON(ECC_WARNING_MSGS_ON),
               .MEMORYFILE(MEMORYFILE), 
               .RAMINDEX(RAMINDEX),
               .INIT0(INIT0),
               .INIT1(INIT1),
               .INIT2(INIT2),
               .INIT3(INIT3),
               .INIT4(INIT4),
               .INIT5(INIT5),
               .INIT6(INIT6),
               .INIT7(INIT7),
               .INIT8(INIT8),
               .INIT9(INIT9),
               .INIT10(INIT10),
               .INIT11(INIT11),
               .INIT12(INIT12),
               .INIT13(INIT13),
               .INIT14(INIT14),
               .INIT15(INIT15),
               .INIT16(INIT16),
               .INIT17(INIT17),
               .INIT18(INIT18),
               .INIT19(INIT19),
               .WARNING_MSGS_ON(WARNING_MSGS_ON) ) 
          u0 (.A_DOUT( A_DOUT[19:0] ),
              .B_DOUT( B_DOUT[19:0] ),
              .BUSY_FB( BUSY_FB),
              .ACCESS_BUSY(ACCESS_BUSY),
              .DB_DETECT( DB_DETECT ),
              .SB_CORRECT( SB_CORRECT ),
              .ECC_EN( ECC_EN ),
              .ECC_BYPASS( ECC_BYPASS ),
              .A_CLK( A_CLK ),
              .A_DOUT_EN( A_DOUT_EN ),
              .A_BLK_EN( A_BLK_EN[2:0] ),
              .A_DOUT_SRST_N( A_DOUT_SRST_N ),
              .A_DOUT_ARST_N( A_DOUT_ARST_N ),
              .A_BYPASS( A_BYPASS ),
              .A_DIN( A_DIN[19:0] ),
              .A_ADDR( A_ADDR[13:0] ),
              .A_WEN( A_WEN[1:0] ),
              .A_REN( A_REN ),
              .A_WIDTH( A_WIDTH[2:0] ),
              .A_WMODE( A_WMODE[1:0] ),
              .B_CLK( B_CLK ),
              .B_DOUT_EN( B_DOUT_EN ),
              .B_BLK_EN( B_BLK_EN[2:0] ),
              .B_DOUT_SRST_N( B_DOUT_SRST_N ),
              .B_DOUT_ARST_N( B_DOUT_ARST_N ),
              .B_BYPASS( B_BYPASS ),
              .B_DIN( B_DIN[19:0] ),
              .B_ADDR( B_ADDR[13:0] ),
              .B_WEN( B_WEN[1:0] ),
              .B_REN( B_REN ),
              .B_WIDTH( B_WIDTH[2:0] ),
              .B_WMODE( B_WMODE[1:0] ) );
endmodule



`delay_mode_path
`timescale 1 ps / 1 ps
`define x12
module RAM1K20_IP(/* Data Outputs */
                  A_DOUT, 
                  B_DOUT, 
                  /* FCB Bus Signals */
                  ACCESS_BUSY, BUSY_FB,
                  /* ECC Inputs/Outputs */
                  ECC_EN, ECC_BYPASS, DB_DETECT, SB_CORRECT,
                  /* A Port */
                  A_CLK, A_DOUT_EN, A_DOUT_SRST_N, A_DOUT_ARST_N, A_BYPASS, 
                  A_BLK_EN, A_DIN, A_ADDR, A_WEN, A_REN, A_WIDTH, A_WMODE, 
                  /* B Port */
                  B_CLK, B_DOUT_EN, B_DOUT_SRST_N, B_DOUT_ARST_N, B_BYPASS, 
                  B_BLK_EN, B_DIN, B_ADDR, B_WEN, B_REN, B_WIDTH, B_WMODE);
            
  parameter TC2CWWH = 0;
  parameter TC2CRWH = 0;
  parameter TC2CWRH = 0;

  parameter ERROR_PROBABILITY = 0.0;
  parameter CORRECTION_PROBABILITY = 0.0;
  parameter ECC_WARNING_MSGS_ON = 0;
  
  output [19:0] A_DOUT;
  output [19:0] B_DOUT;
  output        ACCESS_BUSY;
  output        DB_DETECT;
  output        SB_CORRECT;

  input         BUSY_FB;
  input         ECC_EN;
  input         ECC_BYPASS;

  input         A_CLK;
  input         A_DOUT_EN;
  input  [2:0]  A_BLK_EN;
  input         A_DOUT_SRST_N;
  input         A_DOUT_ARST_N;
  input         A_BYPASS;
  input  [19:0] A_DIN;
  input  [13:0] A_ADDR;
  input  [1:0]  A_WEN;
  input         A_REN;
  input  [2:0]  A_WIDTH;
  input  [1:0]  A_WMODE;
  
  input         B_CLK;
  input         B_DOUT_EN;
  input  [2:0]  B_BLK_EN;
  input         B_DOUT_SRST_N;
  input         B_DOUT_ARST_N;
  input         B_BYPASS;
  input  [19:0] B_DIN;
  input  [13:0] B_ADDR;
  input  [1:0]  B_WEN;
  input         B_REN;
  input  [2:0]  B_WIDTH;
  input  [1:0]  B_WMODE;
  
  
  wire  [19:0] A_DOUTP;
  wire  [19:0] B_DOUTP;
  reg  [19:0]  A_DOUT_stg;
  reg  [19:0]  B_DOUT_stg;
 
  wire         A_CLK_int, A_BLK_int, A_CLK_dly;
  wire         A_DOUT_SRST_N_int, A_DOUT_EN_int;
  wire  [19:0] A_DIN_int;
  wire  [13:0] A_ADDR_int;
  wire  [1:0]  A_WEN_int;
  wire         A_REN_int;
  
  wire         B_CLK_int, B_BLK_int, B_CLK_dly;
  wire         B_DOUT_EN_int, B_DOUT_SRST_N_int;
  wire  [19:0] B_DIN_int;
  wire  [13:0] B_ADDR_int;
  wire  [1:0]  B_WEN_int;
  wire         B_REN_int;
  
  reg [13:0] A_ADDR_lat;
  reg [13:0] B_ADDR_lat;
  
  wire        A_TWOPORT, B_TWOPORT, TWOPORT;
  reg         A_BLK_lat, B_BLK_lat;
  reg  [1:0]  A_WE_lat, B_WE_lat;
  wire        A_RE_lat, B_RE_lat;
  reg [19:0]  A_DIN_lat, B_DIN_lat;
  wire        ecc_pipeline_en;
  reg [6:0]   calc_ecc='h0; //calculated ECC on 33 bits write data
  wire        DB_DETECTP, SB_CORRECTP;
  
  reg [13:0]  A_ADDR_ecc, B_ADDR_ecc;
  reg         A_BLK_ecc, B_BLK_ecc;
  reg [19:0]  A_DIN_ecc, B_DIN_ecc;
  reg  [1:0]  A_WEN_ecc, B_WEN_ecc;
    
  time A_CLK_re_active, B_CLK_re_active;
  time A_CLK_re, B_CLK_re;
  time A_CLK_period, B_CLK_period;
  time A_CLK_Wre, B_CLK_Wre;
  
  real A_CLK_re_real, B_CLK_re_real; 
  
  integer A_Addr_Overlap_L, A_Addr_Overlap_H;
  integer B_Addr_Overlap_L, B_Addr_Overlap_H;
  integer j;
  reg Same_Addr;
  reg [19:0] collision_a, collision_b;
  reg   ecc_db_detect, ecc_sb_correct;
  integer collisions_detected;

  reg [19:0] MEM_1024_20 [0:1023];
  
  parameter TPD = 0.001;
  parameter MEMORYFILE  = "";
  parameter RAMINDEX    = "";
  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;        // Used to turn off warnings about read &
                                                            // write to same address at same time.
                                                            // Default = on.  Set to 0 to turn them off.
  parameter NO_COLLISION = 0;                               // Used to turn off collision detection.
                                                            // Default = off.  Set to 1 to turn them on.
  parameter RAM_ES_BEHAVIOR = 0;                            // Used to emulate the ARST_N behaviour in the ES dies.
                                                            // Default = off.  Set to 1 to turn them on, i.e., enable ES behaviour.
  parameter COLLISION_WARN_MSGS = -1;
                                  
  parameter INIT0   = 1024'hx;
  parameter INIT1   = 1024'hx;
  parameter INIT2   = 1024'hx;
  parameter INIT3   = 1024'hx;
  parameter INIT4   = 1024'hx;
  parameter INIT5   = 1024'hx;
  parameter INIT6   = 1024'hx;
  parameter INIT7   = 1024'hx;
  parameter INIT8   = 1024'hx;
  parameter INIT9   = 1024'hx;
  parameter INIT10  = 1024'hx;
  parameter INIT11  = 1024'hx;
  parameter INIT12  = 1024'hx;
  parameter INIT13  = 1024'hx;
  parameter INIT14  = 1024'hx;
  parameter INIT15  = 1024'hx;
  parameter INIT16  = 1024'hx;
  parameter INIT17  = 1024'hx;
  parameter INIT18  = 1024'hx;
  parameter INIT19  = 1024'hx;

  reg NOTIFY_REG;

  pmos p0 (A_DOUT[0], A_DOUTP[0], 0);
  pmos p1 (A_DOUT[1], A_DOUTP[1], 0);
  pmos p2 (A_DOUT[2], A_DOUTP[2], 0);
  pmos p3 (A_DOUT[3], A_DOUTP[3], 0);
  pmos p4 (A_DOUT[4], A_DOUTP[4], 0);
  pmos p5 (A_DOUT[5], A_DOUTP[5], 0);
  pmos p6 (A_DOUT[6], A_DOUTP[6], 0);
  pmos p7 (A_DOUT[7], A_DOUTP[7], 0);
  pmos p8 (A_DOUT[8], A_DOUTP[8], 0);
  pmos p9 (A_DOUT[9], A_DOUTP[9], 0);
  pmos p10 (A_DOUT[10], A_DOUTP[10], 0);
  pmos p11 (A_DOUT[11], A_DOUTP[11], 0);
  pmos p12 (A_DOUT[12], A_DOUTP[12], 0);
  pmos p13 (A_DOUT[13], A_DOUTP[13], 0);
  pmos p14 (A_DOUT[14], A_DOUTP[14], 0);
  pmos p15 (A_DOUT[15], A_DOUTP[15], 0);
  pmos p16 (A_DOUT[16], A_DOUTP[16], 0);
  pmos p17 (A_DOUT[17], A_DOUTP[17], 0);
  pmos p18 (A_DOUT[18], A_DOUTP[18], 0);
  pmos p19 (A_DOUT[19], A_DOUTP[19], 0);
  
  pmos p20 (B_DOUT[0], B_DOUTP[0], 0);
  pmos p21 (B_DOUT[1], B_DOUTP[1], 0);
  pmos p22 (B_DOUT[2], B_DOUTP[2], 0);
  pmos p23 (B_DOUT[3], B_DOUTP[3], 0);
  pmos p24 (B_DOUT[4], B_DOUTP[4], 0);
  pmos p25 (B_DOUT[5], B_DOUTP[5], 0);
  pmos p26 (B_DOUT[6], B_DOUTP[6], 0);
  pmos p27 (B_DOUT[7], B_DOUTP[7], 0);
  pmos p28 (B_DOUT[8], B_DOUTP[8], 0);
  pmos p29 (B_DOUT[9], B_DOUTP[9], 0);
  pmos p30 (B_DOUT[10], B_DOUTP[10], 0);
  pmos p31 (B_DOUT[11], B_DOUTP[11], 0);
  pmos p32 (B_DOUT[12], B_DOUTP[12], 0);
  pmos p33 (B_DOUT[13], B_DOUTP[13], 0);
  pmos p34 (B_DOUT[14], B_DOUTP[14], 0);
  pmos p35 (B_DOUT[15], B_DOUTP[15], 0);
  pmos p36 (B_DOUT[16], B_DOUTP[16], 0);
  pmos p37 (B_DOUT[17], B_DOUTP[17], 0);
  pmos p38 (B_DOUT[18], B_DOUTP[18], 0);
  pmos p39 (B_DOUT[19], B_DOUTP[19], 0);
  
  pmos     (DB_DETECT, DB_DETECTP, 0);
  pmos     (SB_CORRECT, SB_CORRECTP, 0);
 
  assign A_CLK_int = A_CLK; 
  buf b3 (A_DOUT_EN_int, A_DOUT_EN);
  buf b5 (A_DOUT_SRST_N_int, A_DOUT_SRST_N);
  buf b6 (A_DOUT_ARST_N_int, A_DOUT_ARST_N);
  buf b7 (A_DIN_int[0], A_DIN[0]);
  buf b8 (A_DIN_int[1], A_DIN[1]);
  buf b9 (A_DIN_int[2], A_DIN[2]);
  buf b10 (A_DIN_int[3], A_DIN[3]);
  buf b11 (A_DIN_int[4], A_DIN[4]);
  buf b12 (A_DIN_int[5], A_DIN[5]);
  buf b13 (A_DIN_int[6], A_DIN[6]);
  buf b14 (A_DIN_int[7], A_DIN[7]);
  buf b15 (A_DIN_int[8], A_DIN[8]);
  buf b16 (A_DIN_int[9], A_DIN[9]);
  buf b17 (A_DIN_int[10], A_DIN[10]);
  buf b18 (A_DIN_int[11], A_DIN[11]);
  buf b19 (A_DIN_int[12], A_DIN[12]);
  buf b20 (A_DIN_int[13], A_DIN[13]);
  buf b21 (A_DIN_int[14], A_DIN[14]);
  buf b22 (A_DIN_int[15], A_DIN[15]);
  buf b23 (A_DIN_int[16], A_DIN[16]);
  buf b24 (A_DIN_int[17], A_DIN[17]);
  buf b25 (A_DIN_int[18], A_DIN[18]);
  buf b26 (A_DIN_int[19], A_DIN[19]);
  buf b27 (A_ADDR_int[0], A_ADDR[0]);
  buf b28 (A_ADDR_int[1], A_ADDR[1]);
  buf b29 (A_ADDR_int[2], A_ADDR[2]);
  buf b30 (A_ADDR_int[3], A_ADDR[3]);
  buf b31 (A_ADDR_int[4], A_ADDR[4]);
  buf b32 (A_ADDR_int[5], A_ADDR[5]);
  buf b33 (A_ADDR_int[6], A_ADDR[6]);
  buf b34 (A_ADDR_int[7], A_ADDR[7]);
  buf b35 (A_ADDR_int[8], A_ADDR[8]);
  buf b36 (A_ADDR_int[9], A_ADDR[9]);
  buf b37 (A_ADDR_int[10], A_ADDR[10]);
  buf b38 (A_ADDR_int[11], A_ADDR[11]);
  buf b39 (A_ADDR_int[12], A_ADDR[12]);
  buf b40 (A_ADDR_int[13], A_ADDR[13]);
  buf b41 (A_WEN_int[0], A_WEN[0]);
  buf b42 (A_WEN_int[1], A_WEN[1]);
  buf b43 (A_REN_int, A_REN);
 
  assign B_CLK_int = B_CLK; 
  buf b49 (B_DOUT_EN_int, B_DOUT_EN);
  buf b51 (B_DOUT_SRST_N_int, B_DOUT_SRST_N);
  buf b52 (B_DOUT_ARST_N_int, B_DOUT_ARST_N);
  buf b53 (B_DIN_int[0], B_DIN[0]);
  buf b54 (B_DIN_int[1], B_DIN[1]);
  buf b55 (B_DIN_int[2], B_DIN[2]);
  buf b56 (B_DIN_int[3], B_DIN[3]);
  buf b57 (B_DIN_int[4], B_DIN[4]);
  buf b58 (B_DIN_int[5], B_DIN[5]);
  buf b59 (B_DIN_int[6], B_DIN[6]);
  buf b60 (B_DIN_int[7], B_DIN[7]);
  buf b61 (B_DIN_int[8], B_DIN[8]);
  buf b62 (B_DIN_int[9], B_DIN[9]);
  buf b63 (B_DIN_int[10], B_DIN[10]);
  buf b64 (B_DIN_int[11], B_DIN[11]);
  buf b65 (B_DIN_int[12], B_DIN[12]);
  buf b66 (B_DIN_int[13], B_DIN[13]);
  buf b67 (B_DIN_int[14], B_DIN[14]);
  buf b68 (B_DIN_int[15], B_DIN[15]);
  buf b69 (B_DIN_int[16], B_DIN[16]);
  buf b70 (B_DIN_int[17], B_DIN[17]);
  buf b71 (B_DIN_int[18], B_DIN[18]);
  buf b72 (B_DIN_int[19], B_DIN[19]);
  buf b73 (B_ADDR_int[0], B_ADDR[0]);
  buf b74 (B_ADDR_int[1], B_ADDR[1]);
  buf b75 (B_ADDR_int[2], B_ADDR[2]);
  buf b76 (B_ADDR_int[3], B_ADDR[3]);
  buf b77 (B_ADDR_int[4], B_ADDR[4]);
  buf b78 (B_ADDR_int[5], B_ADDR[5]);
  buf b79 (B_ADDR_int[6], B_ADDR[6]);
  buf b80 (B_ADDR_int[7], B_ADDR[7]);
  buf b81 (B_ADDR_int[8], B_ADDR[8]);
  buf b82 (B_ADDR_int[9], B_ADDR[9]);
  buf b83 (B_ADDR_int[10], B_ADDR[10]);
  buf b84 (B_ADDR_int[11], B_ADDR[11]);
  buf b85 (B_ADDR_int[12], B_ADDR[12]);
  buf b86 (B_ADDR_int[13], B_ADDR[13]);
  buf b87 (B_WEN_int[0], B_WEN[0]);
  buf b88 (B_WEN_int[1], B_WEN[1]);
  buf b89 (B_REN_int, B_REN);
  
  assign ACCESS_BUSY = 1'b0;
  //assign DB_DETECT = 1'b0;
  //assign SB_CORRECT = 1'b0;
  
  // Flags for 2-port mode
  assign A_TWOPORT = A_WIDTH[2] && !A_WIDTH[1] && A_WIDTH[0]; //  101
  assign B_TWOPORT = B_WIDTH[2] && !B_WIDTH[1] && B_WIDTH[0]; //  101
  assign TWOPORT  = A_TWOPORT || B_TWOPORT;
  
  // ECC pipeline mode flag
  assign ecc_pipeline_en = !ECC_BYPASS & ECC_EN;
  
  
  assign A_BLK_int = &A_BLK_EN[2:0];
  assign B_BLK_int = &B_BLK_EN[2:0];
  
  wire [15:0]   nc;
  wire          B_DOUT_CLK_mux, B_DOUT_EN_mux;

  RAM_DLY u_CLKDLY(.IN({16'b0,B_CLK_int,A_CLK_int}), .OUT({nc[15:0],B_CLK_dly,A_CLK_dly}));
  
  
  /*****************************/
  /* Output Pipeline Registers */
  // In 2-port mode, the A controls will override the B controls
  assign B_DOUT_CLK_mux     = TWOPORT ? A_CLK_int : B_CLK_int;
  assign B_DOUT_EN_mux      = TWOPORT ? A_DOUT_EN_int : B_DOUT_EN_int;
  assign B_DOUT_SRST_B_mux  = TWOPORT ? A_DOUT_SRST_N_int : B_DOUT_SRST_N_int;
  assign B_DOUT_ARST_B_mux  = TWOPORT ? A_DOUT_ARST_N_int : B_DOUT_ARST_N_int;
  assign B_BYPASS_mux       = TWOPORT ? A_BYPASS : B_BYPASS;
  
  ECC_PIPELINE #(.width(20))
               upipea(.D            (A_DOUT_stg[19:0]), 
                      .Q            (A_DOUTP[19:0]), 
                      .CLK          (A_CLK_int), 
                      .ARST_N       (A_DOUT_ARST_N_int), 
                      .SRST_N       (A_DOUT_SRST_N_int), 
                      .EN           (A_DOUT_EN_int), 
                      .ECC_BYPASS   (~ecc_pipeline_en), 
                      .DOUT_BYPASS  (A_BYPASS));
                      
  ECC_PIPELINE #(.width(20)) 
               upipeb(.D            (B_DOUT_stg[19:0]), 
                      .Q            (B_DOUTP[19:0]), 
                      .CLK          (B_DOUT_CLK_mux), 
                      .ARST_N       (B_DOUT_ARST_B_mux), 
                      .SRST_N       (B_DOUT_SRST_B_mux), 
                      .EN           (B_DOUT_EN_mux), 
                      .ECC_BYPASS   (~ecc_pipeline_en), 
                      .DOUT_BYPASS  (B_BYPASS_mux));
                      
  ECC_PIPELINE #(.width(2)) 
              upipecc(.D            ( {ecc_db_detect, ecc_sb_correct} ), 
                      .Q            ( {DB_DETECTP, SB_CORRECTP} ), 
                      .CLK          (A_CLK_int), 
                      .ARST_N       (A_DOUT_ARST_N_int), 
                      .SRST_N       (A_DOUT_SRST_N_int), 
                      .EN           (A_DOUT_EN_int), 
                      .ECC_BYPASS   (~ecc_pipeline_en), 
                      .DOUT_BYPASS  (A_BYPASS));
  /*****************************/


  integer init_loop = 0;
  initial begin    
    collisions_detected = 0;
    if ( WARNING_MSGS_ON == 0 )
      $display("Note: SRAM warnings are disabled. Set WARNING_MSGS_ON = 1 to enable warnings.");
      
    if ( COLLISION_WARN_MSGS == 0 )
      $display("Note: SRAM collision warnings are disabled.");
    
    if ( MEMORYFILE != "") begin
      $readmemb ( MEMORYFILE, MEM_1024_20 );
    end
    else begin
      for (init_loop = 0; init_loop < 1024; init_loop = init_loop + 1) begin
        MEM_1024_20[init_loop][0] = INIT0[init_loop];
        MEM_1024_20[init_loop][1] = INIT1[init_loop];
        MEM_1024_20[init_loop][2] = INIT2[init_loop];
        MEM_1024_20[init_loop][3] = INIT3[init_loop];
        MEM_1024_20[init_loop][4] = INIT4[init_loop];
        MEM_1024_20[init_loop][5] = INIT5[init_loop];
        MEM_1024_20[init_loop][6] = INIT6[init_loop];
        MEM_1024_20[init_loop][7] = INIT7[init_loop];
        MEM_1024_20[init_loop][8] = INIT8[init_loop];
        MEM_1024_20[init_loop][9] = INIT9[init_loop];
        MEM_1024_20[init_loop][10] = INIT10[init_loop];
        MEM_1024_20[init_loop][11] = INIT11[init_loop];
        MEM_1024_20[init_loop][12] = INIT12[init_loop];
        MEM_1024_20[init_loop][13] = INIT13[init_loop];
        MEM_1024_20[init_loop][14] = INIT14[init_loop];
        MEM_1024_20[init_loop][15] = INIT15[init_loop];
        MEM_1024_20[init_loop][16] = INIT16[init_loop];
        MEM_1024_20[init_loop][17] = INIT17[init_loop];
        MEM_1024_20[init_loop][18] = INIT18[init_loop];
        MEM_1024_20[init_loop][19] = INIT19[init_loop];
      end
    end
    
    // SAR97525: start with the ECC flags unknown
    ecc_db_detect   <= 1'bx;
    ecc_sb_correct  <= 1'bx;
  end
  
  always @( collisions_detected ) begin
    if ( (collisions_detected == COLLISION_WARN_MSGS) && (COLLISION_WARN_MSGS > 0) ) begin
      $display("Note: Maximum number of address collision warnings is reached. No more collision messages will be reported.");
      $display("      Instance: %m", $realtime);
    end
  end
  
  // Issue warnings if any of the clocks goes unknown
  always @(A_CLK_int === 1'bx ) begin
    if ( ($time > 0) && (A_BLK_lat === 1'b1) ) begin
      if ( WARNING_MSGS_ON == 1 )
        $display("Warning : A_CLK input went unknown at time %0.1fps. Instance: %m",$realtime);
    end
  end
  always @(B_CLK_int === 1'bx ) begin
    if ( ($time > 0) && (B_BLK_lat === 1'b1) ) begin
      if ( WARNING_MSGS_ON == 1 )
        $display("Warning : B_CLK went unknown at time %0.1fps. Instance: %m",$realtime);
    end
  end
  
  //Block selects operation : clear the outputs of the RAM block
  always @( A_BLK_lat ) begin
    case ( A_BLK_lat )
      1'b0 : begin
          A_DOUT_stg = 20'h0;
          // In 2-port mode, blka clears B_DOUT
          if( TWOPORT === 1'b1 ) begin
            B_DOUT_stg = 20'h0;
            if( ECC_EN === 1'b1 ) begin
              // SAR97525: In case of 2-port mode, the ECC flags go unknown when A_BLK is low
              ecc_db_detect   <= 1'bx;
              ecc_sb_correct  <= 1'bx;
            end
          end
          else begin
            ecc_db_detect   <= 1'b0;
            ecc_sb_correct  <= 1'b0;
          end
        end
      1'b1 : ;
      default : begin
          if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
            $display("Warning : A_BLK went unknown at time %0.1fps. Instance: %m", $realtime);
        end
    endcase
  end
  always @( B_BLK_lat ) begin
    case ( B_BLK_lat )
      1'b0 : begin
          // B_BLK is only allowed to clear B_DOUT in dual-port mode
          if( TWOPORT === 1'b0 ) begin
            B_DOUT_stg = 20'h0;
          end
        end
      1'b1 : ;
      default : begin
          if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
            $display("Warning : B_BLK went unknown at time %0.1fps. Instance: %m", $realtime);
        end
    endcase
  end
  

  // Enables for the port A output pipeline registers
  always @( A_DOUT_EN_int ) begin
    if( A_DOUT_EN_int === 1'bx ) begin
      if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
        $display(" Warning: A_DOUT_EN went unknown at time %0.1fps! Instance: %m", $realtime);
    end
  end
  // Synchronous reset for the port A output pipeline registers
  always @( A_DOUT_SRST_N_int ) begin
    if( A_DOUT_SRST_N_int === 1'bx ) begin
      if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
        $display(" Warning: A_DOUT_SRST_N went unknown at time %0.1fps! Instance: %m", $realtime);
    end
  end
 
  // Enables for the port B output pipeline registers
  always @( B_DOUT_EN_int ) begin
    if( B_DOUT_EN_int === 1'bx ) begin
      if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
        $display(" Warning: B_DOUT_EN went unknown at time %0.1fps! Instance: %m", $realtime);
    end
  end
  // Synchronous reset for the port B output pipeline registers
  always @( B_DOUT_SRST_N_int ) begin
    if( B_DOUT_SRST_N_int === 1'bx ) begin
      if ( ($time > 0) && (WARNING_MSGS_ON == 1) )
        $display(" Warning: B_DOUT_SRST_N went unknown at time %0.1fps! Instance: %m", $realtime);
    end
  end

  assign A_RE_lat = A_CLK_int ? A_RE_lat : A_REN_int;
  assign B_RE_lat = B_CLK_int ? B_RE_lat : B_REN_int;
  
  // Collision detection for Port B read and port A write
  always @(posedge B_CLK_dly) begin
    if ( NO_COLLISION == 0 ) begin
      // The collision warnings has to be delayed to cover up for the case when the A and B clocks are identical
      if ( (B_RE_lat === 1'b1) && (B_WE_lat === 2'b00) && (TWOPORT === 1'b0) ) begin
        // read mode, only for dual-port
        if( (B_BLK_lat === 1'b1) && (A_BLK_lat === 1'b1) ) begin
          // reading is only allowed when there is no reset on port B and blk select is high
          address_overlap(B_ADDR_lat, A_ADDR_lat, B_WIDTH, A_WIDTH, Same_Addr, B_Addr_Overlap_L, B_Addr_Overlap_H);
          collision(B_ADDR_lat, A_ADDR_lat, B_WIDTH, A_WIDTH, Same_Addr, collision_b);
          collision_b[9:0] = (A_WE_lat[0] == 1'b1) ? collision_b[9:0] : 10'b0;
          collision_b[19:10] = (A_WE_lat[1] == 1'b1) ? collision_b[19:10] : 10'b0;
          if ( (Same_Addr === 1'b1) && ((A_CLK_re_active + TC2CWRH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0) )) begin
            // Collision, write from port A and read from port B at the same address and same time.
            // Read operation will be unknown while the write will be successful
            if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
              collisions_detected = collisions_detected + 1;
              $display (" ** Warning: Port A Write to and Port B Read from the same address at the same time. Read data from conflicting address is unknown"); 
              $display (" Time: %0.1fps! Instance: %m ", B_CLK_re_real );
            end
            case (B_WIDTH)
              3'b000: 
                begin  // Dual-port mode
                  for (j = 0;j<20;j= j+1)
                   collision_b[0] = collision_b[0] | collision_b[j];
                  collision_b[19:1] = 'h0; 
                end
              3'b001: 
                begin  // Dual-port mode
                  for (j = 0;j<20;j= j+2)
                   collision_b[1:0] = collision_b[1:0] | collision_b[j+:2];
                  collision_b[19:2] = 'h0; 
                end
              3'b010: 
                begin  // Dual-port mode
                  for (j = 0;j<20;j= j+5)
                   collision_b[4:0] = collision_b[4:0] | collision_b[j+:5];
                  collision_b[19:5] = 'h0; 
                end
              3'b011 : 
                begin  // Dual-port mode
                  collision_b[9:0] = collision_b[9:0] | collision_b[19:10];
                  collision_b[19:10] = 'h0;
                end
              3'b100 : 
                begin  // Dual-port mode
                  collision_b = collision_b;
                end
            endcase
            for ( j=0; j<20; j=j+1 )
              B_DOUT_stg[j] = (collision_b[j] == 1'b1) ? (( B_DOUT_stg[j] == A_DIN_lat[j] ) ? 1'bx : 1'bx) : B_DOUT_stg[j];
          end
        end
      end
    end
  end
  
  // Collision detection for Port A read and port B write
  always @(posedge A_CLK_dly) begin
    if ( NO_COLLISION == 0 ) begin
      // The collision warnings has to be delayed to cover up for the case when the A and B clocks are identical
      if ( (A_RE_lat === 1'b1) && ((A_WE_lat === 2'b00) || (TWOPORT === 1'b1)) ) begin
        // read mode
        if( (A_BLK_lat === 1'b1) && (B_BLK_lat === 1'b1) ) begin
          address_overlap(A_ADDR_lat, B_ADDR_lat, A_WIDTH, B_WIDTH, Same_Addr, A_Addr_Overlap_L, A_Addr_Overlap_H);
          collision(A_ADDR_lat, B_ADDR_lat, A_WIDTH, B_WIDTH, Same_Addr, collision_a);
          collision_a[9:0] = (B_WE_lat[0] == 1'b1) ? collision_a[9:0] : 10'b0;
          collision_a[19:10] = (B_WE_lat[1] == 1'b1) ? collision_a[19:10] : 10'b0;
          if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWRH) >= A_CLK_re_active)
                && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0) )))
          begin
            // Collision, write from port B at the same address and same time.
            // Read operation will be unknown while the write will be successful
            if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
              collisions_detected = collisions_detected + 1;
              $display (" ** Warning: Port B Write and Port A Read to/from the same address at the same time. Read data from conflicting address is unknown"); 
              $display (" Time: %0.1fps! Instance: %m ", A_CLK_re_real );
            end
            //if ( A_BYPASS === 1'b0 ) begin
              case (A_WIDTH)
                3'b000: 
                  begin  // Dual-port mode
                    for (j = 0;j<20;j= j+1)
                     collision_a[0] = collision_a[0] | collision_a[j];
                    collision_a[19:1] = 'h0; 
                    for ( j=0; j<20; j=j+1 )
                      A_DOUT_stg[j] = ( collision_a[j] == 1'b1 ) ? ( (A_DOUT_stg[j] == B_DIN_lat[j] ) ? 1'bx : 1'bx ) : A_DOUT_stg[j];
                  end
                3'b001: 
                  begin  // Dual-port mode
                    for (j = 0;j<20;j= j+2)
                     collision_a[1:0] = collision_a[1:0] | collision_a[j+:2];
                    collision_a[19:2] = 'h0; 
                    for ( j=0; j<20; j=j+1 )
                      A_DOUT_stg[j] = ( collision_a[j] == 1'b1 ) ? ( (A_DOUT_stg[j] == B_DIN_lat[j] ) ? 1'bx : 1'bx ) : A_DOUT_stg[j];
                  end
                3'b010: 
                  begin  // Dual-port mode
                    for (j = 0;j<20;j= j+5)
                      collision_a[4:0] = collision_a[4:0] | collision_a[j+:5];
                    collision_a[19:5] = 'h0; 
                    for ( j=0; j<20; j=j+1 )
                      A_DOUT_stg[j] = ( collision_a[j] == 1'b1 ) ? ( (A_DOUT_stg[j] == B_DIN_lat[j] ) ? 1'bx : 1'bx ) : A_DOUT_stg[j];
                  end
                3'b011 : 
                  begin  // Dual-port mode
                    collision_a[9:0] = collision_a[9:0] | collision_a[19:10];
                    collision_a[19:10] = 'h0;
                    for ( j=0; j<20; j=j+1 )
                      A_DOUT_stg[j] = ( collision_a[j] == 1'b1 ) ? ( (A_DOUT_stg[j] == B_DIN_lat[j] ) ? 1'bx : 1'bx ) : A_DOUT_stg[j];
                  end
                3'b100 : 
                  begin  // Dual-port mode
                    for ( j=0; j<20; j=j+1 )
                      A_DOUT_stg[j] = ( collision_a[j] == 1'b1 ) ? ( (A_DOUT_stg[j] == B_DIN_lat[j] ) ? 1'bx : 1'bx ) : A_DOUT_stg[j];
                  end
                3'b101 : 
                  begin  // Two-port mode
                    if ((A_Addr_Overlap_L== 0) && (A_Addr_Overlap_H==39) ) begin
                        A_DOUT_stg = 20'hx;
                        B_DOUT_stg = 20'hx;
                    end
                    else if (A_Addr_Overlap_L < 20) begin
                      for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                        B_DOUT_stg[j] = 1'bx;
                    end
                    else begin
                      for ( j=A_Addr_Overlap_L-20; j<=A_Addr_Overlap_H-20; j=j+1 )
                        A_DOUT_stg[j] = 1'bx;
                    end
                  end
              endcase
            //end
          end
        end
      end
    end
  end

  always @(posedge A_CLK_int) begin
    A_CLK_period = $time - A_CLK_re;
    A_CLK_re = $time;

    A_ADDR_lat = A_ADDR_int;
    A_BLK_lat  = A_BLK_int;
    if (TWOPORT === 1'b0) begin
      A_DIN_lat = A_DIN_int;
      A_WE_lat = A_WEN_int;
    end
    
    if (A_BLK_lat === 1'b1) begin
      A_CLK_re_active = $time;
      A_CLK_re_real = $realtime;
    end
    
    if ( |A_WE_lat && !TWOPORT ) begin //{
      // SAR97525: In case of write, the ECC flags go unknown
      //ecc_db_detect   <= 1'bx;
      //ecc_sb_correct  <= 1'bx;
      
      // port A write mode - only supported in dual-port mode
      if ((^A_ADDR_lat) === 1'bx) begin
        if ( WARNING_MSGS_ON == 1 )
          $display(" Warning: Illegal address on port A at time %0.1fps! Instance: %m", $realtime);
      end
      else if( A_BLK_lat === 1'b1 ) begin
        A_CLK_Wre = A_CLK_re_active;
        if( !TWOPORT ) begin    
          address_overlap(A_ADDR_lat, B_ADDR_lat, A_WIDTH, B_WIDTH, Same_Addr, A_Addr_Overlap_L, A_Addr_Overlap_H);
          collision(A_ADDR_lat, B_ADDR_lat, A_WIDTH, B_WIDTH, Same_Addr, collision_a);
        end
        case ( A_WIDTH )
          3'b000 : begin //x1
            if( A_WE_lat[0] === 1'b1 ) begin
              if( A_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( A_WMODE === 2'b01 ) begin //Write Feed-through mode
                  A_DOUT_stg[0] = A_DIN_lat[0];
                end
                else if( A_WMODE === 2'b10 ) begin //Read Before Write mode
                  A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ A_ADDR_lat[1:0] + (5 * A_ADDR_lat[3:2]) ];
                end
                else if( A_WMODE !== 2'b00 ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display(" Warning: A_WMODE state is invalid at time %0.1fps! Instance: %m", $realtime);
                end
			 			  end
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ A_ADDR_lat[1:0] + (5 * A_ADDR_lat[3:2]) ] = A_DIN_lat[0];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                   && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                begin
                  // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (A_DIN_lat[0] === B_DIN_lat[0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
          end
          3'b001 : begin //x2
            if( A_WE_lat[0] === 1'b1 ) begin
              if( A_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( A_WMODE === 2'b01 ) begin //Write Feed-through mode
                  A_DOUT_stg[1:0] = A_DIN_lat[1:0];
                end
                else if( A_WMODE === 2'b10 ) begin //Read Before Write mode
                  A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 0 + (5 * A_ADDR_lat[3:2]) ];
                  A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 1 + (5 * A_ADDR_lat[3:2]) ];
                end
                else if( A_WMODE === 2'bxx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display(" Warning: A_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end
			 			  end
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 0 + (5 * A_ADDR_lat[3:2]) ] = A_DIN_lat[0];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 1 + (5 * A_ADDR_lat[3:2]) ] = A_DIN_lat[1];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                   && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                begin
                  // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (A_DIN_lat[1:0] === B_DIN_lat[1:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: A_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  A_WE_lat, A_WIDTH, $realtime);
            end
          end
          3'b010 : begin //x5
            if( A_WE_lat[0] === 1'b1 ) begin
              if( A_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( A_WMODE === 2'b01 ) begin //Write Feed-through mode
                  A_DOUT_stg[4:0] = A_DIN_lat[4:0];
                end
                else if( A_WMODE === 2'b10 ) begin //Read Before Write mode
                  A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 0 + (10 * A_ADDR_lat[3]) ];
                  A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 1 + (10 * A_ADDR_lat[3]) ];
                  A_DOUT_stg[2] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 2 + (10 * A_ADDR_lat[3]) ];
                  A_DOUT_stg[3] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 3 + (10 * A_ADDR_lat[3]) ];
                  A_DOUT_stg[4] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 4 + (10 * A_ADDR_lat[3]) ];
                end
                else if( A_WMODE === 2'bxx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display(" Warning: A_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end
			 			  end
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 0 + (10 * A_ADDR_lat[3]) ] = A_DIN_lat[0];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 1 + (10 * A_ADDR_lat[3]) ] = A_DIN_lat[1];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 2 + (10 * A_ADDR_lat[3]) ] = A_DIN_lat[2];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 3 + (10 * A_ADDR_lat[3]) ] = A_DIN_lat[3];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 4 + (10 * A_ADDR_lat[3]) ] = A_DIN_lat[4];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                   && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                begin
                  // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (A_DIN_lat[4:0] === B_DIN_lat[4:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: A_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  A_WE_lat, A_WIDTH, $realtime);
            end
          end
          3'b011 : begin //x10
            if( A_WE_lat[0] === 1'b1 ) begin
              if( A_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN stateif
                if( A_WMODE === 2'b01 ) begin //Write Feed-through mode
                  A_DOUT_stg[9:0] = A_DIN_lat[9:0];
                end
                else if( A_WMODE === 2'b10 ) begin //Read Before Write mode
                  A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 0 ];
                  A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 1 ];
                  A_DOUT_stg[2] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 2 ];
                  A_DOUT_stg[3] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 3 ];
                  A_DOUT_stg[4] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 4 ];
                  A_DOUT_stg[5] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 5 ];
                  A_DOUT_stg[6] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 6 ];
                  A_DOUT_stg[7] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 7 ];
                  A_DOUT_stg[8] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 8 ];
                  A_DOUT_stg[9] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 9 ];
                end
                else if( A_WMODE === 2'bxx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display(" Warning: A_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end
              end
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 0 ] = A_DIN_lat[0];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 1 ] = A_DIN_lat[1];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 2 ] = A_DIN_lat[2];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 3 ] = A_DIN_lat[3];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 4 ] = A_DIN_lat[4];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 5 ] = A_DIN_lat[5];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 6 ] = A_DIN_lat[6];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 7 ] = A_DIN_lat[7];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 8 ] = A_DIN_lat[8];
              MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 9 ] = A_DIN_lat[9];
			 			  
              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                   && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                begin
                  // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (A_DIN_lat[9:0] === B_DIN_lat[9:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
              
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: A_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  A_WE_lat, A_WIDTH, $realtime);
            end
          end
          3'b100 : begin //x20
            if( A_WE_lat !== 2'b00 )
            begin
              if( A_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( A_WMODE === 2'b01 ) begin //write Feed-through mode
                  // SAR87796
                  A_DOUT_stg[9:0] = (A_WE_lat[0] === 1'b1) ? A_DIN_lat[9:0] : MEM_1024_20[ A_ADDR_lat[13:4] ] [9:0];
                  A_DOUT_stg[19:10] = (A_WE_lat[1] === 1'b1) ? A_DIN_lat[19:10] : MEM_1024_20[ A_ADDR_lat[13:4] ] [19:10];
                end
                else if( A_WMODE === 2'b10 ) begin //read before write mode
                  A_DOUT_stg[19:0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [19:0];
                end
                else if( A_WMODE === 2'bxx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display(" Warning: A_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end
              end
            end

            case( A_WE_lat )
              2'b01: begin
                MEM_1024_20[ A_ADDR_lat[13:4] ] [9:0] = A_DIN_lat[9:0];
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                     && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                  begin
                    // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (A_DIN_lat[9:0] === B_DIN_lat[9:0])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      if( A_Addr_Overlap_L < 10 ) begin
                        // Collision, write from port B at the same address. 
                        if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                          collisions_detected = collisions_detected + 1;
                          $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                          $display (" Time: %0.1fps! Instance: %m ", $realtime );
                        end
                        if ( A_Addr_Overlap_H > 9 )
                          A_Addr_Overlap_H = 9;
                        for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                          MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                      end
                    end
                  end
                end
              end
              2'b10: begin
                MEM_1024_20[ A_ADDR_lat[13:4] ] [19:10] = A_DIN_lat[19:10];
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                     && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                  begin
                    // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (A_DIN_lat[19:10] === B_DIN_lat[19:10])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      if( A_Addr_Overlap_H > 9 ) begin
                        // Collision, write from port B at the same address.
                        if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                          collisions_detected = collisions_detected + 1;
                          $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                          $display (" Time: %0.1fps! Instance: %m ", $realtime );
                        end
                        if ( A_Addr_Overlap_L < 10 )
                          A_Addr_Overlap_L = 10;
                        for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                          MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                      end
                    end
                  end
                end
              end
              2'b11: begin
                MEM_1024_20[ A_ADDR_lat[13:4] ] [19:0] = A_DIN_lat[19:0];
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && ((B_CLK_re_active + TC2CWWH) >= A_CLK_re_active)
                     && (((A_WE_lat[0]||A_WE_lat[1]||B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b1))||((B_WE_lat[0]||B_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0))))
                  begin
                    // Collision, write from port B at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (A_DIN_lat[19:0] === B_DIN_lat[19:0])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      // Collision, write from port B at the same address. 
                      if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                        collisions_detected = collisions_detected + 1;
                        $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                        $display (" Time: %0.1fps! Instance: %m ", $realtime );
                      end
                      for ( j=A_Addr_Overlap_L; j<=A_Addr_Overlap_H; j=j+1 )
                        MEM_1024_20[ A_ADDR_lat[13:4] ] [j] = 1'bx;
                    end
                  end
                end
              end
              default: begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: A_WEN state of %2b is unallowed for a width of %3b at time %0.1fps! Instance: %m", 
                    A_WE_lat, A_WIDTH, $realtime);
              end
            endcase
          end
          3'b101 : begin //x40/x33 with ecc 
            // In two-port mode, write operation is controlled by port B controls
          end
          default: begin
            if ( WARNING_MSGS_ON == 1 )
              $display ("Warning: invalid WIDTH configuration on Port A at time %0.1fps! Legal Width: 1,2,5,10,20,33,40. Instance: %m", $realtime);
          end
        endcase
      end
    end //}
    else if ( A_RE_lat === 1'b1 ) begin //{
      // read mode
      if ((^A_ADDR_lat) === 1'bx) begin
        if ( WARNING_MSGS_ON == 1 )
          $display(" Warning: Illegal address on port A at time %0.1fps! Instance: %m", $realtime);
      end
      else if( (A_BLK_lat === 1'b1) ) begin
        // reading is only allowed when there is no reset and blk select is high
        // this is true for both dual- and two-port modes
        case (A_WIDTH)
        3'b000 : begin //x1
          A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ A_ADDR_lat[1:0] + (5 * A_ADDR_lat[3:2]) ];
        end
        3'b001 : begin //x2
          A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 0 + (5 * A_ADDR_lat[3:2]) ];
          A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[1] * 2) + 1 + (5 * A_ADDR_lat[3:2]) ];
        end
        3'b010 : begin //x5
          A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 0 + (10 * A_ADDR_lat[3]) ];
          A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 1 + (10 * A_ADDR_lat[3]) ];
          A_DOUT_stg[2] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 2 + (10 * A_ADDR_lat[3]) ];
          A_DOUT_stg[3] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 3 + (10 * A_ADDR_lat[3]) ];
          A_DOUT_stg[4] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[2] * 5) + 4 + (10 * A_ADDR_lat[3]) ];
        end
        3'b011 : begin //x10
          A_DOUT_stg[0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 0 ];
          A_DOUT_stg[1] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 1 ];
          A_DOUT_stg[2] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 2 ];
          A_DOUT_stg[3] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 3 ];
          A_DOUT_stg[4] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 4 ];
          A_DOUT_stg[5] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 5 ];
          A_DOUT_stg[6] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 6 ];
          A_DOUT_stg[7] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 7 ];
          A_DOUT_stg[8] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 8 ];
          A_DOUT_stg[9] = MEM_1024_20[ A_ADDR_lat[13:4] ] [ (A_ADDR_lat[3] * 10) + 9 ];
        end
        3'b100 : begin //x20
          A_DOUT_stg[19:0] = MEM_1024_20[ A_ADDR_lat[13:4] ] [19:0];
        end
        3'b101 : begin  // x40/x33 with ecc , Two-port mode
          if( A_BYPASS )
            #1;
          if( ECC_EN === 1'b1 ) begin
            B_DOUT_stg[16:0] <= MEM_1024_20[ (A_ADDR_lat[13:5] * 2) ] [16:0];
            A_DOUT_stg[15:0] <= MEM_1024_20[ (A_ADDR_lat[13:5] * 2) + 1 ] [15:0];
            if( ERROR_PROBABILITY > 0 )
              emulate_ecc(ecc_db_detect, ecc_sb_correct);
            else begin
              ecc_db_detect = 1'b0;
              ecc_sb_correct = 1'b0;
            end
          end
          else begin
            B_DOUT_stg[19:0] <= MEM_1024_20[ (A_ADDR_lat[13:5] * 2) ] [19:0];
            A_DOUT_stg[19:0] <= MEM_1024_20[ (A_ADDR_lat[13:5] * 2) + 1 ] [19:0];
          end
        end
        default: begin
          if ( WARNING_MSGS_ON == 1 )
            $display ("Warning: invalid WIDTH configuration on Port A at time %0.1fps! Legal Width: 1,2,5,10,20,40/33 with ecc. Instance: %m", $realtime);
        end
        endcase
      end
    end//}
  end
  
  always @(posedge B_CLK_int) begin
    B_CLK_period = $time - B_CLK_re;
    B_CLK_re = $time;
        
    B_ADDR_lat = B_ADDR_int;
    B_DIN_lat = B_DIN_int;
    B_BLK_lat = B_BLK_int;
    B_WE_lat = B_WEN_int;
    if (TWOPORT === 1'b1) begin
      A_DIN_lat = A_DIN_int;
      A_WE_lat = A_WEN_int;
    end
    
    if (B_BLK_lat === 1'b1) begin
      B_CLK_re_active = $time;
      B_CLK_re_real = $realtime;
    end
    
    if ( (|B_WE_lat && !TWOPORT) || (|(B_WE_lat || A_WE_lat) && TWOPORT) ) begin
      //write mode
      if ((^B_ADDR_lat) === 1'bx) begin
        if ( WARNING_MSGS_ON == 1 )
          $display(" Warning: Illegal address on port B at time %0.1fps! Instance: %m", $realtime);
      end
      else if( B_BLK_lat === 1'b1 ) begin
        B_CLK_Wre = B_CLK_re_active;
        if(!TWOPORT)begin    
        address_overlap(B_ADDR_lat, A_ADDR_lat, B_WIDTH, A_WIDTH, Same_Addr, B_Addr_Overlap_L, B_Addr_Overlap_H);
        collision(B_ADDR_lat, A_ADDR_lat, B_WIDTH, A_WIDTH, Same_Addr, collision_b);
      end
        
        case (B_WIDTH)
          3'b000 : begin //x1
            if( B_WE_lat[0] === 1'b1 ) begin
              if( B_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( B_WMODE === 2'b01 ) begin //write feed-through mode
                  B_DOUT_stg[0] = B_DIN_lat[0];
                end
                else if( B_WMODE === 2'b10 ) begin //read before write mode 
                  B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ B_ADDR_lat[1:0] + (5 * B_ADDR_lat[3:2]) ];
                end
                else if( B_WMODE === 1'bx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display ("Warning: B_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end  
              end
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ B_ADDR_lat[1:0] + (5 * B_ADDR_lat[3:2]) ] = B_DIN_lat[0];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                begin
                  // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (B_DIN_lat[0] === A_DIN_lat[0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: B_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  B_WE_lat, B_WIDTH, $realtime);
            end
          end
          3'b001 : begin //x2
            if( B_WE_lat[0] === 1'b1 ) begin
              if( B_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( B_WMODE === 2'b01 ) begin //write feed-through mode
                  B_DOUT_stg[1:0] = B_DIN_lat[1:0];
                end
                else if( B_WMODE === 2'b10 ) begin //read before write mode
                  B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 0 + (5 * B_ADDR_lat[3:2]) ];
                  B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 1 + (5 * B_ADDR_lat[3:2]) ];
                end
                else if( B_WMODE === 1'bx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display ("Warning: B_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end  
              end
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 0 + (5 * B_ADDR_lat[3:2]) ] = B_DIN_lat[0];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 1 + (5 * B_ADDR_lat[3:2]) ] = B_DIN_lat[1];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                begin
                  // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (B_DIN_lat[1:0] === A_DIN_lat[1:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: B_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  B_WE_lat, B_WIDTH, $realtime);
            end
          end
          3'b010 : begin //x5
            if( B_WE_lat[0] === 1'b1 ) begin
              if( B_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( B_WMODE === 2'b01 ) begin //write feed-through mode
                  B_DOUT_stg[4:0] = B_DIN_lat[4:0];
                end
                else if( B_WMODE === 2'b10 ) begin //read before write mode 
                  B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 0 + (10 * B_ADDR_lat[3]) ];
                  B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 1 + (10 * B_ADDR_lat[3]) ];
                  B_DOUT_stg[2] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 2 + (10 * B_ADDR_lat[3]) ];
                  B_DOUT_stg[3] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 3 + (10 * B_ADDR_lat[3]) ];
                  B_DOUT_stg[4] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 4 + (10 * B_ADDR_lat[3]) ];
                end
                else if( B_WMODE === 1'bx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display ("Warning: B_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end  
              end
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 0 + (10 * B_ADDR_lat[3]) ] = B_DIN_lat[0];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 1 + (10 * B_ADDR_lat[3]) ] = B_DIN_lat[1];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 2 + (10 * B_ADDR_lat[3]) ] = B_DIN_lat[2];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 3 + (10 * B_ADDR_lat[3]) ] = B_DIN_lat[3];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 4 + (10 * B_ADDR_lat[3]) ] = B_DIN_lat[4];

              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                begin
                  // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (B_DIN_lat[4:0] === A_DIN_lat[4:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: B_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  B_WE_lat, B_WIDTH, $realtime);
            end
          end
          3'b011 : begin //x10
            if( B_WE_lat[0] === 1'b1 ) begin
              if( B_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( B_WMODE === 2'b01 ) begin //write feed-through mode
                  B_DOUT_stg[9:0] = B_DIN_lat[9:0];
                end
                else if( B_WMODE === 2'b10 ) begin //read before write mode
                  B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 0 ];
                  B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 1 ];
                  B_DOUT_stg[2] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 2 ];
                  B_DOUT_stg[3] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 3 ];
                  B_DOUT_stg[4] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 4 ];
                  B_DOUT_stg[5] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 5 ];
                  B_DOUT_stg[6] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 6 ];
                  B_DOUT_stg[7] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 7 ];
                  B_DOUT_stg[8] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 8 ];
                  B_DOUT_stg[9] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 9 ];
                end
                else if( B_WMODE === 1'bx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display ("Warning: B_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end  
              end
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 0 ] = B_DIN_lat[0];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 1 ] = B_DIN_lat[1];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 2 ] = B_DIN_lat[2];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 3 ] = B_DIN_lat[3];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 4 ] = B_DIN_lat[4];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 5 ] = B_DIN_lat[5];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 6 ] = B_DIN_lat[6];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 7 ] = B_DIN_lat[7];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 8 ] = B_DIN_lat[8];
              MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 9 ] = B_DIN_lat[9];
              if ( NO_COLLISION == 0 ) begin
                if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                begin
                  // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                  // then the written data would be unknown
                  if (B_DIN_lat[9:0] === A_DIN_lat[9:0])
                  begin
                    //Data write successfull 
                  end
                  else
                  begin
                    if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                      collisions_detected = collisions_detected + 1;
                      $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                      $display (" Time: %0.1fps! Instance: %m ", $realtime );
                    end
                    for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                      MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                  end
                end
              end
              
            end
            else begin
              if ( WARNING_MSGS_ON == 1 )
                $display ("Warning: B_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                  B_WE_lat, B_WIDTH, $realtime);
            end
          end
          3'b100 : begin //x20
            if( |B_WE_lat[0] )
            begin
              if( B_RE_lat === 1'b1 ) begin    // SAR87795 : we need to check for the REN state
                if( B_WMODE === 2'b01 ) begin //write feed-through mode
                  // SAR87796
                  B_DOUT_stg[9:0] = (B_WE_lat[0] === 1'b1) ? B_DIN_lat[9:0] : MEM_1024_20[ B_ADDR_lat[13:4] ] [9:0];
                  B_DOUT_stg[19:10] = (B_WE_lat[1] === 1'b1) ? B_DIN_lat[19:10] : MEM_1024_20[ B_ADDR_lat[13:4] ] [19:10];
                end
                else if( B_WMODE === 2'b10 ) begin //read before write mode
                  B_DOUT_stg[19:0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [19:0];
                end
                else if( B_WMODE === 2'bxx ) begin
                  if ( WARNING_MSGS_ON == 1 )
                    $display ("Warning: B_WMODE went unknown at time %0.1fps! Instance: %m", $realtime);
                end
              end
            end

            case( B_WE_lat )
              2'b01: begin
                MEM_1024_20[ B_ADDR_lat[13:4] ] [9:0] = B_DIN_lat[9:0];
                
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                  begin
                    // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (B_DIN_lat[9:0] === A_DIN_lat[9:0])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      // Collision, write from port A at the same address. 
                      if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                        collisions_detected = collisions_detected + 1;
                        $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                        $display (" Time: %0.1fps! Instance: %m ", $realtime );
                      end
                      if ( B_Addr_Overlap_H > 10 )
                          B_Addr_Overlap_H = 10;
                      for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                        MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                    end
                  end
                end
              end
              2'b10: begin
                MEM_1024_20[ B_ADDR_lat[13:4] ] [19:10] = B_DIN_lat[19:10];
                
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                  begin
                    // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (B_DIN_lat[19:10] === A_DIN_lat[19:10])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      // Collision, write from port A at the same address.
                      if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                        collisions_detected = collisions_detected + 1;
                        $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                        $display (" Time: %0.1fps! Instance: %m ", $realtime );
                      end
                      if ( B_Addr_Overlap_L < 10 )
                          B_Addr_Overlap_L = 10;
                      for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                        MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                    end
                  end
                end
              end
              2'b11: begin
                MEM_1024_20[ B_ADDR_lat[13:4] ] [19:0] = B_DIN_lat[19:0];
                
                if ( NO_COLLISION == 0 ) begin
                  if ( (Same_Addr === 1'b1) && (A_BLK_lat === 1'b1) && ((A_CLK_re_active + TC2CWWH) >= B_CLK_re_active) && ((A_WE_lat[0]||A_WE_lat[1] == 1'b1) && (TWOPORT === 1'b0)))
                  begin
                    // Collision, write from port A at the same address. If the port A write data and port B write data is not same,
                    // then the written data would be unknown
                    if (B_DIN_lat[19:0] === A_DIN_lat[19:0])
                    begin
                      //Data write successfull 
                    end
                    else
                    begin
                      // Collision, write from port A at the same address.
                      if ( (WARNING_MSGS_ON == 1) && ( (collisions_detected < COLLISION_WARN_MSGS) || (COLLISION_WARN_MSGS < 0) ) ) begin
                        collisions_detected = collisions_detected + 1;
                        $display (" ** Warning: Port B Write and Port A Write to the same address at the same time. Memory contents at conflicting address is unknown"); 
                        $display (" Time: %0.1fps! Instance: %m ", $realtime );
                      end
                      for ( j=B_Addr_Overlap_L; j<=B_Addr_Overlap_H; j=j+1 )
                        MEM_1024_20[ B_ADDR_lat[13:4] ] [j] = 1'bx;
                    end
                  end
                end
                
              end
              default: begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: B_WEN state of %2b is not allowed for a width of %3b at time %0.1fps! Instance: %m", 
                    B_WE_lat, B_WIDTH, $realtime);
              end
            endcase
          end
          3'b101 : begin //x40/x33 with ecc  
            // two-port mode
            if( ECC_EN === 1'b1 ) begin
              if( (&B_WE_lat) && (&A_WE_lat) ) begin
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 ] [ 9:0 ] = B_DIN_lat[9:0];
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 ] [ 16:10 ] = B_DIN_lat[16:10];
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 + 1 ] [ 9:0 ] = A_DIN_lat[9:0];
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 + 1 ] [ 15:10 ] = A_DIN_lat[15:10];
                //MEM_1024_20[ B_ADDR_lat[13:5] * 2 + 1 ] [ 19:13 ] = calc_ecc[6:0];
              end
            end
            else begin
              if( B_WE_lat[0] === 1'b1 ) begin
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 ] [ 9:0 ] = B_DIN_lat[9:0];
              end
              else if( B_WE_lat[0] === 1'bx ) begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: B_WEN[0] went unknown at time %0.1fps! Instance: %m", $realtime);
              end
              if( B_WE_lat[1] === 1'b1 ) begin
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 ] [ 19:10 ] = B_DIN_lat[19:10];
              end
              else if( B_WE_lat[1] === 1'bx ) begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: B_WEN[1] went unknown at time %0.1fps! Instance: %m", $realtime);
              end
              if( A_WE_lat[0] === 1'b1 ) begin
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 + 1 ] [ 9:0 ] = A_DIN_lat[9:0];
              end
              else if( A_WE_lat[0] === 1'bx ) begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: A_WEN[0] went unknown at time %0.1fps! Instance: %m", $realtime);
              end
              if( A_WE_lat[1] === 1'b1 ) begin
                MEM_1024_20[ B_ADDR_lat[13:5] * 2 + 1 ] [ 19:10 ] = A_DIN_lat[19:10];
              end
              else if( A_WE_lat[1] === 1'bx ) begin
                if ( WARNING_MSGS_ON == 1 )
                  $display ("Warning: A_WEN[1] went unknown at time %0.1fps! Instance: %m", $realtime);
              end
            end
          end
          default: begin
            if ( WARNING_MSGS_ON == 1 )
              $display ("Warning: invalid WIDTH configuration on Port B at time %0.1fps! Legal Width: 1,2,5,10,20,40/30 with ecc. Instance: %m", $realtime);
          end
        endcase
      end
    end
    else if ( (B_RE_lat === 1'b1) && (B_WE_lat === 2'b00) && (TWOPORT === 1'b0) ) begin
      // read mode, only for dual-port
      if ((^B_ADDR_int) === 1'bx) begin
        if ( WARNING_MSGS_ON == 1 )
          $display(" Warning: Illegal address on port B at time %0.1fps! Instance: %m", $realtime);
      end
      else if( (B_BLK_lat === 1'b1) ) begin
        // reading is only allowed when there is no reset on port B and blk select is high
        case (B_WIDTH)
          3'b000 : begin //x1
            B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ B_ADDR_lat[1:0] + (5 * B_ADDR_lat[3:2]) ];
          end
          3'b001 : begin //x2
            B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 0 + (5 * B_ADDR_lat[3:2]) ];
            B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[1] * 2) + 1 + (5 * B_ADDR_lat[3:2]) ];
          end
          3'b010 : begin //x5
            B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 0 + (10 * B_ADDR_lat[3]) ];
            B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 1 + (10 * B_ADDR_lat[3]) ];
            B_DOUT_stg[2] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 2 + (10 * B_ADDR_lat[3]) ];
            B_DOUT_stg[3] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 3 + (10 * B_ADDR_lat[3]) ];
            B_DOUT_stg[4] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[2] * 5) + 4 + (10 * B_ADDR_lat[3]) ];
          end
          3'b011 : begin //x10
            B_DOUT_stg[0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 0 ];
            B_DOUT_stg[1] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 1 ];
            B_DOUT_stg[2] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 2 ];
            B_DOUT_stg[3] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 3 ];
            B_DOUT_stg[4] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 4 ];
            B_DOUT_stg[5] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 5 ];
            B_DOUT_stg[6] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 6 ];
            B_DOUT_stg[7] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 7 ];
            B_DOUT_stg[8] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 8 ];
            B_DOUT_stg[9] = MEM_1024_20[ B_ADDR_lat[13:4] ] [ (B_ADDR_lat[3] * 10) + 9 ];
          end
          3'b100 : begin //x20
            B_DOUT_stg[19:0] = MEM_1024_20[ B_ADDR_lat[13:4] ] [19:0];
          end
          3'b101 : begin  
            // In two-port mode, read is not controlled by port B controls
          end
          default: begin
            if ( WARNING_MSGS_ON == 1 )
              $display ("Warning: invalid WIDTH configuration on Port B at time %0.1fps! Legal Width: 1,2,5,10,20,40/33 with ecc. Instance: %m", $realtime);
          end
        endcase
      end
    end
  end
  
`ifndef VERIFICATION
  task collision;
    input [13:0]    R_ADDR;
    input [13:0]    W_ADDR;
    input [2:0]     R_WIDTH;
    input [2:0]     W_WIDTH;
    output          same_address;
    output [19:0]   collision;
    
    integer     j;
    reg         addr_overlap_0, addr_overlap_1, addr_overlap;
    reg [19:0]  collision_0, collision_1;
    reg         addr_match;
    
    begin
      addr_match = 0;
      if(TWOPORT && (R_ADDR[13:5] === W_ADDR[13:5])) addr_match = 1;
      else if (!TWOPORT && (R_ADDR[13:4] === W_ADDR[13:4])) addr_match = 1;

      if (addr_match) begin
        case ( R_WIDTH )
          3'b000 : addr_overlap_0 = ( (R_ADDR[3:0] === W_ADDR[3:0]) ? 1'b1 : 1'b0 );
          3'b001 : addr_overlap_0 = ( (R_ADDR[3:1] === W_ADDR[3:1]) ? 1'b1 : 1'b0 );
          3'b010 : addr_overlap_0 = ( (R_ADDR[3:2] === W_ADDR[3:2]) ? 1'b1 : 1'b0 );
          3'b011 : addr_overlap_0 = ( (R_ADDR[ 3 ] === W_ADDR[ 3 ]) ? 1'b1 : 1'b0 );
          3'b100, 3'b101 : 
                   addr_overlap_0 = 1'b1;
          default : addr_overlap_0 = 1'b0;
        endcase
        
        case ( W_WIDTH )
          3'b000 : addr_overlap_1 = ( (R_ADDR[3:0] === W_ADDR[3:0]) ? 1'b1 : 1'b0 );
          3'b001 : addr_overlap_1 = ( (R_ADDR[3:1] === W_ADDR[3:1]) ? 1'b1 : 1'b0 );
          3'b010 : addr_overlap_1 = ( (R_ADDR[3:2] === W_ADDR[3:2]) ? 1'b1 : 1'b0 );
          3'b011 : addr_overlap_1 = ( (R_ADDR[ 3 ] === W_ADDR[ 3 ]) ? 1'b1 : 1'b0 );
          3'b100, 3'b101 : 
                   addr_overlap_1 = 1'b1;
          default : addr_overlap_1 = 1'b0;
        endcase
        
        same_address = ( (R_WIDTH === W_WIDTH) || (R_WIDTH[2] & W_WIDTH[2] === 1'b1) ) ? addr_overlap_0 :
                       ( ( R_WIDTH > W_WIDTH ) ? addr_overlap_0 :
                       ( ( R_WIDTH < W_WIDTH ) ? addr_overlap_1 : 1'b0 ) );
                  
        case ( R_WIDTH )
          3'b000 : collision_0 = 20'h1;
          3'b001 : collision_0 = 20'h3;
          3'b010 : collision_0 = 20'h1F;
          3'b011 : collision_0 = 20'h3FF;
          3'b100, 3'b101 : 
                   collision_0 = 20'hFFFFF;
          default : collision_0 = 20'h0;
        endcase
        
        case ( W_WIDTH )
          3'b000 : collision_1 = 2**( W_ADDR[2:0] + (10 * W_ADDR[3]) );
          3'b001 : collision_1 = 2**( (W_ADDR[2:1] * 2) + 1 + (10 * W_ADDR[3]) ) + 2**( (W_ADDR[2:1] * 2) + 0 + (10 * W_ADDR[3]) );
          3'b010 : collision_1 = 2**( (W_ADDR[2] * 5) + 4 + (10 * W_ADDR[3]) ) +  2**( (W_ADDR[2] * 5) + 3 + (10 * W_ADDR[3]) ) + 2**( (W_ADDR[2] * 5) + 2 + (10 * W_ADDR[3]) ) + 
                                 2**( (W_ADDR[2] * 5) + 1 + (10 * W_ADDR[3]) ) + 2**( (W_ADDR[2] * 5) + 0 + (10 * W_ADDR[3]) );
          3'b011 : collision_1 = 2**( (W_ADDR[3] * 10) + 9 ) +  2**( (W_ADDR[3] * 10) + 8 ) + 2**( (W_ADDR[3] * 10) + 7 ) + 2**( (W_ADDR[3] * 10) + 6 ) +
                                 2**( (W_ADDR[3] * 10) + 5 ) + 2**( (W_ADDR[3] * 10) + 4 ) + 2**( (W_ADDR[3] * 10) + 3 ) +
                                 2**( (W_ADDR[3] * 10) + 2 ) + 2**( (W_ADDR[3] * 10) + 1 ) + 2**( (W_ADDR[3] * 10) + 0 );
          default : collision_1 = 20'h0;
        endcase
        
        collision = ( (R_WIDTH === W_WIDTH) || (R_WIDTH[2] & W_WIDTH[2] === 1'b1) ) ? collision_0 & {20{addr_overlap_0}}:
                    ( ( R_WIDTH > W_WIDTH ) ? collision_1 & {20{addr_overlap_1}} :
                    ( ( R_WIDTH < W_WIDTH ) ? collision_0 & {20{addr_overlap_0}} : 20'h0 ) );

      end
      else begin
        addr_overlap   = 1'b0;
        addr_overlap_0 = 1'b0;
        addr_overlap_1 = 1'b0;
        collision      = 20'h0;
        same_address   = 1'b0;
        addr_match     = 1'b0;
      end
      
    end
  endtask
`endif
`ifdef VERIFICATION
  task collision;
    input [13:0]    R_ADDR;
    input [13:0]    W_ADDR;
    input [2:0]     R_WIDTH;
    input [2:0]     W_WIDTH;
    output          same_address;
    output [19:0]   collision;
    
    begin
      collision      = 20'h0;
      same_address   = 1'b0;
    end
  endtask
`endif
  
  task address_overlap;
    input [13:0]   addr_r, addr_w;
    input [2:0]    width_r, width_w;
    output         same_address;
    output integer overlap_min;
    output integer overlap_max;
    integer        max_r, max_w, min_r, min_w;
    begin
      same_address = 1'b0;
      overlap_max = 0;
      overlap_min = 0;
      get_range(addr_r[3:0],width_r,max_r,min_r);
      get_range(addr_w[3:0],width_w,max_w,min_w);
      
      if( (width_r > 3'b100) || (width_w > 3'b100) ) begin
        if( (width_r < 3'b101) && (width_w > 3'b100) ) begin
          // write port uses the 40 bits
          if( (addr_r[13:4] === addr_w[13:4]) || (addr_r[13:4] === addr_w[13:4]+1'b1) ) begin
            same_address = 1'b1;
            overlap_max = max_r;
            overlap_min = min_r;
          end
        end
        else begin
          if( (width_r > 3'b100) && (width_w < 3'b101) ) begin
            // read port uses the 40 bits
            if( addr_r[13:4] === addr_w[13:4] ) begin
              same_address = 1'b1;
              overlap_max = max_w;
              overlap_min = min_w;
            end
            else begin
              if( (addr_r[13:4]+1'b1) === addr_w[13:4] ) begin
                same_address = 1'b1;
                overlap_max = max_w + 20;
                overlap_min = min_w + 20;
              end
            end
          end
          else begin
            if( (width_r > 3'b100) && (width_w > 3'b100) ) begin
              // Both read and write are 40 bits wide
              if( addr_r[13:4] === addr_w[13:4] ) begin
                same_address = 1'b1;
                overlap_max = 39;
                overlap_min = 0;
              end
            end
          end
        end
      end
      else begin
        if( addr_r[13:4] === addr_w[13:4] ) begin
          //if( (width_r === 3'b100) || (width_w === 3'b100) ) begin
          if( ((width_r === 3'b100) || (width_w === 3'b100)) && !(|B_WE_lat && |A_WE_lat)) begin
            // One of the ports uses the full 20 bits width
            same_address = 1'b1;
            if (width_r > width_w) begin
              overlap_max = max_r;
              overlap_min = min_r;
            end
            else begin
              overlap_max = max_w;
              overlap_min = min_w;
            end
          end
          else begin
            if( width_r > width_w ) begin
              if( (max_r >= max_w) && (min_r <= min_w) ) begin
                same_address = 1'b1;
                overlap_max = max_w;
                overlap_min = min_w;
              end
              else if( (max_r >= max_w) && (min_r >= min_w) && (min_r <= max_w) ) begin
                same_address = 1'b1;
                overlap_max = max_w;
                overlap_min = min_r;
              end
              else if( (max_r < max_w) && (min_r < min_w) && (max_r >= min_w) ) begin
                same_address = 1'b1;
                overlap_max = max_r;
                overlap_min = min_w;
              end
            end
            else begin
              if( (max_w >= max_r) && (min_w <= min_r) ) begin
                same_address = 1'b1;
                overlap_max = max_r;
                overlap_min = min_r;
              end
              else if( (max_w >= max_r) && (min_w >= min_r) && (min_w <= max_r) ) begin
                same_address = 1'b1;
                overlap_max = max_r;
                overlap_min = min_w;
              end
              else if( (max_w < max_r) && (min_w < min_r) && (max_w >= min_r) ) begin
                same_address = 1'b1;
                overlap_max = max_w;
                overlap_min = min_r;
              end
            end
          end
        end
      end
    end
  endtask
  
  task get_range;
    input [3:0]    addr;
    input [2:0]    width;
    output integer max;
    output integer min;
    integer        address;
    begin
      case( width )
        3'b000 : begin
            address = addr[0]*1 + addr[1]*2 + addr[2]*4;
            //address = addr[0]*1 + addr[1]*2 + addr[2]*4 + addr[3]*8;
            //min = address;
            min = address + addr[3]*10;
            max = min;
          end
        3'b001 : begin
            address = addr[1]*1 + addr[2]*2;
            //address = addr[1]*1 + addr[2]*2 + addr[3]*4;
            //min = address * 2;
            min = (address * 2) + addr[3]*10;
            max = min + 1;
          end
        3'b010 : begin
            address = addr[2]*1;
            //address = addr[2]*1 + addr[3]*2;
            //min = address * 5;
            min = (address * 5) + addr[3]*10;
            max = min + 4;
          end
        3'b011 : begin
            address = addr[3]*1;
            min = address * 10;
            max = min + 9;
          end
        3'b100 : begin
            min = 0;
            max = 19;
          end
        3'b101 : begin
            min = 0;
            max = 39;
          end
      endcase
    end
  endtask
  
  task emulate_ecc;
    output      ecc_db_detect;
    output      ecc_sb_correct;
    real rand_number;
    reg sign;
    reg [10:0]exponent;
    reg [51:0]mantissa;
    begin
      ecc_db_detect = 1'b0;
      ecc_sb_correct = 1'b0;
      
      // for generating random  real value 1st time (rand number in between 0 and 1)
      sign           = 1'b0;
      exponent       = 1013+($urandom%10);
      mantissa       = $urandom;
      rand_number = $bitstoreal({sign,exponent,mantissa});
      //$display("Note: rand number for 1st time = %0f",rand_number);
      
      if(rand_number> ERROR_PROBABILITY) begin
         ecc_sb_correct = 0;
         ecc_db_detect  = 0;
      end else begin
         ecc_sb_correct = 1;
         //if(ECC_WARNING_MSGS_ON == 1)
           //$display("Warning: ECC SINGLE BIT CORRECT IS 1");
         // for generating random  real value 2nd time (rand number in between 0 and 1) 
         sign           = 1'b0;
         exponent       = 1013+($urandom%10);
         mantissa       = $urandom;
         rand_number = $bitstoreal({sign,exponent,mantissa});
         //$display("Note: rand number for 2nd time = %0f",rand_number);
         
         if(rand_number> CORRECTION_PROBABILITY) begin
           ecc_db_detect = 1;
           if(ECC_WARNING_MSGS_ON == 1)
             $display("Warning: two or more errors detected and correction is not possible");
         end else begin
           ecc_db_detect = 0;
         end
      end
    end
  endtask
  

  // Timing checks conditions
  assign DINA_EN_DP = ~TWOPORT;
  assign DOUTA_FF_EN_1 = A_DOUT_EN;
  assign DINB_EN_TP = TWOPORT;
  assign DINB_EN_DP = ~TWOPORT;
  assign DOUTB_FF_EN_1 = B_DOUT_EN;  
  
  specify
    specparam PATHPULSE$     = (1, 1);
    
    ( posedge A_CLK *> (A_DOUT[0]+:A_DOUT[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[1]+:A_DOUT[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[2]+:A_DOUT[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[3]+:A_DOUT[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[4]+:A_DOUT[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[5]+:A_DOUT[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[6]+:A_DOUT[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[7]+:A_DOUT[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[8]+:A_DOUT[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[9]+:A_DOUT[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[10]+:A_DOUT[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[11]+:A_DOUT[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[12]+:A_DOUT[12]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[13]+:A_DOUT[13]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[14]+:A_DOUT[14]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[15]+:A_DOUT[15]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[16]+:A_DOUT[16]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[17]+:A_DOUT[17]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[18]+:A_DOUT[18]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK *> (A_DOUT[19]+:A_DOUT[19]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[0]+:B_DOUT[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[1]+:B_DOUT[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[2]+:B_DOUT[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[3]+:B_DOUT[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[4]+:B_DOUT[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[5]+:B_DOUT[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[6]+:B_DOUT[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[7]+:B_DOUT[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[8]+:B_DOUT[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[9]+:B_DOUT[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[10]+:B_DOUT[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[11]+:B_DOUT[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[12]+:B_DOUT[12]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[13]+:B_DOUT[13]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[14]+:B_DOUT[14]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[15]+:B_DOUT[15]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[16]+:B_DOUT[16]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[17]+:B_DOUT[17]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[18]+:B_DOUT[18]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( TWOPORT ) ( posedge A_CLK *> (B_DOUT[19]+:B_DOUT[19]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[0]+:B_DOUT[0]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[1]+:B_DOUT[1]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[2]+:B_DOUT[2]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[3]+:B_DOUT[3]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[4]+:B_DOUT[4]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[5]+:B_DOUT[5]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[6]+:B_DOUT[6]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[7]+:B_DOUT[7]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[8]+:B_DOUT[8]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[9]+:B_DOUT[9]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[10]+:B_DOUT[10]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[11]+:B_DOUT[11]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[12]+:B_DOUT[12]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[13]+:B_DOUT[13]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[14]+:B_DOUT[14]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[15]+:B_DOUT[15]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[16]+:B_DOUT[16]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[17]+:B_DOUT[17]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[18]+:B_DOUT[18]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    if( ~TWOPORT ) ( posedge B_CLK *> (B_DOUT[19]+:B_DOUT[19]) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
        ( negedge A_BLK_EN[0] *> (A_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[0] *> (A_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge A_BLK_EN[1] *> (A_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[1] *> (A_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge A_BLK_EN[2] *> (A_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_BLK_EN[2] *> (A_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge B_BLK_EN[0] *> (B_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[0] *> (B_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge B_BLK_EN[1] *> (B_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[1] *> (B_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge B_BLK_EN[2] *> (B_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_BLK_EN[2] *> (B_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge A_DOUT_ARST_N *> (A_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (A_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge A_DOUT_ARST_N *> (B_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (B_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( negedge B_DOUT_ARST_N *> (B_DOUT[0]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[1]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[2]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[3]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[4]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[5]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[6]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[7]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[8]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[9]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[10]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[11]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[12]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[13]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[14]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[15]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[16]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[17]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[18]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (B_DOUT[19]+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    ( posedge A_CLK         *> (DB_DETECT+:DB_DETECT) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge A_CLK         *> (SB_CORRECT+:SB_CORRECT) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge B_CLK         *> (DB_DETECT+:DB_DETECT) )   = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( posedge B_CLK         *> (SB_CORRECT+:SB_CORRECT) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);

    ( negedge A_DOUT_ARST_N *> (DB_DETECT+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge A_DOUT_ARST_N *> (SB_CORRECT+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (DB_DETECT+:1'b0) )  = (1.0:1.0:1.0, 1.0:1.0:1.0);
    ( negedge B_DOUT_ARST_N *> (SB_CORRECT+:1'b0) ) = (1.0:1.0:1.0, 1.0:1.0:1.0);
    
    /* Timing Checks */
    $setup(posedge A_ADDR[0], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[1], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[2], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[3], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[4], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[5], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[6], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[7], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[8], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[9], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[10], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[11], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[12], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_ADDR[13], posedge A_CLK, 0.0, NOTIFY_REG);
    
    $setup(negedge A_ADDR[0], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[1], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[2], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[3], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[4], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[5], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[6], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[7], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[8], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[9], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[10], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[11], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[12], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_ADDR[13], posedge A_CLK, 0.0, NOTIFY_REG);
    
    $hold(posedge A_CLK, posedge A_ADDR[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[2], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[3], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[4], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[5], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[6], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[7], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[8], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[9], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[10], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[11], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[12], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_ADDR[13], 0.0, NOTIFY_REG);

    $hold(posedge A_CLK, negedge A_ADDR[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[2], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[3], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[4], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[5], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[6], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[7], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[8], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[9], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[10], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[11], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[12], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_ADDR[13], 0.0, NOTIFY_REG);
    
    $setup(posedge A_DIN[0], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[1], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[2], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[3], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[4], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[5], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[6], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[7], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[8], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[9], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[10], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[11], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[12], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[13], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[14], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[15], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[16], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[17], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[18], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[19], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);

    $setup(negedge A_DIN[0], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[1], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[2], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[3], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[4], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[5], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[6], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[7], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[8], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[9], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[10], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[11], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[12], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[13], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[14], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[15], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[16], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[17], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[18], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[19], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);

    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[2], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[3], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[4], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[5], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[6], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[7], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[8], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[9], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[10], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[11], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[12], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[13], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[14], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[15], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[16], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[17], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[18], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_DIN[19], 0.0, NOTIFY_REG);

    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[2], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[3], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[4], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[5], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[6], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[7], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[8], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[9], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[10], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[11], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[12], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[13], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[14], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[15], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[16], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[17], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[18], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_DIN[19], 0.0, NOTIFY_REG);
    
    $setup(posedge A_BLK_EN[0], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_BLK_EN[1], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(posedge A_BLK_EN[2], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_BLK_EN[0], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_BLK_EN[1], posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_BLK_EN[2], posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_BLK_EN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_BLK_EN[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_BLK_EN[2], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_BLK_EN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_BLK_EN[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_BLK_EN[2], 0.0, NOTIFY_REG);
    
    $setup(posedge A_WEN[0], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge A_WEN[1], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_WEN[0], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge A_WEN[1], posedge A_CLK &&& DINA_EN_DP, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, posedge A_WEN[1], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINA_EN_DP, negedge A_WEN[1], 0.0, NOTIFY_REG);
    $setup(posedge A_REN, posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_REN, posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_REN, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_REN, 0.0, NOTIFY_REG);
    
    $setup(posedge A_DOUT_SRST_N, posedge A_CLK &&& DOUTA_FF_EN_1, 0.0, NOTIFY_REG);
    $setup(negedge A_DOUT_SRST_N, posedge A_CLK &&& DOUTA_FF_EN_1, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DOUTA_FF_EN_1, posedge A_DOUT_SRST_N, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DOUTA_FF_EN_1, negedge A_DOUT_SRST_N, 0.0, NOTIFY_REG);
    
    $setup(posedge A_DOUT_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge A_DOUT_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_DOUT_EN, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_DOUT_EN, 0.0, NOTIFY_REG);
    
    $setup(posedge B_ADDR[0], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[1], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[2], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[3], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[4], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[5], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[6], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[7], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[8], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[9], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[10], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[11], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[12], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_ADDR[13], posedge B_CLK, 0.0, NOTIFY_REG);

    $setup(negedge B_ADDR[0], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[1], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[2], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[3], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[4], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[5], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[6], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[7], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[8], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[9], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[10], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[11], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[12], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_ADDR[13], posedge B_CLK, 0.0, NOTIFY_REG);

    $hold(posedge B_CLK, posedge B_ADDR[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_ADDR[	13	], 0.0, NOTIFY_REG);

    $hold(posedge B_CLK, negedge B_ADDR[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_ADDR[	13	], 0.0, NOTIFY_REG);

    $setup(posedge B_DIN[	0	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	1	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	2	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	3	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	4	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	5	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	6	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	7	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	8	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	9	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	10	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	11	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	12	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	13	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	14	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	15	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	16	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	17	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	18	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_DIN[	19	], posedge B_CLK, 0.0, NOTIFY_REG);

    $setup(negedge B_DIN[	0	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	1	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	2	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	3	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	4	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	5	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	6	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	7	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	8	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	9	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	10	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	11	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	12	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	13	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	14	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	15	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	16	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	17	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	18	], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DIN[	19	], posedge B_CLK, 0.0, NOTIFY_REG);

    $hold(posedge B_CLK, posedge B_DIN[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	13	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	14	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	15	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	16	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	17	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	18	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DIN[	19	], 0.0, NOTIFY_REG);

    $hold(posedge B_CLK, negedge B_DIN[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	13	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	14	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	15	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	16	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	17	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	18	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DIN[	19	], 0.0, NOTIFY_REG);

    $setup(posedge A_DIN[	0	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	1	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	2	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	3	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	4	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	5	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	6	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	7	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	8	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	9	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	10	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	11	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	12	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	13	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	14	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	15	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	16	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	17	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	18	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_DIN[	19	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);

    $setup(negedge A_DIN[	0	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	1	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	2	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	3	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	4	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	5	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	6	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	7	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	8	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	9	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	10	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	11	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	12	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	13	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	14	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	15	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	16	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	17	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	18	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_DIN[	19	], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);

    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	13	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	14	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	15	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	16	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	17	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	18	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_DIN[	19	], 0.0, NOTIFY_REG);

    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	0	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	1	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	2	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	3	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	4	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	5	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	6	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	7	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	8	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	9	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	10	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	11	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	12	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	13	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	14	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	15	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	16	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	17	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	18	], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_DIN[	19	], 0.0, NOTIFY_REG);

    $setup(posedge B_BLK_EN[0], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge B_BLK_EN[1], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(posedge B_BLK_EN[2], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge B_BLK_EN[0], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge B_BLK_EN[1], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge B_BLK_EN[2], posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, posedge B_BLK_EN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, posedge B_BLK_EN[2], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, posedge B_BLK_EN[1], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, negedge B_BLK_EN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, negedge B_BLK_EN[1], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, negedge B_BLK_EN[2], 0.0, NOTIFY_REG);
    
    $setup(posedge B_WEN[0], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(posedge B_WEN[1], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_WEN[0], posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_WEN[1], posedge B_CLK, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_WEN[1], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_WEN[1], 0.0, NOTIFY_REG);
    
    $setup(posedge B_REN, posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $setup(negedge B_REN, posedge B_CLK &&& DINB_EN_DP, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, posedge B_REN, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_DP, negedge B_REN, 0.0, NOTIFY_REG);
    
    $setup(posedge B_REN, posedge A_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge B_REN, posedge A_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINB_EN_TP, posedge B_REN, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK &&& DINB_EN_TP, negedge B_REN, 0.0, NOTIFY_REG);
    
    $setup(posedge A_WEN[0], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(posedge A_WEN[1], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_WEN[0], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $setup(negedge A_WEN[1], posedge B_CLK &&& DINB_EN_TP, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, posedge A_WEN[1], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_WEN[0], 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DINB_EN_TP, negedge A_WEN[1], 0.0, NOTIFY_REG);
    
    $setup(posedge B_DOUT_SRST_N, posedge B_CLK &&& DOUTB_FF_EN_1, 0.0, NOTIFY_REG);
    $setup(negedge B_DOUT_SRST_N, posedge B_CLK &&& DOUTB_FF_EN_1, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DOUTB_FF_EN_1, posedge B_DOUT_SRST_N, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK &&& DOUTB_FF_EN_1, negedge B_DOUT_SRST_N, 0.0, NOTIFY_REG);
    
    $setup(posedge B_DOUT_EN, posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DOUT_EN, posedge B_CLK, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DOUT_EN, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DOUT_EN, 0.0, NOTIFY_REG);
    
    $setup(posedge B_DOUT_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge B_DOUT_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge B_DOUT_EN, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge B_DOUT_EN, 0.0, NOTIFY_REG);
    
    $setup(posedge ECC_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $setup(negedge ECC_EN, posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge ECC_EN, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge ECC_EN, 0.0, NOTIFY_REG);
    $setup(posedge ECC_EN, posedge B_CLK, 0.0, NOTIFY_REG);
    $setup(negedge ECC_EN, posedge B_CLK, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge ECC_EN, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge ECC_EN, 0.0, NOTIFY_REG);
    
    $width(posedge A_CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge A_CLK, 0.0, 0, NOTIFY_REG);    
    $width(posedge B_CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge B_CLK, 0.0, 0, NOTIFY_REG);    
    $width(negedge B_DOUT_ARST_N, 0.0, 0, NOTIFY_REG);
    $width(posedge B_DOUT_ARST_N, 0.0, 0, NOTIFY_REG);

    $width(negedge A_DOUT_ARST_N, 0.0, 0, NOTIFY_REG);
    $width(posedge A_DOUT_ARST_N, 0.0, 0, NOTIFY_REG);
    
    $width(negedge A_BLK_EN[0], 0.0, 0, NOTIFY_REG);
    $width(posedge A_BLK_EN[0], 0.0, 0, NOTIFY_REG);
    $width(negedge A_BLK_EN[1], 0.0, 0, NOTIFY_REG);
    $width(posedge A_BLK_EN[1], 0.0, 0, NOTIFY_REG);
    $width(negedge A_BLK_EN[2], 0.0, 0, NOTIFY_REG);
    $width(posedge A_BLK_EN[2], 0.0, 0, NOTIFY_REG);
    
    $width(negedge B_BLK_EN[0], 0.0, 0, NOTIFY_REG);
    $width(posedge B_BLK_EN[0], 0.0, 0, NOTIFY_REG);
    $width(negedge B_BLK_EN[1], 0.0, 0, NOTIFY_REG);
    $width(posedge B_BLK_EN[1], 0.0, 0, NOTIFY_REG);
    $width(negedge B_BLK_EN[2], 0.0, 0, NOTIFY_REG);
    $width(posedge B_BLK_EN[2], 0.0, 0, NOTIFY_REG);
    
    $recovery(posedge A_DOUT_ARST_N, posedge A_CLK, 0.0, NOTIFY_REG);
    $recovery(negedge A_DOUT_ARST_N, posedge A_CLK, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, posedge A_DOUT_ARST_N, 0.0, NOTIFY_REG);
    $hold(posedge A_CLK, negedge A_DOUT_ARST_N, 0.0, NOTIFY_REG);
    $recovery(posedge B_DOUT_ARST_N, posedge B_CLK, 0.0, NOTIFY_REG);
    $recovery(negedge B_DOUT_ARST_N, posedge B_CLK, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, posedge B_DOUT_ARST_N, 0.0, NOTIFY_REG);
    $hold(posedge B_CLK, negedge B_DOUT_ARST_N, 0.0, NOTIFY_REG);
    
    $period( posedge A_CLK, 0.0, NOTIFY_REG );
    $period( negedge A_CLK, 0.0, NOTIFY_REG );
    $period( posedge B_CLK, 0.0, NOTIFY_REG );
    $period( negedge B_CLK, 0.0, NOTIFY_REG );
  endspecify
endmodule



`timescale 1 ps / 1 ps

module UPROM (
                  output                                BUSY,
                  output                        [8:0]   DATAR,
                  input                        [15:0]   ADDR,
                  input                                 BLK);
                  
  parameter MEMORYFILE = "";
  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.
  parameter TPD = 0;
  reg NOTIFY_REG;
  
  reg [8:0] MEM_256_9 [0:2**16-1];
  
  wire          BUSY_zd;
  reg  [ 8:0]   DATAR_zd;
  wire [15:0]   ADDR_int;
  wire          BLK_int;


  buf #(TPD:TPD:TPD) U10  ( ADDR_int[0]                                 , ADDR[0]                                      );
  buf #(TPD:TPD:TPD) U11  ( ADDR_int[1]                                 , ADDR[1]                                      );
  buf #(TPD:TPD:TPD) U12  ( ADDR_int[2]                                 , ADDR[2]                                      );
  buf #(TPD:TPD:TPD) U13  ( ADDR_int[3]                                 , ADDR[3]                                      );
  buf #(TPD:TPD:TPD) U14  ( ADDR_int[4]                                 , ADDR[4]                                      );
  buf #(TPD:TPD:TPD) U15  ( ADDR_int[5]                                 , ADDR[5]                                      );
  buf #(TPD:TPD:TPD) U16  ( ADDR_int[6]                                 , ADDR[6]                                      );
  buf #(TPD:TPD:TPD) U17  ( ADDR_int[7]                                 , ADDR[7]                                      );
  buf #(TPD:TPD:TPD) U18  ( ADDR_int[8]                                 , ADDR[8]                                      );
  buf #(TPD:TPD:TPD) U19  ( ADDR_int[9]                                 , ADDR[9]                                      );
  buf #(TPD:TPD:TPD) U20  ( ADDR_int[10]                                , ADDR[10]                                     );
  buf #(TPD:TPD:TPD) U21  ( ADDR_int[11]                                , ADDR[11]                                     );
  buf #(TPD:TPD:TPD) U22  ( ADDR_int[12]                                , ADDR[12]                                     );
  buf #(TPD:TPD:TPD) U23  ( ADDR_int[13]                                , ADDR[13]                                     );
  buf #(TPD:TPD:TPD) U24  ( ADDR_int[14]                                , ADDR[14]                                     );
  buf #(TPD:TPD:TPD) U25  ( ADDR_int[15]                                , ADDR[15]                                     );
  buf #(TPD:TPD:TPD) U26  ( BLK_int                                     , BLK                                         );
  pmos U0   ( BUSY                                        , BUSY_zd                                     , 0 );
  pmos U1   ( DATAR[0]                                    , DATAR_zd[0]                                 , 0 );
  pmos U2   ( DATAR[1]                                    , DATAR_zd[1]                                 , 0 );
  pmos U3   ( DATAR[2]                                    , DATAR_zd[2]                                 , 0 );
  pmos U4   ( DATAR[3]                                    , DATAR_zd[3]                                 , 0 );
  pmos U5   ( DATAR[4]                                    , DATAR_zd[4]                                 , 0 );
  pmos U6   ( DATAR[5]                                    , DATAR_zd[5]                                 , 0 );
  pmos U7   ( DATAR[6]                                    , DATAR_zd[6]                                 , 0 );
  pmos U8   ( DATAR[7]                                    , DATAR_zd[7]                                 , 0 );
  pmos U9   ( DATAR[8]                                    , DATAR_zd[8]                                 , 0 );
  
  initial begin
    if ( MEMORYFILE != "")
      $readmemb ( MEMORYFILE, MEM_256_9 );
  end
  
  assign    BUSY_zd           = 1'b0;
  
  always @( ADDR_int or BLK_int ) begin
    if ( BLK_int === 1'bx && ($time > 0) && (WARNING_MSGS_ON == 1) )
        $display("Warning : BLK went unknown at time %0.1fps. Instance: %m",$realtime);
    else begin
      if ( BLK_int === 1'b0 )
        DATAR_zd[8:0] = 9'b0;
      else begin
        if ( (^ADDR_int === 1'bx) && ($time > 0) && (WARNING_MSGS_ON == 1) )
            $display("Warning : ADDR went unknown at time %0.1fps. Instance: %m",$realtime);
         else
          DATAR_zd[8:0] = MEM_256_9[ADDR_int];
      end
    end
  end
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH  = (0.1:0.1:0.1);
		specparam tpdHL  = (0.1:0.1:0.1);
    
    (ADDR[0] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[0] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[1] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[1] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[2] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[2] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[3] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[3] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[4] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[4] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[5] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[5] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[6] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[6] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[7] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[7] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[8] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[8] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[9] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[9] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    
    
    (ADDR[10] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[10] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[11] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[11] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[12] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[12] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[13] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[13] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[14] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[14] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[15] => DATAR[0] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[1] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[2] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[3] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[4] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[5] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[6] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[7] ) = ( tpdLH, tpdHL );
    (ADDR[15] => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (BLK => DATAR[0] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[1] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[2] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[3] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[4] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[5] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[6] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[7] ) = ( tpdLH, tpdHL );
    (BLK => DATAR[8] ) = ( tpdLH, tpdHL );
    
    (ADDR[0] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[1] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[2] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[3] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[4] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[5] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[6] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[7] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[8] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[9] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[10] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[11] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[12] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[13] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[14] => BUSY ) = ( tpdLH, tpdHL );
    (ADDR[15] => BUSY ) = ( tpdLH, tpdHL );
    
    $width(negedge ADDR[0], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[0], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[1], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[1], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[2], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[2], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[3], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[3], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[4], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[4], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[5], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[5], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[6], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[6], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[7], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[7], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[8], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[8], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[9], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[9], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[10], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[10], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[11], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[11], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[12], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[12], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[13], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[13], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[14], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[14], 0.0, 0, NOTIFY_REG);
    $width(negedge ADDR[15], 0.0, 0, NOTIFY_REG);
    $width(posedge ADDR[15], 0.0, 0, NOTIFY_REG);
    
    $width(negedge BLK, 0.0, 0, NOTIFY_REG);
    $width(posedge BLK, 0.0, 0, NOTIFY_REG);
    
  endspecify
endmodule

                  

/*--------------------------------------------------------------------
 CELL NAME : MACC_PA_COMB
---------------------------------------------------------------------*/
`timescale 1ps/1ps
module MACC_PA_COMB(a, b, c, d, pcin, fdbk,
                 sel,
                 shft, sub, pasub,
                 carryin,
                 simd, dotp, ovfl_ext_sel,
                 p, ovfl_ext);

  input signed [17:0] a;
  input signed [17:0] b;
  input signed [47:0] c;
  input signed [17:0] d;
  input signed [47:0] pcin;
  input signed [47:0] fdbk;
  input [1:0]  sel;
  input shft;
  input sub;
  input pasub;
  input carryin;
  input simd;
  input dotp;
  input ovfl_ext_sel;
  output [47:0] p;
  output ovfl_ext;

  wire ovfl, ext, ovfl_upper, ext_upper;
  wire signed [47:0] preshft, e;
  wire signed [1:0] signed_carryin;
  wire signed [18:0] f;
  wire signed [48:0] prod_norm, prod_dotp, prod_dotp1, prod_dotp2;

  wire signed [49:0] sum, sum_norm, sum_dotp;
  wire signed [8:0] a_lower, a_upper, b_lower, b_upper, d_lower, d_upper;
  wire signed [9:0] f_lower, f_upper;

  wire signed [29:0] c_upper, e_upper, prod_simd_upper;
  wire signed [17:0] sum_lower;
  wire signed [31:0] sum_upper;

  assign signed_carryin = carryin ? 2'b01 : 2'b00;

  assign preshft  = sel[1] ? pcin : (sel[0] ? fdbk : 48'b0);
  assign e        = shft ? { {17{preshft[47]}}, preshft[47:17] } : preshft;

  // Normal mode:
  // Pre-adder
  assign f        = pasub ? (b - d) : (b + d);
  // Multiplier
  assign prod_norm = a * f;
  // Accumulator
  assign sum_norm = sub ? (c + e + signed_carryin - prod_norm) : (c + e + signed_carryin + prod_norm);

  // Split inputs for other modes
  assign a_lower = a[8:0];
  assign a_upper = a[17:9];
  assign b_lower = b[8:0];
  assign b_upper = b[17:9];
  assign c_upper = c[47:18];
  assign d_lower = d[8:0];
  assign d_upper = d[17:9];

  // Dot-product mode:
  // Pre-adder
  assign f_lower = pasub ? (b_lower - d_lower) : (b_lower + d_lower);
  assign f_upper = pasub ? (b_upper - d_upper) : (b_upper + d_upper);
  // Multiplier
  assign prod_dotp1 = a_upper * f_lower;
  assign prod_dotp2 = a_lower * f_upper;
  assign prod_dotp  = (sub ? ( prod_dotp1 - prod_dotp2 ) : ( prod_dotp1 + prod_dotp2 )) * 512;
  // Accumulator
  assign sum_dotp = c + e + signed_carryin + prod_dotp;


  // SUM for either Normal or DOTP mode, as well as OVFL and EXT flags
  assign sum  = dotp ? sum_dotp : sum_norm;
  assign ovfl = (sum[49] ^ sum[48]) | (sum[48] ^ sum[47]);
  assign ext  = c[47] ^ e[47] ^ sum[48];

  // SIMD mode:
  // Behavioral model ignores fabric input C[17:0], which is required to be 0 in SIMD mode
  // Behavioral model ignores the pre-adder input D[8:0], which is required to be 0 in SIMD mode
  assign e_upper = preshft[47:18];
  assign sum_lower = a_lower * b_lower + signed_carryin;
  assign prod_simd_upper = a_upper * f_upper;
  assign sum_upper = sub ? (c_upper + e_upper - prod_simd_upper) : (c_upper + e_upper + prod_simd_upper);
  assign ovfl_upper = (sum_upper[31] ^ sum_upper[30]) | (sum_upper[30] ^ sum_upper[29]);
  assign ext_upper = c_upper[29] ^ e_upper[29] ^ sum_upper[30];

  // Outputs.
  assign #100 p = simd ? {sum_upper[29:0], sum_lower} : sum[47:0];
  assign #100 ovfl_ext = simd ? (ovfl_ext_sel ? ext_upper : ovfl_upper) : (ovfl_ext_sel ? ext : ovfl);
endmodule

/*--------------------------------------------------------------------
 CELL NAME : MACC_PA_IP
---------------------------------------------------------------------*/
module MACC_PA_IP (// common
                  input        CLK,
                  //control signals
                  input        AL_N,
                  input [17:0] B2,
                  input        A_ADDR_D,
                  input        B2_EN,
                  //A input
                  input [17:0] A,
                  input        A_EN,
                  input        A_SRST_N,
                  input        A_BYPASS,
                  // B input
                  input [17:0] B,
                  input        B_EN,
                  input        B_SRST_N,
                  input        B_BYPASS,
                  // C input
                  input [47:0] C,
                  input        C_ARST_N,
                  input        C_EN,
                  input        C_SRST_N,
                  input        C_BYPASS,
                  input        CARRYIN,
                  // D input
                  input [17:0] D,
                  input        D_ARST_N,
                  input        D_EN,
                  input        D_SRST_N,
                  input        D_BYPASS,
                  // P controls
                  input        P_EN,
                  input        P_SRST_N,
                  input        P_BYPASS,
                  // CDIN input
                  input [47:0] CDIN,
                  // PASUB input
                  input        PASUB,
                  input        PASUB_EN,
                  input        PASUB_SL_N,
                  input        PASUB_AD_N,
                  input        PASUB_SD_N,
                  input        PASUB_BYPASS,
                  // SEL input
                  input [1:0]  CDIN_FDBK_SEL,
                  input        CDIN_FDBK_SEL_EN,
                  input        CDIN_FDBK_SEL_SL_N,
                  input [1:0]  CDIN_FDBK_SEL_AD_N,
                  input [1:0]  CDIN_FDBK_SEL_SD_N,
                  input        CDIN_FDBK_SEL_BYPASS,
                  // SHFT input
                  input       ARSHFT17,
                  input       ARSHFT17_EN,
                  input       ARSHFT17_SL_N,
                  input       ARSHFT17_AD_N,
                  input       ARSHFT17_SD_N,
                  input       ARSHFT17_BYPASS,
                  // SUB input
                  input        SUB,
                  input        SUB_EN,
                  input        SUB_SL_N,
                  input        SUB_AD_N,
                  input        SUB_SD_N,
                  input        SUB_BYPASS,
                  // common
                  input SIMD,
                  input DOTP,
                  input OVFL_CARRYOUT_SEL,

                  output [17:0] B1,
                  output [17:0] BCOUT,
                  output        A_ADDR_D_SH,
                  output        B2_EN_SH,
                  output        OVFL_CARRYOUT,
                  output [47:0] P,
                  output [47:0] CDOUT);

  reg NOTIFY_REG;

  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.

  wire [17:0] a_comb, b_comb, d_comb;
  wire [47:0] c_comb, p_comb, fdbk_comb;
  wire [1:0]  sel_comb;
  wire        carryin_comb, shft_comb, sub_comb, pasub_comb, ovfl_ext_comb;
  wire [47:0] P_zd;
  
  wire [3:0] warning;

  // Feedthrough signals
  assign BCOUT[17:0]      = B2[17:0];
  assign A_ADDR_D_SH      = A_ADDR_D;
  assign B2_EN_SH         = B2_EN;
  assign B1[17:0]         = b_comb[17:0];
  
  assign fdbk_comb[47:0]  = P[47:0];
  assign CDOUT[47:0]      = P_zd[47:0];

  assign warning[0] = SIMD & DOTP;                              // SIMD and DOPT enabled at the same time
  assign warning[1] = SIMD & (|c_comb[17:0]);                   // SIMD: C[17:0] must be zero
  assign warning[2] = SIMD & (|d_comb[8:0]);                    // SIMD: D[8:0] must be zero
  assign warning[3] = SIMD & shft_comb;                         // SIMD: shft must be zero

  always @( warning ) begin
    if ( WARNING_MSGS_ON == 1 ) begin
      case ( warning )
        4'b???1 :
                $display(" ** Warning: SIMD, DOTP are enabled at the same time. Time: %0.1fps, Instance: %m", $realtime);
        4'b??1? :
                $display(" ** Warning: C[17:0] should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
        4'b?1?? :
                $display(" ** Warning: D[8:0] should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
        4'b1??? :
                $display(" ** Warning: ARSHFT17 should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
      endcase
    end
  end

  OUTPUT_PMOS #(.WIDTH(48)) pmos_0(.OUT( P[47:0] ), .IN( P_zd[47:0] ));
  
  // Pipeline input data registers
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_areg( .q( a_comb[17:0] ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( A[17:0] ), .bypass( A_BYPASS ), .sd( 1'b0 ), .en( A_EN ), .sln( A_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_breg( .q( b_comb[17:0] ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( B[17:0] ), .bypass( B_BYPASS ), .sd( 1'b0 ), .en( B_EN ), .sln( B_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(48) )
            u_creg( .q( c_comb[47:0] ), .adn( 1'b1 ), .aln( C_ARST_N ), .clk( CLK ), .d( C[47:0] ), .bypass( C_BYPASS ), .sd( 1'b0 ), .en( C_EN ), .sln( C_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_dreg( .q( d_comb[17:0] ), .adn( 1'b1 ), .aln( D_ARST_N ), .clk( CLK ), .d( D[17:0] ), .bypass( D_BYPASS ), .sd( 1'b0 ), .en( D_EN ), .sln( D_SRST_N ) );
  PIPE_REG_BYPASS
            u_cireg( .q( carryin_comb ), .adn( 1'b1 ), .aln( C_ARST_N ), .clk( CLK ), .d( CARRYIN ), .bypass( C_BYPASS ), .sd( 1'b0 ), .en( C_EN ), .sln( C_SRST_N ) );

  // Pipeline input control registers
  PIPE_REG_BYPASS #( .WIDTH(2), .WIDE_LOAD_DATA(1) )
        u_selreg( .q( sel_comb[1:0] ), .adn( CDIN_FDBK_SEL_AD_N[1:0] ), .aln( AL_N ), .clk( CLK ), .d( CDIN_FDBK_SEL[1:0] ), 
                  .bypass( CDIN_FDBK_SEL_BYPASS ), .sd( ~CDIN_FDBK_SEL_SD_N[1:0] ), .en( CDIN_FDBK_SEL_EN ), .sln( CDIN_FDBK_SEL_SL_N ) );
  PIPE_REG_BYPASS 
            u_pasubreg( .q( pasub_comb ), .adn( PASUB_AD_N ), .aln( AL_N ), .clk( CLK ), .d( PASUB ), .bypass( PASUB_BYPASS ), .sd( ~PASUB_SD_N ), .en( PASUB_EN ), .sln( PASUB_SL_N ) );
  PIPE_REG_BYPASS
            u_subreg( .q( sub_comb ), .adn( SUB_AD_N ), .aln( AL_N ), .clk( CLK ), .d( SUB ), .bypass( SUB_BYPASS ), .sd( ~SUB_SD_N ), .en( SUB_EN ), .sln( SUB_SL_N ) );
  PIPE_REG_BYPASS
            u_shftreg( .q( shft_comb ), .adn( ARSHFT17_AD_N ), .aln( AL_N ), .clk( CLK ), .d( ARSHFT17 ), .bypass( ARSHFT17_BYPASS ), .sd( ~ARSHFT17_SD_N ), .en( ARSHFT17_EN ), .sln( ARSHFT17_SL_N ) );

  // Pipeline output data registers
  PIPE_REG_BYPASS #( .WIDTH(48) )
            u_preg( .q( P_zd ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( p_comb ), .bypass( P_BYPASS ), .sd( 1'b0 ), .en( P_EN ), .sln( P_SRST_N ) );
  PIPE_REG_BYPASS
            u_coreg( .q( OVFL_CARRYOUT ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( ovfl_ext_comb ), .bypass( P_BYPASS ), .sd( 1'b0 ), .en( P_EN ), .sln( P_SRST_N ) );


  MACC_PA_COMB u0 ( .a            ( a_comb[17:0] ),
                    .b            ( b_comb[17:0] ),
                    .c            ( c_comb[47:0] ),
                    .d            ( d_comb[17:0] ),
                    .pcin         ( CDIN[47:0] ),
                    .fdbk         ( fdbk_comb[47:0] ),
                    .sel          ( sel_comb ),
                    .shft         ( shft_comb ),
                    .sub          ( sub_comb ),
                    .pasub        ( pasub_comb ),
                    .carryin      ( carryin_comb ),
                    // Static Inputs
                    .simd         ( SIMD ), 
                    .dotp         ( DOTP ), 
                    .ovfl_ext_sel ( OVFL_CARRYOUT_SEL ),
                    // Outputs
                    .p            ( p_comb[47:0] ),
                    .ovfl_ext     ( ovfl_ext_comb ) );
endmodule


`timescale 1ps/1ps
module ROM16x18(// Common
                input   [3:0]   ADDRD,
                output  [17:0]  Y
                );
  parameter [287:0] INIT  = 288'h0;

  genvar i;

  generate
    for(i=0; i < 18; i=i+1) begin : ROM
      CFG4  #(.INIT({INIT[0*18+i],INIT[1*18+i],INIT[2*18+i],INIT[3*18+i],INIT[4*18+i],INIT[5*18+i],INIT[6*18+i],INIT[7*18+i],
               INIT[8*18+i],INIT[9*18+i],INIT[10*18+i],INIT[11*18+i],INIT[12*18+i],INIT[13*18+i],INIT[14*18+i],INIT[15*18+i]}))
            u_row(.A(ADDRD[0]), .B(ADDRD[1]), .C(ADDRD[2]), .D(ADDRD[3]), .Y(Y[i]));
    end
  endgenerate
endmodule

`timescale 1ps/1ps
module MACC_PA(// Common
            input        CLK,
            //control signals
            input        AL_N,          // Async load for all registers other than C, CARRYIN and D
            // A input
            input [17:0] A,
            input        A_EN,
            input        A_SRST_N,
            input        A_BYPASS,
            // B input
            input [17:0] B,
            input        B_EN,
            input        B_SRST_N,
            input        B_BYPASS,
            // C input
            input [47:0] C,
            input        C_ARST_N,        // Async load for C and CARRYIN registers
            input        C_EN,
            input        C_SRST_N,
            input        C_BYPASS,
            // CARRYIN input
            input        CARRYIN,
            // D input
            input [17:0] D,
            input        D_ARST_N,        // Async load for D register
            input        D_EN,
            input        D_SRST_N,
            input        D_BYPASS,
            // P controls
            input        P_EN,
            input        P_SRST_N,
            input        P_BYPASS,
            // CDIN input
            input [47:0] CDIN,
            // Pre-Adder SUB input
            input        PASUB,
            input        PASUB_EN,
            input        PASUB_SL_N,
            input        PASUB_AD_N,
            input        PASUB_SD_N,
            input        PASUB_BYPASS,
            // Feedback/CDIN select input
            input [1:0]  CDIN_FDBK_SEL,
            input        CDIN_FDBK_SEL_EN,
            input        CDIN_FDBK_SEL_SL_N,
            input [1:0]  CDIN_FDBK_SEL_AD_N,
            input [1:0]  CDIN_FDBK_SEL_SD_N,
            input        CDIN_FDBK_SEL_BYPASS,
            // SHIFT input
            input        ARSHFT17,
            input        ARSHFT17_EN,
            input        ARSHFT17_SL_N,
            input        ARSHFT17_AD_N,
            input        ARSHFT17_SD_N,
            input        ARSHFT17_BYPASS,
            // SUB input
            input        SUB,
            input        SUB_EN,
            input        SUB_SL_N,
            input        SUB_AD_N,
            input        SUB_SD_N,
            input        SUB_BYPASS,
            // Static Signals
            input        SIMD,
            input        DOTP,
            input        OVFL_CARRYOUT_SEL,
            // Outputs
            output        OVFL_CARRYOUT,
            output [47:0] P,
            output [47:0] CDOUT);

  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.

  MACC_IP #(.WARNING_MSGS_ON( WARNING_MSGS_ON ))
          u_macc (
                  .CLK(CLK), .A(A), .A_EN(A_EN), .A_SRST_N(A_SRST_N), .A_BYPASS(A_BYPASS),
                  .AL_N(AL_N),
                  // SAR 93473: making the tieoffs 1's to match the silicon tieoffs
                  .B2({18{1'b1}}), .A_ADDR_D(1'b1), .B2_EN(1'b1),
                  .B(B), .B_EN(B_EN), .B_SRST_N(B_SRST_N), .B_BYPASS(B_BYPASS),
                  .C(C), .C_ARST_N(C_ARST_N), .C_EN(C_EN), .C_SRST_N(C_SRST_N), .C_BYPASS(C_BYPASS),
                  .CARRYIN(CARRYIN),
                  .D(D), .D_ARST_N(D_ARST_N), .D_EN(D_EN), .D_SRST_N(D_SRST_N), .D_BYPASS(D_BYPASS),
                  .P_EN(P_EN), .P_SRST_N(P_SRST_N), .P_BYPASS(P_BYPASS),
                  .CDIN(CDIN),
                  .PASUB(PASUB), .PASUB_EN(PASUB_EN), .PASUB_SL_N(PASUB_SL_N), .PASUB_AD_N(PASUB_AD_N), .PASUB_SD_N(PASUB_SD_N), .PASUB_BYPASS(PASUB_BYPASS),
                  .CDIN_FDBK_SEL(CDIN_FDBK_SEL),   .CDIN_FDBK_SEL_EN(CDIN_FDBK_SEL_EN),   .CDIN_FDBK_SEL_SL_N(CDIN_FDBK_SEL_SL_N),   .CDIN_FDBK_SEL_AD_N(CDIN_FDBK_SEL_AD_N), .CDIN_FDBK_SEL_SD_N(CDIN_FDBK_SEL_SD_N), .CDIN_FDBK_SEL_BYPASS(CDIN_FDBK_SEL_BYPASS),
                  .ARSHFT17(ARSHFT17), .ARSHFT17_EN(ARSHFT17_EN), .ARSHFT17_SL_N(ARSHFT17_SL_N), .ARSHFT17_AD_N(ARSHFT17_AD_N), .ARSHFT17_SD_N(ARSHFT17_SD_N), .ARSHFT17_BYPASS(ARSHFT17_BYPASS),
                  .SUB(SUB),   .SUB_EN(SUB_EN),   .SUB_SL_N(SUB_SL_N),   .SUB_AD_N(SUB_AD_N),   .SUB_SD_N(SUB_SD_N),   .SUB_BYPASS(SUB_BYPASS),
                  .SIMD(SIMD), .DOTP(DOTP), .OVFL_CARRYOUT_SEL(OVFL_CARRYOUT_SEL),
                  .B1( ), .BCOUT( ), .A_ADDR_D_SH( ), .B2_EN_SH( ),
                  .OVFL_CARRYOUT(OVFL_CARRYOUT),
                  .P(P), .CDOUT(CDOUT));
endmodule

`timescale 1ps/1ps
module MACC_PA_BC_ROM(// Common
            input        CLK,
            //control signals
            input        AL_N,          // Async load for all registers other than C, CARRYIN and D
            input [3:0]  ROM_ADDR,      // ROM address input
            // A input
            input [17:0] A,
            input        A_EN,
            input        A_SRST_N,
            input        A_BYPASS,
            // B input
            input [17:0] B,
            input        B_EN,
            input        B_SRST_N,
            input        B_BYPASS,
            // C input
            input [47:0] C,
            input        C_ARST_N,        // Async load for C and CARRYIN registers
            input        C_EN,
            input        C_SRST_N,
            input        C_BYPASS,
            // CARRYIN input
            input        CARRYIN,
            // D input
            input [17:0] D,
            input        D_ARST_N,        // Async load for D register
            input        D_EN,
            input        D_SRST_N,
            input        D_BYPASS,
            // P controls
            input        P_EN,
            input        P_SRST_N,
            input        P_BYPASS,
            // CDIN input
            input [47:0] CDIN,
            // Pre-Adder SUB input
            input        PASUB,
            input        PASUB_EN,
            input        PASUB_SL_N,
            input        PASUB_AD_N,
            input        PASUB_SD_N,
            input        PASUB_BYPASS,
            // Feedback/CDIN select input
            input [1:0]  CDIN_FDBK_SEL,
            input        CDIN_FDBK_SEL_EN,
            input        CDIN_FDBK_SEL_SL_N,
            input [1:0]  CDIN_FDBK_SEL_AD_N,
            input [1:0]  CDIN_FDBK_SEL_SD_N,
            input        CDIN_FDBK_SEL_BYPASS,
            // SHIFT input
            input        ARSHFT17,
            input        ARSHFT17_EN,
            input        ARSHFT17_SL_N,
            input        ARSHFT17_AD_N,
            input        ARSHFT17_SD_N,
            input        ARSHFT17_BYPASS,
            // SUB input
            input        SUB,
            input        SUB_EN,
            input        SUB_SL_N,
            input        SUB_AD_N,
            input        SUB_SD_N,
            input        SUB_BYPASS,
            // Static Signals
            input        SIMD,
            input        DOTP,
            input        OVFL_CARRYOUT_SEL,
            // B2 Shadow Registers control signals
            output [17:0] B2,
            input         B2_EN,
            input         B2_SRST_N,
            input         B2_BYPASS,
            // Virtual Static Signals
            input         USE_ROM,
            // Virtual Outputs
            output [17:0] BCOUT,
            // Outputs
            output        OVFL_CARRYOUT,
            output [47:0] P,
            output [47:0] CDOUT);

  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.

  parameter [287:0] INIT  = 288'h0;

  wire  [17:0]  A_rom, A_int;
  wire  [17:0]  B1;
  wire          A_ADDR_D_SH;


  ROM16x18 #(.INIT(INIT))
          u_rom(.ADDRD    ( { A_ADDR_D_SH, ROM_ADDR[2:0] } ),
                .Y        ( A_rom ) );

  // This mux should be optimized by compile to remove unused logic/inputs. USE_ROM is a static/coinfiguration signal.
  assign A_int[17:0] = USE_ROM  ? A_rom[17:0] : A[17:0];
  
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_b2( .q( B2[17:0] ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( B1[17:0] ), .bypass( B2_BYPASS ), .sd( 1'b0 ), .en( B2_EN_SH ), .sln( B2_SRST_N ) );

  MACC_IP #(.WARNING_MSGS_ON( WARNING_MSGS_ON ))
          u_macc (
                  .CLK(CLK), .A(A_int), .A_EN(A_EN), .A_SRST_N(A_SRST_N), .A_BYPASS(A_BYPASS),
                  .AL_N(AL_N),
                  .B2(B2[17:0]), .A_ADDR_D(ROM_ADDR[3]), .B2_EN(B2_EN),
                  .B(B), .B_EN(B_EN), .B_SRST_N(B_SRST_N), .B_BYPASS(B_BYPASS),
                  .C(C), .C_ARST_N(C_ARST_N), .C_EN(C_EN), .C_SRST_N(C_SRST_N), .C_BYPASS(C_BYPASS),
                  .CARRYIN(CARRYIN),
                  .D(D), .D_ARST_N(D_ARST_N), .D_EN(D_EN), .D_SRST_N(D_SRST_N), .D_BYPASS(D_BYPASS),
                  .P_EN(P_EN), .P_SRST_N(P_SRST_N), .P_BYPASS(P_BYPASS),
                  .CDIN(CDIN),
                  .PASUB(PASUB), .PASUB_EN(PASUB_EN), .PASUB_SL_N(PASUB_SL_N), .PASUB_AD_N(PASUB_AD_N), .PASUB_SD_N(PASUB_SD_N), .PASUB_BYPASS(PASUB_BYPASS),
                  .CDIN_FDBK_SEL(CDIN_FDBK_SEL),   .CDIN_FDBK_SEL_EN(CDIN_FDBK_SEL_EN),   .CDIN_FDBK_SEL_SL_N(CDIN_FDBK_SEL_SL_N),   .CDIN_FDBK_SEL_AD_N(CDIN_FDBK_SEL_AD_N), .CDIN_FDBK_SEL_SD_N(CDIN_FDBK_SEL_SD_N), .CDIN_FDBK_SEL_BYPASS(CDIN_FDBK_SEL_BYPASS),
                  .ARSHFT17(ARSHFT17), .ARSHFT17_EN(ARSHFT17_EN), .ARSHFT17_SL_N(ARSHFT17_SL_N), .ARSHFT17_AD_N(ARSHFT17_AD_N), .ARSHFT17_SD_N(ARSHFT17_SD_N), .ARSHFT17_BYPASS(ARSHFT17_BYPASS),
                  .SUB(SUB),   .SUB_EN(SUB_EN),   .SUB_SL_N(SUB_SL_N),   .SUB_AD_N(SUB_AD_N),   .SUB_SD_N(SUB_SD_N),   .SUB_BYPASS(SUB_BYPASS),
                  .SIMD(SIMD), .DOTP(DOTP), .OVFL_CARRYOUT_SEL(OVFL_CARRYOUT_SEL),
                  .B1(B1[17:0]), .BCOUT(BCOUT[17:0]), .A_ADDR_D_SH(A_ADDR_D_SH), .B2_EN_SH(B2_EN_SH),
                  .OVFL_CARRYOUT(OVFL_CARRYOUT),
                  .P(P), .CDOUT(CDOUT));
endmodule

`timescale 1ps/1ps
module MACC(// Common
            input [1:0] CLK,
            // A input
            input [17:0] A,
            input [1:0]  A_EN,
            input [1:0]  A_ARST_N,
            input [1:0]  A_SRST_N,
            input [1:0]  A_BYPASS,
            // B input
            input [17:0] B,
            input [1:0]  B_EN,
            input [1:0]  B_ARST_N,
            input [1:0]  B_SRST_N,
            input [1:0]  B_BYPASS,
            // C input
            input [43:0] C,
            input        CARRYIN,
            input [1:0]  C_EN,
            input [1:0]  C_ARST_N,
            input [1:0]  C_SRST_N,
            input [1:0]  C_BYPASS,
            // CDIN input
            input [43:0] CDIN,
            // SUB input
            input       SUB,
            input       SUB_EN,
            input       SUB_AL_N,
            input       SUB_SL_N,
            input       SUB_BYPASS,
            input       SUB_AD,
            input       SUB_SD_N,
            // ARSHFT17 input
            input       ARSHFT17,
            input       ARSHFT17_EN,
            input       ARSHFT17_AL_N,
            input       ARSHFT17_SL_N,
            input       ARSHFT17_BYPASS,
            input       ARSHFT17_AD,
            input       ARSHFT17_SD_N,
            // FDBKSEL input
            input       FDBKSEL,
            input       FDBKSEL_EN,
            input       FDBKSEL_AL_N,
            input       FDBKSEL_SL_N,
            input       FDBKSEL_BYPASS,
            input       FDBKSEL_AD,
            input       FDBKSEL_SD_N,
            // CDSEL input
            input       CDSEL,
            input       CDSEL_EN,
            input       CDSEL_AL_N,
            input       CDSEL_SL_N,
            input       CDSEL_BYPASS,
            input       CDSEL_AD,
            input       CDSEL_SD_N,
            // P controls
            input [1:0] P_EN,
            input [1:0] P_ARST_N,
            input [1:0] P_SRST_N,
            input [1:0] P_BYPASS,
            // Static Signals
            input SIMD,
            input DOTP,
            input OVFL_CARRYOUT_SEL,
            // Outputs
            output [43:0] P,
            output        OVFL_CARRYOUT,
            output [43:0] CDOUT);

  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.

  always @(CLK) begin
    // MACC_PA uses only one clock, CLK[0] has to be the same as CLK[1].
    if( (CLK[0] !== CLK[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both CLK pins have to be tied together. Instance: %m",$realtime);
  end

  always @(A_ARST_N or B_ARST_N or P_ARST_N or SUB_AL_N or ARSHFT17_AL_N or FDBKSEL_AL_N or CDSEL_AL_N) begin
    if( (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) ) begin
      // MACC_PA uses only one reset (AL_N) for A, B, P, SUB, SHFT, SEL ports
      if ( (|A_ARST_N || |B_ARST_N || |P_ARST_N || SUB_AL_N || ARSHFT17_AL_N || FDBKSEL_AL_N || CDSEL_AL_N) !== (&A_ARST_N && &B_ARST_N && &P_ARST_N && SUB_AL_N && ARSHFT17_AL_N && FDBKSEL_AL_N && CDSEL_AL_N) )
        /* we need all the bits to be 1 --> the result of the AND and OR is high. Or, all the bits to be zero --> the result of the AND and OR is low */
        $display("Error : Pins A_ARST_N, B_ARST_N, P_ARST_N, SUB_AL_N, ARSHFT17_AL_N, FDBKSEL_AL_N, and CDSEL_AL_N have to be tied together. Instance: %m",$realtime);
    end
  end

  always @(A_EN) begin
    // MACC_PA uses only one A_EN.
    if( (A_EN[0] !== A_EN[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both A_EN pins have to be tied together. Instance: %m",$realtime);
  end
  always @(A_SRST_N) begin
    // MACC_PA uses only one A_SRST_N.
    if( (A_SRST_N[0] !== A_SRST_N[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both A_SRST_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(A_BYPASS) begin
    // MACC_PA uses only one A_BYPASS.
    if( (A_BYPASS[0] !== A_BYPASS[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both A_BYPASS pins have to be tied together. Instance: %m",$realtime);
  end

  always @(B_EN) begin
    // MACC_PA uses only one B_EN.
    if( (B_EN[0] !== B_EN[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both B_EN pins have to be tied together. Instance: %m",$realtime);
  end
  always @(B_SRST_N) begin
    // MACC_PA uses only one B_SRST_N.
    if( (B_SRST_N[0] !== B_SRST_N[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both B_SRST_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(B_BYPASS) begin
    // MACC_PA uses only one B_BYPASS.
    if( (B_BYPASS[0] !== B_BYPASS[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both B_BYPASS pins have to be tied together. Instance: %m",$realtime);
  end

  always @(C_ARST_N) begin
    // MACC_PA uses only one C_AL_N.
    if( (C_ARST_N[0] !== C_ARST_N[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both C_ARST_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(C_EN) begin
    // MACC_PA uses only one C_EN.
    if( (C_EN[0] !== C_EN[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both C_EN pins have to be tied together. Instance: %m",$realtime);
  end
  always @(C_SRST_N) begin
    // MACC_PA uses only one C_SRST_N.
    if( (C_SRST_N[0] !== C_SRST_N[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both C_SRST_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(C_BYPASS) begin
    // MACC_PA uses only one C_BYPASS.
    if( (C_BYPASS[0] !== C_BYPASS[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both C_BYPASS pins have to be tied together. Instance: %m",$realtime);
  end

  always @(P_EN) begin
    // MACC_PA uses only one P_EN.
    if( (P_EN[0] !== P_EN[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both P_EN pins have to be tied together. Instance: %m",$realtime);
  end
  always @(P_SRST_N) begin
    // MACC_PA uses only one P_SRST_N.
    if( (P_SRST_N[0] !== P_SRST_N[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both P_SRST_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(P_BYPASS) begin
    // MACC_PA uses only one P_BYPASS.
    if( (P_BYPASS[0] !== P_BYPASS[1]) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both P_BYPASS pins have to be tied together. Instance: %m",$realtime);
  end

  always @(FDBKSEL_EN or CDSEL_EN) begin
    // MACC_PA uses only one EN pin for the CDSEL and FDBKSEL.
    if( (FDBKSEL_EN !== CDSEL_EN) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both FDBKSEL_EN and CDSEL_EN pins have to be tied together. Instance: %m",$realtime);
  end
  always @(FDBKSEL_SL_N or CDSEL_SL_N) begin
    // MACC_PA uses only one SL_N pin for the CDSEL and FDBKSEL.
    if( (FDBKSEL_SL_N !== CDSEL_SL_N) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both FDBKSEL_SL_N and CDSEL_SL_N pins have to be tied together. Instance: %m",$realtime);
  end
  always @(FDBKSEL_BYPASS or CDSEL_BYPASS) begin
    // MACC_PA uses only one BYPASS pin for the CDSEL and FDBKSEL.
    if( (FDBKSEL_BYPASS !== CDSEL_BYPASS) && (WARNING_MSGS_ON === 1'b1) && ($realtime > 0) )
      $display("Error : Both FDBKSEL_BYPASS and CDSEL_BYPASS pins have to be tied together. Instance: %m",$realtime);
  end

  MACC_PA #(.WARNING_MSGS_ON( WARNING_MSGS_ON ))
          u_macc (.CLK(CLK[0]), .AL_N(A_ARST_N[0]),
                  .A(A), .A_EN(A_EN[1]), .A_SRST_N(A_SRST_N[1]), .A_BYPASS(A_BYPASS[1]),
                  .B(B), .B_EN(B_EN[1]), .B_SRST_N(B_SRST_N[1]), .B_BYPASS(B_BYPASS[1]),
                  .C({4'b0,C[43:0]}), .C_ARST_N(C_ARST_N[1]), .C_EN(C_EN[1]), .C_SRST_N(C_SRST_N[1]), .C_BYPASS(C_BYPASS[1]),
                  .CARRYIN(CARRYIN),
                  .D(18'b0), .D_ARST_N(1'b0), .D_EN(1'b1), .D_SRST_N(1'b1), .D_BYPASS(1'b1),              // Not avaialble in the MACC macro
                  .P_EN(P_EN[1]), .P_SRST_N(P_SRST_N[1]), .P_BYPASS(P_BYPASS[1]),
                  .CDIN({4'b0,CDIN[43:0]}),
                  // Not available in the MACC macro
                  .PASUB(1'b0), .PASUB_EN(1'b1), .PASUB_SL_N(1'b1), .PASUB_AD_N(1'b1), .PASUB_SD_N(1'b1), .PASUB_BYPASS(1'b1),
                  // Concatenation of the CDESL and FDBKSEL
                  .CDIN_FDBK_SEL({CDSEL,FDBKSEL}), .CDIN_FDBK_SEL_EN(FDBKSEL_EN), .CDIN_FDBK_SEL_SL_N(FDBKSEL_SL_N), .CDIN_FDBK_SEL_AD_N({~CDSEL_AD,~FDBKSEL_AD}),
                  .CDIN_FDBK_SEL_SD_N({CDSEL_SD_N,FDBKSEL_SD_N}), .CDIN_FDBK_SEL_BYPASS(FDBKSEL_BYPASS),

                  .SUB(SUB), .SUB_EN(SUB_EN), .SUB_SL_N(SUB_SL_N), .SUB_AD_N(~SUB_AD), .SUB_SD_N(SUB_SD_N), .SUB_BYPASS(SUB_BYPASS),
                  .ARSHFT17(ARSHFT17), .ARSHFT17_EN(ARSHFT17_EN), .ARSHFT17_SL_N(ARSHFT17_SL_N), .ARSHFT17_AD_N(~ARSHFT17_AD), .ARSHFT17_SD_N(ARSHFT17_SD_N), .ARSHFT17_BYPASS(ARSHFT17_BYPASS),

                  .SIMD(SIMD), .DOTP(DOTP), .OVFL_CARRYOUT_SEL(OVFL_CARRYOUT_SEL),
                  .P({ncP_47,ncP_46,ncP_45,ncP_44,P[43:0]}), .OVFL_CARRYOUT(OVFL_CARRYOUT), .CDOUT({ncCD_47,ncCD_46,ncCD_45,ncCD_44,CDOUT[43:0]}));

endmodule

/*--------------------------------------------------------------------
 CELL NAME : MACC_IP
---------------------------------------------------------------------*/
module MACC_IP (// common
                  input        CLK,
                  //control signals
                  input        AL_N,
                  input [17:0] B2,
                  input        A_ADDR_D,
                  input        B2_EN,
                  //A input
                  input [17:0] A,
                  input        A_EN,
                  input        A_SRST_N,
                  input        A_BYPASS,
                  // B input
                  input [17:0] B,
                  input        B_EN,
                  input        B_SRST_N,
                  input        B_BYPASS,
                  // C input
                  input [47:0] C,
                  input        C_ARST_N,
                  input        C_EN,
                  input        C_SRST_N,
                  input        C_BYPASS,
                  input        CARRYIN,
                  // D input
                  input [17:0] D,
                  input        D_ARST_N,
                  input        D_EN,
                  input        D_SRST_N,
                  input        D_BYPASS,
                  // P controls
                  input        P_EN,
                  input        P_SRST_N,
                  input        P_BYPASS,
                  // CDIN input
                  input [47:0] CDIN,
                  // PASUB input
                  input        PASUB,
                  input        PASUB_EN,
                  input        PASUB_SL_N,
                  input        PASUB_AD_N,
                  input        PASUB_SD_N,
                  input        PASUB_BYPASS,
                  // SEL input
                  input [1:0]  CDIN_FDBK_SEL,
                  input        CDIN_FDBK_SEL_EN,
                  input        CDIN_FDBK_SEL_SL_N,
                  input [1:0]  CDIN_FDBK_SEL_AD_N,
                  input [1:0]  CDIN_FDBK_SEL_SD_N,
                  input        CDIN_FDBK_SEL_BYPASS,
                  // SHFT input
                  input       ARSHFT17,
                  input       ARSHFT17_EN,
                  input       ARSHFT17_SL_N,
                  input       ARSHFT17_AD_N,
                  input       ARSHFT17_SD_N,
                  input       ARSHFT17_BYPASS,
                  // SUB input
                  input        SUB,
                  input        SUB_EN,
                  input        SUB_SL_N,
                  input        SUB_AD_N,
                  input        SUB_SD_N,
                  input        SUB_BYPASS,
                  // common
                  input SIMD,
                  input DOTP,
                  input OVFL_CARRYOUT_SEL,

                  output [17:0] B1,
                  output [17:0] BCOUT,
                  output        A_ADDR_D_SH,
                  output        B2_EN_SH,
                  output        OVFL_CARRYOUT,
                  output [47:0] P,
                  output [47:0] CDOUT);

  reg NOTIFY_REG;

  parameter WARNING_MSGS_ON = `LEGUP_WARNING_MSG_ON;  // Used to turn off warnings about read &
                                                      // write to same address at same time.
                                                      // Default = on.  Set to 0 to turn them off.

  wire [17:0] a_comb, b_comb, d_comb;
  wire [47:0] c_comb, p_comb, fdbk_comb;
  wire [1:0]  sel_comb;
  wire        carryin_comb, shft_comb, sub_comb, pasub_comb, ovfl_ext_comb;
  wire [47:0] P_zd;
  
  wire [3:0] warning;

  // Feedthrough signals
  assign BCOUT[17:0]      = B2[17:0];
  assign A_ADDR_D_SH      = A_ADDR_D;
  assign B2_EN_SH         = B2_EN;
  assign B1[17:0]         = b_comb[17:0];
  
  assign fdbk_comb[47:0]  = P[47:0];
  assign CDOUT[47:0]      = P_zd[47:0];

  assign warning[0] = SIMD & DOTP;                              // SIMD and DOPT enabled at the same time
  assign warning[1] = SIMD & (|c_comb[17:0]);                   // SIMD: C[17:0] must be zero
  assign warning[2] = SIMD & (|d_comb[8:0]);                    // SIMD: D[8:0] must be zero
  assign warning[3] = SIMD & shft_comb;                         // SIMD: shft must be zero

  always @( warning ) begin
    if ( WARNING_MSGS_ON == 1 ) begin
      case ( warning )
        4'b???1 :
                $display(" ** Warning: SIMD, DOTP are enabled at the same time. Time: %0.1fps, Instance: %m", $realtime);
        4'b??1? :
                $display(" ** Warning: C[17:0] should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
        4'b?1?? :
                $display(" ** Warning: D[8:0] should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
        4'b1??? :
                $display(" ** Warning: ARSHFT17 should be tied low in SIMD mode. Time: %0.1fps, Instance: %m ", $realtime);
      endcase
    end
  end

  OUTPUT_PMOS #(.WIDTH(48)) pmos_0(.OUT( P[47:0] ), .IN( P_zd[47:0] ));
  
  // Pipeline input data registers
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_areg( .q( a_comb[17:0] ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( A[17:0] ), .bypass( A_BYPASS ), .sd( 1'b0 ), .en( A_EN ), .sln( A_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_breg( .q( b_comb[17:0] ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( B[17:0] ), .bypass( B_BYPASS ), .sd( 1'b0 ), .en( B_EN ), .sln( B_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(48) )
            u_creg( .q( c_comb[47:0] ), .adn( 1'b1 ), .aln( C_ARST_N ), .clk( CLK ), .d( C[47:0] ), .bypass( C_BYPASS ), .sd( 1'b0 ), .en( C_EN ), .sln( C_SRST_N ) );
  PIPE_REG_BYPASS #( .WIDTH(18) )
            u_dreg( .q( d_comb[17:0] ), .adn( 1'b1 ), .aln( D_ARST_N ), .clk( CLK ), .d( D[17:0] ), .bypass( D_BYPASS ), .sd( 1'b0 ), .en( D_EN ), .sln( D_SRST_N ) );
  PIPE_REG_BYPASS
            u_cireg( .q( carryin_comb ), .adn( 1'b1 ), .aln( C_ARST_N ), .clk( CLK ), .d( CARRYIN ), .bypass( C_BYPASS ), .sd( 1'b0 ), .en( C_EN ), .sln( C_SRST_N ) );

  // Pipeline input control registers
  PIPE_REG_BYPASS #( .WIDTH(2), .WIDE_LOAD_DATA(1) )
        u_selreg( .q( sel_comb[1:0] ), .adn( CDIN_FDBK_SEL_AD_N[1:0] ), .aln( AL_N ), .clk( CLK ), .d( CDIN_FDBK_SEL[1:0] ), 
                  .bypass( CDIN_FDBK_SEL_BYPASS ), .sd( ~CDIN_FDBK_SEL_SD_N[1:0] ), .en( CDIN_FDBK_SEL_EN ), .sln( CDIN_FDBK_SEL_SL_N ) );
  PIPE_REG_BYPASS 
            u_pasubreg( .q( pasub_comb ), .adn( PASUB_AD_N ), .aln( AL_N ), .clk( CLK ), .d( PASUB ), .bypass( PASUB_BYPASS ), .sd( ~PASUB_SD_N ), .en( PASUB_EN ), .sln( PASUB_SL_N ) );
  PIPE_REG_BYPASS
            u_subreg( .q( sub_comb ), .adn( SUB_AD_N ), .aln( AL_N ), .clk( CLK ), .d( SUB ), .bypass( SUB_BYPASS ), .sd( ~SUB_SD_N ), .en( SUB_EN ), .sln( SUB_SL_N ) );
  PIPE_REG_BYPASS
            u_shftreg( .q( shft_comb ), .adn( ARSHFT17_AD_N ), .aln( AL_N ), .clk( CLK ), .d( ARSHFT17 ), .bypass( ARSHFT17_BYPASS ), .sd( ~ARSHFT17_SD_N ), .en( ARSHFT17_EN ), .sln( ARSHFT17_SL_N ) );

  // Pipeline output data registers
  PIPE_REG_BYPASS #( .WIDTH(48) )
            u_preg( .q( P_zd ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( p_comb ), .bypass( P_BYPASS ), .sd( 1'b0 ), .en( P_EN ), .sln( P_SRST_N ) );
  PIPE_REG_BYPASS
            u_coreg( .q( OVFL_CARRYOUT ), .adn( 1'b1 ), .aln( AL_N ), .clk( CLK ), .d( ovfl_ext_comb ), .bypass( P_BYPASS ), .sd( 1'b0 ), .en( P_EN ), .sln( P_SRST_N ) );


  MACC_PA_COMB u0 ( .a            ( a_comb[17:0] ),
                    .b            ( b_comb[17:0] ),
                    .c            ( c_comb[47:0] ),
                    .d            ( d_comb[17:0] ),
                    .pcin         ( CDIN[47:0] ),
                    .fdbk         ( fdbk_comb[47:0] ),
                    .sel          ( sel_comb ),
                    .shft         ( shft_comb ),
                    .sub          ( sub_comb ),
                    .pasub        ( pasub_comb ),
                    .carryin      ( carryin_comb ),
                    // Static Inputs
                    .simd         ( SIMD ), 
                    .dotp         ( DOTP ), 
                    .ovfl_ext_sel ( OVFL_CARRYOUT_SEL ),
                    // Outputs
                    .p            ( p_comb[47:0] ),
                    .ovfl_ext     ( ovfl_ext_comb ) );
  wire tim_chk_0 = B_BYPASS & ~P_BYPASS;
  wire tim_chk_1 = A_BYPASS & ~P_BYPASS;
  wire tim_chk_2 = C_BYPASS & ~P_BYPASS;
  wire tim_chk_3 = B_BYPASS & ~P_BYPASS;
  wire tim_chk_4 = A_BYPASS & ~P_BYPASS;
  wire tim_chk_5 = B_BYPASS & ~P_BYPASS;
  wire tim_chk_6 = A_BYPASS & ~P_BYPASS;
  wire tim_chk_7 = A_BYPASS & ~P_BYPASS;
  wire tim_chk_8 = C_BYPASS & ~P_BYPASS;
  wire tim_chk_9 = C_BYPASS & ~P_BYPASS;
  wire tim_chk_10 = B_BYPASS & ~P_BYPASS;

  wire tim_chk_16 = (~A_BYPASS & ~P_BYPASS) | (~B_BYPASS & ~P_BYPASS) | (~C_BYPASS & ~P_BYPASS) ;
  wire tim_chk_17 = tim_chk_17 | (~ARSHFT17_BYPASS & ~P_BYPASS) | (~CDIN_FDBK_SEL_BYPASS & ~P_BYPASS) | (~CDIN_FDBK_SEL_BYPASS & ~P_BYPASS) | (~SUB_BYPASS & ~P_BYPASS) ;
  
  specify
    specparam PATHPULSE$     = (0.001, 0.001);
    specparam tpdLH_CLK_to_Q = (0.1:0.1:0.1);
    specparam tpdHL_CLK_to_Q = (0.1:0.1:0.1);
    specparam tpdLH_IN_to_OUT = (0.1:0.1:0.1);
    specparam tpdHL_IN_to_OUT = (0.1:0.1:0.1);
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[9], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge SUB, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[1], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[4], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[5], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[23], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[2], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[13], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[7], 0.0, NOTIFY_REG );
    $setup( posedge C[19], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[8], 0.0, NOTIFY_REG );
    $setup( negedge C[32], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[36], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[43] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[17], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[30], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~SUB_BYPASS, negedge SUB_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[43], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[25], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, negedge B[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge SUB, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[0], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[28], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[7], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge B[6], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[17], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[1], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[32], 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[26], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[38], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[14], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[4], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge A[0], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    $setup( negedge B[7], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    $setup( posedge A_EN, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[8], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[24], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $setup( negedge C[14], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[35], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C_SRST_N, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[14], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge C[41], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[14], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[9], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[26], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[12], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, posedge ARSHFT17_EN, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[16], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[1], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[15], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[5], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[31] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[12], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[9], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[0], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C_EN, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[2], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[1], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL_SL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[10], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[2], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_10, posedge B[10], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[12], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[21], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge A[11], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[7], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[17], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[17], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[2], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[11], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[8], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[16], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[26], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[30], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[16], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[6], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[6], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[22], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[10], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $setup( posedge A[16], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_4, negedge A[6], 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_4, posedge A[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[12], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[12], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[10], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[11], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A_EN, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[9], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[21], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, posedge C[29], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[18], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, negedge B[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[36], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[13], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    $setup( posedge C[7], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[32] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[17], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[18], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[30] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[10], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[34], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[17], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[22], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[5], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[11], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[11], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[16], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[10], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[40], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[20], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN_FDBK_SEL[1], posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[15], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[15], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[22], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[2], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[9], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[18] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[10], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[14], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge ARSHFT17_SL_N, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[7], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge P_EN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_10, negedge B[13], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[33], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[24], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[8], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[14], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[1], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[4], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[20], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[27], 0.0, NOTIFY_REG );
    $setup( posedge C[24], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[4], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[32], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[2], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[12], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_2, negedge C[8], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[18], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[36], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[42] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[26], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C_SRST_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[8], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[17], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[5], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[34], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge P_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[7], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[6], 0.0, NOTIFY_REG );
    $setup( posedge A_SRST_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[5], 0.0, NOTIFY_REG );
    $setup( posedge A[4], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[28], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[26], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[1], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[27], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[16], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[3], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~SUB_BYPASS, posedge SUB_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[2], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[16], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, posedge ARSHFT17, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[2], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, posedge ARSHFT17_SL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[9], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[11], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[19], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[22], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[12], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $setup( negedge CDIN[18], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[7], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[10], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[34], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[42], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge ARSHFT17_SL_N, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[5], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_0, negedge B[14], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[14], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_3, posedge B[5], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[33], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[10], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[28], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[3], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN_FDBK_SEL_EN, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[16], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[1], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[13], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge P_SRST_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[11], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[4], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[21], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~SUB_BYPASS, negedge SUB_SL_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[20], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[39] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[42] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[34], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[38], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[33], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[5], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN_FDBK_SEL_SL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge A[15], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[19], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[1], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[38], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[10], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_6, posedge A[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[19], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[19], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[17] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[29], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[11], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[12], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[17], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL[1], posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[38], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[24], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[1], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_6, negedge A[12], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[27], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[3], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[39] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[38], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[38] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[13], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[35], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge SUB_EN, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[37], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[14], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[11], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[32], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[17], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[0], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[21], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[11], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[32] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[17], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[37] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[3], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_8, negedge C[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL_SL_N, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[1], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_10, negedge B[11], 0.0, NOTIFY_REG );
    $setup( negedge CARRYIN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_8, posedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[40], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[33], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[0], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[31], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[16], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[26], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[1], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[31], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[6], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[23], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[2], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[13], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[16], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[29], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[7], 0.0, NOTIFY_REG );
    $setup( negedge C[33], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge P_SRST_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[2], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[12], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[2], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[15], 0.0, NOTIFY_REG );
    $setup( posedge B[10], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[16], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[25], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[26], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[29], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_3, posedge B[3], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[3], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[0], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[21], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[10], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[12], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[38], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[34], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[42], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[16], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[43] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[3], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[1], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[11], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[40], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[19], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B_EN, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[11], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[14], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_1, posedge A[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[24], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[24], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[20], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[8], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[11], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge P_EN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[1], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[20], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_1, negedge A[11], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[28], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B_SRST_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[2], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $setup( negedge A[8], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[14], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[5], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[37], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[8], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[34], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge B[6], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[34], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[40], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[6], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge A[11], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[2], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[24], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[13], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[0], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[7], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[3], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[0], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[1], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[5], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_2, posedge C[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CARRYIN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[13], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[4], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[26], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[11], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[17], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_5, negedge B[7], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, posedge C[33], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[38], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[30], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[0], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[4], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[22], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[4], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge P_EN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[34], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[28], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[1], 0.0, NOTIFY_REG );
    $setup( negedge C[17], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[17], 0.0, NOTIFY_REG );
    $setup( posedge A[3], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[43] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[17], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[42], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[1], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[13], 0.0, NOTIFY_REG );
    $setup( negedge C[23], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[39], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[27], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[3], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~SUB_BYPASS, posedge SUB_SL_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[42], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[26], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_8, posedge C[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[10], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    $setup( negedge CDIN[35], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[42] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[3], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[6], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[2], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[31], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[6], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge P_EN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[20], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[32], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[13], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[23], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[13], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[8], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[4], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[5], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[3], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[35], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[36], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[17], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[27], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[0], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[21], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[0], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[2], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[4], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[23], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[6], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[11], 0.0, NOTIFY_REG );
    $setup( negedge C[23], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[4], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[27], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[32], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[6], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A_SRST_N, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[3], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_2, posedge C[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[17], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[24], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B_EN, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[25], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[1], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL_EN, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[14], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[0], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[37], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[42] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B_SRST_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[32], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[14], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge ARSHFT17, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[38], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[3], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[18] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[16], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    $setup( posedge A[14], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[2], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[30], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[9], 0.0, NOTIFY_REG );
    $setup( posedge B[12], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[43], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[18], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge P_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[13], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[6], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[31], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B_SRST_N, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[3], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[31], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[9], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[11], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[11], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, negedge C[4], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[16], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[9], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_5, negedge B[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[7], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[4], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[13], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[8], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge C_SRST_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[0], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $setup( negedge CDIN[20], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[10], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL_EN, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[36], 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[12], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[4], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[13], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[1], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[42] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[13], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[13], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[5], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_5, negedge B[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[39], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[9], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[27], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[28], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[22], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[28], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[30], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[30], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[4], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[2], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[31], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B_EN, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CARRYIN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[43], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[7], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[17], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge ARSHFT17, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[16], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[11], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[33], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[43], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, posedge C[2], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[5], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[17], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[15], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[13], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[16], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[0], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[23], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, negedge ARSHFT17_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[30], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[1], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[33], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[5], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[42], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[11], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[15], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_9, posedge C[40], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[24], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[9], 0.0, NOTIFY_REG );
    $setup( negedge A_SRST_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[33], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[11], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A_SRST_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[0], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[43] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[0], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    $setup( posedge C[28], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[4], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[4], 0.0, NOTIFY_REG );
    $setup( posedge CDIN_FDBK_SEL_EN, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge A_EN, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[9] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[16], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[1], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[1], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[32], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[42] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[10], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[43], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[9], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[7], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, negedge ARSHFT17, 0.0, NOTIFY_REG );
    $setup( posedge A[8], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge P_SRST_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[2], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $setup( posedge C[12], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[8], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[1], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[30], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[38], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C_EN, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, negedge C[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[12], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, negedge B[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[7], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge C[16], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $setup( negedge A[5], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[8], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[9], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[18], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[17], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[25], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[6], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, negedge B[8], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[9] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[10], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_3, negedge B[7], 0.0, NOTIFY_REG );
    $setup( negedge C[1], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[40] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[9], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[32], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[17], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[25], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[14], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[6], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[17], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[29], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[1], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[29], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[15], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[12], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge C[8], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[3], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B_EN, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[2], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[43] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[10], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[15], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[25], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[29], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[12], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, posedge C[5], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[8], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[20], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[13], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[6], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A_SRST_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[18], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[37], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[6], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[41], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[3], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[43] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN_FDBK_SEL[0], posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[15], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[17], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[13], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[40], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[3], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[5], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[1], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[32] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[12], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[23], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[24], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[0], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $setup( posedge C[35], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[2], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[17], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_3, negedge B[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[22], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[17], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[14], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge P_SRST_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[41], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[5], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[7], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[14], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[7], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[15], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B_SRST_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[15], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B_SRST_N, 0.0, NOTIFY_REG );
    $setup( posedge A[1], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[41] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[16], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[27], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[37], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[43], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[33], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[7], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[5], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL_SL_N, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[42], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[3], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[25], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[10], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[4], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[31], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[8], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[5], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, posedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[25] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge C[8], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[36], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[14], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[39], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge SUB_SL_N, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[39], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, posedge A[12], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL[1], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[36], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[17], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[16], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[35], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[15], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[11], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[14], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[14], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[39], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[39], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[42], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[11], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[15], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[33], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN_FDBK_SEL_SL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[1], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[28], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[5], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[18], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[19], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL_SL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[8], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[4], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[4], 0.0, NOTIFY_REG );
    $setup( negedge A[3], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_5, negedge B[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[12], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[10], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[6], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[5], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[10], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[5], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[2], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[8], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[18], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[40], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[40], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[6], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[33], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[23], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[6], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[13], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[9], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[14], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[14], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[43], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[9], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[10], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~SUB_BYPASS, negedge SUB, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[4], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[24], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[40], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[34], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[2], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[24], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[43], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[11], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[43], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[2], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[11], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[21], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[4], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B_SRST_N, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[16], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[42], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[30], 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[10], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[34], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[15], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[17], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[2], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[17], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[8], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[7], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[5], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[27] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[18], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[34], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[8], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[0], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL_SL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[19]+: P[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[28], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[28], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[5], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[3], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[31], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[14], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[7], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[36] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[7], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[29], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge ARSHFT17_EN, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B_SRST_N, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[3], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[20]+: P[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[19], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[13], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[12], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[15], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[25], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[25], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN_FDBK_SEL[0], posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[12], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[33], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[34], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL[1], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[33] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[7], 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[5], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[8], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_0, negedge B[17], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[15], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[8], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_7, posedge A[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[2], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_7, negedge A[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[12], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[0], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[24], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[5], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[5]+: P[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge B[12], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[21], 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[32], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[9], 0.0, NOTIFY_REG );
    $setup( negedge CDIN[8], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[10], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[3], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL[0], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[42], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[7], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[35], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[17], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[12], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge B[12], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[37], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C_EN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[11], 0.0, NOTIFY_REG );
    $setup( posedge CDIN[16], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[10], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[6], 0.0, NOTIFY_REG );
    $setup( negedge A[7], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[14], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[3], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[13], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    $setup( negedge C[8], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C_EN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[13], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[10], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[29], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[2], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[2], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[19], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge SUB_EN, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[0]+: P[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[5], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[3], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[30], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[10], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_4, posedge A[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A_SRST_N, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[13], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[13], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[6]+: P[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[11], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[27], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[5], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[9], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[3], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, posedge C[27], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[18], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[15], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[5], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[20], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[21], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL_EN, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[20], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B_SRST_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge SUB_SL_N, posedge CLK &&& ~SUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[13], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, negedge B[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, posedge C[9], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_1, posedge A[9], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[24], 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[0], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[5], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[41], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[24] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[29], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[21], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[33], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[39], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[39], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[2], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[26], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[41], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[28], 0.0, NOTIFY_REG );
    $setup( posedge B[8], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[5], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[4], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[20], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[42] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[35] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[43], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[23], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[16], 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[15], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[13], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[43], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_6, posedge A[16], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[32], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[39] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[17], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[23] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[23], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[19], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[25], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[10], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[31], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[13], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[19], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[26], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[1], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[25], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[8], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[9], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge P_SRST_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[6], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[41], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[37], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[15], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[28], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge A[6], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_0, negedge B[16], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[19], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[40], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[12], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[19], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, negedge B[1], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[28] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[22], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A_EN, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[19], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[29], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[9], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[15], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge CARRYIN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[25], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~SUB_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[0], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, posedge A[7], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[10], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, negedge CDIN_FDBK_SEL_EN, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[20], 0.0, NOTIFY_REG );
    $setup( negedge C[11], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[22], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[8], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[11], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[12], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[33] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[23], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_9, posedge C[28], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[14]+: CDOUT[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[19], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[15], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[12], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[30], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[6], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[26], 0.0, NOTIFY_REG );
    $setup( negedge B[16], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[21], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[4], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C_EN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[8], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[9], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    $setup( posedge C[41], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[26], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[22], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[18], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~ARSHFT17_BYPASS, negedge ARSHFT17_SL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[7], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[40] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[0], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[38], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_0, negedge B[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[35], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[30], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[14], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[36], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[16], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[40], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[40], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[1], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[16], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[0], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge P_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[17], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[5], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[2], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[7], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[31], 0.0, NOTIFY_REG );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[29]+: P[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[34], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[27]+: CDOUT[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_8, posedge C[4], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_7, negedge A[2], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[0], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[10], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, posedge B[10], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[1], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[17], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[29], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[32], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[2], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[4], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[14], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[39], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, posedge C[37], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[22], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[32] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[41]+: P[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[24], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CARRYIN, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_0, posedge B[11], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[34] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[34], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[9], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[0], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[16], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B_EN, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[31], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[2], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[0], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[29] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[9], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[22], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[5], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[23], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[13], 0.0, NOTIFY_REG );
    $recovery( posedge AL_N, posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C_SRST_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[18] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[0], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[13], 0.0, NOTIFY_REG );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[28]+: CDOUT[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[22]+: P[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[41], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[26]+: CDOUT[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[37], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[1], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[30], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C_SRST_N, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[31], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[18], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[16], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[41] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[31], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[13], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[11], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[25] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[15], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[7], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[1], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_9, negedge C[25], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[18], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[0], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[10]+: CDOUT[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[18]+: CDOUT[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[11], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[24], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $recovery( posedge AL_N, posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[36], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[7], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[33] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[12], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[17], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[16], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[33] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[38], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[38], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge C[10], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[25], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[3], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge A[17], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[4]+: P[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, negedge B[6], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, posedge B[12], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[15], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[42], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[9]+: P[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[21]+: P[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[32], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[25] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[37]+: CDOUT[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[0], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[9], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[28]+: P[28] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge CDIN[20], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A_SRST_N, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[5], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[10], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[8], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[13], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[13], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[43] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_1, negedge A[10], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[12], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[25]+: P[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[9], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge P_SRST_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[22], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[37], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[30], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[21], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[20], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[10], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[27], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[0]+: CDOUT[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[30]+: P[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[21], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge A[3], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[16], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[12], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[33] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[2], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_7, posedge A[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[27], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[21], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[3]+: P[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[33], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[28], 0.0, NOTIFY_REG );
    $setup( negedge P_SRST_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[27], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[26]+: P[26] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[37], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[4], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[35]+: P[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[1], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[13], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[32], 0.0, NOTIFY_REG );
    $setup( posedge C[26], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $setup( posedge C[18], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[0], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[2], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_2, negedge C[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[23], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_4, posedge A[3], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[2], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[9], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[27]+: P[27] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[15]+: P[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, negedge B[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[29]+: CDOUT[29] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[4]+: CDOUT[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[34], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[21]+: CDOUT[21] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[9], posedge CLK &&& tim_chk_10, 0.0, NOTIFY_REG );
    $setup( negedge A[7], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[27], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[10], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, posedge C[30], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C_SRST_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[8], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~SUB_BYPASS, posedge SUB, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[7]+: P[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[25] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[6], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[28], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[0], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[6], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, posedge A[12], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[16], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[38] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[31]+: P[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge P_SRST_N, posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[12], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[13], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[40] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[19]+: CDOUT[19] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[32]+: P[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge A[16], 0.0, NOTIFY_REG );
    $setup( negedge C[32], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, posedge B[1], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[35], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[1], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[7], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[35], 0.0, NOTIFY_REG );
    $setup( posedge C[39], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[36], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CARRYIN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[12]+: P[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A_SRST_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[4], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, negedge B[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[34], 0.0, NOTIFY_REG );
    $setup( negedge C_EN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[29], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge ARSHFT17_EN, posedge CLK &&& ~ARSHFT17_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[39]+: P[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[35], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, negedge C[8], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_8, posedge C[15], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[17]+: CDOUT[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[36] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[31] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[34]+: CDOUT[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[17], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[5], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[15]+: CDOUT[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[8], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL_SL_N, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[14], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge C[3], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[17], 0.0, NOTIFY_REG );
    $setup( negedge A[4], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[25]+: CDOUT[25] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[1]+: P[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[39] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[21], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[39], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[41], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, posedge B[1], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, posedge A[1], 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[22]+: CDOUT[22] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge CDIN[42], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[9]+: CDOUT[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[11], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[41] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[31], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[22] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[36]+: CDOUT[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[43]+: CDOUT[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[8], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[0], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[13], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[29], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[11], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[28] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[10], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[10], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[39], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[17]+: P[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[22], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[24] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[14], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[38] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[20], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[19], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CARRYIN, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[39]+: CDOUT[39] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_7, negedge A[7], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[29], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[3], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[33] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, posedge C[0], 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[20]+: CDOUT[20] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C_SRST_N, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[17], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[9], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[23] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[12], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[13], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[35], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[16]+: CDOUT[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK &&& tim_chk_10, posedge B[14], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[22], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[18]+: P[18] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_6, negedge A[11], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[23]+: P[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[13]+: CDOUT[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[35] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[30]+: CDOUT[30] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[8], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[25], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[31], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[23]+: CDOUT[23] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge C[9], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_3, posedge B[2], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[15], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[41]+: CDOUT[41] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[29] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[42] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $recovery( posedge AL_N, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[38] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[3], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[18], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[41] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[6], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[30] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[16], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~CDIN_FDBK_SEL_BYPASS, posedge CDIN_FDBK_SEL_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[38]+: P[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_0, negedge B[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[30] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS & ~SIMD )
    ( A[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[8], posedge CLK &&& tim_chk_3, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[3]+: CDOUT[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[33], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[27], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge P_EN, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[4], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( posedge A[4], posedge CLK &&& tim_chk_4, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[31]+: CDOUT[31] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[23] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[42], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[13], 0.0, NOTIFY_REG );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[14]+: P[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[21] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[16], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, negedge C[23], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[22], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_5, negedge B[3], 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[37], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_2, negedge C[11], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[17], posedge CLK &&& tim_chk_0, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[41], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( CDOUT[12]+: CDOUT[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[23] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, negedge C[36], 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[15], posedge CLK &&& tim_chk_2, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[29] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[34]+: P[34] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge CDIN[32], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[24]+: CDOUT[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A_EN, posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( B_BYPASS & P_BYPASS )
    ( B[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge A[9], posedge CLK &&& tim_chk_6, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[33] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[33]+: CDOUT[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[10]+: P[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[40]+: P[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[34] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[21] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[13]+: P[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[14], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[1]+: CDOUT[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[11]+: CDOUT[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[4], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[19] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[27] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, posedge AL_N, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[36] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[27] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[43]+: P[43] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[12], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    $setup( negedge B[2], posedge CLK &&& ~B_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~B_BYPASS, negedge B[15], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[18] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[34] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~A_BYPASS, negedge A[11], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[34] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[5], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[14], posedge CLK &&& tim_chk_1, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[0] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS )
    ( B[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_9, posedge C[41], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[31], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[29] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge B[7], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[32] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[20] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[3], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge A[7], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[18] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[21] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[41], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[37]+: P[37] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[19] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge B[7], posedge CLK &&& tim_chk_5, 0.0, NOTIFY_REG );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[35] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[8]+: P[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[25] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( CARRYIN => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[8]+: CDOUT[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[23], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[35]+: CDOUT[35] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[40] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[5]+: CDOUT[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_4, negedge A[5], 0.0, NOTIFY_REG );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[7]+: CDOUT[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[26], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[0], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~P_BYPASS, posedge CDIN[21], 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[26] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[33]+: P[33] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[20] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[25] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[6]+: CDOUT[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[26] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[38]+: CDOUT[38] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[39] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[43] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[42]+: CDOUT[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~P_BYPASS, negedge CDIN[26], 0.0, NOTIFY_REG );
    $setup( negedge A[4], posedge CLK &&& ~A_BYPASS, 0.0, NOTIFY_REG );
    $setup( negedge C[25], posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[2]+: CDOUT[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[37] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[2]+: P[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[26] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[42]+: P[42] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& tim_chk_10, negedge B[9], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[36]+: P[36] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[22] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[30], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& tim_chk_9, negedge C[20], 0.0, NOTIFY_REG );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[28] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[22] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[31] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~C_BYPASS & P_BYPASS )
    ( posedge CLK => ( OVFL_CARRYOUT+: OVFL_CARRYOUT ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( A_BYPASS & P_BYPASS )
    ( A[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[37] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( posedge C[16], posedge CLK &&& tim_chk_8, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[37] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[22] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[32] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[24] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[16]+: P[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[41] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~SUB_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( A_BYPASS & P_BYPASS )
    ( A[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~B_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $setup( negedge A[6], posedge CLK &&& tim_chk_7, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[20] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[32]+: CDOUT[32] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( C_BYPASS & P_BYPASS )
    ( C[30] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[43], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge CDIN[27], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    //if ( ( A_BYPASS & P_BYPASS  ) == 1 )
    ( A[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[26] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ( B_BYPASS & P_BYPASS  ) == 1 )
    ( B[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[20] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[17] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( ~A_BYPASS & P_BYPASS )
    ( posedge CLK => ( P[24]+: P[24] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~P_BYPASS )
    ( posedge CLK => ( P[11]+: P[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( ~ARSHFT17_BYPASS & P_BYPASS )
    ( posedge CLK => ( CDOUT[40]+: CDOUT[40] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    //if ( P_BYPASS )
    ( CDIN[19] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( B_BYPASS & P_BYPASS & ~SIMD )
    ( B[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( C_BYPASS & P_BYPASS )
    ( C[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    //if ( P_BYPASS )
    ( CDIN[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C_SRST_N, posedge CLK &&& ~C_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[29], 0.0, NOTIFY_REG );
    //if ( C_BYPASS & P_BYPASS )
    ( C[2] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    
    ( D[0] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[1] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[2] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[3] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[4] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[5] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[6] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[7] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[8] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[9] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[10] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[11] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[12] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[13] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[14] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[15] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[16] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( D[17] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( PASUB => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( AL_N => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( C[44] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( C[45] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( C[46] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( C[47] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( CDIN[44] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( CDIN[45] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( CDIN[46] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( CDIN[47] => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( ARSHFT17 => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    ( SUB => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    
    //if ( P_BYPASS )
    ( CDIN[36] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    $setup( negedge C[36], posedge CLK &&& tim_chk_9, 0.0, NOTIFY_REG );
    $setup( posedge CDIN[15], posedge CLK &&& ~P_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~C_BYPASS, posedge C[9], 0.0, NOTIFY_REG );

    $setup( negedge PASUB_SL_N, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, posedge PASUB_SL_N, 0.0, NOTIFY_REG );
    $setup( posedge PASUB_SL_N, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, negedge PASUB_SL_N, 0.0, NOTIFY_REG );
    $setup( negedge PASUB_EN, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, posedge PASUB_EN, 0.0, NOTIFY_REG );
    $setup( posedge PASUB_EN, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, negedge PASUB_EN, 0.0, NOTIFY_REG );
    $setup( negedge PASUB, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, posedge PASUB, 0.0, NOTIFY_REG );
    $setup( posedge PASUB, posedge CLK &&& ~PASUB_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~PASUB_BYPASS, negedge PASUB, 0.0, NOTIFY_REG );
    $setup( negedge D_SRST_N, posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D_SRST_N, 0.0, NOTIFY_REG );
    $setup( posedge D_SRST_N, posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D_SRST_N, 0.0, NOTIFY_REG );
    $setup( negedge D_EN, posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D_EN, 0.0, NOTIFY_REG );
    $setup( posedge D_EN, posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D_EN, 0.0, NOTIFY_REG );
    $setup( negedge D[0], posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[0], 0.0, NOTIFY_REG );
    $setup( posedge D[0], posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[0], 0.0, NOTIFY_REG );
    $setup( negedge D[1], posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[1], 0.0, NOTIFY_REG );
    $setup( posedge D[1], posedge CLK &&& ~D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[1], 0.0, NOTIFY_REG );
    $setup( negedge D[2], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[2], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[2], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[2], 0.0, NOTIFY_REG );
    $setup( negedge D[3], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[3], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[3], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[3], 0.0, NOTIFY_REG );
    $setup( negedge D[4], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[4], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[4], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[4], 0.0, NOTIFY_REG );
    $setup( negedge D[5], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[5], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[5], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[5], 0.0, NOTIFY_REG );
    $setup( negedge D[6], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[6], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[6], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[6], 0.0, NOTIFY_REG );
    $setup( negedge D[7], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[7], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[7], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[7], 0.0, NOTIFY_REG );
    $setup( negedge D[8], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[8], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[8], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[8], 0.0, NOTIFY_REG );
    $setup( negedge D[9], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[9], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[9], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[9], 0.0, NOTIFY_REG );
    $setup( negedge D[10], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[10], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[10], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[10], 0.0, NOTIFY_REG );
    $setup( negedge D[11], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[11], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[11], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[11], 0.0, NOTIFY_REG );
    $setup( negedge D[12], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[12], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[12], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[12], 0.0, NOTIFY_REG );
    $setup( negedge D[13], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[13], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[13], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[13], 0.0, NOTIFY_REG );
    $setup( negedge D[14], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[14], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[14], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[14], 0.0, NOTIFY_REG );
    $setup( negedge D[15], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[15], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[15], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[15], 0.0, NOTIFY_REG );
    $setup( negedge D[16], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[16], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[16], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[16], 0.0, NOTIFY_REG );
    $setup( negedge D[17], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $setup( posedge D[17], posedge CLK &&& D_BYPASS, 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, posedge D[17], 0.0, NOTIFY_REG );
    $hold( posedge CLK &&& ~D_BYPASS, negedge D[17], 0.0, NOTIFY_REG );
$setup( negedge C[47], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$setup( posedge C[47], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, posedge C[47], 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, negedge C[47], 0.0, NOTIFY_REG );
$setup( negedge C[46], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$setup( posedge C[46], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, posedge C[46], 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, negedge C[46], 0.0, NOTIFY_REG );
$setup( negedge C[45], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$setup( posedge C[45], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, posedge C[45], 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, negedge C[45], 0.0, NOTIFY_REG );
$setup( negedge C[44], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$setup( posedge C[44], posedge CLK &&& C_BYPASS, 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, posedge C[44], 0.0, NOTIFY_REG );
$hold( posedge CLK &&& ~C_BYPASS, negedge C[44], 0.0, NOTIFY_REG );
$setup( negedge CDIN[47], posedge CLK, 0.0, NOTIFY_REG );
$setup( posedge CDIN[47], posedge CLK, 0.0, NOTIFY_REG );
$hold( posedge CLK, posedge CDIN[47], 0.0, NOTIFY_REG );
$hold( posedge CLK, negedge CDIN[47], 0.0, NOTIFY_REG );
$setup( negedge CDIN[46], posedge CLK, 0.0, NOTIFY_REG );
$setup( posedge CDIN[46], posedge CLK, 0.0, NOTIFY_REG );
$hold( posedge CLK, posedge CDIN[46], 0.0, NOTIFY_REG );
$hold( posedge CLK, negedge CDIN[46], 0.0, NOTIFY_REG );
$setup( negedge CDIN[45], posedge CLK, 0.0, NOTIFY_REG );
$setup( posedge CDIN[45], posedge CLK, 0.0, NOTIFY_REG );
$hold( posedge CLK, posedge CDIN[45], 0.0, NOTIFY_REG );
$hold( posedge CLK, negedge CDIN[45], 0.0, NOTIFY_REG );
$setup( negedge CDIN[44], posedge CLK, 0.0, NOTIFY_REG );
$setup( posedge CDIN[44], posedge CLK, 0.0, NOTIFY_REG );
$hold( posedge CLK, posedge CDIN[44], 0.0, NOTIFY_REG );
$hold( posedge CLK, negedge CDIN[44], 0.0, NOTIFY_REG );
( posedge CLK => ( B1[0]+: B1[0] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[1]+: B1[1] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[2]+: B1[2] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[3]+: B1[3] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[4]+: B1[4] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[5]+: B1[5] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[6]+: B1[6] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[7]+: B1[7] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[8]+: B1[8] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[9]+: B1[9] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[10]+: B1[10] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[11]+: B1[11] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[12]+: B1[12] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[13]+: B1[13] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[14]+: B1[14] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[15]+: B1[15] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[16]+: B1[16] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( B1[17]+: B1[17] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $hold( posedge CLK, posedge B1[17], 0.0, NOTIFY_REG );
    $hold( posedge CLK, negedge B1[17], 0.0, NOTIFY_REG );
( B[0] => B1[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => B1[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => B1[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => B1[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => B1[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => B1[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => B1[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => B1[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => B1[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => B1[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => B1[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => B1[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => B1[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => B1[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => B1[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => B1[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => B1[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => B1[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => B1[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( A_ADDR_D => A_ADDR_D_SH ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( posedge CLK => ( CDOUT[44]+: CDOUT[44] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( CDOUT[45]+: CDOUT[45] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( CDOUT[46]+: CDOUT[46] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( CDOUT[47]+: CDOUT[47] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( P[44]+: P[44] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( P[45]+: P[45] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( P[46]+: P[46] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( posedge CLK => ( P[47]+: P[47] ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
    $recovery( posedge D_ARST_N, posedge CLK, 0.0, NOTIFY_REG );
    $hold( posedge CLK, posedge D_ARST_N, 0.0, NOTIFY_REG );
    $recovery( posedge C_ARST_N, posedge CLK, 0.0, NOTIFY_REG );
    $hold( posedge CLK, posedge C_ARST_N, 0.0, NOTIFY_REG );
( B2_EN => B2_EN_SH ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
    
( B2[0] => BCOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[1] => BCOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[2] => BCOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[3] => BCOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[4] => BCOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[5] => BCOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[6] => BCOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[7] => BCOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[8] => BCOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[9] => BCOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[10] => BCOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[11] => BCOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[12] => BCOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[13] => BCOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[14] => BCOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[15] => BCOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[16] => BCOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B2[17] => BCOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( AL_N => OVFL_CARRYOUT ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

( D[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

( D[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[0] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[1] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[2] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[3] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[4] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[5] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[6] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[7] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[8] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[9] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[10] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[11] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[12] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[13] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[14] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[15] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[16] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( D[17] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

( ARSHFT17 => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( ARSHFT17 => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( SUB => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( PASUB => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

( CARRYIN => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( CARRYIN => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[0] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[1] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[2] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[3] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[4] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[5] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[6] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[7] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[8] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[9] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[10] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[11] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[12] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[13] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[14] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[15] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[16] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
( B[17] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

(  A[0] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[0] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[1] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[2] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[3] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[4] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[5] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[6] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[7] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[8] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[9] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[10] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[11] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[12] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[13] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[14] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[15] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[16] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  A[17] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[0] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[1] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[2] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[3] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[4] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[5] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[6] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[7] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[8] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[9] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[10] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[11] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[12] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[13] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[14] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[15] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[16] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[17] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[18] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[19] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[20] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[21] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[22] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[23] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[24] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[25] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[26] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[27] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[28] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[29] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[30] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[31] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[32] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[33] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[34] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[35] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[36] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[37] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[38] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[39] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[40] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[41] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[42] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[43] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[44] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[45] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[46] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  CDIN[47] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[0] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[1] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[2] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[3] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[4] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[5] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[6] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[7] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[8] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[9] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[10] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[11] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[12] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[13] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[14] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[15] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[16] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[17] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[18] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[19] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[20] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[21] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[22] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[23] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[24] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[25] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[26] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[27] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[28] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[29] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[30] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[31] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[32] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[33] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[34] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[35] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[36] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[37] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[38] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[39] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[40] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[41] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[42] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[43] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[44] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[45] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[46] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => P[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[0] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[1] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[2] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[3] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[4] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[5] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[6] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[7] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[8] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[9] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[10] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[11] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[12] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[13] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[14] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[15] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[16] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[17] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[18] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[19] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[20] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[21] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[22] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[23] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[24] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[25] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[26] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[27] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[28] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[29] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[30] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[31] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[32] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[33] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[34] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[35] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[36] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[37] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[38] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[39] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[40] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[41] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[42] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[43] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[44] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[45] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[46] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );
(  C[47] => CDOUT[47] ) = ( tpdLH_IN_to_OUT, tpdHL_IN_to_OUT );

( negedge C_ARST_N => ( P[0] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[1] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[2] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[3] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[4] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[5] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[6] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[7] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[8] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[9] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[10] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[11] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[12] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[13] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[14] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[15] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[16] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[17] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[18] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[19] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[20] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[21] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[22] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[23] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[24] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[25] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[26] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[27] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[28] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[29] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[30] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[31] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[32] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[33] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[34] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[35] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[36] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[37] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[38] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[39] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[40] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[41] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[42] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[43] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[44] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[45] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[46] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( P[47] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[0] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[1] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[2] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[3] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[4] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[5] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[6] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[7] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[8] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[9] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[10] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[11] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[12] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[13] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[14] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[15] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[16] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[17] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[18] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[19] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[20] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[21] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[22] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[23] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[24] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[25] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[26] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[27] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[28] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[29] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[30] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[31] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[32] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[33] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[34] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[35] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[36] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[37] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[38] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[39] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[40] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[41] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[42] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[43] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[44] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[45] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[46] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );
( negedge C_ARST_N => ( CDOUT[47] +: 1'b0 ) ) = ( tpdLH_CLK_to_Q, tpdHL_CLK_to_Q );

    $period( posedge CLK &&& tim_chk_16, 0.0, NOTIFY_REG );
    $period( negedge CLK &&& tim_chk_16, 0.0, NOTIFY_REG );
    $period( posedge CLK &&& tim_chk_17, 0.0, NOTIFY_REG );
    $period( negedge CLK &&& tim_chk_17, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( negedge CLK, 0.0, NOTIFY_REG );
    
    $width(negedge AL_N, 0.0, 0, NOTIFY_REG);
    $width(negedge D_ARST_N, 0.0, 0, NOTIFY_REG);
    $width(negedge C_ARST_N, 0.0, 0, NOTIFY_REG);
    $width(posedge CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge CLK, 0.0, 0, NOTIFY_REG);
    
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
    $period( posedge CLK, 0.0, NOTIFY_REG );
  endspecify
endmodule



`timescale 1 ps/1 ps
 module CCC_8X1_MUX(CLK0, CLK1, CLK2, CLK3, 
                   CLK4, CLK5, CLK6, CLK7, 
                   SEL, INV, CLKOUT);
                   
     input         CLK0, CLK1, CLK2, CLK3;
     input         CLK4, CLK5, CLK6, CLK7;
     input [2:0]   SEL;
     input         INV;
     output        CLKOUT;
     
     reg           MUX_OUT;
     
     xor u0(CLKOUT, INV, MUX_OUT);
     
     always @( * ) begin
       case ( SEL )
         0: MUX_OUT = CLK0;
         1: MUX_OUT = CLK1;
         2: MUX_OUT = CLK2;
         3: MUX_OUT = CLK3;
         4: MUX_OUT = CLK4;
         5: MUX_OUT = CLK5;
         6: MUX_OUT = CLK6;
         7: MUX_OUT = CLK7;
         default: begin
                    if ( $time > 0 ) 
                      $display (" Warning: Unsupported selection applied to the RF MUX at time %0.1fps! Instance: %m", $realtime);
                  end
       endcase
     end
     
 endmodule
////////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
 module CCC_4X1_MUX(CLK0, CLK1, CLK2, CLK3, 
                   SEL, INV, CLKOUT);
                   
     input         CLK0, CLK1, CLK2, CLK3;
     input [1:0]   SEL;
     input         INV;
     output        CLKOUT;
     
     reg           MUX_OUT;
     
     xor u0(CLKOUT, INV, MUX_OUT);
     
     always @( * ) begin
       case ( SEL )
         0: MUX_OUT = CLK0;
         1: MUX_OUT = CLK1;
         2: MUX_OUT = CLK2;
         3: MUX_OUT = CLK3;
         default: begin
                    if ( $time > 0 ) 
                      $display (" Warning: Unsupported selection applied to the RF MUX at time %0.1fps! Instance: %m", $realtime);
                  end
       endcase
     end
     
 endmodule
////////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
module CCC_2X1_MUX(CLK0, CLK1, SEL, INV,
                  CLKOUT);

  input       CLK0, CLK1;
  input       SEL;
  input       INV;
  output      CLKOUT;

  reg         MUX_OUT;

  xor u0(CLKOUT, INV, MUX_OUT);

  always @( * ) begin
    case ( SEL )
       0: MUX_OUT = CLK0;
       1: MUX_OUT = CLK1;
       default: begin
                  if ( $time > 0 ) 
                    $display (" Warning: Unsupported selection applied to the RF MUX at time %0.1fps! Instance: %m", $realtime);
                end
    endcase
  end
  
endmodule
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
module CCC_RF_DIV(CLKIN, DIV, ARST_N, CLKOUT);
  input         CLKIN;
  input         ARST_N;
  input [5:0]   DIV;
  output        CLKOUT;

  Freq_Divider #(.DIV_LENGTH(6), .DIV_FORMAT(0), .RESET_POLARITY(0)) 
      u_rf_div (.CLKIN(CLKIN), .DIV(DIV), .CLKOUT(CLKOUT), .SYNC_RESET(ARST_N), .ASYNC_RESET(ARST_N));

endmodule

////////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
module CCC_FB_DIV(CLKIN, DIV, ARST_N, divq_reset, CLKOUT);

  input         CLKIN;
  input         ARST_N;
  input         divq_reset;
  input [11:0]   DIV;
  output        CLKOUT;

  Freq_Divider #(.DIV_LENGTH(12), .DIV_FORMAT(0), .RESET_POLARITY(0)) 
      u_fb_div (.CLKIN(CLKIN), .DIV(DIV), .CLKOUT(CLKOUT), .SYNC_RESET(ARST_N), .ASYNC_RESET(divq_reset));

endmodule

////////////////////////////////////////////////////////////////////
module CCC_POST_DIV (
             DIVSTART,
             RESET_ON_LOCK,
             ARST_N,
             VCO0,
             VCO45,
             VCO90,
             VCO135,
             VCO180,
             VCO225,
             VCO270,
             VCO315,
             BYP_CLK,
             VCOPHSEL,
             BYPASS_PRE,
             POSTDIV,
             CKPOST3SEL,
             POSTDIVEN,
             FOUTDIV2,
             divq_reset,
             LOCK,
             FOUTDIV
);

input        ARST_N;
input        VCO0, VCO45, VCO90, VCO135;
input        VCO180, VCO225, VCO270, VCO315;
input        BYP_CLK;
input [2:0]  VCOPHSEL;
input        BYPASS_PRE;
input [6:0]  POSTDIV;
input        CKPOST3SEL;
input        POSTDIVEN;
input        FOUTDIV2;
input        divq_reset;
input        LOCK;
output       FOUTDIV;

input [2:0]   DIVSTART;
input         RESET_ON_LOCK;

wire ph_sel_clk;
wire div4_clk_out;
wire byp_pre_mux_clk_out;
wire byp_pre_mux_clk_out_1;
wire FOUTDIV_int;

assign FOUTDIV = FOUTDIV_int & LOCK;

reg [8:0] divq_reset_pipe;
reg       LOCK_reg, LOCK_reg_neg;

initial begin
  divq_reset_pipe[8:0] = 9'b0;
end

assign LOCK_reset = ( VCOPHSEL === 3'b0 ) ? divq_reset : LOCK_reg;
assign postdiv_reset = ( RESET_ON_LOCK === 1'b1 ) ? (DIVSTART === 3'b0) ? LOCK_reset : divq_reset_pipe[ DIVSTART - 1 ]
                                                  : divq_reset;
                                                  
  CCC_POSTDIVEN_SYNC u_ccc_postdiven_sync(.RESET_ON_LOCK    ( 1'b0                  ),
                                          .LOCK             ( LOCK                  ),
                                          .POSTDIVEN        ( POSTDIVEN             ),
                                          .CLK_TO_DIV       ( byp_pre_mux_clk_out_1 ),
                                          .CLK_FROM_DIV     ( byp_pre_mux_clk_out_1           ),
                                          .VCOPHSEL         ( VCOPHSEL[2:0]         ),
                                          .POSTDIVPD        ( postdivpd             ) );
              
CCC_8X1_MUX phase_sel_mux ( .CLK0(VCO0),
                            .CLK1(VCO45),
                            .CLK2(VCO90),
                            .CLK3(VCO135),
                            .CLK4(VCO180),
                            .CLK5(VCO225),
                            .CLK6(VCO270),
                            .CLK7(VCO315),
                            .SEL(VCOPHSEL),
                            .INV(1'b0),
                            .CLKOUT(ph_sel_clk) );

/*CCC_FB_DIV phase_div4_clk ( .CLKIN(ph_sel_clk),
                            .DIV(12'h1),
                            .ARST_N(ARST_N),
                            .divq_reset(divq_reset),
                            .CLKOUT(div4_clk_out) );*/

CCC_2X1_MUX byp_pre_mux   ( .CLK0(ph_sel_clk),
                            .CLK1(BYP_CLK),
                            .SEL(BYPASS_PRE),
                            .INV(1'b0),
                            .CLKOUT(byp_pre_mux_clk_out) );

CCC_2X1_MUX ckpost3sel_mux( .CLK0(byp_pre_mux_clk_out),
                            .CLK1(FOUTDIV2),
                            .SEL(CKPOST3SEL),
                            .INV(1'b0),
                            .CLKOUT(byp_pre_mux_clk_out_1) );

CCC_FB_DIV post_div_clk   ( .CLKIN(byp_pre_mux_clk_out_1),
                            .DIV({5'h0,POSTDIV}),
                            .ARST_N(ARST_N & postdiv_reset & postdivpd),
                            .divq_reset(postdiv_reset & postdivpd),
                            .CLKOUT(FOUTDIV_int) );
  
  always @(posedge byp_pre_mux_clk_out_1) begin
    LOCK_reg <= LOCK;
  end
  always @(negedge byp_pre_mux_clk_out_1) begin
    LOCK_reg_neg <= LOCK;
  end  
  always @(negedge byp_pre_mux_clk_out_1) begin
    divq_reset_pipe[8:0] = {divq_reset_pipe[7:0], LOCK_reset};
  end
endmodule

`timescale 1 ps/1 ps
module div2(CLKIN, CLKOUT, RESET_N);
  input           CLKIN;
  input           RESET_N;
  output reg      CLKOUT;
  
  initial begin
    CLKOUT = 1'b0;
  end

  always @( posedge CLKIN or negedge RESET_N) begin
    if ( RESET_N == 1'b0 ) begin
      CLKOUT      <= 1'b0;
    end
    else begin
      if (CLKIN === 1'b1)
        CLKOUT <= ~CLKOUT;
    end
  end
  
endmodule

module CCC_POSTDIVEN_SYNC(
              input                     RESET_ON_LOCK,
              input                     LOCK,
              input                     POSTDIVEN,
              input                     CLK_TO_DIV,
              input                     CLK_FROM_DIV,
              input   [2:0]             VCOPHSEL,
              output                    POSTDIVPD);
  
  wire                en_from_lock;
  wire                postdiven_lock_en;
  reg                 postdiven_int;
  reg                 postdiven_sync;
  reg                 postdiven_sync_out;
  wire                en_sync_int;
  reg                 postdiven_sync_outb_clk;
  wire                pd_stable;
  wire                postdiven_sync_int;
  reg                 postdiven_sync_int1;
  reg                 postdiven_sync_int2;
  wire                clkselmux;
  wire                clk_div2;
  wire                clk_div4;
  
  initial begin
    postdiven_sync_outb_clk = 1'b0;
    postdiven_sync_int2     = 1'b0;
    postdiven_sync_int1     = 1'b0;
    postdiven_int           = 1'b0;
    postdiven_sync          = 1'b0;
    postdiven_sync_out      = 1'b0;
  end
  
  assign en_from_lock = ! ( RESET_ON_LOCK & ~LOCK );
  assign postdiven_lock_en = ( en_from_lock & postdiven_sync_int );
  assign clkselmux = VCOPHSEL[2] ? CLK_TO_DIV : ~CLK_TO_DIV;
  
  div2 u_div2(
              .CLKIN      ( CLK_TO_DIV  ), 
              .CLKOUT     ( clk_div2    ), 
              .RESET_N    ( LOCK        ) );
  div2 u_div4(
              .CLKIN      ( clk_div2    ), 
              .CLKOUT     ( clk_div4    ), 
              .RESET_N    ( LOCK        ) );
  

  always @ ( negedge CLK_FROM_DIV ) begin
    postdiven_sync_int1 <= POSTDIVEN;
    postdiven_sync_int2 <= postdiven_sync_int1;
  end
  assign postdiven_sync_int = postdiven_sync_int2 | POSTDIVEN;
  
  always @ ( posedge clk_div4 ) begin
    postdiven_int <= postdiven_lock_en;
    postdiven_sync <= postdiven_int;
    postdiven_sync_out <= en_sync_int;
  end
  
  always @ ( posedge clkselmux ) begin
    postdiven_sync_outb_clk <= postdiven_sync_out;
  end

  assign pd_stable = ! (postdiven_sync ^ postdiven_int);
  assign en_sync_int = pd_stable ? postdiven_sync : postdiven_sync_out;
  assign POSTDIVPD = 1'b1 & postdiven_sync_outb_clk;
endmodule



`timescale 1ps/1ps

`define MIN_REF_FREQ 64'd1_050_000
`define MAX_REF_FREQ 64'd4_750

`define MIN_DREF_FREQ 64'd1_050_00        // Minimum frequency is 10MHz
`define MAX_DREF_FREQ 64'd4_750
`define MIN_DREF32K_FREQ 64'd32_812_500
`define MAX_DREF32K_FREQ 64'd29_687_500

`define MIN_VCO_1V0_FREQ 64'd4_200
`define MAX_VCO_1V0_FREQ 64'd1_000
`define MIN_VCO_1V2_FREQ 64'd2_100
`define MAX_VCO_1V2_FREQ 64'd950

`define MIN_OUT_FREQ 64'd52_500
`define MAX_OUT_1V0_FREQ 30'd1_800
`define MAX_OUT_1V2_FREQ 30'd900

`define PULSE_MIN 64'd1_000
`define RESET_PULSE_MIN 64'd1_000

`define MIN_FREQ_MOD 64'd40_000
`define MAX_FREQ_MOD 64'd20_000

`define WARNING_MESSAGES_ON 0




//
// This module covers up to the creation of the two VCO signals
//
module  ABI_PLL_FRONT (
		REFCK,
		FB,
		BYPASS,
		RESET,
		PD,

		FSE,
		MODE32K,
		MODE_1V2,
		MODE_3V3,
		SSE,

		DIVR5,
		DIVR4,
		DIVR3,
		DIVR2,
		DIVR1,
		DIVR0,

		RANGE3,
		RANGE2,
		RANGE1,
		RANGE0,

		DIVF11,
		DIVF10,
		DIVF9,
		DIVF8,
		DIVF7,
		DIVF6,
		DIVF5,
		DIVF4,
		DIVF3,
		DIVF2,
		DIVF1,
		DIVF0,
		
		DIVP13,
		DIVP12,
		DIVP11,
		DIVP10,
		DIVP9,
		DIVP8,
		DIVP7,
		DIVP6,
		DIVP5,
		DIVP4,
		DIVP3,
		DIVP2,
		DIVP1,
		DIVP0,

		DIVQ2,
		DIVQ1,
		DIVQ0,

		SSMD1,
		SSMD0,
		SSMF4,
		SSMF3,
		SSMF2,
		SSMF1,
		SSMF0,

		LOCKWIN2,
		LOCKWIN1,
		LOCKWIN0,
		LOCKCNT3,
		LOCKCNT2,
		LOCKCNT1,
		LOCKCNT0,


		LOCK,
		vco4x_normal,
		vco4x_alt,
		vco_000,
		vco_000_alt,
		vco_045,
		vco_045_alt,
		vco_090,
		vco_090_alt,
		vco_135,
		vco_135_alt,
		vco_180,
		vco_180_alt,
		vco_225,
		vco_225_alt,
		vco_270,
		vco_270_alt,
		vco_315,
		vco_315_alt,
		reset_reg,
    divq_reset
);

//----------------------------------------------------------------------
// Port Declarations
//----------------------------------------------------------------------

// Input
  input     REFCK;    // Reference Clock
  input     FB;
  input     BYPASS; // Bypass - Active HIGH
  input     RESET;  // Reset  - Active HIGH
  input     PD;

  input     FSE;
  input     MODE32K;
  input     MODE_1V2;
  input     MODE_3V3;
  input     SSE;

  input     DIVR5;  // Reference Divider Control
  input     DIVR4;
  input     DIVR3;
  input     DIVR2;
  input     DIVR1;
  input     DIVR0;

  input     RANGE3;
  input     RANGE2;
  input     RANGE1;
  input     RANGE0;

  input     DIVF11;
  input     DIVF10;
  input     DIVF9;  // Feedback Divider Control
  input     DIVF8;
  input     DIVF7;
  input     DIVF6;
  input     DIVF5;
  input     DIVF4;
  input     DIVF3;
  input     DIVF2;
  input     DIVF1;
  input     DIVF0;

  input     DIVP13;
  input     DIVP12;
  input     DIVP11;
  input     DIVP10;
  input     DIVP9;
  input     DIVP8;
  input     DIVP7;
  input     DIVP6;
  input     DIVP5;
  input     DIVP4;
  input     DIVP3;
  input     DIVP2;
  input     DIVP1;
  input     DIVP0;

  input 	DIVQ2;
  input 	DIVQ1;
  input 	DIVQ0;
  
  input     SSMD1; // Controls Modulation Depth
  input     SSMD0;
  input     SSMF4; // Controls Modulation Frequency
  input     SSMF3;
  input     SSMF2;
  input     SSMF1;
  input     SSMF0;

  input     LOCKWIN2;  //No function in verilog
  input     LOCKWIN1;
  input     LOCKWIN0;

  input     LOCKCNT3;  //Delays LOCK from appearing
  input     LOCKCNT2;
  input     LOCKCNT1;
  input     LOCKCNT0;


// Output
  output    LOCK;   // PLL locked when HIGH
  output    vco4x_normal;
  output    vco4x_alt;

  output    vco_000;
  output    vco_000_alt;
  output    vco_045;
  output    vco_045_alt;
  output    vco_090;
  output    vco_090_alt;
  output    vco_135;
  output    vco_135_alt;
  output    vco_180;
  output    vco_180_alt;
  output    vco_225;
  output    vco_225_alt;
  output    vco_270;
  output    vco_270_alt;
  output    vco_315;
  output    vco_315_alt;


  output    reset_reg; //accounts for RANGE=0000 type of bypass
                       //needs to go to other modules
  output divq_reset;
  
  parameter integer FB_MULTIPLIER = 1;
  parameter VCOFREQUENCY = 0.0;
  parameter FB_DIV_PARAM = 1.0;
  parameter POST_DIV = 1.0;
  
  real FB_DIV;
  
  reg warning_flag, ref_freq_chg, on_vco, on_flag, ff_lock;
  reg vco_low_flag, vco_high_flag;
  reg rFreq_low_flag, rFreq_high_flag, drFreq_low_flag, drFreq_high_flag;
//  reg oFreq_low_flag, oFreq_high_flag;
  reg pos_pulse_flag, neg_pulse_flag;
  reg lock_enabled_flag, pll_lock_reg, delay_lock_reg;
  reg ref_warn_flag, fse_warn_flag;
  reg [3:0] lock_count_reg;
  reg [3:0] fb_count;
  reg divided_ref, divided_fb;
  reg vco4x_ck, vco1x_ck, vco4x_ck0;
  reg vco2x_000_ck, vco2x_090_ck, vco2x_180_ck, vco2x_270_ck;
  reg vco_000_ck, vco_090_ck, vco_180_ck, vco_270_ck;
  reg vco_045_ck, vco_135_ck, vco_225_ck, vco_315_ck;
  reg vco_000_ck0, vco_090_ck0;
  reg vco_045_ck0, vco_135_ck0, vco_180_ck0;
  reg vco_225_ck0, vco_270_ck0, vco_315_ck0;
  reg range_byp, range_warn, reset_init;
  reg reset_pulse_flag, pd_pulse_flag;
  reg input_missing;
  reg vco01x_divwarning, vco01x_modwarning, vco01x_waitflag;
  reg [31:0] low_time_vco_count;
  

  time last_posedge_ref, last_negedge_ref, period_ref, period_ref1, period_ref2;
  time last_posedge_fb, period_fb, period_fb1, period_fb2, period_fb3, period_fb4;
  time last_posedge_divfb, period_divfb, last_posedge_divref, period_divref;
  time last_posedge_vco, period_vco;
  time last_posedge_vco4x, period_vco4x;
  time last_posedge_vco4x0, period_vco4x0;

  time low_time_vco, high_time_vco;
  time low_time_vco0, high_time_vco0; 
  time time_vco0, vco1x_ck_space;
  time time_vco4x0, vco4x_ck_space;
  time low_time_vco4x, high_time_vco4x;
  time low_time_vco4x_reg, high_time_vco4x_reg;
  time low_time_vco4x_reg_1, low_time_vco4x_reg_2, low_time_vco4x_reg_3;

  time last_posedge_reset, last_posedge_pd;
  time ref_time_passed;

  integer mult_divr, divider_divf, divider_divf_ss, post_divider;
  integer mult_divr_dly, divider_divf_dly;
  integer divider_external, divider_external_dly;
  integer nb_ref_cycles, nb_fb_cycles, nb_divref_cycles, nb_divfb_cycles;
  integer nb_vco_cycles;
  integer nb_vco4x_cycles;
  integer lock_delay;
  integer fccc_divider_external;
  
  reg     enable_vco1x_ck_modset, enable_vco1x_ck_mod_actual;
  integer output_periods;
  integer vco1x_ck_modset, vco1x_ck_mod, vco1x_ck_mod_actual;
  integer vco4x_ck_modset, vco4x_ck_mod;

  integer ref_div_count;  //This counter tracks the toggles in the REF pin
  // and controls when the divided_ref signal will toggle in response
  //in this fashion, the phase of divided_ref responds and changes with
  //changed in the phase of the external REF
  integer divf_count;  //Same for producing divided FB signal

  integer POM; //Period of modulation
  integer FOM; //Freq. of modulation
//  real POM; //Period of modulation

  real period_ref_real, period_fb_real, inner_freq_margin;
  real period_fb1_real, period_fb2_real,period_fb3_real, period_fb4_real;
  real fb_compare, fb_compare1, fb_compare2, fb_comp_skip;
  real period_divfb_real, period_divref_real;

  //
  //additional signals for spread spectrum
  //
  reg alt_vco4x_ck; //4x faster, to provide phase shifting capablilities
  reg alt_vco2x_000_ck, alt_vco2x_090_ck, alt_vco2x_180_ck, alt_vco2x_270_ck; //2x faster
  reg alt_vco_000_ck, alt_vco_090_ck, alt_vco_180_ck, alt_vco_270_ck; //normal speed vco, all 8 phases
  reg alt_vco_045_ck, alt_vco_135_ck, alt_vco_225_ck, alt_vco_315_ck;
  reg down_flag_DS, up_flag_DS; //stores **direction** of modulation depth

//  reg calculation_enable;  //related to LOCK?
  time period_vco_max;
  time period_vco4x_max;

  realtime change_per_cycle;
  realtime change_per_cycle4x;
  real fmod_constant = 251658.24;  //might change?
  real ssmd_percent; //modulation depth percent
  real ssmod_var; //just to see what we're calculating
  integer uber_cycle, ss_period_count; //Period of Modulation
  integer ss_period_count4x;
  integer ss_cycle_count;
  integer nb_alt_vco_cycles;
  integer nb_alt_vco4x_cycles;
//  wire forced_off, reset_wire, enabled;
  wire no_MF, no_SS;
  //

  wire on_wire;
  wire bypassi;

  wire ref_ck, fb_ext, fbi;
  wire fsei, reseti, pdi, ssei, mode32ki;
  wire range3i, range2i, range1i, range0i;
  wire divf11i, divf10i, divf9i, divf8i, divf7i, divf6i, divf5i, divf4i, divf3i, divf2i, divf1i, divf0i;
  wire divr5i, divr4i, divr3i, divr2i, divr1i, divr0i;
  wire ssmd1i, ssmd0i;
  wire ssmf4i, ssmf3i, ssmf2i, ssmf1i, ssmf0i;
  wire lockcnt3i, lockcnt2i, lockcnt1i, lockcnt0i;
  
  integer MULT_DIVQ;
//
  wire vco4x_normal, vco4x_alt;
  wire vco_000, vco_000_alt;
  wire vco_045, vco_045_alt;
  wire vco_090, vco_090_alt;
  wire vco_135, vco_135_alt;
  wire vco_180, vco_180_alt;
  wire vco_225, vco_225_alt;
  wire vco_270, vco_270_alt;
  wire vco_315, vco_315_alt;


//Internal signals
  buf u0   (ref_ck,REFCK);
  buf u1   (fb_ext,FB);
  buf u2   (fsei,FSE);
  buf u3   (reseti,RESET);
  buf u4   (ssei,SSE);
//  buf u5   (bypassi, BYPASS);
  buf u6   (mode32ki, MODE32K);
  buf u7   (pdi,PD);

  buf u13  (range3i,RANGE3);
  buf u12  (range2i,RANGE2);
  buf u11  (range1i,RANGE1);
  buf u10  (range0i,RANGE0);

  buf u25  (divr5i,DIVR5);
  buf u24  (divr4i,DIVR4);
  buf u23  (divr3i,DIVR3);
  buf u22  (divr2i,DIVR2);
  buf u21  (divr1i,DIVR1);
  buf u20  (divr0i,DIVR0);

  buf u39_2  (divf11i,DIVF11);
  buf u39_1  (divf10i,DIVF10);
  buf u39  (divf9i,DIVF9);
  buf u38  (divf8i,DIVF8);
  buf u37  (divf7i,DIVF7);
  buf u36  (divf6i,DIVF6);
  buf u35  (divf5i,DIVF5);
  buf u34  (divf4i,DIVF4);
  buf u33  (divf3i,DIVF3);
  buf u32  (divf2i,DIVF2);
  buf u31  (divf1i,DIVF1);
  buf u30  (divf0i,DIVF0);

  buf u73  (divp13i,DIVP13);
  buf u72  (divp12i,DIVP12);
  buf u71  (divp11i,DIVP11);
  buf u70  (divp10i,DIVP10);
  buf u69  (divp9i,DIVP9);
  buf u68  (divp8i,DIVP8);
  buf u67  (divp7i,DIVP7);
  buf u66  (divp6i,DIVP6);
  buf u65  (divp5i,DIVP5);
  buf u64  (divp4i,DIVP4);
  buf u63  (divp3i,DIVP3);
  buf u62  (divp2i,DIVP2);
  buf u61  (divp1i,DIVP1);
  buf u60  (divp0i,DIVP0);

  buf u46  (ssmd1i, SSMD1);
  buf u45  (ssmd0i, SSMD0);
  buf u44  (ssmf4i, SSMF4);
  buf u43  (ssmf3i, SSMF3);
  buf u42  (ssmf2i, SSMF2);
  buf u41  (ssmf1i, SSMF1);
  buf u40  (ssmf0i, SSMF0);

  buf u53  (lockcnt3i, LOCKCNT3);
  buf u52  (lockcnt2i, LOCKCNT2);
  buf u51  (lockcnt1i, LOCKCNT1);
  buf u50  (lockcnt0i, LOCKCNT0);
  
  buf u91  (LOCK,delay_lock_reg);
//  buf u93  (vco_normal,vco_ck);
//  buf u94  (vco_alt,alt_vco_ck);

  assign bypassi = ( BYPASS | range_byp ) ;

//
//  These muxes are re-written to provide more testability in verilog.
//  If the user does not drive BYPASS or RESET, it will cause an unknown
//  on the output to direct the user's attention to the problem.
//
//  assign pllouti = bypassi ? ref_ck  :
//                    reseti ? 1'b0  : 
//                reset_init ? pllout_ck : 1'b0;  If reset_init has not gone high, output does not start toggling
//  reset_init is internal, initialized to zero, so can only be zero or one, never 'x'
//
  assign reset_reg = pdi | reseti | bypassi | input_missing; //these signals power down PLL, set VCO low


  assign reset_pd = pdi | reseti ; //for the most part these signals are the same

  assign vco4x_normal = (reset_reg === 1'b1) ? 1'b0 :
                     ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco4x_ck : 1'b0 ) : 1'bx );

  assign vco_000 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_000_ck : 1'b0 ) : 1'bx );
  assign vco_045 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_045_ck : 1'b0 ) : 1'bx );
  assign vco_090 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_090_ck : 1'b0 ) : 1'bx );
  assign vco_135 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_135_ck : 1'b0 ) : 1'bx );
  assign vco_180 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_180_ck : 1'b0 ) : 1'bx );
  assign vco_225 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_225_ck : 1'b0 ) : 1'bx );
  assign vco_270 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_270_ck : 1'b0 ) : 1'bx );
  assign vco_315 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b1) ? vco_315_ck : 1'b0 ) : 1'bx );

// if SSMF[4:0] is all zeros, then we assume normal operation, no freq-mod
  assign no_MF = !(SSMF4 || SSMF3 || SSMF2 || SSMF1 || SSMF0);
  assign no_SS = ( !(SSMF4 || SSMF3 || SSMF2 || SSMF1 || SSMF0) | !SSE | MODE32K );

  assign vco4x_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco4x_ck : alt_vco4x_ck ) : 1'bx ) : 1'bx );

  assign vco_000_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_000_ck : alt_vco_000_ck ) : 1'bx ) : 1'bx );
  assign vco_045_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_045_ck : alt_vco_045_ck ) : 1'bx ) : 1'bx );
  assign vco_090_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_090_ck : alt_vco_090_ck ) : 1'bx ) : 1'bx );
  assign vco_135_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_135_ck : alt_vco_135_ck ) : 1'bx ) : 1'bx );
  assign vco_180_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_180_ck : alt_vco_180_ck ) : 1'bx ) : 1'bx );
  assign vco_225_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_225_ck : alt_vco_225_ck ) : 1'bx ) : 1'bx );
  assign vco_270_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_270_ck : alt_vco_270_ck ) : 1'bx ) : 1'bx );
  assign vco_315_alt = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? ((reset_init === 1'b0) ? 1'b0 : 
                                           (reset_init === 1'b1) ? ((no_SS === 1'b1) ? vco_315_ck : alt_vco_315_ck ) : 1'bx ) : 1'bx );

//  assign on_wire = bypassi ? 1'b0  :
//                    reseti ? 1'b0  : on_flag;
//
  assign on_wire = (reset_reg === 1'b1) ? 1'b0  :
                  ((reset_reg === 1'b0) ? on_flag : 1'b0 ) ;

  assign fbi = (fsei == 1'b1) ? vco1x_ck : //using DIVQ in the internal feedback path SAR63337
              ((fsei == 1'b0) ? fb_ext : 1'bx ) ;

  initial begin
    FB_DIV = 1.0;
    range_byp <= 1'b0;
    range_warn <= 1'b0;
    reset_init <= 1'b0;

    warning_flag <= 1'b1;
    ref_freq_chg <= 1'b0;
    on_vco <= 1'b0;
    on_flag <= 1'b0;
    ff_lock <= 1'b0;
    vco_low_flag <= 1'b0;
    vco_high_flag <= 1'b0;
    rFreq_low_flag <= 1'b0;
    rFreq_high_flag <= 1'b0;
    drFreq_low_flag <= 1'b0;
    drFreq_high_flag <= 1'b0;
    pos_pulse_flag <= 1'b0;
    neg_pulse_flag <= 1'b0;
    lock_enabled_flag <= 1'b0;
    pll_lock_reg <= 1'b0;
    delay_lock_reg <= 1'b0;

    lock_count_reg <= 4'b0000;
    fb_count <= 4'b0000;
    last_posedge_ref <= 0;
    last_negedge_ref <= 0;
    period_ref <= 0;
    period_ref1 <= 0;
    period_ref2 <= 0;
    last_posedge_fb <= 0;
    period_fb <= 0;
    period_fb1 <= 0;
    period_fb2 <= 0;
    period_fb3 <= 0;
    period_fb4 <= 0;
    last_posedge_vco <= 0;
    period_vco <= 0;
    low_time_vco <= 0;
    high_time_vco <= 0;
	low_time_vco0 <= 0;
	time_vco0 <= 0;
	time_vco4x0 <= 0;
    high_time_vco0 <= 0;
    last_posedge_divfb <= 0;
    period_divfb <= 0;
    last_posedge_divref <= 0;
    period_divref <= 0;
    ref_div_count <= 0;
    divf_count <= 0;
	vco01x_divwarning <= 0; 
	vco01x_modwarning <= 0;
	vco01x_waitflag <= 1'b0; 
	low_time_vco_count <= 32'b0;
	
    last_posedge_vco4x <= 0;
    period_vco4x <= 0;
    low_time_vco4x <= 0;
    high_time_vco4x <= 0;


    period_ref_real <= 0;
    period_fb_real <= 0;
    inner_freq_margin <= 0;
    period_fb1_real <= 0;
    period_fb2_real <= 0;
    fb_compare <= 0;
    fb_compare1 <= 0;
    fb_compare2 <= 0;
    fb_comp_skip <=0;
    period_divref_real <= 0;
    period_divfb_real <= 0;

    mult_divr <= 0;
	MULT_DIVQ <= 0;
	
    divider_divf <= 0;
    divider_divf_ss <= 0;
    post_divider <= 0;
    mult_divr_dly <= 0;
    divider_divf_dly <= 0;
    divider_external <= (fccc_divider_external === 32'bx) ? 1 : fccc_divider_external;
    divider_external_dly <= 1;
    nb_ref_cycles <= 0;


    nb_fb_cycles <= 0;
    nb_vco_cycles <= 0;
    nb_vco4x_cycles <= 0;
    nb_divref_cycles <= 0;
    nb_divfb_cycles <= 0;
	
	vco4x_ck0 <= 1'b0;
    vco4x_ck <= 1'b0;
	vco1x_ck <= 1'b0;
  enable_vco1x_ck_modset <= 1'b1;
  enable_vco1x_ck_mod_actual <= 1'b0;
  output_periods <= 0;
	vco1x_ck_modset <= 0;
	vco1x_ck_mod <= 0;
  vco1x_ck_mod_actual <= 0;
	vco1x_ck_space <= 0;
	vco4x_ck_modset <= 0;
	vco4x_ck_mod <= 0;
	vco4x_ck_space <= 0;
    vco2x_000_ck <= 1'b0;
    vco2x_090_ck <= 1'b0;
    vco2x_180_ck <= 1'b0;
    vco2x_270_ck <= 1'b0;
    vco_000_ck <= 1'b0;
    vco_045_ck <= 1'b0;
    vco_090_ck <= 1'b0;
    vco_135_ck <= 1'b0;
    vco_180_ck <= 1'b0;
    vco_225_ck <= 1'b0;
    vco_270_ck <= 1'b0;
    vco_315_ck <= 1'b0;
	vco_000_ck0 <= 1'b0;
    vco_045_ck0 <= 1'b0;
    vco_090_ck0 <= 1'b0;
    vco_135_ck0 <= 1'b0;
	vco_180_ck0 <= 1'b0;
    vco_225_ck0 <= 1'b0;
    vco_270_ck0 <= 1'b0;
    vco_315_ck0 <= 1'b0;
	
    divided_ref <= 1'b0;
    divided_fb <= 1'b0;
    ref_time_passed <= 0;
    ref_warn_flag <= 1'b0;
    fse_warn_flag <= 1'b0;
    last_posedge_reset <= 0;
    reset_pulse_flag <= 1'b0;
    last_posedge_pd <= 0;
    pd_pulse_flag <= 1'b0;

    change_per_cycle <= 0.0;
    ss_cycle_count <= 0;
    down_flag_DS <= 1'b1; //always start down from origin
    up_flag_DS <= 1'b0;
    nb_alt_vco_cycles <= 0;
    change_per_cycle4x <= 0.0;
    nb_alt_vco4x_cycles <= 0;
    alt_vco4x_ck <= 1'b0;
    alt_vco2x_000_ck <= 1'b0;
    alt_vco2x_090_ck <= 1'b0;
    alt_vco2x_180_ck <= 1'b0;
    alt_vco2x_270_ck <= 1'b0;
    alt_vco_000_ck <= 1'b0;
    alt_vco_045_ck <= 1'b0;
    alt_vco_090_ck <= 1'b0;
    alt_vco_135_ck <= 1'b0;
    alt_vco_180_ck <= 1'b0;
    alt_vco_225_ck <= 1'b0;
    alt_vco_270_ck <= 1'b0;
    alt_vco_315_ck <= 1'b0;
    input_missing <= 1'b0;
  end

//
// Calculate counter integer values
//
always @(divr5i or divr4i or divr3i or divr2i or divr1i or divr0i)
  begin
    mult_divr <= {divr5i,divr4i,divr3i,divr2i,divr1i,divr0i};
  end

always @(DIVQ2 or DIVQ1 or DIVQ0)
  begin
    case ({DIVQ2,DIVQ1,DIVQ0})
	  3'b000: MULT_DIVQ <= 1;
	  3'b001: MULT_DIVQ <= 2;
	  3'b010: MULT_DIVQ <= 4;
	  3'b011: MULT_DIVQ <= 8;
	  3'b100: MULT_DIVQ <= 16;
	  3'b101: MULT_DIVQ <= 32;
	endcase
  end
  
always @(divf11i or divf10i or divf9i or divf8i or divf7i or divf6i or divf5i or divf4i or divf3i or divf2i or divf1i or divf0i)
  begin 
    divider_divf <= {divf11i,divf10i,divf9i,divf8i,divf7i,divf6i,divf5i,divf4i,divf3i,divf2i,divf1i,divf0i};
    divider_divf_ss <= {divf6i,divf5i,divf4i,divf3i,divf2i,divf1i,divf0i};
  end

always @(divp13i or divp12i or divp11i or divp10i or divp9i or divp8i or divp7i or divp6i or divp5i or divp4i or divp3i or divp2i or divp1i or divp0i)
  begin 
    post_divider <= {divp13i, divp12i, divp11i,divp10i,divp9i,divp8i,divp7i,divp6i,divp5i,divp4i,divp3i,divp2i,divp1i,divp0i} + 1'b1;
  end
//
// Calculate 'Period of Modulation' and Modulation Depth for spread spectrum
//
always @(SSMF4 or SSMF3 or SSMF2 or SSMF1 or SSMF0)
  begin

   if (!no_MF)
   begin
    /*changed IRM 1/31 for circuit change, added (1+MODE1V2') to equations : */
    //ssmod_var <= {SSMF4,SSMF3,SSMF2,SSMF1,SSMF0};
    if (MODE_1V2) ssmod_var <= ( {SSMF4,SSMF3,SSMF2,SSMF1,SSMF0} );
    else ssmod_var <= ( {SSMF4,SSMF3,SSMF2,SSMF1,SSMF0}*2 );
    //Period of Modulation -> (fmod_constant*period_vco) / {SSMF4 or SSMF3 or SSMF2 or SSMF1 or SSMF0} ;
    // we want the number of VCO periods in this overal period though:
    //uber_cycle <= fmod_constant / {SSMF4,SSMF3,SSMF2,SSMF1,SSMF0} ;
    if (MODE_1V2) uber_cycle <= fmod_constant / ({SSMF4,SSMF3,SSMF2,SSMF1,SSMF0}) ;
    else uber_cycle <= fmod_constant / ({SSMF4,SSMF3,SSMF2,SSMF1,SSMF0}*2) ;
   end
    //error-checking for undriven inputs:
    if ( ((SSMF4 !== 1'b0) && (SSMF4 !== 1'b1)) ||
         ((SSMF3 !== 1'b0) && (SSMF3 !== 1'b1)) ||
         ((SSMF2 !== 1'b0) && (SSMF2 !== 1'b1)) ||
         ((SSMF1 !== 1'b0) && (SSMF1 !== 1'b1)) ||
         ((SSMF0 !== 1'b0) && (SSMF0 !== 1'b1)) )
      begin
        if (`WARNING_MESSAGES_ON == 1) begin
          $display ("Warning: SSMF went unknown. The model will continue to operate, but simulation results will not be accurate!");
          $display ("         Instance: %m. Simulation time is %t", $time);
        end
      end
  end

always @( SSMD1 or SSMD0 )
  begin
    case ({SSMD1,SSMD0})
      2'b00: ssmd_percent <= 0; //no modification
      2'b01: ssmd_percent <= 0.005;
      2'b10: ssmd_percent <= 0.01;
      2'b11: ssmd_percent <= 0.015;
      default: begin
               ssmd_percent <= 0; //to prevent model from crashing
               if (`WARNING_MESSAGES_ON == 1) begin
                 $display ("Warning: SSMD went unknown. The model will continue to operate, but simulation results will not be accurate!");
                 $display ("         Instance: %m. Simulation time is %t", $time);
               end
               end
    endcase
  end

/*always @(posedge ref_ck)
  begin
	if (vco01x_modwarning && !vco01x_divwarning)
	 begin
		$display ("**********************Attention********************** ");
		$display ("Warning : The input clock frequency is not divisible by the division factors selected in this configuration.");
		$display ("The PLL might not lock during simulation %0.1fps. Instance: %m",$realtime);
		$display ("***************************************************** ");
		vco01x_divwarning <= 1'b1; 
	 end 
  end  */
 
//
// Calculate change-per-cycle for spread spectrum
//
always @(ssmd_percent or ssmod_var or on_vco) //whenever SSMD or SSMF changes
  begin

    if ((on_vco == 1'b1) && (ssei == 1'b1))
      begin
//        period_vco_max <= period_vco * ( 1.0 + ssmd_percent) ;
        period_vco_max <= (high_time_vco + low_time_vco) * ( 1.0 + ssmd_percent) ;
        ss_period_count <= uber_cycle/2 ;
//        change_per_cycle <= (period_vco*ssmd_percent) / (uber_cycle/2) ;
        change_per_cycle <= ((high_time_vco+low_time_vco)*ssmd_percent) / (uber_cycle/2) ;
/* For 4x VCO!!! */
        period_vco4x_max <= (high_time_vco4x + low_time_vco4x) * ( 1.0 + ssmd_percent) ;
        ss_period_count4x <= (uber_cycle/2) *4 ;  //so really, uber_cycle*2
//        change_per_cycle4x <= ((high_time_vco4x+low_time_vco4x)*ssmd_percent) / (uber_cycle/2) ;
        change_per_cycle4x <= ((high_time_vco4x+low_time_vco4x)*ssmd_percent) / (uber_cycle*2) ;

    //error-checking for Frequency of Modulation
    // outside of 25-50kHz range
    // (40,000,000,000 fs - 20,000,000,000 fs)
    // shortly after RESET, the 'period_vco' might still be zero
    // need to use 'high/low' times instead
            POM = ((uber_cycle/1000) * (high_time_vco + low_time_vco)) ;
            FOM = (10**9)/((uber_cycle/1000) * (high_time_vco + low_time_vco)) ; //the 10^9 will put it in kHz range
        if ( ((uber_cycle/1000) * (high_time_vco + low_time_vco)) > `MIN_FREQ_MOD )
          begin
            if (`WARNING_MESSAGES_ON == 1) begin
            $display ("************************Attention************************");
            $display ("   The Frequency Modulation of the PLL is out of Range!  ");
            $display ("   With the current PLL settings, the Frequency Modulation ");
            $display ("   is too low (less than 25 kHz). The model will continue  ");
            $display ("   to operate, but simulation results will not be accurate! ");
            $display ("   This is likely due to the SSMF[4:0] pins, or the fre-.  ");
            $display ("   quency of the VCO. Please review the settings of the   ");
            $display ("   SSMF[4:0] pins and the divider settings that control    ");
            $display ("   VCO frequency, and rerun the simulation!                ");
            $display ("   Instance: %m. Simulation time is %t", $time);
            $display ("   Period of Modulation is %d picoseconds", POM);
            $display ("   Freq of Modulation is %d kHz", FOM);
            $display ("******************************************************** ");
            end
          end
        if ( ((uber_cycle/1000) * (high_time_vco + low_time_vco)) < `MAX_FREQ_MOD )
          begin
            if (`WARNING_MESSAGES_ON == 1) begin
            $display ("************************Attention************************");
            $display ("   The Frequency Modulation of the PLL is out of Range!  ");
            $display ("   With the current PLL settings, the Frequency Modulation ");
            $display ("   is too high (greater than 50 kHz). The model will con- ");
            $display ("   tinue to operate, but simulation results will not be    ");
            $display ("   accurate!                                               ");
            $display ("   This is likely due to the SSMF[4:0] pins, or the fre-.  ");
            $display ("   quency of the VCO. Please review the settings of the   ");
            $display ("   SSMF[4:0] pins and the divider settings that control    ");
            $display ("   VCO frequency, and rerun the simulation!                ");
            $display ("   Instance: %m. Simulation time is %t", $time);
            $display ("   Period of Modulation is %d picoseconds", POM);
            $display ("   Freq of Modulation is %d kHz", FOM);
            $display ("******************************************************** ");
            end
          end
      end

  end


//
// Check for RESET initialization
//  (If RESET does not go high, PLL output will not toggle
always @(posedge reset_pd or posedge bypassi)
  begin
    reset_init <= 1'b1;
  end


//
// Calculate REF period, divided_ref period, vco variables
//
always @( vco_000 ) begin
  if ( period_ref != 0 ) begin
    if ( ($time - last_posedge_ref) > (10 * period_ref) ) begin
      input_missing <= 1'b1;
      if (`WARNING_MESSAGES_ON == 1) begin
      //$display ("");
      $display ("**********************Attention********************** ");
      $display ("       There may be a problem with the REFCLK path.   ");
      $display ("                It may be stuck at %b!                ", ref_ck);
      $display ("   Instance: %m. Simulation time is %t", $time);
      $display ("***************************************************** ");
      end
    end
  end
end

time period_ref_actual, compensation_stg2, period_ref_compensation;
always @(posedge ref_ck) begin
  if( ref_ck === 1'b1 ) begin
    if (last_posedge_ref !== 0) 
      begin
        divider_external_dly <= divider_external;
        divider_divf_dly <= divider_divf;
        mult_divr_dly <= mult_divr;
        period_ref_actual = $time - last_posedge_ref;
        period_ref = (period_ref_actual > period_ref) ? ((period_ref_actual - period_ref) > 50 ? period_ref_actual : period_ref_actual) : ((period_ref - period_ref_actual) > 50 ? period_ref_actual : period_ref);
        period_ref_compensation = period_ref_compensation + period_ref - period_ref_actual;
        //period_ref <= $time - last_posedge_ref;
        period_ref_real <= $time - last_posedge_ref;
        if (!reset_reg) nb_ref_cycles <= nb_ref_cycles + 1;





    if ( (period_ref !== 0) && (reset_reg === 1'b0) )
      begin
////	
        if ( (mode32ki !== 1'b1) && (mode32ki !== 1'b0) )//making sure we have a value
          begin //warn before crash
           if (`WARNING_MESSAGES_ON == 1) begin
           $display ("Error: MODE32K went unknown. The PLL will not operate!");
           $display ("       Instance: %m. Simulation time is %t", $time);
           end
//            low_time_vco <= x; //will cause zero-delay oscillation error
//            high_time_vco <= x;
          end //if ( (mode32ki !== 1'b1) && (mode32ki !== 1'b0) )
////
        ////else if (mode32ki == 1'b1) //highest precedence path
        ////  begin //additional div-256 in path!
        ////    //$display ("first path!");
        ////    low_time_vco <= (period_ref * mult_divr) / (divider_divf * 256 * 2);
	////    low_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf * 256 * 2);
	////    if ((period_ref * mult_divr * MULT_DIVQ) % (divider_divf * 256 * 2) != 0) 
        ////      vco01x_modwarning <= 1'b1;
        ////    if (low_time_vco !==0)  
        ////      high_time_vco <= (period_ref * mult_divr) / (divider_divf * 256) - low_time_vco;
        ////    else 
        ////      high_time_vco <= (period_ref * mult_divr) / (divider_divf * 256 * 2);
	////    if (low_time_vco0 !==0)  
        ////      high_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf * 256) - low_time_vco0;
        ////    else 
        ////      high_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf * 256 * 2);
        ////    //
        ////    low_time_vco4x <= (period_ref * mult_divr) / (divider_divf * 256 * 2 *4);
        ////    if (low_time_vco4x !==0)  
        ////      high_time_vco4x <= (period_ref * mult_divr) / (divider_divf * 256 *4) - low_time_vco4x;
        ////    else 
        ////      high_time_vco4x <= (period_ref * mult_divr) / (divider_divf * 256 * 2 *4);
        ////  end //(mode32ki == 1'b1)
        else if (fsei == 1'b0) //DESKEW=1, driving inverted DESKEW from top
          begin
            //$display ("second path!");
            low_time_vco <= (period_ref) / (POST_DIV * FB_DIV * 2);
            low_time_vco0 <= $floor((period_ref) / (POST_DIV * FB_DIV * 2));

            if (low_time_vco !== 0) 
              high_time_vco <= ((period_ref) / (POST_DIV * FB_DIV)) - low_time_vco;
            else 
              high_time_vco <= (period_ref) / (POST_DIV * FB_DIV * 2);
              
            if ( (low_time_vco0 !== 0) && ($floor((period_ref) / (POST_DIV * FB_DIV * 2)) > low_time_vco0) ) 
              high_time_vco0 <= (period_ref) / (POST_DIV * FB_DIV * 2) - low_time_vco0;
            else begin
              if ( ((period_ref) / (POST_DIV * FB_DIV * 2)) > (low_time_vco0 + 0.5) ) 
                high_time_vco0 <= $ceil((period_ref) / (POST_DIV * FB_DIV * 2));
              else
                high_time_vco0 <= $floor((period_ref) / (POST_DIV * FB_DIV * 2));
            end
            //
            low_time_vco4x <= (period_ref) / (POST_DIV * FB_DIV * 2 * 4);
            if (low_time_vco4x !== 0) 
//high_time_vco4x <= (period_ref) / (divider_external * divider_divf *4) - low_time_vco4x;
              high_time_vco4x <= (period_ref) / (POST_DIV * FB_DIV * 2 *4);
            else 
              high_time_vco4x <= (period_ref) / (POST_DIV * FB_DIV * 2 *4);
          end //(fsei == 1'b0)
        else if (ssei == 1'b0) //foutfben=0, normal internal path
          begin
            //$display ("third path!");
            low_time_vco <= (period_ref) / (divider_divf * 2);
	    low_time_vco0 <= (period_ref * 1) / (divider_divf * 2);
	    if ((period_ref * 1) % (divider_divf * 2) != 0) 
              vco01x_modwarning <= 1'b1;
            if (low_time_vco !==0)  
              high_time_vco <= (period_ref) / (divider_divf) - low_time_vco;
            else 
              high_time_vco <= (period_ref) / (divider_divf * 2);
	    if (low_time_vco0 !==0)  
              high_time_vco0 <= (period_ref * 1) / (divider_divf) - low_time_vco0;
            else 
              high_time_vco0 <= (period_ref * 1) / (divider_divf * 2);
            //
            low_time_vco4x <= (period_ref) / (divider_divf * 2 *4);
            if (low_time_vco4x !==0)  
              high_time_vco4x <= (period_ref) / (divider_divf *4) - low_time_vco4x;
            else 
              high_time_vco4x <= (period_ref) / (divider_divf * 2 *4);
          end //if (ssei == 1'b0)
        else if (ssei == 1'b1)  //foutfben = 1
          begin
            low_time_vco <= (period_ref) / (divider_divf * (post_divider * 4) * 2);
	    low_time_vco0 <= (period_ref * MULT_DIVQ) / (divider_divf * (post_divider * 4) * 2);
	    if (((period_ref * MULT_DIVQ) % (divider_divf * (post_divider * 4) * 2)) != 0) 
              vco01x_modwarning <= 1'b1;
            if (low_time_vco !== 0) 
              high_time_vco <= (period_ref) / (divider_divf * (post_divider * 4)) - low_time_vco;
            else 
              high_time_vco <= (period_ref) / (divider_divf  * (post_divider * 4) * 2);
	    if ( (low_time_vco0 !== 0) && ((period_ref * MULT_DIVQ) / (divider_divf * (post_divider * 4)) > low_time_vco0) ) 
              high_time_vco0 <= (period_ref * MULT_DIVQ) / (divider_divf * (post_divider * 4)) - low_time_vco0;
            else 
              high_time_vco0 <= (period_ref * MULT_DIVQ) / (divider_divf * (post_divider * 4) * 2);
            //
            low_time_vco4x <= (period_ref) / (divider_divf * (post_divider * 4) * 2 *4);
            if (low_time_vco4x !== 0) 
              high_time_vco4x <= (period_ref) / (divider_divf * (post_divider * 4) * 4) - low_time_vco4x;
            else 
              high_time_vco4x <= (period_ref) / (divider_divf * (post_divider * 4) * 2 *4);
          end //(ssei == 1'b1)
        ////else //mode32ki=0,fsei=1,ssei=1 : Spread Spectrum!!
        ////  begin
        ////    //$display ("SSE mode!!");
        ////    //calculations for normal(starting) vco
        ////    low_time_vco <= (period_ref * mult_divr) / (divider_divf_ss * 8 * 2);
	////    low_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf_ss * 8 * 2);
	////    if ((period_ref * mult_divr * MULT_DIVQ) % (divider_divf_ss * 8 * 2) != 0) 
        ////      vco01x_modwarning <= 1'b1;
        ////    if (low_time_vco !==0)  
        ////      high_time_vco <= (period_ref * mult_divr) / (divider_divf_ss * 8) - low_time_vco;
        ////    else 
        ////      high_time_vco <= (period_ref * mult_divr) / (divider_divf_ss * 8 * 2);
	////    if (low_time_vco0 !==0)  
        ////      high_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf_ss * 8) - low_time_vco0;
        ////    else 
        ////      high_time_vco0 <= (period_ref * mult_divr * MULT_DIVQ) / (divider_divf_ss * 8 * 2);
        ////    //
        ////    low_time_vco4x <= (period_ref * mult_divr) / (divider_divf_ss * 8 * 2 *4);
        ////    if (low_time_vco4x !==0)  
        ////      high_time_vco4x <= (period_ref * mult_divr) / (divider_divf_ss * 8 *4) - low_time_vco4x;
        ////    else 
        ////      high_time_vco4x <= (period_ref * mult_divr) / (divider_divf_ss * 8 * 2 *4);
        ////  end //if ((fsei == 1'b1) && (ssei == 1'b1))

        //Track minimum negative pulse width
        if ( (($time - last_negedge_ref) < `PULSE_MIN ) && !neg_pulse_flag && delay_lock_reg )
          begin
           if (`WARNING_MESSAGES_ON == 1) begin
           //$display ("");
           $display ("************************Attention************************");
           $display ("   The negative pulse of the incoming REFCK clock is too   ");
           $display ("   small! The minimum acceptable pulse width is 1ns. ");
           $display ("   The PLL verilog model will continue to operate, but   ");
           $display ("   the current simulation results may not be accurate!   ");
           //$display ("");
           $display ("   Please check the REFCK input signal, and rerun the      ");
           $display ("   simulation.                                           ");
           //$display ("");
           $display ("   Instance: %m. Simulation time is %t", $time);
           $display ("******************************************************** ");
           //$display ("");
          end
           neg_pulse_flag <= 1'b1;
          end

      end //if (period_ref !== 0)

      end //if (last_posedge_ref !== 0)

        if ((period_ref !== 0) && !reset_reg && (low_time_vco != 0)) 
        begin
          on_vco <= 1'b1;
          on_flag <= 1'b1;
        end

    last_posedge_ref <= $time;
    if (period_ref1 !== 0) begin
      period_ref2 <= period_ref1;
      //period_ref2 <= (period_ref2 > period_ref1) ? ((period_ref2 - period_ref1) > 2 ? period_ref1 : period_ref2) : ((period_ref1 - period_ref2) > 2 ? period_ref1 : period_ref2);
    end
    if (period_ref !== 0) begin
      period_ref1 <= period_ref;
      //period_ref1 <= (period_ref1 > period_ref) ? ((period_ref1 - period_ref) > 2 ? period_ref : period_ref1) : ((period_ref - period_ref1) > 2 ? period_ref : period_ref1);
    end

    //
    // ERROR CHECKING to detect possible problems with the FB path
    //
    //for possible problems with feedback path
    if ( (fbi !== 1'b0) && (fbi !== 1'b1) )
      begin
        if (warning_flag == 1'b1)
          begin
            if (`WARNING_MESSAGES_ON == 1) begin
            //$display ("");
            $display ("**********************Attention********************** ");
            $display ("The Feedback path (pin FB) is not properly connected. ");
            $display ("        Current results may not be accurate!!         ");
            //$display ("");
            $display ("   Simulation time is %t", $time);
            $display ("***************************************************** ");
            //$display ("");
            end
            warning_flag <= 1'b0;	//warned, so turn it off
          end
      end
    if ( (nb_ref_cycles == 300) && (period_fb == 0) && (!reset_reg) && (fsei == 1'b0) )
      begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("**********************Attention********************** ");
        $display ("       There may be a problem with the FB pin.        ");
        $display ("                It may be stuck at %b                 ", FB);
        $display (" The pulse coming out of the PLL VCO is taking a long ");
        $display ("      time to show up on the FB input of the PLL.     ");
        $display ("  Please check the feedback path and ensure that the  ");
        $display ("          simulation results are accurate.            ");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("***************************************************** ");
        end
      end

    //check if frequency of incoming REF clock is out of spec
    if ( (period_ref !== 0) && !MODE32K )
      begin
        if ( (period_ref>`MIN_REF_FREQ) && !rFreq_low_flag && pll_lock_reg && delay_lock_reg )
          begin
           if (`WARNING_MESSAGES_ON == 1) begin
           //$display ("");
           $display ("************************Attention************************");
           $display ("   The frequency of the incoming REFCK clock is too slow!  ");
           $display ("   The frequency is below 1MHz.                          ");
           $display ("   The PLL is operating out of spec, therefore the       ");
           $display ("   current simulation results may not be accurate!       ");
           //$display ("");
           $display ("   Please check the REFCK input signal, and rerun the      ");
           $display ("   simulation.                                           ");
           //$display ("");
           $display ("   Instance: %m. Simulation time is %t", $time);
           $display ("******************************************************** ");
           //$display ("");
           end
           rFreq_low_flag <= 1'b1;
          end
        if ( (period_ref < `MAX_REF_FREQ) && !rFreq_high_flag && pll_lock_reg && delay_lock_reg )
          begin
           if (`WARNING_MESSAGES_ON == 1) begin
           //$display ("");
           $display ("************************Attention************************");
           $display ("   The frequency of the incoming REFCK clock is too fast!  ");
           $display ("   The frequency is above 200MHz.                        ");
           $display ("   The PLL is operating out of spec, therefore the       ");
           $display ("   current simulation results may not be accurate!       ");
           //$display ("");
           $display ("   Please check the REFCK input signal, and rerun the      ");
           $display ("   simulation.                                           ");
           //$display ("");
           $display ("   Instance: %m. Simulation time is %t", $time);
           $display ("******************************************************** ");
           //$display ("");
           end
           rFreq_high_flag <= 1'b1;
          end
      end //if ( (period_ref !== 0) && !MODE32K )

    //check to make sure RESET is initialized at some point, warn user if not
    if ( (nb_ref_cycles == 100) && (reset_init == 1'b0) ) begin
      if (`WARNING_MESSAGES_ON == 1) begin
      //$display ("");
      $display ("**********************Attention**********************");
      $display ("   The verilog model has not been initialized yet!   ");
      $display ("   Neither the RESET, PD nor BYPASS pins have been   ");
      $display ("   asserted. Please check the RESET, PD and BYPASS   ");
      $display ("   pins.                                             ");
      //$display ("");
      $display ("  The PLL verilog model will not produce an output   ");
      $display ("  signal until RESET or PD is asserted and de-asserted,");
      $display ("  or BYPASS is asserted!                             ");
      //$display ("");
      $display ("   Instance: %m. Simulation time is %t", $time);
      $display ("*****************************************************");
      //$display ("");
      end
    end
  end //always @(posedge ref_ck)
end
//
// Track minimum positive pulse width
//
always @(negedge ref_ck)
    begin
	if (last_posedge_ref !== 0)
	  begin
	    if ( (($time - last_posedge_ref) < `PULSE_MIN ) && !pos_pulse_flag && delay_lock_reg )
	          begin
	           if (`WARNING_MESSAGES_ON == 1) begin
             //$display ("");
	           $display ("************************Attention************************");
	           $display ("   The positive pulse of the incoming REFCK clock is too   ");
	           $display ("   small!  The minimum acceptable pulse width is 1ns.");
	           $display ("   The PLL verilog model will continue to operate, but   ");
	           $display ("   the current simulation results may not be accurate!   ");
	           //$display ("");
	           $display ("   Please check the REFCK input signal, and rerun the      ");
	           $display ("   simulation.                                           ");
	           //$display ("");
	           $display ("   Instance: %m. Simulation time is %t", $time);
	           $display ("******************************************************** ");
	           //$display ("");
             end
	           pos_pulse_flag <= 1'b1;
	          end
	  end
	last_negedge_ref <= $time;
    end

//
//DIVR block: either edge of REFCK
// this is where we do the dividing
always @(ref_ck)
// IRM 2011.02.11 : Need to use reset_reg instead of reset_pd to be consistent
//                  with what happens to REFCK variables getting cleared
//                  This will prevent false RANGE warnings, with bypass
  begin
    if ((last_posedge_ref == 0)&&(period_ref == 0)&&(ref_ck==1'b1) && !reset_reg)
    //This is the first REFCK cycle - above condition is only true
    // if this is the first time we enter this procedural block
      begin
        if (mult_divr == 1) divided_ref <= ref_ck; //unique case
        else divided_ref <= 1'b1; //start signal high
        ref_div_count <= #1 ref_div_count + 1;
      end
    else if ((ref_div_count < mult_divr) && (ref_div_count !== 0)&& !reset_reg)
      ref_div_count <= #1 ref_div_count +1; //dont toggle, increase the count
    //else if ((ref_div_count == mult_divr)&& !reset_reg)
    else if (!reset_reg)
      begin
       divided_ref <= !divided_ref; //toggle!
       ref_div_count <= #1 1; //reset divider count, not to 0 or count is off
      end
  end

//
//Calculate divided-REFCK period
//
  always@(posedge divided_ref) begin
    if (last_posedge_divref !== 0) begin
      period_divref <= $time - last_posedge_divref;
      period_divref_real <=  $time - last_posedge_divref;
      nb_divref_cycles <= nb_divref_cycles + 1;
    end
    //error checking: to see if frequency of
    //divided_ref is out of spec
    if ( (period_divref !== 0) && MODE32K ) begin //32KHz mode - 31,250,000,000 fs, +/- 5%
      if ( (period_divref > `MIN_DREF32K_FREQ) && !drFreq_low_flag && pll_lock_reg && delay_lock_reg ) begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The frequency of the divided REFCK clock is too slow!   ");
        $display ("   The frequency is below 32KHz.                         ");
        $display ("   The PLL is operating out of spec, therefore the       ");
        $display ("   current simulation results may not be accurate!       ");
        //$display ("");
        $display ("   This is likely due to either the setting of MODE32K,  ");
        $display ("   DIVR, or the frequency of REFCK. Please check these     ");
        $display ("   values and rerun the simulation.                      ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("******************************************************** ");
        //$display ("");
        end
        drFreq_low_flag <= 1'b1;
      end
      if ( (period_divref < `MAX_DREF32K_FREQ) && !drFreq_high_flag && pll_lock_reg && delay_lock_reg ) begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The frequency of the divided REFCK clock is too fast!   ");
        $display ("   The frequency is above 32KHz.                         ");
        $display ("   The PLL is operating out of spec, therefore the       ");
        $display ("   current simulation results may not be accurate!       ");
        //$display ("");
        $display ("   This is likely due to either the setting of MODE32K,  ");
        $display ("   DIVR, or the frequency of REFCK. Please check these     ");
        $display ("   values and rerun the simulation.                      ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("******************************************************** ");
        //$display ("");
        end
        drFreq_high_flag <= 1'b1;
      end
    end //if ( (period_divref !== 0) && MODE32K )

    if ( (period_divref !== 0) && !MODE32K ) begin
	    if ( (period_divref > `MIN_DREF_FREQ) && !drFreq_low_flag && pll_lock_reg && delay_lock_reg ) begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The frequency of the divided REFCK clock is too slow!   ");
        $display ("   The frequency is below 1MHz.                          ");
        $display ("   The PLL is operating out of spec, therefore the       ");
        $display ("   current simulation results may not be accurate!       ");
        //$display ("");
        $display ("   This is likely due to either the setting of DIVR, or  ");
        $display ("   the frequency of REFCK. Please check these values and   ");
        $display ("   rerun the simulation.                                 ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("******************************************************** ");
        //$display ("");
        end
        drFreq_low_flag <= 1'b1;
      end
	    if ( (period_divref < `MAX_DREF_FREQ) && !drFreq_high_flag && pll_lock_reg && delay_lock_reg ) begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The frequency of the divided REFCK clock is too fast!   ");
        $display ("   The frequency is above 200MHz.                        ");
        $display ("   The PLL is operating out of spec, therefore the       ");
        $display ("   current simulation results may not be accurate!       ");
        //$display ("");
        $display ("   This is likely due to either the setting of DIVR, or  ");
        $display ("   the frequency of REFCK. Please check these values and   ");
        $display ("   rerun the simulation.                                 ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("******************************************************** ");
        //$display ("");
        end
        drFreq_high_flag <= 1'b1;
      end //if ( (period_divref !== 0) && !MODE32K )
	  end
    last_posedge_divref <= $time;
  end

//
// Calculate lock delay
//
always @(lockcnt3i or lockcnt2i or lockcnt1i or lockcnt0i)
  begin
    //lock_delay <= 2**({lockcnt3i,lockcnt2i,lockcnt1i,lockcnt0i}+5);
    // To speed up the PLL lock (SAR54180).
    lock_delay <= 0;
  end

// need to have this in a separate block so that LOCK goes low when needed.
always@(nb_divref_cycles or reset_reg)
  begin
    if (lock_enabled_flag === 1'b1)
     begin
      if (nb_divref_cycles >= lock_delay) delay_lock_reg <= 1'b1;
      else delay_lock_reg <= 1'b0;
     end
    else // !lock_enabled_flag
     delay_lock_reg <= 1'b0;
  end

//
// RANGE bit functionality check
//  The RANGE bits are analog, but this will give the user
//  a warning if the RANGE bits do not appear to be set
//  appropriately
//
always @( posedge divided_ref ) begin
  range_byp <= 1'b0;
  case({range3i,range2i,range1i,range0i})
    4'b0000:  range_byp <= 1'b1;
    4'b0001:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > `MIN_DREF_FREQ) || (period_divref < 59_524) ) begin //10-16.8MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0010:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 59_524) || (period_divref < 37_313) ) begin //16.8-26.8MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0011:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 37_313) || (period_divref < 23_256) ) begin //26.8-43MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0100:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 23_256) || (period_divref < 14_493) ) begin //43-69MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0101:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 14_493) || (period_divref < 9_091) ) begin //69-110MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0110:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 9_091) || (period_divref < 5_714) ) begin //110-175MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
    4'b0111:  begin
                if ( (period_divref !== 0) && (range_warn == 1'b0) && !reset_reg && !mode32ki && delay_lock_reg) begin
                  if ( (period_divref > 5_714) || (period_divref < 5_000) ) begin //175-200MHz
                    if (`WARNING_MESSAGES_ON == 1) begin
                    $display ("************************Attention************************");
                    $display ("   The frequency of the Post-divider Reference Clock is  ");
                    $display ("   out of range! Either the RANGE[2:0] pins are not pro- ");
                    $display ("   grammed correctly, or the DIVR divider is not program-");
                    $display ("   med correctly. The model will continue to operate, but");
                    $display ("   simulation results may not be accuate!                ");
                    $display ("   Instance: %m. Simulation time is %t", $time);
                    $display ("******************************************************** ");
                    end
                    range_warn <= 1'b1;
                  end
                end
              end
  endcase
end


//
// Calculate FB period (external FB mode only)
//	also checks for FB consistency
//
  always @(posedge fbi)
    begin
	if (fsei == 1'b0)
	    begin
	    if (reset_pd)
		begin
		  fb_count <= 4'b0000;
		  ff_lock <= 1'b0;
		end
	    else
		begin
		  if ( (period_fb2 !== 0) && (period_fb1 !== 0) && (period_fb !== 0) && (period_fb2_real != 0) )







			fb_compare = period_fb1_real / period_fb2_real;
		  if ( (period_fb3 !== 0) && (period_fb2 !== 0) && (period_fb1 !== 0) && (period_fb3_real != 0) )
			fb_compare1 <= period_fb2_real / period_fb3_real;
		  if ( (period_fb4 !== 0) && (period_fb3 !== 0) && (period_fb2 !== 0) && (period_fb4_real != 0) )
			fb_compare2 <= period_fb3_real / period_fb4_real;
		  if ( (period_fb4 !== 0) && (period_fb4_real != 0) )
			fb_comp_skip <= period_fb1_real / period_fb4_real;

		  if( ff_lock == 1'b0)
		    //if we havent locked a frequency yet
		    begin
			if ( (fb_compare < 0.99) || (fb_compare > 1.01) )
			//out of acceptable range
			    begin
				fb_count <= 4'b0000;
				ff_lock <= 1'b0;
			    end		
			else				//w-in range, count accordingly
			    begin
				//if (fb_count < 6'b1010)
        if (fb_count < 6'b1)
				    begin
					fb_count <= fb_count + 1'b1;
					ff_lock <= 1'b0;
				    end
				else
					if ((period_divfb !==0) && (period_divref !== 0)) ff_lock <=1'b1;
					//lock signal ONLY goes high when we have non-zero number
					//to calculate external divider
			    end
		    end
		  else //ff_lock = 1
		    //we've locked freq, so we want to make sure we dont unlock for unwanted reasons
		    begin
			if ( ((fb_compare < 0.99) || (fb_compare > 1.01)) &&
			    ((fb_compare1 < 0.99) || (fb_compare1 > 1.01)) &&
			    ((fb_compare2 < 0.99) || (fb_compare2 > 1.01)) )
			//if fb_compare is out of spec for 3 cycles,
			//go ahead and unlock
			    begin
				fb_count <= 4'b0000;
				ff_lock <= 1'b0;
			    end
			else if ( ((fb_compare1 < 0.99) || (fb_compare1 > 1.01)) &&
			          ((fb_compare2 < 0.99) || (fb_compare2 > 1.01)) &&
			          ((fb_comp_skip < 0.99) || (fb_comp_skip > 1.01)) )
			    begin
				fb_count <= 6'b0000;
				ff_lock <= 1'b0;
			    end
		    end
		end
	    end

	if (last_posedge_fb !== 0 && !bypassi) 
	    begin
		period_fb <= $time - last_posedge_fb;
		period_fb_real <=  $time - last_posedge_fb;
		nb_fb_cycles <= nb_fb_cycles +1;
	    end

	last_posedge_fb <= $time;

    //To detect any change in FB period:
	if (period_fb3 !== 0)
	    begin
		period_fb4 <= period_fb3;
		period_fb4_real <= period_fb3_real;
	    end
	if (period_fb2 !== 0)
	    begin
		period_fb3 <= period_fb2;
		period_fb3_real <= period_fb2_real;
	    end
	if (period_fb1 !== 0)
	    begin
		period_fb2 <= period_fb1;
		period_fb2_real <= period_fb1_real;
	    end
	if (period_fb !== 0)
	    begin
		period_fb1 <= period_fb;
		period_fb1_real <= period_fb_real;
	    end

//For external FB, drive divided_fb
	if ( (divider_divf > 1) && (fsei == 0) ) begin
	if ((divf_count == 0) && !bypassi && !reset_pd)
	    begin
		divided_fb <= 1'b1;
		divf_count <= divider_divf - 1;
	    end
	if ((divf_count !== 0) && !bypassi && !reset_pd) 
	    begin
		divided_fb <= 1'b0;
		divf_count <= divf_count - 1;
	    end
	if (bypassi || reset_pd) 
	    begin
		divided_fb <= 1'b0;
		divf_count <= 0;
	    end
	end

    end

//
//For external FB, drive divided_fb
//
always@(fbi)
  begin
    if ((divider_divf == 1) && (fsei == 0))
         divided_fb <= fbi;
  end

//
//Calculate FB and REFCK periods post-dividers
//
always@(posedge divided_fb)
  begin
    if (last_posedge_divfb !== 0) 
      begin
        period_divfb <= $time - last_posedge_divfb;
        period_divfb_real <=  $time - last_posedge_divfb;
      end
   last_posedge_divfb <= $time;
  end


//
// Check for any external dividers/multipliers 
//
always @(posedge ff_lock)
  begin
    if (reset_pd)
      divider_external = (fccc_divider_external === 32'bx) ? 1 : fccc_divider_external;
    else
      begin
        if (fsei == 1'b0)
          begin
            if ((period_divref !== 0) && (period_divfb !==0))
              begin
                if ( ((period_divfb_real / period_divref_real) < 0.99 ) || ((period_divfb_real / period_divref_real) > 1.01 ) )
                  divider_external = (period_divfb_real > period_divref_real) ? ( (period_divfb_real / period_divref_real) ) : 1;
              end
          end
      end
  end

//
//Get post-divider measurements for LOCK
//
always @(posedge divided_ref or posedge divided_fb)
  begin
    if ((period_divref) != 0)
      inner_freq_margin <= 1;//((period_divfb_real)/(period_divref_real * divider_external));//divider_external is multiplied to denominator as fb clock is a multiple of that.
    else
      inner_freq_margin <= 0;
  end

always @(posedge ref_ck)
  begin
    if (!on_wire)	//resetting
      begin
        lock_count_reg <= 4'b0000;
        lock_enabled_flag <= 1'b0;
      end
      else if (fsei == 1'b0)
        begin
          if ( ((inner_freq_margin >= 0.99) || (inner_freq_margin <= 1.01)) && (lock_count_reg == 4'h4) )
            begin
             //count remains at 10
             lock_enabled_flag <= 1'b1;
            end
          if ( ((inner_freq_margin >= 0.99) || (inner_freq_margin <= 1.01)) && (lock_count_reg < 4'h4) )
            begin
              lock_count_reg <= lock_count_reg + 4'b0001;	//count increments
              lock_enabled_flag <= 1'b0;
            end
          if ( ((inner_freq_margin < 0.99) || (inner_freq_margin > 1.01)) )	//out of range
            begin
              lock_count_reg <= 4'b0000;	//count resets to zero
              lock_enabled_flag <= 1'b0;
            end
        end
      else if (fsei == 1'b1)
        begin
          if (nb_ref_cycles > 2)
            lock_enabled_flag <= 1'b1;
        end
  end

//
// Drive LOCK
//
always @ (lock_enabled_flag or on_flag or ref_warn_flag or fse_warn_flag)
  begin
    if (on_flag && lock_enabled_flag && reset_init && !ref_warn_flag && !fse_warn_flag)
      //if not in reset, bypass, or REFCK stops toggling
      pll_lock_reg <= 1'b1;
    else
      //either reset, or not locked
      pll_lock_reg <= 1'b0;
  end

//
// Drive vco_ck4x (NORMAL)
//
time phase_shift, phase_shift_low;
real last_posedge_ref_real, last_posedge_fb_real, last_negedge_ref_real, last_negedge_fb_real;
reg divq_reset;

always @(posedge ref_ck) begin
  last_posedge_ref_real = $realtime;
end
always @(posedge fbi) begin
  last_posedge_fb_real = $realtime;
end
always @(negedge ref_ck) begin
  last_negedge_ref_real = $realtime;
end
always @(negedge fbi) begin
  last_negedge_fb_real = $realtime;
end

always @(negedge ref_ck) begin
  if ( (lock_count_reg > 0) && (last_posedge_fb_real != 0) )
    phase_shift = (last_posedge_fb_real-last_posedge_ref_real)/50;
  else
    phase_shift = 0;
end
always @(posedge ref_ck) begin
  if ( (lock_count_reg > 0) && (last_negedge_fb_real != 0) )
    phase_shift_low = (last_negedge_fb_real-last_negedge_ref_real)/50;
  else
    phase_shift_low = 0;
end

integer count_edges;
time compensate_neg, compensate_pos;
integer count_limit;
real  fractional_mod, fractional_division;

time  actual_low_time_vco0;
time  actual_high_time_vco0;
`ifdef pll_dbg
time  vco1x_last_posedge_ref;
`endif
reg[8*4-1:0]  compensation_state;

always @(posedge vco1x_ck) begin
`ifdef pll_dbg
  vco1x_last_posedge_ref = $time;
`endif
  output_periods = output_periods + 1;
  if ( output_periods > POST_DIV * FB_DIV ) begin
    wait (ref_ck === 1'b1);
    output_periods = 1;
    enable_vco1x_ck_modset = 1'b1;
    enable_vco1x_ck_mod_actual = 1'b1;
  end
  else if ( output_periods == 3 ) begin
    enable_vco1x_ck_mod_actual = 1'b0;
    period_ref_compensation = 0;
  end
end
  
time  posedge_diff;
initial 




  posedge_diff = 0;
  
time vco1x_ck_re, vco1x_ck_re_prev, FB_re, fb_reset_width, fb_reset_width_2, fb_reset_width_3;
wire external_feedback;
initial begin
  vco1x_ck_re = 0;
  vco1x_ck_re_prev = 0;
  FB_re = 0;
  //fb_reset_width = 0;
  //fb_reset_width_2 = 0;
end
always @(posedge REFCK) begin
  vco1x_ck_re = $time;  
  //$display("vco1x_ck_re = %t  %t", vco1x_ck_re, $time);
end
always @(posedge FB or PD) begin
  if ( (PD == 1'b0) && (vco1x_ck_re > 0) && (external_feedback == 1'b1) ) begin
    vco1x_ck_re_prev = vco1x_ck_re;// [PU] For SAR 111899. Moving statment to top
    FB_re = $time;
    fb_reset_width = ( (FB_re > vco1x_ck_re) && (vco1x_ck_re > vco1x_ck_re_prev) ) ? ((FB_re - vco1x_ck_re) / (POST_DIV * FB_DIV * 2)) >= 0.5*(low_time_vco0 + high_time_vco0) ? 
      0 : ((FB_re - vco1x_ck_re) / (POST_DIV * FB_DIV * 2)) : 0;
    fb_reset_width = ( (fb_reset_width == low_time_vco0) || (fb_reset_width == high_time_vco0) ) ? 0 : fb_reset_width;
    //$display("fb_reset_width = %t FB_re = %t  vco1x_ck_re = %t", fb_reset_width, FB_re, vco1x_ck_re);
    fb_reset_width_2 = ( (FB_re > vco1x_ck_re) && (vco1x_ck_re > vco1x_ck_re_prev) ) ? (FB_re - vco1x_ck_re) : 0;
    fb_reset_width_3 = ( (((FB_re - vco1x_ck_re) / (POST_DIV * FB_DIV * 2)) < 1) && (fb_reset_width_2 > 0) ) ? 1 : 0;
    //vco1x_ck_re_prev = vco1x_ck_re;// [PU] For SAR 111899. Moving statment to top
  end
  else begin
    FB_re = 0;
    fb_reset_width = 0;
    fb_reset_width_2 = 0;
    fb_reset_width_3 = 0;
  end
end


always begin

  if (on_vco & !divq_reset) begin
	fractional_division = POST_DIV * FB_DIV;
  fractional_mod = ( (POST_DIV * FB_DIV) - $rtoi(fractional_division) ) * (low_time_vco0 + high_time_vco0);
  vco1x_ck_mod = ( period_ref % (low_time_vco0 + high_time_vco0) );                 // period/output remainder   
	vco1x_ck_space = $ceil( $itor((period_ref - vco1x_ck_mod) / (vco1x_ck_mod + 1)) );       // Spacing between added remainders 
  posedge_diff = (($time - last_posedge_ref) < low_time_vco0) ? ($time - last_posedge_ref) : 0;
  
  if ( period_ref_actual != period_ref )
    /*vco1x_ck_mod_actual = ( period_ref_actual % (low_time_vco0 + high_time_vco0) ) > (low_time_vco0 + high_time_vco0)/2 ? 
      ( -1 * ( period_ref_actual % (low_time_vco0 + high_time_vco0) ) + (low_time_vco0 + high_time_vco0) + vco1x_ck_mod ) : 0;*/
    vco1x_ck_mod_actual = posedge_diff;
  else 
    vco1x_ck_mod_actual = 0;
    
  fb_reset_width <= (fb_reset_width == 0) ? 0 : fb_reset_width;
  fb_reset_width = (fb_reset_width == 0)  ? fb_reset_width_3 : fb_reset_width;
  fb_reset_width_3 = 0;
  
	if (period_ref % (low_time_vco0 + high_time_vco0) != 0)                           // Odd division of reference clock 
	begin
		vco1x_ck <= 1'b1 & !divq_reset;
		if ((time_vco0 + low_time_vco0) < (period_ref - (period_ref % (low_time_vco0 + high_time_vco0)))/(period_ref % (low_time_vco0 + high_time_vco0) + 1))
		begin
      //output_periods = output_periods + 1;
			time_vco0 <= time_vco0 + low_time_vco0;
			vco01x_waitflag <= 1'b1;
      actual_low_time_vco0 = low_time_vco0;
      compensation_state <= "LOW1";
			#(low_time_vco0 - fb_reset_width);
			vco01x_waitflag <= 1'b0;
		end 
		else if (((time_vco0 + low_time_vco0) >= vco1x_ck_space) &&	(vco1x_ck_modset != vco1x_ck_mod) )


		begin 
      //output_periods = output_periods + 1;
			time_vco0 <= (time_vco0 + low_time_vco0 + enable_vco1x_ck_modset) - vco1x_ck_space; 
			vco1x_ck_modset <= vco1x_ck_modset + enable_vco1x_ck_modset;
			vco01x_waitflag <= 1'b1;
			actual_low_time_vco0 = low_time_vco0 + enable_vco1x_ck_modset;
      compensation_state <= "LOW2";
      #(low_time_vco0 + enable_vco1x_ck_modset - enable_vco1x_ck_mod_actual * vco1x_ck_mod_actual * 1 - fb_reset_width);
      vco01x_waitflag <= 1'b0;
		end
		else if ((time_vco0 + low_time_vco0) >= vco1x_ck_space &&	vco1x_ck_modset == vco1x_ck_mod)
		begin
      //output_periods = output_periods + 1;
			time_vco0 <= 0; 
			vco1x_ck_modset <= 0;
      enable_vco1x_ck_modset = 1'b0;
			vco01x_waitflag <= 1'b1;
      actual_low_time_vco0 = low_time_vco0;
      compensation_state <= "LOW3";
			#(low_time_vco0 - fb_reset_width);
			vco01x_waitflag <= 1'b0;
		end 
		vco1x_ck <= 1'b0 & !divq_reset;
		if (high_time_vco0 > (low_time_vco0*3/2)) 
		 begin
		  vco01x_waitflag <= 1'b1;
      actual_low_time_vco0 = low_time_vco0;
      compensation_state <= "LOW4";
		  #(low_time_vco0 - fb_reset_width);
		  vco01x_waitflag <= 1'b0;
		 end 
		else 
		begin
		  if (time_vco0 + high_time_vco0 < vco1x_ck_space)
			begin
				time_vco0 <= time_vco0 + high_time_vco0; 
        actual_high_time_vco0 = high_time_vco0;
        compensation_state <= "HIGH1";
				#(high_time_vco0);
			end 
		  else if ((time_vco0 + high_time_vco0 >= vco1x_ck_space) && (vco1x_ck_modset != vco1x_ck_mod) ) 
			begin 
				time_vco0 <= (time_vco0 + low_time_vco0 + enable_vco1x_ck_modset) - vco1x_ck_space; 
				vco1x_ck_modset <= vco1x_ck_modset + enable_vco1x_ck_modset;
        actual_high_time_vco0 = high_time_vco0 + enable_vco1x_ck_modset;
        compensation_state <= "HIGH2";
				#(high_time_vco0 + enable_vco1x_ck_modset - enable_vco1x_ck_mod_actual * vco1x_ck_mod_actual * 1);


			end
	       else if ((time_vco0 + high_time_vco0 >= vco1x_ck_space) && 
			vco1x_ck_modset == vco1x_ck_mod) 
			begin

				time_vco0 <= 0; 
				vco1x_ck_modset <= 0;
        enable_vco1x_ck_modset <= 1'b0;
        actual_high_time_vco0 = high_time_vco0;

















        compensation_state <= "HIGH3";
				#(high_time_vco0);
			end 
		end 
  end 
	else //Even division of reference clock 
	begin
    /*if (vco1x_ck == 1'b1) 
      compensate_pos = $time - compensate_neg;
    else 
      compensate_pos = 0;*/








		vco1x_ck <= 1'b1 & !divq_reset;
		vco01x_waitflag <= 1'b1;
    #(low_time_vco0 - fb_reset_width);
		vco01x_waitflag <= 1'b0;
		vco1x_ck <= 1'b0 & !divq_reset;
		if (high_time_vco0 > (low_time_vco0*3/2)) 
		  #(low_time_vco0);
		else
		  #(high_time_vco0);
	end 
  end
  else  begin
    vco1x_ck <= 1'b0;
    vco1x_ck_modset <= 0;
    vco_000_ck0 <= 1'b0;
    vco_045_ck0 <= 1'b0;
    vco_090_ck0 <= 1'b0;
    vco_135_ck0 <= 1'b0;
    vco_180_ck0 <= 1'b0;
    vco_225_ck0 <= 1'b0;
    vco_270_ck0 <= 1'b0;
    vco_315_ck0 <= 1'b0;
    time_vco0 <= 0; 

    wait (on_vco & !divq_reset);
  end
end

always @(posedge ref_ck) begin
  if ( divq_reset ) begin
    count_edges <= count_limit;
    compensate_neg <= 0;
    if ( (divider_external * divider_divf) > (mult_divr * MULT_DIVQ) )
      count_limit = ( (mult_divr * MULT_DIVQ) / GCD((divider_external * divider_divf), (mult_divr * MULT_DIVQ)) - 1 ) ;
    else
      count_limit = ( (mult_divr * MULT_DIVQ) / GCD((mult_divr * MULT_DIVQ), (divider_external * divider_divf)) - 1 ) ;
  end
  else begin
    //if ( fccc_divider_external === 32'bx ) begin
      if (count_edges == 0)
      begin
        count_edges = count_limit;
        //vco1x_ck = 1'b1;
        compensate_neg <= $time;
      end
      else 
        count_edges = count_edges - 1;
    //end
  end
end


/*always @(negedge ref_ck) begin
  if ( !divq_reset ) begin
    if ( fccc_divider_external === 32'bx ) begin
      if ( ((period_ref / (low_time_vco0 + high_time_vco0)) % 3) == 1 )
        vco1x_ck = 1'b0;
      else if ( ((period_ref / (low_time_vco0 + high_time_vco0)) % 2) == 1 )
        vco1x_ck = 1'b1;
    end
  end
end*/

always begin
  if (on_vco & !divq_reset) begin
    vco4x_ck <= 1'b1 & !divq_reset;
		#(low_time_vco4x);
		vco4x_ck <= 1'b0 & !divq_reset;
		if (high_time_vco4x > (low_time_vco4x*3/2)) 
      #low_time_vco4x;
		else 
      #(high_time_vco4x);


  end
	else begin
		vco4x_ck <= 1'b0;


		wait (on_vco & !divq_reset);
  end
end

//
// Create the vco2x clocks, 0/90/180/270 phase shifts
//

always@(vco1x_ck) begin
	if ( (!divq_reset) && (fccc_divider_external !== 32'bx) ) begin
		vco_045_ck0 <= #((low_time_vco0 + high_time_vco0)/8)	 vco1x_ck;
		vco_090_ck0 <= #((low_time_vco0 + high_time_vco0)/4) 	 vco1x_ck;
		vco_135_ck0 <= #((low_time_vco0 + high_time_vco0)*3/8)   vco1x_ck;
		vco_180_ck0 <= #((low_time_vco0 + high_time_vco0)/2)     vco1x_ck;
		vco_225_ck0 <= #((5*(low_time_vco0 + high_time_vco0))/8) vco1x_ck;
		vco_270_ck0 <= #((6*(low_time_vco0 + high_time_vco0))/8) vco1x_ck;
		vco_315_ck0 <= #((7*(low_time_vco0 + high_time_vco0))/8) vco1x_ck;
 end
 else begin
  vco_045_ck0 <= 1'b0;
		vco_090_ck0 <= 1'b0;
		vco_135_ck0 <= 1'b0;
		vco_180_ck0 <= 1'b0;
		vco_225_ck0 <= 1'b0;
		vco_270_ck0 <= 1'b0;
		vco_315_ck0 <= 1'b0;
 end
end 
  
initial begin
  divq_reset = 1'b0;
  low_time_vco4x_reg = 0;
  low_time_vco4x_reg_1 = 0;
  low_time_vco4x_reg_2 = 0;
  low_time_vco4x_reg_3 = 0;
end

always @(*) divq_reset <= (low_time_vco4x_reg == low_time_vco4x) ? 1'b0 : 1'b1;
always @(posedge ref_ck) begin
  if (low_time_vco4x != 0) begin
    // [HH] SAR60107 Had to increase the width of divq_reset to handle changes in low_time_vco while divq_reset being active.
    divq_reset <= (low_time_vco4x_reg !== low_time_vco4x) ? 1'b1 : 1'b0;
    high_time_vco4x_reg = low_time_vco4x;
    if (low_time_vco_count != 0) begin
      low_time_vco4x_reg_1 <= low_time_vco4x;
      low_time_vco_count <= low_time_vco_count - 1; 
    end 
    else low_time_vco4x_reg <= low_time_vco4x_reg_1;
  end
end



time period_ref_chg, period_ref_prev;
always @(period_ref) begin
  period_ref_chg = (period_ref_prev > period_ref) ? (period_ref_prev - period_ref) : (period_ref - period_ref_prev);
  period_ref_prev <= period_ref;
end

time low_time_vco0_chg, low_time_vco0_prev;
always @(low_time_vco0) begin
  low_time_vco0_chg = (low_time_vco0_prev > low_time_vco0) ? (low_time_vco0_prev - low_time_vco0) : (low_time_vco0 - low_time_vco0_prev);
  low_time_vco0_prev <= low_time_vco0;
end

always @(*)
begin
	if ( (period_ref != 0) )
	 begin
		// [HH] SAR60952
    // To sync the divq_reset with the 2 clocks we need to find the LCD of the 2 frequencies:
    //  - This is mainly needed for IP PLL, not the fabric PLL.
    low_time_vco_count <= ( (fccc_divider_external === 32'bx) && ((divider_external * divider_divf) > 2) ) ? (divider_external * divider_divf) : 2;
	 end 
end 

/*  always begin
	if (on_vco) begin
		vco4x_ck <= 1'b1;
		#(low_time_vco4x);
		vco4x_ck <= 1'b0;
		if (high_time_vco4x > (low_time_vco4x*3/2)) #low_time_vco4x;
		//else #(high_time_vco4x-phase_shift);
    else #(high_time_vco4x);
		nb_vco4x_cycles <= nb_vco4x_cycles + 1;
		if (bypassi) last_posedge_vco4x <= 0;
	    end
	else
	    begin
		vco4x_ck <= 1'b0;
		wait (on_vco);
	    end
    end
  */

//
// Create the vco2x clocks, 0/90/180/270 phase shifts
//
always@(posedge vco4x_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco2x_000_ck <= 1'b0;
        vco2x_180_ck <= 1'b0;
        last_posedge_vco4x <= 0;
        period_vco4x <= 0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco2x_000_ck <= !vco2x_000_ck;
        vco2x_180_ck <= vco2x_000_ck;  //stale value of 000_ck, so will be 180-deg shifted
        last_posedge_vco4x <= $time;
        if (last_posedge_vco4x !== 0)  period_vco4x <= $time - last_posedge_vco4x;
      end
  end

always@(negedge vco4x_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco2x_090_ck <= 1'b0;
        vco2x_270_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco2x_090_ck <= !vco2x_090_ck;
        vco2x_270_ck <= vco2x_090_ck;  //stale value of 090_ck, so will be 180-deg shifted
      end
  end

//
// Create the regular speed vco clocks, 0/45/90/135/180/225/270/315 phase shifts
//
always@(posedge vco2x_000_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco_000_ck <= 1'b0;
        vco_180_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco_000_ck <= !vco_000_ck;
        vco_180_ck <= vco_000_ck; //stale value of 000_ck, so will be 180-deg shifted
      end
  end
always@(posedge vco2x_090_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco_045_ck <= 1'b0;
        vco_225_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco_045_ck <= !vco_045_ck;
        vco_225_ck <= vco_045_ck; //stale value of 045_ck, so will be 180-deg shifted
      end
  end
always@(posedge vco2x_180_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco_090_ck <= 1'b0;
        vco_270_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco_090_ck <= !vco_090_ck;
        vco_270_ck <= vco_090_ck; //stale value of 090_ck, so will be 180-deg shifted
      end
  end
always@(posedge vco2x_270_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        vco_135_ck <= 1'b0;
        vco_315_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        vco_135_ck <= !vco_135_ck;
        vco_315_ck <= vco_135_ck; //stale value of 135_ck, so will be 180-deg shifted
      end
  end

/* SAVE FOR REFERENCE
//
// Drive vco_ck (NORMAL)
//
always
    begin
	if (on_vco)
	    begin
		vco_ck <= 1'b1;
		#low_time_vco;
		vco_ck <= 1'b0;
		if (high_time_vco > (low_time_vco*3/2)) #low_time_vco;
		else #high_time_vco;
		nb_vco_cycles <= nb_vco_cycles + 1;
		if (bypassi) last_posedge_vco <= 0;
	    end
	else
	    begin
		vco_ck <= 1'b0;
		wait (on_vco);
	    end
    end
 */

//
//  Check frequency of VCO and flag any errors
//  (warning message will display, but simulation will not stop)
//  NOTE - always checking frequency of normal VCO!
//

always @(posedge vco_000_ck)
    begin
	if (last_posedge_vco !== 0) 
	  begin
	    period_vco <= $time - last_posedge_vco;
	    nb_vco_cycles <= nb_vco_cycles + 1;

	    if ( (period_vco !== 0) && !MODE32K && delay_lock_reg )
	      begin
	        if ( !MODE_1V2 && !vco_low_flag && pll_lock_reg )
	          begin
	           if (period_vco > `MIN_VCO_1V0_FREQ) begin
	           if (`WARNING_MESSAGES_ON == 1) begin
             //$display ("");
	           $display ("************************Attention************************");
	           $display ("           The frequency of the VCO is too slow!         ");
	           $display ("   The output frequencies may appear to be within spec,  ");
	           $display ("   but the VCO frequency is below 250MHz. The PLL is     ");
	           $display ("   operating out of spec, therefore the current simula-  ");
	           $display ("   tion results may not be accurate!                     ");
	           //$display ("");
	           $display ("   This is likely due to the setting of the dividers,    ");
	           $display ("   or the frequency of REFCK. Please check these values    ");
	           $display ("   and rerun the simulation.                             ");
	           $display ("   period: %fps,   Max Period: %fps", period_vco, `MIN_VCO_1V0_FREQ);
	           $display ("   Instance: %m. Simulation time is %t", $time);
	           $display ("******************************************************** ");
	           //$display ("");
	           end
             vco_low_flag <= 1'b1;
	           end
	          end
	        if ( !MODE_1V2 && !vco_high_flag && pll_lock_reg )
	          begin
	           if (period_vco < `MAX_VCO_1V0_FREQ) begin
	           if (`WARNING_MESSAGES_ON == 1) begin
             $display ("************************Attention************************");
	           $display ("           The frequency of the VCO is too fast!         ");
	           $display ("   The output frequencies may appear to be within spec,  ");
	           $display ("   but the VCO frequency is above 1GHz. The PLL is       ");
	           $display ("   operating out of spec, therefore the current simula-  ");
	           $display ("   tion results may not be accurate!                     ");
	           $display ("   This is likely due to the setting of the dividers,    ");
	           $display ("   or the frequency of REFCK. Please check these values  ");
	           $display ("   and rerun the simulation.                             ");
	           $display ("   Instance: %m. Simulation time is %t ps", $time);
	           $display ("******************************************************** ");
	           end
             vco_high_flag <= 1'b1;
	           end
	          end
	        if ( MODE_1V2 && !vco_low_flag && pll_lock_reg )
	          begin
	           if (period_vco > `MIN_VCO_1V2_FREQ) begin
	           if (`WARNING_MESSAGES_ON == 1) begin
             //$display ("");
	           $display ("************************Attention************************");
	           $display ("           The frequency of the VCO is too slow!         ");
	           $display ("   The output frequencies may appear to be within spec,  ");
	           $display ("   but the VCO frequency is below 500MHz. The PLL is     ");
	           $display ("   operating out of spec, therefore the current simula-  ");
	           $display ("   tion results may not be accurate!                     ");
	           //$display ("");
	           $display ("   This is likely due to the setting of the dividers,    ");
	           $display ("   or the frequency of REFCK. Please check these values    ");
	           $display ("   and rerun the simulation.                             ");
	           $display ("   period: %fps,   Max Period: %fps", period_vco, `MIN_VCO_1V2_FREQ);
	           $display ("   Instance: %m. Simulation time is %t", $time);
	           $display ("******************************************************** ");
	           //$display ("");
	           end
             vco_low_flag <= 1'b1;
	           end
	          end
	        if ( MODE_1V2 && !vco_high_flag && pll_lock_reg )
	          begin
	           if (period_vco < `MAX_VCO_1V2_FREQ) begin
	           if (`WARNING_MESSAGES_ON == 1) begin
             //$display ("");
	           $display ("************************Attention************************");
	           $display ("           The frequency of the VCO is too fast!         ");
	           $display ("   The output frequencies may appear to be within spec,  ");
	           $display ("   but the VCO frequency is above 1GHz. The PLL is       ");
	           $display ("   operating out of spec, therefore the current simula-  ");
	           $display ("   tion results may not be accurate!                     ");
	           //$display ("");
	           $display ("   This is likely due to the setting of the dividers,    ");
	           $display ("   or the frequency of REFCK. Please check these values    ");
	           $display ("   and rerun the simulation.                             ");
	           //$display ("");
	           $display ("   Instance: %m. Simulation time is %t ps", $time);
	           $display ("******************************************************** ");
	           //$display ("");
	           end
             vco_high_flag <= 1'b1;
	           end
	          end
	      end

	  end
	last_posedge_vco <= $time;
    end

//
// Drive alt_vco4x_ck
//
always
  begin
    if(on_vco)
      begin

        if (down_flag_DS)
          begin
            alt_vco4x_ck <= 1'b1;
            #high_time_vco4x;
            alt_vco4x_ck <= 1'b0;
            if (no_MF) #low_time_vco4x;
            else #(low_time_vco4x + (change_per_cycle4x*ss_cycle_count));

            if (ss_cycle_count < ss_period_count4x)
              ss_cycle_count <= ss_cycle_count + 1;
            else //(ss_cycle_count = ss_period_count), time to switch direction
              begin
                ss_cycle_count <= ss_cycle_count - 1;
                down_flag_DS =1'b0;
                up_flag_DS = 1'b1;
              end
          end
        else if (up_flag_DS)
          begin
            alt_vco4x_ck <= 1'b1;
            #high_time_vco4x;
            alt_vco4x_ck <= 1'b0;
            if (no_MF) #low_time_vco4x;
            else #(low_time_vco4x + (change_per_cycle4x*ss_cycle_count));

            if (ss_cycle_count > 0)
              ss_cycle_count <= ss_cycle_count - 1;
            else //(ss_cycle_count = 0), time to switch direction
              begin
                ss_cycle_count <= ss_cycle_count + 1;
                down_flag_DS = 1'b1;
                up_flag_DS = 1'b0;
              end
          end

        nb_alt_vco4x_cycles <= nb_alt_vco4x_cycles + 1;
      end

    else // !enabled
      begin
        alt_vco4x_ck <= 1'b0;
        wait (on_vco);
      end
  end

//

// Create the alt_vco2x clocks, 0/90/180/270 phase shifts
//
always@(posedge alt_vco4x_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco2x_000_ck <= 1'b0;
        alt_vco2x_180_ck <= 1'b0;
      end
    else
      begin
        alt_vco2x_000_ck <= !alt_vco2x_000_ck;
        alt_vco2x_180_ck <= alt_vco2x_000_ck;
      end
  end
always@(negedge alt_vco4x_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco2x_090_ck <= 1'b0;
        alt_vco2x_270_ck <= 1'b0;
      end
    else
      begin
        alt_vco2x_090_ck <= !alt_vco2x_090_ck;
        alt_vco2x_270_ck <= alt_vco2x_090_ck;
      end
  end

//
// Create the regular speed vco clocks, 0/45/90/135/180/225/270/315 phase shifts
//
always@(posedge alt_vco2x_000_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco_000_ck <= 1'b0;
        alt_vco_180_ck <= 1'b0;
      end
    else
      begin
        alt_vco_000_ck <= !alt_vco_000_ck;
        alt_vco_180_ck <= alt_vco_000_ck;
      end
  end
always@(posedge alt_vco2x_090_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco_045_ck <= 1'b0;
        alt_vco_225_ck <= 1'b0;
      end
    else
      begin
        alt_vco_045_ck <= !alt_vco_045_ck;
        alt_vco_225_ck <= alt_vco_045_ck;
      end
  end
always@(posedge alt_vco2x_180_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco_090_ck <= 1'b0;
        alt_vco_270_ck <= 1'b0;
      end
    else
      begin
        alt_vco_090_ck <= !alt_vco_090_ck;
        alt_vco_270_ck <= alt_vco_090_ck;
      end
  end
always@(posedge alt_vco2x_270_ck  or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        alt_vco_135_ck <= 1'b0;
        alt_vco_315_ck <= 1'b0;
      end
    else
      begin
        alt_vco_135_ck <= !alt_vco_135_ck;
        alt_vco_315_ck <= alt_vco_135_ck;
      end
  end

/* SAVE FOR REFERENCE
//
// Drive alt_vco_ck
//
always
  begin
    if(on_vco)
      begin

        if (down_flag_DS)
          begin
            alt_vco_ck <= 1'b1;
            #high_time_vco;
            alt_vco_ck <= 1'b0;
            if (no_MF) #low_time_vco;
            else #(low_time_vco + (change_per_cycle*ss_cycle_count));

            if (ss_cycle_count < ss_period_count)
              ss_cycle_count <= ss_cycle_count + 1;
            else //(ss_cycle_count = ss_period_count), time to switch direction
              begin
                ss_cycle_count <= ss_cycle_count - 1;
                down_flag_DS =1'b0;
                up_flag_DS = 1'b1;
              end
          end
        else if (up_flag_DS)
          begin
            alt_vco_ck <= 1'b1;
            #high_time_vco;
            alt_vco_ck <= 1'b0;
            if (no_MF) #low_time_vco;
            else #(low_time_vco + (change_per_cycle*ss_cycle_count));

            if (ss_cycle_count > 0)
              ss_cycle_count <= ss_cycle_count - 1;
            else //(ss_cycle_count = 0), time to switch direction
              begin
                ss_cycle_count <= ss_cycle_count + 1;
                down_flag_DS = 1'b1;
                up_flag_DS = 1'b0;
              end
          end

        nb_alt_vco_cycles <= nb_alt_vco_cycles + 1;
      end

    else // !enabled
      begin
        alt_vco_ck <= 1'b0;
        wait (on_vco);
      end
  end
*/

//
// Check for inactive REFCK input clock
//
always @(posedge divided_ref)
  begin
    ref_time_passed <= $time - last_posedge_ref;
    // The next section checks if REFCK has stopped toggling for 400ns 
    // a warning message will appear, PLLOUT and LOCK will be pulled 
    // LOW 
    if ((ref_time_passed > 400_000) && !ref_warn_flag && on_wire && delay_lock_reg )
      begin
      if (`WARNING_MESSAGES_ON == 1) begin
      //$display ("");
      $display ("**********************Attention**********************    ");
      $display ("There may be a problem with the selected reference clock ");
      $display ("                It may be stuck at %b!                   ", ref_ck);
      $display ("           Please check the reference clock.             ");
      $display ("        Current results may not be accurate!!            ");
      //$display ("");
      $display ("   Instance: %m. Simulation time is %t", $time);
      $display ("*****************************************************    ");
      //$display ("");
      end
      ref_warn_flag <= 1'b1;
      end
  end

//
// Track minimum RESET pulse width
//
always @(posedge reseti)
  begin
    last_posedge_reset <= $time;
//    ref_div_count <= 0;
  end

/*always @(negedge reseti)
  begin
    if( last_posedge_reset !== 1'b1 )
      begin
        if( (($time - last_posedge_reset) < `RESET_PULSE_MIN ) && !reset_pulse_flag )
          begin
            //$display ("");
            $display ("************************Attention************************");
            $display ("   The pulse of the RESET signal is too small!           ");
            $display ("   The minimum acceptable pulse width is 1us. The PLL    ");
            $display ("   verilog model will continue to operate, but the cur-  ");
            $display ("   rent simulation results may not be accurate!          ");
            //$display ("");
            $display ("   Please check the REFCK input signal, and rerun the      ");
            $display ("   simulation.                                           ");
            //$display ("");
            $display ("   Simulation time is %t", $time);
            $display ("******************************************************** ");
            //$display ("");
            reset_pulse_flag <= 1'b1;
          end
      end
  end*/

//
// Track minimum PD pulse width
//
always @(posedge pdi)
  begin
    last_posedge_pd <= $time;
  end

always @(negedge pdi)
  begin
    if( last_posedge_pd !== 1'b1 )
      begin
        if( (($time - last_posedge_pd) < `RESET_PULSE_MIN ) && !pd_pulse_flag && delay_lock_reg )
          begin
            if (`WARNING_MESSAGES_ON == 1) begin
            //$display ("");
            $display ("************************Attention************************");
            $display ("   The pulse of the PD signal is too small!           ");
            $display ("   The minimum acceptable pulse width is 1us. The PLL    ");
            $display ("   verilog model will continue to operate, but the cur-  ");
            $display ("   rent simulation results may not be accurate!          ");
            //$display ("");
            $display ("   Please check the REFCK input signal, and rerun the      ");
            $display ("   simulation.                                           ");
            //$display ("");
            $display ("   Instance: %m. Simulation time is %t", $time);
            $display ("******************************************************** ");
            //$display ("");
            end
            pd_pulse_flag <= 1'b1;
          end
      end
  end


//
// Check for REFCK period consistency
//   Internal variables are reset when REFCK period changes
//
always@(vco_000_ck)
  begin
    if ( (period_ref1 !== 0) && (period_ref2 !== 0) && (period_ref !== 0) && 
        ((period_ref1 !== period_ref) || (period_ref !== period_ref2) || (period_ref1 !== period_ref2)) )
          ref_freq_chg <= 1'b1;
  end

//
// Reset warning flags if necessary
//
always @(negedge lock_enabled_flag)
  begin
    vco_low_flag <= 1'b0;
    vco_high_flag <= 1'b0;
    rFreq_low_flag <= 1'b0;
    rFreq_high_flag <= 1'b0;
    drFreq_low_flag <= 1'b0;
    drFreq_high_flag <= 1'b0;
    pos_pulse_flag <= 1'b0;
    neg_pulse_flag <= 1'b0;
    reset_pulse_flag <= 1'b0;
    pd_pulse_flag <= 1'b0;
  end

//
//Check for changing operating conditions
//	input REFCK frequency changes
//	any of the dividers change value
//
always@(ref_freq_chg or divider_divf or mult_divr)
  begin
    ref_freq_chg <= 1'b0;
    nb_ref_cycles <= 0;


    nb_divref_cycles <= 0;
    ff_lock <= 1'b0;
    fb_count <= 4'b0000;
    lock_count_reg <= 4'b0000;
    vco_low_flag <= 1'b0;
    vco_high_flag <= 1'b0;
    rFreq_low_flag <= 1'b0;
    rFreq_high_flag <= 1'b0;
    drFreq_low_flag <= 1'b0;
    drFreq_high_flag <= 1'b0;
    pos_pulse_flag <= 1'b0;
    neg_pulse_flag <= 1'b0;
    range_warn <= 1'b0;
    lock_enabled_flag <= 1'b0;
    last_posedge_divfb <= 0;
    period_divfb <= 0;
    last_posedge_divref <= 0;
    period_divref <= 0;
    divider_external <= (fccc_divider_external === 32'bx) ? 1 : fccc_divider_external;
    //divider_external <= 1;
    reset_pulse_flag <= 1'b0;
    pd_pulse_flag <= 1'b0;
  end
  
always@(posedge divq_reset)
  begin
    last_posedge_divfb <= 0;
    period_divfb <= 0;
    last_posedge_divref <= 0;
    period_divref <= 0;


  end

//
// Reset RANGE warning flags to run RANGE checks again
//
always @(range3i or range2i or range1i or range0i or posedge ref_freq_chg)
  begin
    range_warn <= 1'b0;
    if ({range3i,range2i,range1i,range0i} === 3'b000)
      range_byp <= 1'b1;
    else range_byp <= 1'b0;
  end

//
// VCO turns off with RESET, BYPASS, or change in fsei or ssei
//
//always@(posedge reseti or posedge bypassi or fsei or ssei or mode32ki)
always@(posedge reset_reg or fsei or ssei or mode32ki)
  begin
        ref_freq_chg <= 1'b0;
        on_vco <= 1'b0;
        on_flag <= 1'b0;
        ff_lock <= 1'b0;
        fb_count <= 4'b0000;
        vco_low_flag <= 1'b0;
        vco_high_flag <= 1'b0;
        rFreq_low_flag <= 1'b0;
        rFreq_high_flag <= 1'b0;
        drFreq_low_flag <= 1'b0;
        drFreq_high_flag <= 1'b0;
        pos_pulse_flag <= 1'b0;
        neg_pulse_flag <= 1'b0;
        range_warn <= 1'b0;
        lock_enabled_flag <= 1'b0;
        last_posedge_ref <= 0;
        last_negedge_ref <= 0;
        period_ref <= 0;
        period_ref1 <= 0;
        period_ref2 <= 0;
        last_posedge_fb <= 0;
        period_fb <= 0;
        period_fb1 <= 0;
        period_fb2 <= 0;
        period_fb3 <= 0;
        period_fb4 <= 0;
        last_posedge_divfb <= 0;
        period_divfb <= 0;
        last_posedge_divref <= 0;
        period_divref <= 0;
        last_posedge_vco <= 0;
        period_vco <= 0;
        low_time_vco <= 0;
        high_time_vco <= 0;
    last_posedge_vco4x <= 0;
    period_vco4x <= 0;
    low_time_vco4x <= 0;
    high_time_vco4x <= 0;
        period_ref_real <= 0;
        period_fb_real <= 0;
        period_divref_real <= 0;
        period_divfb_real <= 0;
        inner_freq_margin <=0;
        period_fb1_real <= 0;
        period_fb2_real <= 0;
        period_fb3_real <= 0;
        period_fb4_real <= 0;
        fb_comp_skip <= 0;
        divider_external <= (fccc_divider_external === 32'bx) ? 1 : fccc_divider_external;
        nb_ref_cycles <= 0;


        nb_divref_cycles <= 0;
        nb_fb_cycles <= 0;
        nb_divref_cycles <= 0;
        nb_divfb_cycles <= 0;
        nb_vco_cycles <= 0;
    nb_vco4x_cycles <= 0;
        last_posedge_reset <= 0;
        reset_pulse_flag <= 1'b0;
        last_posedge_pd <= 0;
        pd_pulse_flag <= 1'b0;
    change_per_cycle <= 0.0;
    ss_cycle_count <= 0;
    down_flag_DS <= 1'b1; //always start down from origin
    up_flag_DS <= 1'b0;
    nb_alt_vco_cycles <= 0;
    period_vco_max <= 0;
    change_per_cycle4x <= 0.0;
    nb_alt_vco4x_cycles <= 0;
    period_vco4x_max <= 0;
    input_missing <= 1'b0;
  end

//always @(posedge reseti or negedge bypassi)
always @(posedge reset_pd or negedge bypassi)
  begin
    ref_time_passed <= 0;
  end

//always @(negedge reseti or negedge bypassi)
always @(negedge reset_reg)
  begin
    nb_ref_cycles <= 0;


    nb_divref_cycles <= 0;
    ref_div_count <= 1'b0;
    //
    last_posedge_ref <= 0;
    last_negedge_ref <= 0;
    period_ref <= 0;
    period_ref1 <= 0;
    period_ref2 <= 0;
  end

//always @(posedge reseti or posedge bypassi)
always @(posedge reset_reg)
  begin
    fse_warn_flag <= 1'b0;
//
		divided_fb <= 1'b0;
		divf_count <= 0;
    ref_div_count <= 1'b0;
  end


  refstop u_detect_refstop( .refclk(REFCK), .lock(LOCK), .lock_loss(lock_loss));
  always @( posedge lock_loss ) begin
    delay_lock_reg <= ~lock_loss;
    on_vco <= ~lock_loss;
    //reset_reg <= 1'b1;
  end


  
function automatic integer GCD;
  input integer a, b;
  begin
    if(b == 0) 
      GCD = a;
    else
      GCD = GCD(b, (a%b));
  end 
endfunction


endmodule // ABI_PLL_FRONT


//
// DIVQ divider block
//
module  ABI_DIVQ (
		vco_in,

//		BYPASS,
//		RESET,
		reset_reg,

		DIVQ2,
		DIVQ1,
		DIVQ0,

		divq_out
);

//----------------------------------------------------------------------
// Port Declarations
//----------------------------------------------------------------------

// Input
  input		vco_in;	// input from VCO, 4x faster
  input		reset_reg;	// Bypass/Reset/Powerdown - Active HIGH
  input		DIVQ2;	// Divider Control
  input		DIVQ1;
  input		DIVQ0;

// Output
  output	divq_out;	// output of divider


//Internal signals

  //flags
  reg reset_init;

  //clocks
  reg divq_reg;

  time last_posedge_in, period_in;
  time last_posedge_out, period_out;

  integer mult_divq;

  integer nb_in_cycles, nb_out_cycles;


  integer divq_count;  //This counter tracks the toggles in the vco_in pin
  // and controls when the output signal will toggle in response
  //In this fashion, the phase of output responds and changes with
  //changed in the phase of the modulated vco

  wire vco_ck, reset_reg;
  wire divq2i, divq1i, divq0i;
  wire divq_out;

  buf u0   (vco_ck,vco_in);
//  buf u3   (bypassi,BYPASS);
//  buf u4   (reseti,RESET);

  buf u30  (divq0i,DIVQ0);
  buf u31  (divq1i,DIVQ1);
  buf u32  (divq2i,DIVQ2);

//  buf u90  (divq_out,divq_reg);


//
//  This mux is written to provide more testability in verilog.
//  If the user does not drive BYPASS or RESET, it will cause an unknown
//  on the output to direct the user's attention to the problem.
//
//  assign divided_ref = bypass ? 1'b0  :
//                    reset ? 1'b0  : 
//                reset_init ? divref_reg : 1'b0;  If reset_init has not gone high, output does not start toggling
//  reset_init is internal, initialized to zero, so can only be zero or one, never 'x'
//
  assign divq_out = (reset_reg === 1'b1) ? 1'b0  :
                    (reset_reg === 1'b0) ? ((reset_init == 1'b1) ? divq_reg : 1'b0 ) : 1'bx ;

  initial
     begin
	reset_init <= 1'b0;

	last_posedge_in <= 0;
	period_in <= 0;
	last_posedge_out <= 0;
	period_out <= 0;

	mult_divq <= 0;
	divq_count <= 1;
	nb_in_cycles <= 0;
	nb_out_cycles <= 0;

	divq_reg <= 1'b0;
     end

//
// Calculate counter value
// 
always @(divq2i or divq1i or divq0i or reset_reg)
   begin
	case ({divq2i,divq1i,divq0i})
	  3'b000: mult_divq <= 1;
	  3'b001: mult_divq <= 2;
	  3'b010: mult_divq <= 4;
	  3'b011: mult_divq <= 8;
	  3'b100: mult_divq <= 16;
	  3'b101: mult_divq <= 32;
	  3'b110: begin
			mult_divq <= 32;
			if (`WARNING_MESSAGES_ON == 1) begin
      //$display ("");
			$display ("**********************Attention************************* ");
			$display ("The setting on DIVQ is not valid (cannot divide by 64)  ");
			$display ("DIVQ is being treated as 101 (divide by 32) for the rest ");
			$display ("of the simulation. ");
			//$display ("");
			$display ("   Instance: %m. Simulation time is %t", $time);
			$display ("***************************************************** ");
			//$display ("");
		  end
      end
	  3'b111: begin
			mult_divq <= 32;
			if (`WARNING_MESSAGES_ON == 1) begin
      //$display ("");
			$display ("**********************Attention************************* ");
			$display ("The setting on DIVQ is not valid (cannot divide by 128)  ");
			$display ("DIVQ is being treated as 101 (divide by 32) for the rest ");
			$display ("of the simulation. ");
			//$display ("");
			$display ("   Instance: %m. Simulation time is %t", $time);
			$display ("***************************************************** ");
			//$display ("");
		  end
      end
	endcase
    end

//
// Check for RESET initialization
//  (If RESET does not go high, DIVQ output will not toggle
always @(posedge reset_reg)
    begin
	reset_init <= 1'b1;
    end


//
// Info for  possible error-checking
//
always @(posedge vco_ck)
    begin
	if ((last_posedge_in !== 0) && !reset_reg)
	   begin
		period_in <= $time - last_posedge_in;
//		low_time_out <= (period_in * mult_divq) / 2;
//		high_time_out <= (period_in * mult_divq) / 2;
	   end
	if (!reset_reg) last_posedge_in <= $time;
    end

//either edge of input
// this is where we do the dividing
always @(vco_ck)
    begin
	if ((last_posedge_in == 0)&&(period_in == 0)&&(vco_ck==1'b1) && !reset_reg) 
	//This is the first REFCK cycle - above condition is only true
	// if this is the first time we enter this procedural block
	  begin
	    //mult_divq cannot be 1, but we'll leave this in case that part of spec changes
	    if (mult_divq == 1) divq_reg <= vco_ck; //unique case
	    else divq_reg <= 1'b1; //start signal high
	    divq_count <= #1 divq_count + 1;
	  end
	else if ((divq_count < mult_divq) && (divq_count !== 0)&& !reset_reg)
	    divq_count <= #1 divq_count +1; //dont toggle, increase the count
	else if ((divq_count == mult_divq)&& !reset_reg)
	  begin
	    divq_reg <= !divq_reg; //toggle!
	    divq_count <= #1 1; //reset divider count, not to 0 or count is off
	  end
    end

always@(posedge divq_reg)
    begin
	if (last_posedge_out !== 0) 
		period_out <= $time - last_posedge_out;
	last_posedge_out <= $time;
    end

//
// Divider RESET
//
always@(posedge reset_reg)
    begin
	last_posedge_in <= 0;
	period_in <= 0;
	last_posedge_out <= 0;
	period_out <= 0;

	nb_in_cycles <= 0;
	nb_out_cycles <= 0;
	divq_count <= 1;
	divq_reg <= 1'b0;
    end

endmodule //ABI_DIVQ


//
// Phase-shifter block
//
module  ABI_PHASE (
		pllout4x_in,
//		out_000_new_in,

//		BYPASS,
//		RESET,
		reset_reg,

		out_000,
		out_045,
		out_090,
		out_135,
		out_180,
		out_225,
		out_270,
		out_315
);

//----------------------------------------------------------------------
// Port Declarations
//----------------------------------------------------------------------

// Input
  input		pllout4x_in;	// input from VCO, 4x faster
  input		reset_reg;	// Bypass/Reset/Powerdown - Active HIGH

// Output
  output	out_000;	// Normal output
  output	out_045;	// 45-degrees shifted
  output	out_090;	// 90-degrees shifted
  output	out_135;	// 135-degrees shifted
  output	out_180;	// 180-degrees shifted
  output	out_225;	// 225-degrees shifted
  output	out_270;	// 270-degrees shifted
  output	out_315;	// 315-degrees shifted



//Internal signals

  wire pllout4x_ck;

  reg pllout2x_000_ck, pllout2x_090_ck, pllout2x_180_ck, pllout2x_270_ck;
  reg pllout_000_ck, pllout_045_ck, pllout_090_ck, pllout_135_ck;
  reg pllout_180_ck, pllout_225_ck, pllout_270_ck, pllout_315_ck;

  wire out_000, out_045, out_090, out_135, out_180, out_225, out_270, out_315;

  time last_posedge_pllout4x, period_pllout4x;


  buf u0   (pllout4x_ck,pllout4x_in);

  assign out_000 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_000_ck : 1'bx );
  assign out_045 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_045_ck : 1'bx );
  assign out_090 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_090_ck : 1'bx );
  assign out_135 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_135_ck : 1'bx );
  assign out_180 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_180_ck : 1'bx );
  assign out_225 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_225_ck : 1'bx );
  assign out_270 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_270_ck : 1'bx );
  assign out_315 = (reset_reg === 1'b1) ? 1'b0 :
                  ((reset_reg === 1'b0) ? pllout_315_ck : 1'bx );



//
// Create the vco2x clocks, 0/90/180/270 phase shifts
//
always@(posedge pllout4x_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout2x_000_ck <= 1'b0;
        pllout2x_180_ck <= 1'b0;
        last_posedge_pllout4x <= 0;
        period_pllout4x <= 0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout2x_000_ck <= !pllout2x_000_ck;
        pllout2x_180_ck <= pllout2x_000_ck;  //stale value of 000_ck, so will be 180-deg shifted
        last_posedge_pllout4x <= $time;
        if (last_posedge_pllout4x !== 0)  period_pllout4x <= $time - last_posedge_pllout4x;
      end
  end


always@(negedge pllout4x_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout2x_090_ck <= 1'b0;
        pllout2x_270_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout2x_090_ck <= pllout2x_000_ck; //should always follow 2x_000
        pllout2x_270_ck <= pllout2x_180_ck;
      end
  end


//
// Create the regular speed vco clocks, 0/45/90/135/180/225/270/315 phase shifts
//
always@(posedge pllout2x_000_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout_000_ck <= 1'b0;
        pllout_180_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout_000_ck <= !pllout_000_ck;
        pllout_180_ck <= pllout_000_ck; //stale value of 000_ck, so will be 180-deg shifted
      end
  end
always@(posedge pllout2x_090_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout_045_ck <= 1'b0;
        pllout_225_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout_045_ck <= !pllout_045_ck;
        pllout_225_ck <= pllout_045_ck; //stale value of 045_ck, so will be 180-deg shifted
      end
  end
always@(negedge pllout2x_000_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout_090_ck <= 1'b0;
        pllout_270_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout_090_ck <= pllout_000_ck; //should always follow 000
        pllout_270_ck <= pllout_180_ck; 
      end
  end
always@(negedge pllout2x_090_ck or posedge reset_reg)
  begin
    if (reset_reg === 1'b1)
      begin
        pllout_135_ck <= 1'b0;
        pllout_315_ck <= 1'b0;
      end
    else //not in reset/bypass/powerdown
      begin
        pllout_135_ck <= pllout_045_ck;
        pllout_315_ck <= pllout_225_ck; //stale value of 135_ck, so will be 180-deg shifted
      end
  end

endmodule  //ABI_PHASE 


//
// Top level - stitch it all together!
//
module  ABISCB82 (
		REFCK,
		FB,
		BYPASS,
		RESET,
		PD,

		FSE,
		MODE32K,
		MODE_1V2,
		MODE_3V3,
		SSE,

		DIVR5,
		DIVR4,
		DIVR3,
		DIVR2,
		DIVR1,
		DIVR0,

		RANGE3,
		RANGE2,
		RANGE1,
		RANGE0,

		DIVF11,
		DIVF10,
		DIVF9,
		DIVF8,
		DIVF7,
		DIVF6,
		DIVF5,
		DIVF4,
		DIVF3,
		DIVF2,
		DIVF1,
		DIVF0,

		DIVP13,
		DIVP12,
		DIVP11,
		DIVP10,
		DIVP9,
		DIVP8,
		DIVP7,
		DIVP6,
		DIVP5,
		DIVP4,
		DIVP3,
		DIVP2,
		DIVP1,
		DIVP0,

		SSMD1,
		SSMD0,
		SSMF4,
		SSMF3,
		SSMF2,
		SSMF1,
		SSMF0,

		LOCKWIN2,
		LOCKWIN1,
		LOCKWIN0,
		LOCKCNT3,
		LOCKCNT2,
		LOCKCNT1,
		LOCKCNT0,

		DIVQ2,
		DIVQ1,
		DIVQ0,


		LOCK,
		PLLOUT_0,
		PLLOUT_45,
		PLLOUT_90,
		PLLOUT_135,
		PLLOUT_180,
		PLLOUT_225,
		PLLOUT_270,
		PLLOUT_315,
    
    divq_reset
);

//----------------------------------------------------------------------
// Port Declarations
//----------------------------------------------------------------------

// Input
  input     REFCK;    // Reference Clock
  input     FB;
  input     BYPASS; // Bypass - Active HIGH
  input     RESET;  // Reset  - Active HIGH
  input     PD;

  input     FSE;
  input     MODE32K;
  input     MODE_1V2;
  input     MODE_3V3;  // No function in verilog
  input     SSE;

  input     DIVR5;  // Reference Divider Control
  input     DIVR4;
  input     DIVR3;
  input     DIVR2;
  input     DIVR1;
  input     DIVR0;

  input     RANGE3;
  input     RANGE2;
  input     RANGE1;
  input     RANGE0;

  input     DIVF11;
  input     DIVF10;
  input     DIVF9;  // Feedback Divider Control
  input     DIVF8;
  input     DIVF7;
  input     DIVF6;
  input     DIVF5;
  input     DIVF4;
  input     DIVF3;
  input     DIVF2;
  input     DIVF1;
  input     DIVF0;

  input     DIVP13;
  input     DIVP12;
  input     DIVP11;
  input     DIVP10;
  input     DIVP9;
  input     DIVP8;
  input     DIVP7;
  input     DIVP6;
  input     DIVP5;
  input     DIVP4;
  input     DIVP3;
  input     DIVP2;
  input     DIVP1;
  input     DIVP0;

  input     SSMD1;
  input     SSMD0;
  input     SSMF4;
  input     SSMF3;
  input     SSMF2;
  input     SSMF1;
  input     SSMF0;

  input     LOCKWIN2;
  input     LOCKWIN1;
  input     LOCKWIN0;
  input     LOCKCNT3;
  input     LOCKCNT2;
  input     LOCKCNT1;
  input     LOCKCNT0;

  input     DIVQ2; // Output Divider Control for PLLOUT
  input     DIVQ1;
  input     DIVQ0;


// Output
  output    LOCK;   // PLL locked when HIGH
  output    PLLOUT_0;
  output    PLLOUT_45;
  output    PLLOUT_90;
  output    PLLOUT_135;
  output    PLLOUT_180;
  output    PLLOUT_225;
  output    PLLOUT_270;
  output    PLLOUT_315;
  
  output    divq_reset;
  
  parameter integer FB_MULTIPLIER = 1;
  parameter VCOFREQUENCY = 0.0;
  parameter FB_DIV = 1.0;
  parameter POST_DIV = 1.0;

// signals
  wire vco4x_wire, vco4x_normal, vco4x_alt;
// Useful for debugging, so keep?
  wire vco_000_wire, vco_000, vco_000_alt;
  wire vco_045_wire, vco_045, vco_045_alt;
  wire vco_090_wire, vco_090, vco_090_alt;
  wire vco_135_wire, vco_135, vco_135_alt;
  wire vco_180_wire, vco_180, vco_180_alt;
  wire vco_225_wire, vco_225, vco_225_alt;
  wire vco_270_wire, vco_270, vco_270_alt;
  wire vco_315_wire, vco_315, vco_315_alt;

  wire reset_all; //for RESET/PD/BYPASS/RANGE=0000

  wire pllout4x_wire;
  wire n_0, n_45, n_90, n_135, n_180, n_225, n_270, n_315;

// for frequency error checking
  reg oFreq_low_flag, oFreq_high_flag;
  time last_posedge_out, period_out;

// Instantiations

ABI_PLL_FRONT   #(.FB_MULTIPLIER(FB_MULTIPLIER), .VCOFREQUENCY(VCOFREQUENCY), .FB_DIV_PARAM(FB_DIV), .POST_DIV(POST_DIV)) MAIN(
		.REFCK(REFCK),
		.FB(FB),
		.BYPASS(BYPASS),
		.RESET(RESET),
		.PD(PD),

		.FSE(FSE),
		.MODE32K(MODE32K),
		.MODE_1V2(MODE_1V2),
		.MODE_3V3(MODE_3V3),
		.SSE(SSE),

		.DIVR5(DIVR5),
		.DIVR4(DIVR4),
		.DIVR3(DIVR3),
		.DIVR2(DIVR2),
		.DIVR1(DIVR1),
		.DIVR0(DIVR0),

		.RANGE3(RANGE3),
		.RANGE2(RANGE2),
		.RANGE1(RANGE1),
		.RANGE0(RANGE0),

		.DIVF11(DIVF11),
		.DIVF10(DIVF10),
		.DIVF9(DIVF9),
		.DIVF8(DIVF8),
		.DIVF7(DIVF7),
		.DIVF6(DIVF6),
		.DIVF5(DIVF5),
		.DIVF4(DIVF4),
		.DIVF3(DIVF3),
		.DIVF2(DIVF2),
		.DIVF1(DIVF1),
		.DIVF0(DIVF0),

		.DIVP13(DIVP13),
		.DIVP12(DIVP12),
		.DIVP11(DIVP11),
		.DIVP10(DIVP10),
		.DIVP9(DIVP9),
		.DIVP8(DIVP8),
		.DIVP7(DIVP7),
		.DIVP6(DIVP6),
		.DIVP5(DIVP5),
		.DIVP4(DIVP4),
		.DIVP3(DIVP3),
		.DIVP2(DIVP2),
		.DIVP1(DIVP1),
		.DIVP0(DIVP0),
		
		.DIVQ2(DIVQ2),
		.DIVQ1(DIVQ1),
		.DIVQ0(DIVQ0),
		
		.SSMD1(SSMD1),
		.SSMD0(SSMD0),
		.SSMF4(SSMF4),
		.SSMF3(SSMF3),
		.SSMF2(SSMF2),
		.SSMF1(SSMF1),
		.SSMF0(SSMF0),

		.LOCKWIN2(LOCKWIN2),
		.LOCKWIN1(LOCKWIN1),
		.LOCKWIN0(LOCKWIN0),
		.LOCKCNT3(LOCKCNT3),
		.LOCKCNT2(LOCKCNT2),
		.LOCKCNT1(LOCKCNT1),
		.LOCKCNT0(LOCKCNT0),


		.LOCK(LOCK),
		.vco4x_normal(vco4x_normal),
		.vco4x_alt(vco4x_alt),
		.vco_000(vco_000),
		.vco_000_alt(vco_000_alt),
		.vco_045(vco_045),
		.vco_045_alt(vco_045_alt),
		.vco_090(vco_090),
		.vco_090_alt(vco_090_alt),
		.vco_135(vco_135),
		.vco_135_alt(vco_135_alt),
		.vco_180(vco_180),
		.vco_180_alt(vco_180_alt),
		.vco_225(vco_225),
		.vco_225_alt(vco_225_alt),
		.vco_270(vco_270),
		.vco_270_alt(vco_270_alt),
		.vco_315(vco_315),
		.vco_315_alt(vco_315_alt),
		.reset_reg(reset_all),
    .divq_reset(divq_reset)
);
wire [2:0] mult_divq;
assign mult_divq = {DIVQ2,DIVQ1,DIVQ0};

//
// Calculate counter value
// 
  always @(DIVQ2 or DIVQ1 or DIVQ0 or reset_all) begin
    case ({DIVQ2,DIVQ1,DIVQ0})
      3'b110: begin
                if (`WARNING_MESSAGES_ON == 1) begin
                $display ("**********************Attention************************* ");
                $display ("The setting on DIVQ is not valid (cannot divide by 64)  ");
                $display ("DIVQ is being treated as 101 (divide by 32) for the rest ");
                $display ("of the simulation. ");
                $display ("   Instance: %m. Simulation time is %t", $time);
                $display ("***************************************************** ");
                end
                end
      3'b111: begin
                if (`WARNING_MESSAGES_ON == 1) begin
                $display ("**********************Attention************************* ");
                $display ("The setting on DIVQ is not valid (cannot divide by 128)  ");
                $display ("DIVQ is being treated as 101 (divide by 32) for the rest ");
                $display ("of the simulation. ");
                $display ("   Instance: %m. Simulation time is %t", $time);
                $display ("***************************************************** ");
                end
              end
    endcase
  end
    
Divide_2 #(.DIV_LENGTH(1)) u_clk_a_div2(.CLKIN(vco4x_wire), .CLKOUT(clk_a_div2), .DIV(2'b10), .RESET(divq_reset | reset_all));
Divide_2 #(.DIV_LENGTH(1)) u_clk_a_div4(.CLKIN(clk_a_div2), .CLKOUT(clk_a_div4), .DIV(2'b10), .RESET(divq_reset | reset_all));
Divide_2 #(.DIV_LENGTH(1)) u_clk_a_div8(.CLKIN(clk_a_div4), .CLKOUT(clk_a_div8), .DIV(2'b10), .RESET(divq_reset | reset_all));
Divide_2 #(.DIV_LENGTH(1)) u_clk_a_div16(.CLKIN(clk_a_div8), .CLKOUT(clk_a_div16), .DIV(2'b10), .RESET(divq_reset | reset_all));
Divide_2 #(.DIV_LENGTH(1)) u_clk_a_div32(.CLKIN(clk_a_div16), .CLKOUT(clk_a_div32), .DIV(2'b10), .RESET(divq_reset | reset_all));


assign pllout4x_wire = (mult_divq === 3'b000) ? vco4x_wire : 
                      ((mult_divq === 3'b001) ? clk_a_div2 :
                      ((mult_divq === 3'b010) ? clk_a_div4 :
                      ((mult_divq === 3'b011) ? clk_a_div8 :
                      ((mult_divq === 3'b100) ? clk_a_div16 :
                      ((mult_divq === 3'b101) ? clk_a_div32 : 1'bx)))));

  reg vco4x_wire_div2, vco4x_wire_div4, vco4x_wire_div8, vco4x_wire_div16, vco4x_wire_div32;
  always@(posedge vco4x_wire or posedge reset_all) begin
    if (reset_all === 1'b1)
      vco4x_wire_div2 <= 1'b0;
    else
      vco4x_wire_div2 <= !vco4x_wire_div2;
  end
  always@(posedge vco4x_wire_div2 or posedge reset_all) begin
    if (reset_all === 1'b1)
      vco4x_wire_div4 <= 1'b0;
    else
      vco4x_wire_div4 <= !vco4x_wire_div4;
  end
  always@(posedge vco4x_wire_div4 or posedge reset_all) begin
    if (reset_all === 1'b1)
      vco4x_wire_div8 <= 1'b0;
    else
      vco4x_wire_div8 <= !vco4x_wire_div8;
  end
  always@(posedge vco4x_wire_div8 or posedge reset_all) begin
    if (reset_all === 1'b1)
      vco4x_wire_div16 <= 1'b0;
    else
      vco4x_wire_div16 <= !vco4x_wire_div16;
  end
  always@(posedge vco4x_wire_div16 or posedge reset_all) begin
    if (reset_all === 1'b1)
      vco4x_wire_div32 <= 1'b0;
    else
      vco4x_wire_div32 <= !vco4x_wire_div32;
  end
      
/*ABI_DIVQ        DIVQ_4x(
		.vco_in(vco4x_wire),
		.reset_reg(reset_all),
		.DIVQ2(DIVQ2),
		.DIVQ1(DIVQ1),
		.DIVQ0(DIVQ0),
		.divq_out(pllout4x_wire)
);*/

ABI_PHASE       PHASE(
		.pllout4x_in(pllout4x_wire),
		.reset_reg(reset_all | divq_reset),
		.out_000(pllout_000_wire),
		.out_045(pllout_045_wire),
		.out_090(pllout_090_wire),
		.out_135(pllout_135_wire),
		.out_180(pllout_180_wire),
		.out_225(pllout_225_wire),
		.out_270(pllout_270_wire),
		.out_315(pllout_315_wire)
);

//
// Specify block for Bypass path
//
  specify
     specparam t_rise = 0:0:0, t_fall = 0:0:0;  //fake numbers, to allow SDF annotation
     if (BYPASS) (REFCK => PLLOUT_0) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_45) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_90) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_135) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_180) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_225) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_270) = (t_rise, t_fall);
     if (BYPASS) (REFCK => PLLOUT_315) = (t_rise, t_fall);
  endspecify

//
// connections between instantiations
//
// mux between vco, alt_vco to go to dividers
  assign vco4x_wire = (SSE == 1'b0) ? vco4x_normal :
                     ((SSE == 1'b1) ? vco4x_alt : 1'bx ) ;

  assign vco_000_wire = (SSE == 1'b0) ? vco_000 :
                       ((SSE == 1'b1) ? vco_000_alt : 1'bx ) ;
  assign vco_045_wire = (SSE == 1'b0) ? vco_045 :
                       ((SSE == 1'b1) ? vco_045_alt : 1'bx ) ;
  assign vco_090_wire = (SSE == 1'b0) ? vco_090 :
                       ((SSE == 1'b1) ? vco_090_alt : 1'bx ) ;
  assign vco_135_wire = (SSE == 1'b0) ? vco_135 :
                       ((SSE == 1'b1) ? vco_135_alt : 1'bx ) ;
  assign vco_180_wire = (SSE == 1'b0) ? vco_180 :
                       ((SSE == 1'b1) ? vco_180_alt : 1'bx ) ;
  assign vco_225_wire = (SSE == 1'b0) ? vco_225 :
                       ((SSE == 1'b1) ? vco_225_alt : 1'bx ) ;
  assign vco_270_wire = (SSE == 1'b0) ? vco_270 :
                       ((SSE == 1'b1) ? vco_270_alt : 1'bx ) ;
  assign vco_315_wire = (SSE == 1'b0) ? vco_315 :
                       ((SSE == 1'b1) ? vco_315_alt : 1'bx ) ;

// Enable/Bypass gates

  wire bypassi, range_byp;

  assign range_byp = ( (RANGE3 == 1'b0) && (RANGE2 == 1'b0) && (RANGE1 == 1'b0) && (RANGE0 == 1'b0) ) ;
  assign bypassi = ( BYPASS | range_byp ) ;


  assign n_0 = !RESET && pllout_000_wire ;
  assign PLLOUT_0 = (PD == 1'b1) ? 1'b0 :
                   ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                    (bypassi == 1'b0) ?  MAIN.vco1x_ck : 1'bx) : 1'bx) ;					
  assign n_45 = !RESET && pllout_045_wire ;
  assign PLLOUT_45 = (PD == 1'b1) ? 1'b0 :
                    ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                     (bypassi == 1'b0) ? MAIN.vco_045_ck0 : 1'bx) : 1'bx) ;

  assign n_90 = !RESET && pllout_090_wire ;
  assign PLLOUT_90 = (PD == 1'b1) ? 1'b0 :
                    ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                     (bypassi == 1'b0) ? MAIN.vco_090_ck0 : 1'bx) : 1'bx) ;

  assign n_135 = !RESET && pllout_135_wire ;
  assign PLLOUT_135 = (PD == 1'b1) ? 1'b0 :
                     ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                      (bypassi == 1'b0) ? MAIN.vco_135_ck0 : 1'bx) : 1'bx) ;

  assign n_180 = !RESET && pllout_180_wire ;
  assign PLLOUT_180 = (PD == 1'b1) ? 1'b0 :
                     ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                      (bypassi == 1'b0) ? MAIN.vco_180_ck0 : 1'bx) : 1'bx) ;

  assign n_225 = !RESET && pllout_225_wire ;
  assign PLLOUT_225 = (PD == 1'b1) ? 1'b0 :
                     ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                      (bypassi == 1'b0) ? MAIN.vco_225_ck0 : 1'bx) : 1'bx) ;

  assign n_270 = !RESET && pllout_270_wire ;
  assign PLLOUT_270 = (PD == 1'b1) ? 1'b0 :
                     ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                      (bypassi == 1'b0) ? MAIN.vco_270_ck0 : 1'bx) : 1'bx) ;

  assign n_315 = !RESET && pllout_315_wire ;
  assign PLLOUT_315 = (PD == 1'b1) ? 1'b0 :
                     ((PD == 1'b0) ? ((bypassi == 1'b1) ? REFCK : 
                                      (bypassi == 1'b0) ? MAIN.vco_315_ck0 : 1'bx) : 1'bx) ;

//
// Frequency error checking for PLLOUT signals
//
  initial begin
    oFreq_low_flag <= 1'b0;
    oFreq_high_flag <= 1'b0;
    last_posedge_out <= 0;
    period_out <= 0;
  end

//
// Check frequency of PLL output and flag any errors
//  (warning message will display, but simulation will not stop)
  always@(posedge PLLOUT_0)
    begin
      if (last_posedge_out !== 0) 
        begin
          period_out <= $time - last_posedge_out;
          if ( (period_out !== 0) && !MODE32K )
            begin
              if ( (period_out > `MIN_OUT_FREQ) && !oFreq_low_flag && LOCK )
                begin
                 if (`WARNING_MESSAGES_ON == 1) begin
                 //$display ("");
                 $display ("************************Attention************************");
                 $display ("   The output frequency of PLLOUT_0 is too slow!           ");
                 $display ("   The frequency on the output is below 20MHz. The PLL   ");
                 $display ("   is operating out of spec, therefore the current sim-  ");
                 $display ("   ulation results may not be accurate!                  ");
                 //$display ("");
                 $display ("   This is likely due to the setting of the DIVR, DIVF,  ");
                 $display ("   DIVQ, or the frequency of REF. Please check these     ");
                 $display ("   values and rerun the simulation.                      ");
                 //$display ("");
                 $display ("   Instance: %m. Simulation time is %t", $time);
                 $display ("*********************************************************");
                 //$display ("");
                 end
                 oFreq_low_flag <= 1'b1;
                end  //if ( (period_out > `MIN_OUT_FREQ)
              if ( !MODE_1V2 && !oFreq_high_flag && LOCK )
                begin
                 if (period_out < `MAX_OUT_1V0_FREQ) begin
                  if (`WARNING_MESSAGES_ON == 1) begin
                  //$display ("");
                  $display ("************************Attention************************");
                  $display ("   The output frequency of PLLOUT_0 is too fast!         ");
                  $display ("   The frequency on the output is above 500MHz. The PLL  ");
                  $display ("   is operating out of spec, therefore the current sim-  ");
                  $display ("   ulation results may not be accurate!                  ");
                  //$display ("");
                  $display ("   This is likely due to the setting of the DIVR, DIVF,  ");
                  $display ("   DIVQ, or the frequency of REFCK. Please check these     ");
                  $display ("   values and rerun the simulation.                      ");
                  //$display ("");
                  $display ("   Instance: %m. Simulation time is %t", $time);
                  $display ("*********************************************************");
                  //$display ("");
                  end
                  oFreq_high_flag <= 1'b1;
                 end
                end  //if ( !MODE_1V2 && !oFreq_high_flag && LOCK )
              if ( MODE_1V2 && !oFreq_high_flag && LOCK )
                begin
                 if (period_out < `MAX_OUT_1V2_FREQ) begin
                  if (`WARNING_MESSAGES_ON == 1) begin
                  //$display ("");
                  $display ("************************Attention************************");
                  $display ("   The output frequency of PLLOUT_0 is too fast!         ");
                  $display ("   The frequency on the output is above 1GHz. The PLL  ");
                  $display ("   is operating out of spec, therefore the current sim-  ");
                  $display ("   ulation results may not be accurate!                  ");
                  //$display ("");
                  $display ("   This is likely due to the setting of the DIVR, DIVF,  ");
                  $display ("   DIVQ, or the frequency of REFCK. Please check these     ");
                  $display ("   values and rerun the simulation.                      ");
                  //$display ("");
                  $display ("   Instance: %m. Simulation time is %t", $time);
                  $display ("*********************************************************");
                  //$display ("");
                  end
                  oFreq_high_flag <= 1'b1;
                 end
                end  //if ( MODE_1V2 && !oFreq_high_flag && LOCK )
            end  //if ( (period_out !== 0) && !MODE32K )
        end  //if (last_posedge_out !== 0) 
      last_posedge_out <= $time;
    end  //  always@

  always@(posedge RESET or posedge BYPASS or posedge PD) //clear for frequency warning
    begin
      last_posedge_out <= 0;
      period_out <= 0;
    end

//
// For DIVF[9:7] when SSE=1
//
/*  always@(DIVF7 or DIVF8 or DIVF7)
   begin
    if (SSE === 1'b1) //we're in spread-spectrum mode
     begin
      if ( (RESET === 1'b0) && (PD === 1'b0) && (BYPASS === 1'b0) )
       begin //DIV[9:7] should be low when in this mode
        if ( DIVF7 === 1'b1 )
         begin
          if (`WARNING_MESSAGES_ON == 1) begin
          //$display ("");
          $display ("************************Attention************************");
          $display ("   The DIVF7 input pin is high, but it should be low.    ");
          $display ("   When the PLL is in Spread-spectrum mode, the DIVF[9:7]");
          $display ("   input pins should be held low.                        ");
          //$display ("");
          $display ("   The PLL will continue to operate, but please re-check ");
          $display ("   the DIVF7 input pin and rerun the simulation.         ");
          //$display ("");
          $display ("   Instance: %m. Simulation time is %t", $time);
          $display ("*********************************************************");
          //$display ("");
          
         end //if ( DIVF7 === 1'b1 )
        if ( DIVF8 === 1'b1 )
         begin
          if (`WARNING_MESSAGES_ON == 1) begin
          //$display ("");
          $display ("************************Attention************************");
          $display ("   The DIVF8 input pin is high, but it should be low.    ");
          $display ("   When the PLL is in Spread-spectrum mode, the DIVF[9:7]");
          $display ("   input pins should be held low.                        ");
          //$display ("");
          $display ("   The PLL will continue to operate, but please re-check ");
          $display ("   the DIVF8 input pin and rerun the simulation.         ");
          //$display ("");
          $display ("   Instance: %m. Simulation time is %t", $time);
          $display ("*********************************************************");
          //$display ("");
          end
         end //if ( DIVF8 === 1'b1 )
        if ( DIVF9 === 1'b1 )
         begin
          if (`WARNING_MESSAGES_ON == 1) begin
          //$display ("");
          $display ("************************Attention************************");
          $display ("   The DIVF9 input pin is high, but it should be low.    ");
          $display ("   When the PLL is in Spread-spectrum mode, the DIVF[9:7]");
          $display ("   input pins should be held low.                        ");
          //$display ("");
          $display ("   The PLL will continue to operate, but please re-check ");
          $display ("   the DIVF9 input pin and rerun the simulation.         ");
          //$display ("");
          $display ("   Instance: %m. Simulation time is %t", $time);
          $display ("*********************************************************");
          //$display ("");
          end
         end //if ( DIVF9 === 1'b1 )
       end //if ( (RESET === 1'b0) && (PD === 1'b0) && (BYPASS === 1'b0) )
     end //if (SSE === 1'b1)
   end
*/
//
// Error checking for control signals changing
// outside of RESET/PD or BYPASS assertion
//
  always@(MODE32K)
    begin
//      if ( (RESET == 1'b0) && (BYPASS == 1'b0) );
      if ( (RESET == 1'b0) && (BYPASS == 1'b0) && (PD == 1'b0) )
        begin
          if ($time > 0)
            begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The MODE32K control pin has changed in the middle of  ");
        $display ("   the simulation! This pin should NOT be changed except ");
        $display ("   when RESET or PD or BYPASS is asserted. The current   ");
        $display ("   simulation results may not be accurate!               ");
        //$display ("");
        $display ("   Please check the RESET, PD, BYPASS, and FSE control   ");
        $display ("   pins, and rerun the simulation.                       ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("*********************************************************");
        //$display ("");
        end
            end
        end
    end

  always@(FSE)
    begin
//      if ( (RESET == 1'b0) && (BYPASS == 1'b0) );
      if ( (RESET == 1'b0) && (BYPASS == 1'b0) && (PD == 1'b0) )
        begin
          if ($time > 0)
            begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The FSE control pin has changed in the middle of the  ");
        $display ("   simulation! This pin should NOT be changed except when");
        $display ("   RESET or PD or BYPASS is asserted. The current simula-");
        $display ("   tion results may not be accurate!                     ");
        //$display ("");
        $display ("   Please check the RESET, PD, BYPASS, and FSE control   ");
        $display ("   pins, and rerun the simulation.                       ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("*********************************************************");
        //$display ("");
        end
            end
        end
    end

  always@(SSE)
    begin
//      if ( (RESET == 1'b0) && (BYPASS == 1'b0) );
      if ( (RESET == 1'b0) && (BYPASS == 1'b0) && (PD == 1'b0) )
        begin
          if ($time > 0)
            begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The SSE control pin has changed in the middle of the  ");
        $display ("   simulation! This pin should NOT be changed except when ");
        $display ("   RESET or PD or BYPASS is asserted. The current simula-");
        $display ("   tion results may not be accurate!                     ");
        //$display ("");
        $display ("   Please check the RESET, PD, BYPASS, and SSE control   ");
        $display ("   pins, and rerun the simulation.                       ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("*********************************************************");
        //$display ("");
        end
            end
        end
    end

  always@(SSMD1 or SSMD0)
    begin
//      if ( (RESET == 1'b0) && (BYPASS == 1'b0) );
      if ( (RESET == 1'b0) && (BYPASS == 1'b0) && (PD == 1'b0) )
        begin
          if ($time > 0)
            begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The SSMD[1:0] control bus has changed in the middle of ");
        $display ("   the simulation! These pins should NOT be changed except");
        $display ("   RESET or PD or BYPASS is asserted. The current simula-");
        $display ("   tion results may not be accurate!                     ");
        //$display ("");
        $display ("   Please check the RESET, PD, BYPASS, and SSMD[1:0]     ");
        $display ("   control bus, and rerun the simulation.                ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("*********************************************************");
        //$display ("");
        end
            end
        end
    end

  always@(SSMF4 or SSMF3 or SSMF2 or SSMF1 or SSMF0)
    begin
//      if ( (RESET == 1'b0) && (BYPASS == 1'b0) );
      if ( (RESET == 1'b0) && (BYPASS == 1'b0) && (PD == 1'b0) )
        begin
          if ($time > 0)
            begin
        if (`WARNING_MESSAGES_ON == 1) begin
        //$display ("");
        $display ("************************Attention************************");
        $display ("   The SSMF[4:0] control bus has changed in the middle of ");
        $display ("   the simulation! These pins should NOT be changed except");
        $display ("   RESET or PD or BYPASS is asserted. The current simula-");
        $display ("   tion results may not be accurate!                     ");
        //$display ("");
        $display ("   Please check the RESET, PD, BYPASS, and SSMF[4:0]     ");
        $display ("   control bus, and rerun the simulation.                ");
        //$display ("");
        $display ("   Instance: %m. Simulation time is %t", $time);
        $display ("*********************************************************");
        //$display ("");
        end
            end
        end
    end

  always@(posedge RESET or PD or BYPASS or FSE or SSE)
    begin
	oFreq_low_flag <= 1'b0;
	oFreq_high_flag <= 1'b0;
	last_posedge_out <= 0;
	period_out <= 0;
    end

endmodule // ABISCB82


module CCC_PLL (input       CLKIN,   // Reference clock
                input       FBIN,    // Feedback clock
                input       BYPASS,   // Pll bypass - Active HIGH
                input       RESET,    // Pll reset  - Active HIGH
                input       POWERDOWN,       //
                input [1:0] SSMD,     // Spread-spectrum modulation depth
                input [4:0] SSMF,     // Spread-spectrum modulation frequency
                input       SSE,      // Spread-spectrum enable
                input [5:0] CLKDIV,     // Reference divider value
                input [11:0] FBDIV,     // Feedback divider value
                //input [9:0] FBDIV,     // Feedback divider value
                input [13:0] POSTDIV,     // Post divider value
                input [2:0] VCODIV,     // Output divider value
                input       FBSEL,    // Feedback select
                input       MODE_32K, // 32kHz select
                input [3:0] PLL_RANGE,    // PLL filter range
                input       MODE_1V2, // Core votage select
                input       MODE_3V3, // Analog votage select
                input [2:0] LOCKWIN,  // Lock window
                input [3:0] LOCKCNT,  // Lock count


                output      LOCK,     // PLL locked when HIGH
                output      VCO0,
                output      VCO45,
                output      VCO90,
                output      VCO135,
                output      VCO180,
                output      VCO225,
                output      VCO270,
                output      VCO315,
                
                output      divq_reset
               );
               
  parameter  real TPD  = 0;
  parameter integer FB_MULTIPLIER = 1;
  parameter VCOFREQUENCY = 0.0;
  parameter FB_DIV = 1.0;
  parameter POST_DIV = 1.0;
  
  wire #TPD VCO0_int;
  wire #TPD VCO45_int;
  wire #TPD VCO90_int;
  wire #TPD VCO135_int;
  wire #TPD VCO180_int;
  wire #TPD VCO225_int;
  wire #TPD VCO270_int;
  wire #TPD VCO315_int;
  


  
  assign VCO0 = VCO0_int;
  assign VCO45 = VCO45_int;
  assign VCO90 = VCO90_int;
  assign VCO135 = VCO135_int;
  assign VCO180 = VCO180_int;
  assign VCO225 = VCO225_int;
  assign VCO270 = VCO270_int;
  assign VCO315 = VCO315_int;

  
  
  ABISCB82 #(.VCOFREQUENCY(VCOFREQUENCY), .FB_DIV(FB_DIV), .POST_DIV(POST_DIV)) 
           u_pll (.REFCK(CLKIN), .FB(FBIN), .BYPASS(BYPASS), .RESET(RESET), .PD(POWERDOWN), .FSE(FBSEL), 
                  .MODE32K(MODE_32K), .MODE_1V2(MODE_1V2), .MODE_3V3(MODE_3V3), .SSE(SSE),
                  .DIVR5(CLKDIV[5]), .DIVR4(CLKDIV[4]), .DIVR3(CLKDIV[3]), .DIVR2(CLKDIV[2]), .DIVR1(CLKDIV[1]), .DIVR0(CLKDIV[0]),
                  .RANGE3(PLL_RANGE[3]), .RANGE2(PLL_RANGE[2]), .RANGE1(PLL_RANGE[1]), .RANGE0(PLL_RANGE[0]),
                  .DIVF11(FBDIV[11]), .DIVF10(FBDIV[10]), .DIVF9(FBDIV[9]), .DIVF8(FBDIV[8]), .DIVF7(FBDIV[7]), .DIVF6(FBDIV[6]),
                  .DIVF5(FBDIV[5]), .DIVF4(FBDIV[4]), .DIVF3(FBDIV[3]), .DIVF2(FBDIV[2]), .DIVF1(FBDIV[1]), .DIVF0(FBDIV[0]),
                  .DIVP13(POSTDIV[13]), .DIVP12(POSTDIV[12]), .DIVP11(POSTDIV[11]), .DIVP10(POSTDIV[10]),
                  .DIVP9(POSTDIV[9]), .DIVP8(POSTDIV[8]), .DIVP7(POSTDIV[7]), .DIVP6(POSTDIV[6]), .DIVP5(POSTDIV[5]),
                  .DIVP4(POSTDIV[4]), .DIVP3(POSTDIV[3]), .DIVP2(POSTDIV[2]), .DIVP1(POSTDIV[1]), .DIVP0(POSTDIV[0]),
                  .SSMD1(SSMD[1]), .SSMD0(SSMD[0]),
                  .SSMF4(SSMF[4]), .SSMF3(SSMF[3]), .SSMF2(SSMF[2]), .SSMF1(SSMF[1]), .SSMF0(SSMF[0]),
                  .LOCKWIN2(LOCKWIN[2]), .LOCKWIN1(LOCKWIN[1]), .LOCKWIN0(LOCKWIN[0]),
                  .LOCKCNT3(LOCKCNT[3]), .LOCKCNT2(LOCKCNT[2]), .LOCKCNT1(LOCKCNT[1]), .LOCKCNT0(LOCKCNT[0]),
                  .DIVQ2(VCODIV[2]), .DIVQ1(VCODIV[1]), .DIVQ0(VCODIV[0]),
                  .LOCK(LOCK),
                  .PLLOUT_0(VCO0_int), .PLLOUT_45(VCO45_int), .PLLOUT_90(VCO90_int),
                  .PLLOUT_135(VCO135_int), .PLLOUT_180(VCO180_int), .PLLOUT_225(VCO225_int),
                  .PLLOUT_270(VCO270_int), .PLLOUT_315(VCO315_int), .divq_reset(divq_reset));
                  
  specify
    specparam PATHPULSE$ = (1.0, 1.0);
    
    ( CLKIN        => VCO0    )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO45   )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO90   )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO135  )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO180  )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO225  )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO270  )= (0.00:0.00:0.00, 0.00:0.00:0.00);
    ( CLKIN        => VCO315  )= (0.00:0.00:0.00, 0.00:0.00:0.00);
  endspecify
endmodule


`timescale 1ps / 1ps
module refstop( input refclk, input lock, output reg lock_loss);
  time period, ref_pos_edge;






  initial begin
    lock_loss = 1'b0;
    ref_pos_edge = 0;
    period = 0;
  end












  always @(posedge refclk) begin
    if ( ref_pos_edge > 0 )
      period = $time - ref_pos_edge;
    ref_pos_edge = $time;
  end
  
  always @(posedge refclk) begin
    if ( period > 0 ) begin
      # period;
      #50;
      if (refclk != 1'b1) begin
        if ( lock == 1'b1 ) begin
          lock_loss = 1'b1;
          # period;
          lock_loss = 1'b0;
          ref_pos_edge = 0;
          period = 0;
        end
      end
    end
  end
endmodule




`timescale 1 ps/1 ps
module Freq_Divider(CLKIN, CLKOUT, DIV, SYNC_RESET, ASYNC_RESET);
  
  parameter DIV_LENGTH      = 2;
  parameter DIV_FORMAT      = 0;        // 1--> Division factor = DIV+1
  parameter RESET_POLARITY  = 1;        // 0--> active low, 1--> active high
  
  input                   CLKIN;        // Input clock
  input                   SYNC_RESET;   // Synchronous Reset
  input                   ASYNC_RESET;  // Asynchronous Reset
  input [DIV_LENGTH-1:0]  DIV;          // Division Factor
  output                  CLKOUT;       // Divided output clock
  
  wire                    CLKOUT_odd, CLKOUT_even;
  wire  [DIV_LENGTH:0]    DIV_FACTOR;

  assign divider_ASYNC_RESET = RESET_POLARITY ^ ASYNC_RESET;
  assign CLKOUT         = ((CLKOUT_odd & DIV_FACTOR[0]) | (CLKOUT_even & !DIV_FACTOR[0])) && divider_ASYNC_RESET;
  assign divider_SYNC_RESET  = ~(RESET_POLARITY ^ SYNC_RESET);
  assign DIV_increment  = DIV_FORMAT | (~(|DIV));
  
  assign DIV_FACTOR = DIV + DIV_increment;
  
  
  
  // Even divider
  Even_Divider #(.DIV_LENGTH(DIV_LENGTH)) 
        u_even (.CLKIN(CLKIN), 
                .CLKOUT(CLKOUT_even), 
                .DIV(DIV_FACTOR), 
                .SYNC_RESET(divider_SYNC_RESET),
                .ASYNC_RESET(divider_ASYNC_RESET)
               );
  
  // Odd divider
  Odd_Divider #(.DIV_LENGTH(DIV_LENGTH)) 
        u_odd(.CLKIN(CLKIN), 
              .CLKOUT(CLKOUT_odd), 
              .DIV(DIV_FACTOR), 
              .SYNC_RESET(divider_SYNC_RESET),
              .ASYNC_RESET(divider_ASYNC_RESET)
              );
endmodule

`timescale 1 ps/1 ps
module Even_Divider(CLKIN, CLKOUT, DIV, SYNC_RESET, ASYNC_RESET);
  parameter       DIV_LENGTH = 2;
  input           CLKIN;
  input           SYNC_RESET;
  input           ASYNC_RESET;
  output reg      CLKOUT;
  input [DIV_LENGTH:0] DIV;

  reg   [DIV_LENGTH:0]  counter;
  wire  [DIV_LENGTH:0]  div_2;
  wire            EN;
  reg             rst_pulse;
  
  assign div_2 = {1'b0, DIV[DIV_LENGTH:1]};
  assign EN = ~DIV[0];

  initial begin
    rst_pulse   <= 1'b1;
    CLKOUT      <= 1'b0;
  end
  
  always @( posedge CLKIN or negedge ASYNC_RESET ) begin
    if ( !ASYNC_RESET | SYNC_RESET | rst_pulse ) begin
      counter     <= 1;
      CLKOUT      <= 1'b0;
      rst_pulse   <= 1'b0;
    end
    else begin
      if ( EN === 1'b1 ) begin
        if( counter == 1 ) begin
          counter <= div_2;
          CLKOUT <= ~CLKOUT;
        end
        else  begin
          counter <= counter-1;
        end
      end
    end
  end
  
  always @( posedge EN ) begin
    counter = div_2;
    CLKOUT = CLKIN;
  end
endmodule


`timescale 1 ps/1 ps
module Odd_Divider(CLKIN, CLKOUT, SYNC_RESET, ASYNC_RESET, DIV);
  parameter DIV_LENGTH = 2;
  input                 CLKIN;
  input                 SYNC_RESET;
  input                 ASYNC_RESET;
  output                CLKOUT;
  input [DIV_LENGTH:0]  DIV;

	wire EN = DIV[0];

	// These 2 counters are used for non-overlapping signals
  reg [DIV_LENGTH-1:0]  counter_pos;
	reg [DIV_LENGTH-1:0]  counter_neg;
	reg                   CLKOUT_pos;			  // positive edge triggered output
	reg                   CLKOUT_neg;			  // negative edge triggered output
	reg                   rst_pulse;				// pulse generated when DIV changes
	reg [DIV_LENGTH-1:0]  old_DIV;		      // gets set to old DIV when DIV changes
  
  reg [DIV_LENGTH-1:0]  delay_neg;		    // this is used to offset the negative edge counter
	wire [DIV_LENGTH:0]   offset_neg;			  // from the positive edge counter in order to
	assign offset_neg = {1'b0,DIV} + 2'b11;		// guarante 50% duty cycle.
  
  reg                   first_cycle_pos, first_cycle_neg;


	assign CLKOUT = CLKOUT_neg ^ CLKOUT_pos;	// xor to generate 50% duty, half-period
                                            // waves of final output

	initial begin
    first_cycle_pos   <= 1'b1;
    first_cycle_neg   <= 1'b1;
    CLKOUT_neg        <= 1'b1;
    CLKOUT_pos        <= 1'b1;
  end
  
  // positive edge counter/divider
	always @( posedge CLKIN or negedge ASYNC_RESET )	begin
		if( SYNC_RESET | rst_pulse ) begin
			counter_pos <= 1;
      counter_neg <= 1;
      CLKOUT_pos  <= 1'b1;
      CLKOUT_neg  <= 1'b1;
      first_cycle_pos <= 1'b0;
		end
    else if( !ASYNC_RESET ) begin
      first_cycle_pos <= 1'b1;
		end
		else if ( EN ) begin
			if( counter_pos == 1 ) begin
				counter_pos <= DIV;
				CLKOUT_pos  <= ~CLKOUT_pos;
			end
			else begin
				counter_pos <= counter_pos - 1'b1;
			end
		end
	end
  
  always @( negedge SYNC_RESET ) begin
    if ( CLKIN === 1'b0 )
      delay_neg <= delay_neg - 1;
  end
	// counter driven by negative edge of clock.
	always @( negedge CLKIN or negedge ASYNC_RESET ) begin
		if( SYNC_RESET | rst_pulse ) begin
			counter_pos <= 1;
      counter_neg <= 1;
			delay_neg   <= offset_neg[DIV_LENGTH:1];
      CLKOUT_neg  <= 1'b1;
      CLKOUT_pos  <= 1'b1;
			//CLKOUT_neg  <= CLKOUT_pos;
      first_cycle_neg <= 1'b0;
		end
    else if( !ASYNC_RESET ) begin
      first_cycle_neg <= 1'b1;
		end
		else begin
      if( delay_neg <= 1 && EN ) begin
        // Do normal logic after odd calibration
        if(counter_neg == 1) begin
          counter_neg <= DIV;
          CLKOUT_neg  <= ~CLKOUT_neg;
        end
        else begin
          counter_neg <= counter_neg - 1'b1;
        end
      end
      else 
        if( EN ) begin
          delay_neg <= delay_neg - 1'b1;
        end
    end
  end

	// This block generates an internal SYNC_RESET for the odd divider in the
	// form of a single pulse signal when the odd divider is enabled.
	always @( posedge CLKIN or posedge SYNC_RESET ) begin
		if( SYNC_RESET )
			rst_pulse <= 0;
		else begin
      if( EN ) begin
        if( DIV != old_DIV )
          rst_pulse <= 1;
        else begin
          if ( first_cycle_pos | first_cycle_neg )
            rst_pulse <= 1;
          else
            rst_pulse <= 0;
        end
      end
    end
	end
  
 
	always @( posedge CLKIN )	begin
		old_DIV <= DIV;	// always save the old DIV value to guarante SYNC_RESET from an even-to-odd transition.
	end

endmodule


`timescale 1 fs/1 fs
module Divide_2(CLKIN, CLKOUT, DIV, RESET);
  parameter DIV_LENGTH = 2;
  input           CLKIN;
  input           RESET;
  output          CLKOUT;
  input [DIV_LENGTH:0] DIV;

  reg   [DIV_LENGTH:0]  counter;
  wire  [DIV_LENGTH:0]  div_2;
  wire            EN;
  reg             rst_pulse;
  reg             CLKOUT_int;
  
  assign div_2 = {1'b0, DIV[DIV_LENGTH:1]};
  assign EN = !DIV[0] & !RESET;
  assign CLKOUT = CLKOUT_int & !RESET;

  initial begin
    rst_pulse   <= 1'b1;
  end
  
  always @( posedge RESET ) begin
    counter     <= 1;
    CLKOUT_int  <= 1'b0;
    rst_pulse   <= 1'b0;
  end
  
  always @( posedge CLKIN ) begin
    if ( rst_pulse ) begin
      counter     <= 1;
      CLKOUT_int  <= 1'b0;
      rst_pulse   <= 1'b0;
    end
    else begin
      if ( EN === 1'b1 ) begin
        if( counter == 1 ) begin
          counter <= div_2;
          CLKOUT_int <= ~CLKOUT_int;
        end
        else  begin
          counter <= counter-1;
        end
      end
    end
  end
  
  always @( posedge EN ) begin
    counter = div_2;
    CLKOUT_int = CLKIN;
  end
endmodule

////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
module freq_multiplier (input CLKIN, output CLKOUT, input [11:0] MULTIPLIER);
  
  wire  [12:0]  FBDIV = MULTIPLIER[11:0] * 2;
  
  CCC_PLL #(.FB_DIV(11'b1), 
             .POST_DIV( 2 )
             )
             u_pll(.FBIN(CLKOUT), .CLKIN(CLKIN),
                   .RESET(1'b0), .BYPASS(1'b0), .POWERDOWN(1'b0),
                   .CLKDIV(6'b1), .FBDIV(FBDIV[11:0]), .POSTDIV(14'b1), .VCODIV(3'h0),
                   .SSMD(2'b0), .SSMF(5'b0), .SSE(1'b0),
                   .FBSEL(1'b0),  .PLL_RANGE(4'hF),
                   .MODE_32K(1'b0), .MODE_1V2(1'b0), .MODE_3V3(1'b0),
                   .LOCKWIN(3'h0), .LOCKCNT(4'b0),
                   .VCO0(CLKOUT), .VCO45( ), .VCO90(),
                   .VCO135(), .VCO180(), .VCO225(),
                   .VCO270(), .VCO315(),
                   .LOCK(), .divq_reset());
endmodule


////////////////////////////////////////////////////////////////
`timescale 1 ps/1 ps
module frac_divider (input CLKIN, output CLKOUT,
                     input [11:0]     DENOMINATOR );
  
  integer NUMERATOR;
  
  reg clk_1p5, clk_1p50;
  integer counter;
  //initial clk_1p5 = 1'b0;
  //initial clk_1p50 = 1'b1;
  initial counter = 1;
  /* Freq_Divider #(.DIV_LENGTH(3), .DIV_FORMAT(0), .RESET_POLARITY(0)) 
      u_rf_div (.CLKIN(CLK_GEN_0_CLK), .DIV(3'b11), .CLKOUT(div3), .SYNC_RESET(1'b1), .ASYNC_RESET(1'b1));
  assign clk_t1 = div3 ? CLK_GEN_0_CLK : ~CLK_GEN_0_CLK;
  assign clk_t0 = div3 ? ~CLK_GEN_0_CLK : CLK_GEN_0_CLK;
  //always @(posedge clk_t1)
    //clk_1p5 = ~clk_1p5;
  always @(posedge clk_t0)
    clk_1p50 = ~clk_1p50; */
  
  freq_multiplier u_mult (.MULTIPLIER(DENOMINATOR[11:0]), .CLKIN(CLKIN), .CLKOUT(ccc_pll_clk));
  always @(ccc_pll_clk) begin
    counter = counter + 1;
    if (counter == NUMERATOR) begin
      counter = 0;
      clk_1p5 = ~clk_1p5;
    end
  end
  
  assign CLKOUT = clk_1p5;
  
endmodule

`timescale 1 ps/ 1ps
module PLL (
                    FB_CLK,
                    REF_CLK_0,
                    REF_CLK_1,
                    POWERDOWN_N,
                    BYPASS_EN_N,
                    LOCK, 
                    OUT0,
                    OUT1,
                    OUT2,
                    OUT3,
                    
                    SSCG_WAVE_TABLE_ADDR,
                    DELAY_LINE_OUT_OF_RANGE,
                    OUT0_EN,
                    OUT1_EN,
                    OUT2_EN,
                    OUT3_EN,
                    REF_CLK_SEL,
                    LOAD_PHASE_N,
                    SSCG_WAVE_TABLE,
                    PHASE_DIRECTION,
                    PHASE_ROTATE,
                    PHASE_OUT0_SEL,
                    PHASE_OUT1_SEL,
                    PHASE_OUT2_SEL,
                    PHASE_OUT3_SEL,
                    DELAY_LINE_MOVE,
                    DELAY_LINE_DIRECTION,
                    DELAY_LINE_WIDE,
                    DELAY_LINE_LOAD,
                    REFCLK_SYNC_EN,
                    
                    DRI_CLK,
                    DRI_CTRL,
                    DRI_WDATA,
                    DRI_ARST_N,
                    DRI_RDATA,
                    DRI_INTERRUPT
                  );

  input        FB_CLK;
  input        POWERDOWN_N;
  input        BYPASS_EN_N;
  input         REF_CLK_0, REF_CLK_1;
  output       LOCK;
  output        OUT0, OUT1, OUT2, OUT3; //4 pll output clocks
  output [7:0]  SSCG_WAVE_TABLE_ADDR;
  output        DELAY_LINE_OUT_OF_RANGE;
  input         OUT0_EN, OUT1_EN, OUT2_EN, OUT3_EN;
  input         REF_CLK_SEL;
  input         LOAD_PHASE_N;
  input  [7:0]  SSCG_WAVE_TABLE;
  input         PHASE_DIRECTION;
  input         PHASE_ROTATE;
  input         PHASE_OUT0_SEL, PHASE_OUT1_SEL, PHASE_OUT2_SEL, PHASE_OUT3_SEL;
  input         DELAY_LINE_MOVE;
  input         DELAY_LINE_DIRECTION;
  input         DELAY_LINE_WIDE;
  input         DELAY_LINE_LOAD;
  input         REFCLK_SYNC_EN;
  
  input                                 DRI_CLK;
  input                        [10:0]   DRI_CTRL;
  input                        [32:0]   DRI_WDATA;
  input                                 DRI_ARST_N;
  output                       [32:0]   DRI_RDATA;
  output                                DRI_INTERRUPT;

  reg NOTIFY_REG;

  parameter           DATA_RATE = 0.0; 
  parameter           FORMAL_NAME = ""; 
  parameter           INTERFACE_NAME = ""; 
  parameter           INTERFACE_LEVEL = 3'b0;
  parameter           SOFTRESET = 1'b0;
  parameter           SOFT_POWERDOWN_N = 1'b1;
  parameter           RFDIV_EN = 1'b0;
  parameter           OUT0_DIV_EN = 1'b0;
  parameter           OUT1_DIV_EN = 1'b0;
  parameter           OUT2_DIV_EN = 1'b0;
  parameter           OUT3_DIV_EN = 1'b0;
  parameter           SOFT_REF_CLK_SEL = 1'b0;
  parameter           RESET_ON_LOCK = 1'b0;
  parameter   [3:0]   BYPASS_CLK_SEL = 4'b0;
  parameter           BYPASS_GO_EN_N = 1'b0;
  parameter   [3:0]   BYPASS_PLL = 4'b0;
  parameter   [3:0]   BYPASS_OUT_DIVIDER = 4'b0;
  parameter           FF_REQUIRES_LOCK = 1'b0;
  parameter           FSE_N = 1'b0;
  parameter   [1:0]   FB_CLK_SEL_0 = 2'b0;
  parameter           FB_CLK_SEL_1 = 1'b0;
  parameter   [5:0]   RFDIV = 6'b0;
  parameter           FRAC_EN = 1'b0;
  parameter           FRAC_DAC_EN = 1'b0;
  parameter   [2:0]   DIV0_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV0_VAL = 7'b0;
  parameter   [2:0]   DIV1_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV1_VAL = 7'b0;
  parameter   [2:0]   DIV2_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV2_VAL = 7'b0;
  parameter   [2:0]   DIV3_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV3_VAL = 3'b0;
  parameter           DIV3_CLK_SEL = 1'b0;
  parameter   [1:0]   BW_INT_CTRL = 2'b0;
  parameter   [1:0]   BW_PROP_CTRL = 2'b0;
  parameter           IREF_EN = 1'b0;
  parameter           IREF_TOGGLE = 1'b0;
  parameter   [3:0]   LOCK_CNT = 4'b0;
  parameter   [2:0]   DESKEW_CAL_CNT = 3'b0;
  parameter           DESKEW_CAL_EN = 1'b0;
  parameter           DESKEW_CAL_BYPASS = 1'b0;
  parameter           SYNC_REF_DIV_EN = 1'b0;
  parameter           SYNC_REF_DIV_EN_2 = 1'b0;
  parameter   [2:0]   OUT0_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT1_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT2_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT3_PHASE_SEL = 3'b0;
  parameter           SOFT_LOAD_PHASE_N = 1'b0;
  parameter   [5:0]   SSM_DIV_VAL = 6'b0;
  parameter   [23:0]  FB_FRAC_VAL = 24'b0;
  parameter           SSM_SPREAD_MODE = 1'b0;
  parameter   [4:0]   SSM_MODULATION = 5'b0;
  parameter   [11:0]  FB_INT_VAL = 12'b0;
  parameter           SSM_EN_N = 1'b0;
  parameter   [1:0]   SSM_EXT_WAVE_EN = 2'b0;
  parameter   [7:0]   SSM_EXT_WAVE_MAX_ADDR = 8'b0;
  parameter           SSM_RANDOM_EN = 1'b0;
  parameter   [1:0]   SSM_RANDOM_PATTERN_SEL = 2'b0;
  parameter   [1:0]   CDMUX0_SEL = 2'b0;
  parameter           CDMUX1_SEL = 1'b0;
  parameter           CDMUX2_SEL = 1'b0;
  parameter   [7:0]   CDELAY0_SEL = 8'b0;
  parameter           CDELAY0_EN = 1'b0;
  parameter           DRI_EN = 1'b0;
  parameter           DELAY_LINE_SIMULATION_MODE = "";
  parameter           RESETONLOCK = 0;//?? static info
  parameter           VCOFREQUENCY = 0.0;
  
  PLL_DELAY #(
            .DATA_RATE                                   ( DATA_RATE                                   ),
            .FORMAL_NAME                                 ( FORMAL_NAME                                 ),
            .INTERFACE_NAME                              ( INTERFACE_NAME                              ),
            .INTERFACE_LEVEL                             ( INTERFACE_LEVEL                             ),
            .SOFTRESET                                   ( SOFTRESET                                   ),
            .SOFT_POWERDOWN_N                            ( SOFT_POWERDOWN_N                            ),
            .RFDIV_EN                                    ( RFDIV_EN                                    ),
            .OUT0_DIV_EN                                 ( OUT0_DIV_EN                                 ),
            .OUT1_DIV_EN                                 ( OUT1_DIV_EN                                 ),
            .OUT2_DIV_EN                                 ( OUT2_DIV_EN                                 ),
            .OUT3_DIV_EN                                 ( OUT3_DIV_EN                                 ),
            .SOFT_REF_CLK_SEL                            ( SOFT_REF_CLK_SEL                            ),
            .RESET_ON_LOCK                               ( RESET_ON_LOCK                               ),
            .BYPASS_CLK_SEL                              ( BYPASS_CLK_SEL[3:0]                         ),
            .BYPASS_GO_EN_N                              ( BYPASS_GO_EN_N                              ),
            .BYPASS_PLL                                  ( BYPASS_PLL[3:0]                             ),
            .BYPASS_OUT_DIVIDER                          ( BYPASS_OUT_DIVIDER[3:0]                     ),
            .FF_REQUIRES_LOCK                            ( FF_REQUIRES_LOCK                            ),
            .FSE_N                                       ( FSE_N                                       ),
            .FB_CLK_SEL_0                                ( FB_CLK_SEL_0[1:0]                           ),
            .FB_CLK_SEL_1                                ( FB_CLK_SEL_1                                ),
            .RFDIV                                       ( RFDIV[5:0]                                  ),
            .FRAC_EN                                     ( FRAC_EN                                     ),
            .FRAC_DAC_EN                                 ( FRAC_DAC_EN                                 ),
            .DIV0_RST_DELAY                              ( DIV0_RST_DELAY[2:0]                         ),
            .DIV0_VAL                                    ( DIV0_VAL[6:0]                               ),
            .DIV1_RST_DELAY                              ( DIV1_RST_DELAY[2:0]                         ),
            .DIV1_VAL                                    ( DIV1_VAL[6:0]                               ),
            .DIV2_RST_DELAY                              ( DIV2_RST_DELAY[2:0]                         ),
            .DIV2_VAL                                    ( DIV2_VAL[6:0]                               ),
            .DIV3_RST_DELAY                              ( DIV3_RST_DELAY[2:0]                         ),
            .DIV3_VAL                                    ( DIV3_VAL[6:0]                               ),
            .DIV3_CLK_SEL                                ( DIV3_CLK_SEL                                ),
            .BW_INT_CTRL                                 ( BW_INT_CTRL[1:0]                            ),
            .BW_PROP_CTRL                                ( BW_PROP_CTRL[1:0]                           ),
            .IREF_EN                                     ( IREF_EN                                     ),
            .IREF_TOGGLE                                 ( IREF_TOGGLE                                 ),
            .LOCK_CNT                                    ( LOCK_CNT[3:0]                               ),
            .DESKEW_CAL_CNT                              ( DESKEW_CAL_CNT[2:0]                         ),
            .DESKEW_CAL_EN                               ( DESKEW_CAL_EN                               ),
            .DESKEW_CAL_BYPASS                           ( DESKEW_CAL_BYPASS                           ),
            .SYNC_REF_DIV_EN                             ( SYNC_REF_DIV_EN                             ),
            .SYNC_REF_DIV_EN_2                           ( SYNC_REF_DIV_EN_2                           ),
            .OUT0_PHASE_SEL                              ( OUT0_PHASE_SEL[2:0]                         ),
            .OUT1_PHASE_SEL                              ( OUT1_PHASE_SEL[2:0]                         ),
            .OUT2_PHASE_SEL                              ( OUT2_PHASE_SEL[2:0]                         ),
            .OUT3_PHASE_SEL                              ( OUT3_PHASE_SEL[2:0]                         ),
            .SOFT_LOAD_PHASE_N                           ( SOFT_LOAD_PHASE_N                           ),
            .SSM_DIV_VAL                                 ( SSM_DIV_VAL[5:0]                            ),
            .FB_FRAC_VAL                                 ( FB_FRAC_VAL[23:0]                           ),
            .SSM_SPREAD_MODE                             ( SSM_SPREAD_MODE                             ),
            .SSM_MODULATION                              ( SSM_MODULATION[4:0]                         ),
            .FB_INT_VAL                                  ( FB_INT_VAL[11:0]                            ),
            .SSM_EN_N                                    ( SSM_EN_N                                    ),
            .SSM_EXT_WAVE_EN                             ( SSM_EXT_WAVE_EN[1:0]                        ),
            .SSM_EXT_WAVE_MAX_ADDR                       ( SSM_EXT_WAVE_MAX_ADDR[7:0]                  ),
            .SSM_RANDOM_EN                               ( SSM_RANDOM_EN                               ),
            .SSM_RANDOM_PATTERN_SEL                      ( SSM_RANDOM_PATTERN_SEL[1:0]                 ),
            .CDMUX0_SEL                                  ( CDMUX0_SEL[1:0]                             ),
            .CDMUX1_SEL                                  ( CDMUX1_SEL                                  ),
            .CDMUX2_SEL                                  ( CDMUX2_SEL                                  ),
            .CDELAY0_SEL                                 ( CDELAY0_SEL[7:0]                            ),
            .CDELAY0_EN                                  ( CDELAY0_EN                                  ),
            .DRI_EN                                      ( DRI_EN                                      ),
            .DELAY_LINE_SIMULATION_MODE                  ( DELAY_LINE_SIMULATION_MODE                  ),
            .RESETONLOCK                                 ( RESETONLOCK                                 ),
            .VCOFREQUENCY                                ( VCOFREQUENCY                                ) )
            u_delay(.DELAY_LINE_LOAD            (DELAY_LINE_LOAD_int),
                    .DELAY_LINE_WIDE            (DELAY_LINE_WIDE_int),
                    .DELAY_LINE_DIRECTION       (DELAY_LINE_DIRECTION_int),
                    .DELAY_LINE_MOVE            (DELAY_LINE_MOVE_int),
                    .DELAY_LINE_OUT_OF_RANGE    (DELAY_LINE_OUT_OF_RANGE_int),
                  
                    .FB_CLK                     (FB_CLK),
                    .REF_CLK_0                  (REF_CLK_0),
                    .REF_CLK_1                  (REF_CLK_1),
                    
                    .FB_CLK_OUT                 (FB_CLK_OUT),
                    .REF_CLK_0_OUT              (REF_CLK_0_OUT),
                    .REF_CLK_1_OUT              (REF_CLK_1_OUT) );
    
  PLL_IP #(
            .DATA_RATE                                   ( DATA_RATE                                   ),
            .FORMAL_NAME                                 ( FORMAL_NAME                                 ),
            .INTERFACE_NAME                              ( INTERFACE_NAME                              ),
            .INTERFACE_LEVEL                             ( INTERFACE_LEVEL                             ),
            .SOFTRESET                                   ( SOFTRESET                                   ),
            .SOFT_POWERDOWN_N                            ( SOFT_POWERDOWN_N                            ),
            .RFDIV_EN                                    ( RFDIV_EN                                    ),
            .OUT0_DIV_EN                                 ( OUT0_DIV_EN                                 ),
            .OUT1_DIV_EN                                 ( OUT1_DIV_EN                                 ),
            .OUT2_DIV_EN                                 ( OUT2_DIV_EN                                 ),
            .OUT3_DIV_EN                                 ( OUT3_DIV_EN                                 ),
            .SOFT_REF_CLK_SEL                            ( SOFT_REF_CLK_SEL                            ),
            .RESET_ON_LOCK                               ( RESET_ON_LOCK                               ),
            .BYPASS_CLK_SEL                              ( BYPASS_CLK_SEL[3:0]                         ),
            .BYPASS_GO_EN_N                              ( BYPASS_GO_EN_N                              ),
            .BYPASS_PLL                                  ( BYPASS_PLL[3:0]                             ),
            .BYPASS_OUT_DIVIDER                          ( BYPASS_OUT_DIVIDER[3:0]                     ),
            .FF_REQUIRES_LOCK                            ( FF_REQUIRES_LOCK                            ),
            .FSE_N                                       ( FSE_N                                       ),
            .FB_CLK_SEL_0                                ( FB_CLK_SEL_0[1:0]                           ),
            .FB_CLK_SEL_1                                ( FB_CLK_SEL_1                                ),
            .RFDIV                                       ( RFDIV[5:0]                                  ),
            .FRAC_EN                                     ( FRAC_EN                                     ),
            .FRAC_DAC_EN                                 ( FRAC_DAC_EN                                 ),
            .DIV0_RST_DELAY                              ( DIV0_RST_DELAY[2:0]                         ),
            .DIV0_VAL                                    ( DIV0_VAL[6:0]                               ),
            .DIV1_RST_DELAY                              ( DIV1_RST_DELAY[2:0]                         ),
            .DIV1_VAL                                    ( DIV1_VAL[6:0]                               ),
            .DIV2_RST_DELAY                              ( DIV2_RST_DELAY[2:0]                         ),
            .DIV2_VAL                                    ( DIV2_VAL[6:0]                               ),
            .DIV3_RST_DELAY                              ( DIV3_RST_DELAY[2:0]                         ),
            .DIV3_VAL                                    ( DIV3_VAL[6:0]                               ),
            .DIV3_CLK_SEL                                ( DIV3_CLK_SEL                                ),
            .BW_INT_CTRL                                 ( BW_INT_CTRL[1:0]                            ),
            .BW_PROP_CTRL                                ( BW_PROP_CTRL[1:0]                           ),
            .IREF_EN                                     ( IREF_EN                                     ),
            .IREF_TOGGLE                                 ( IREF_TOGGLE                                 ),
            .LOCK_CNT                                    ( LOCK_CNT[3:0]                               ),
            .DESKEW_CAL_CNT                              ( DESKEW_CAL_CNT[2:0]                         ),
            .DESKEW_CAL_EN                               ( DESKEW_CAL_EN                               ),
            .DESKEW_CAL_BYPASS                           ( DESKEW_CAL_BYPASS                           ),
            .SYNC_REF_DIV_EN                             ( SYNC_REF_DIV_EN                             ),
            .SYNC_REF_DIV_EN_2                           ( SYNC_REF_DIV_EN_2                           ),
            .OUT0_PHASE_SEL                              ( OUT0_PHASE_SEL[2:0]                         ),
            .OUT1_PHASE_SEL                              ( OUT1_PHASE_SEL[2:0]                         ),
            .OUT2_PHASE_SEL                              ( OUT2_PHASE_SEL[2:0]                         ),
            .OUT3_PHASE_SEL                              ( OUT3_PHASE_SEL[2:0]                         ),
            .SOFT_LOAD_PHASE_N                           ( SOFT_LOAD_PHASE_N                           ),
            .SSM_DIV_VAL                                 ( SSM_DIV_VAL[5:0]                            ),
            .FB_FRAC_VAL                                 ( FB_FRAC_VAL[23:0]                           ),
            .SSM_SPREAD_MODE                             ( SSM_SPREAD_MODE                             ),
            .SSM_MODULATION                              ( SSM_MODULATION[4:0]                         ),
            .FB_INT_VAL                                  ( FB_INT_VAL[11:0]                            ),
            .SSM_EN_N                                    ( SSM_EN_N                                    ),
            .SSM_EXT_WAVE_EN                             ( SSM_EXT_WAVE_EN[1:0]                        ),
            .SSM_EXT_WAVE_MAX_ADDR                       ( SSM_EXT_WAVE_MAX_ADDR[7:0]                  ),
            .SSM_RANDOM_EN                               ( SSM_RANDOM_EN                               ),
            .SSM_RANDOM_PATTERN_SEL                      ( SSM_RANDOM_PATTERN_SEL[1:0]                 ),
            .CDMUX0_SEL                                  ( CDMUX0_SEL[1:0]                             ),
            .CDMUX1_SEL                                  ( CDMUX1_SEL                                  ),
            .CDMUX2_SEL                                  ( CDMUX2_SEL                                  ),
            .CDELAY0_SEL                                 ( CDELAY0_SEL[7:0]                            ),
            .CDELAY0_EN                                  ( CDELAY0_EN                                  ),
            .DRI_EN                                      ( DRI_EN                                      ),
            .DELAY_LINE_SIMULATION_MODE                  ( DELAY_LINE_SIMULATION_MODE                  ),
            .RESETONLOCK                                 ( RESETONLOCK                                 ),
            .VCOFREQUENCY                                ( VCOFREQUENCY                                ) )
    u0     (.FB_CLK                                      ( FB_CLK_OUT                                   ),
            .POWERDOWN_N                                 ( POWERDOWN_N                                  ),
            .BYPASS_EN_N                                 ( BYPASS_EN_N                                  ),
            .REF_CLK_0                                   ( REF_CLK_0_OUT                                ),
            .REF_CLK_1                                   ( REF_CLK_1_OUT                                ),
            .LOCK                                        ( LOCK                                         ),
            .OUT0                                        ( OUT0                                         ),
            .OUT1                                        ( OUT1                                         ),
            .OUT2                                        ( OUT2                                         ),
            .OUT3                                        ( OUT3                                         ),
            .SSCG_WAVE_TABLE_ADDR                        ( SSCG_WAVE_TABLE_ADDR [7:0]                   ),
            .DELAY_LINE_OUT_OF_RANGE                     ( DELAY_LINE_OUT_OF_RANGE                      ),
            .OUT0_EN                                     ( OUT0_EN                                      ),
            .OUT1_EN                                     ( OUT1_EN                                      ),
            .OUT2_EN                                     ( OUT2_EN                                      ),
            .OUT3_EN                                     ( OUT3_EN                                      ),
            .REF_CLK_SEL                                 ( REF_CLK_SEL                                  ),
            .LOAD_PHASE_N                                ( LOAD_PHASE_N                                 ),
            .SSCG_WAVE_TABLE                             ( SSCG_WAVE_TABLE[7:0]                         ),
            .PHASE_DIRECTION                             ( PHASE_DIRECTION                              ),
            .PHASE_ROTATE                                ( PHASE_ROTATE                                 ),
            .PHASE_OUT0_SEL                              ( PHASE_OUT0_SEL                               ),
            .PHASE_OUT1_SEL                              ( PHASE_OUT1_SEL                               ),
            .PHASE_OUT2_SEL                              ( PHASE_OUT2_SEL                               ),
            .PHASE_OUT3_SEL                              ( PHASE_OUT3_SEL                               ),
            .DELAY_LINE_MOVE                             ( DELAY_LINE_MOVE                              ),
            .DELAY_LINE_DIRECTION                        ( DELAY_LINE_DIRECTION                         ),
            .DELAY_LINE_WIDE                             ( DELAY_LINE_WIDE                              ),
            .DELAY_LINE_LOAD                             ( DELAY_LINE_LOAD                              ),
            .REFCLK_SYNC_EN                              ( REFCLK_SYNC_EN                               ),
            .DRI_CLK                                     ( DRI_CLK                                      ),
            .DRI_CTRL                                    ( DRI_CTRL[10:0]                               ),
            .DRI_WDATA                                   ( DRI_WDATA[32:0]                              ),
            .DRI_ARST_N                                  ( DRI_ARST_N                                   ),
            .DRI_RDATA                                   ( DRI_RDATA[32:0]                              ),
            .DRI_INTERRUPT                               ( DRI_INTERRUPT                                ),
            .DELAY_LINE_MOVE_OUT                         ( DELAY_LINE_MOVE_int                          ),
            .DELAY_LINE_DIRECTION_OUT                    ( DELAY_LINE_DIRECTION_int                     ),
            .DELAY_LINE_WIDE_OUT                         ( DELAY_LINE_WIDE_int                          ),
            .DELAY_LINE_LOAD_OUT                         ( DELAY_LINE_LOAD_int                          ),
            .DELAY_LINE_OUT_OF_RANGE_IN                  ( DELAY_LINE_OUT_OF_RANGE_int                  ) );
  
  //assign u_delay.powerup_reset = u0.powerup_reset;
  
endmodule
  
`timescale 1 ps/ 1ps
module PLL_IP (
                    FB_CLK,
                    REF_CLK_0,
                    REF_CLK_1,
                    POWERDOWN_N,
                    BYPASS_EN_N,
                    LOCK, 
                    OUT0,
                    OUT1,
                    OUT2,
                    OUT3,
                    
                    SSCG_WAVE_TABLE_ADDR,
                    DELAY_LINE_OUT_OF_RANGE,
                    OUT0_EN,
                    OUT1_EN,
                    OUT2_EN,
                    OUT3_EN,
                    REF_CLK_SEL,
                    LOAD_PHASE_N,
                    SSCG_WAVE_TABLE,
                    PHASE_DIRECTION,
                    PHASE_ROTATE,
                    PHASE_OUT0_SEL,
                    PHASE_OUT1_SEL,
                    PHASE_OUT2_SEL,
                    PHASE_OUT3_SEL,
                    DELAY_LINE_MOVE,
                    DELAY_LINE_DIRECTION,
                    DELAY_LINE_WIDE,
                    DELAY_LINE_LOAD,
                    REFCLK_SYNC_EN,
                    
                    DRI_CLK,
                    DRI_CTRL,
                    DRI_WDATA,
                    DRI_ARST_N,
                    DRI_RDATA,
                    DRI_INTERRUPT,
                    
                    DELAY_LINE_MOVE_OUT,
                    DELAY_LINE_DIRECTION_OUT,
                    DELAY_LINE_WIDE_OUT,
                    DELAY_LINE_LOAD_OUT,
                    DELAY_LINE_OUT_OF_RANGE_IN
                  );

  input        FB_CLK;
  input        POWERDOWN_N;
  input        BYPASS_EN_N;
  input         REF_CLK_0, REF_CLK_1;
  output       LOCK;
  output        OUT0, OUT1, OUT2, OUT3; //4 pll output clocks
  output [7:0]  SSCG_WAVE_TABLE_ADDR;
  output        DELAY_LINE_OUT_OF_RANGE;
  input         OUT0_EN, OUT1_EN, OUT2_EN, OUT3_EN;
  input         REF_CLK_SEL;
  input         LOAD_PHASE_N;
  input  [7:0]  SSCG_WAVE_TABLE;
  input         PHASE_DIRECTION;
  input         PHASE_ROTATE;
  input         PHASE_OUT0_SEL, PHASE_OUT1_SEL, PHASE_OUT2_SEL, PHASE_OUT3_SEL;
  input         DELAY_LINE_MOVE;
  input         DELAY_LINE_DIRECTION;
  input         DELAY_LINE_WIDE;
  input         DELAY_LINE_LOAD;
  input         REFCLK_SYNC_EN;
  
  input                                 DRI_CLK;
  input                        [10:0]   DRI_CTRL;
  input                        [32:0]   DRI_WDATA;
  input                                 DRI_ARST_N;
  output                       [32:0]   DRI_RDATA;
  output                                DRI_INTERRUPT;
  
  output        DELAY_LINE_MOVE_OUT;
  output        DELAY_LINE_DIRECTION_OUT;
  output        DELAY_LINE_WIDE_OUT;
  output        DELAY_LINE_LOAD_OUT;
  input         DELAY_LINE_OUT_OF_RANGE_IN;

  reg NOTIFY_REG;

  parameter           DATA_RATE = 0.0; 
  parameter           FORMAL_NAME = ""; 
  parameter           INTERFACE_NAME = ""; 
  parameter           INTERFACE_LEVEL = 3'b0;

  parameter           SOFTRESET = 1'b0;
  parameter           SOFT_POWERDOWN_N = 1'b1;
  parameter           RFDIV_EN = 1'b0;
  parameter           OUT0_DIV_EN = 1'b0;
  parameter           OUT1_DIV_EN = 1'b0;
  parameter           OUT2_DIV_EN = 1'b0;
  parameter           OUT3_DIV_EN = 1'b0;
  parameter           SOFT_REF_CLK_SEL = 1'b0;
  parameter           RESET_ON_LOCK = 1'b0;
  parameter   [3:0]   BYPASS_CLK_SEL = 4'b0;
  parameter           BYPASS_GO_EN_N = 1'b0;
  parameter   [3:0]   BYPASS_PLL = 4'b0;
  parameter   [3:0]   BYPASS_OUT_DIVIDER = 4'b0;
  parameter           FF_REQUIRES_LOCK = 1'b0;
  parameter           FSE_N = 1'b0;
  parameter   [1:0]   FB_CLK_SEL_0 = 2'b0;
  parameter           FB_CLK_SEL_1 = 1'b0;
  parameter   [5:0]   RFDIV = 6'b0;
  parameter           FRAC_EN = 1'b0;
  parameter           FRAC_DAC_EN = 1'b0;
  parameter   [2:0]   DIV0_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV0_VAL = 7'b0;
  parameter   [2:0]   DIV1_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV1_VAL = 7'b0;
  parameter   [2:0]   DIV2_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV2_VAL = 7'b0;
  parameter   [2:0]   DIV3_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV3_VAL = 3'b0;
  parameter           DIV3_CLK_SEL = 1'b0;
  parameter   [1:0]   BW_INT_CTRL = 2'b0;
  parameter   [1:0]   BW_PROP_CTRL = 2'b0;
  parameter           IREF_EN = 1'b0;
  parameter           IREF_TOGGLE = 1'b0;
  parameter   [3:0]   LOCK_CNT = 4'b0;
  parameter   [2:0]   DESKEW_CAL_CNT = 3'b0;
  parameter           DESKEW_CAL_EN = 1'b0;
  parameter           DESKEW_CAL_BYPASS = 1'b0;
  
  parameter           SYNC_REF_DIV_EN = 1'b0;
  parameter           SYNC_REF_DIV_EN_2 = 1'b0;
  
  parameter   [2:0]   OUT0_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT1_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT2_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT3_PHASE_SEL = 3'b0;
  parameter           SOFT_LOAD_PHASE_N = 1'b0;
  parameter   [5:0]   SSM_DIV_VAL = 6'b0;
  parameter   [23:0]  FB_FRAC_VAL = 24'b0;
  parameter           SSM_SPREAD_MODE = 1'b0;
  parameter   [4:0]   SSM_MODULATION = 5'b0;
  parameter   [11:0]  FB_INT_VAL = 12'b0;
  parameter           SSM_EN_N = 1'b0;
  parameter   [1:0]   SSM_EXT_WAVE_EN = 2'b0;
  parameter   [7:0]   SSM_EXT_WAVE_MAX_ADDR = 8'b0;
  parameter           SSM_RANDOM_EN = 1'b0;
  parameter   [1:0]   SSM_RANDOM_PATTERN_SEL = 2'b0;
  
parameter   [1:0]   CDMUX0_SEL = 2'b0;
parameter           CDMUX1_SEL = 1'b0;
parameter           CDMUX2_SEL = 1'b0;
parameter   [7:0]   CDELAY0_SEL = 8'b0;
parameter           CDELAY0_EN = 1'b0;
parameter           DRI_EN = 1'b0;
parameter           DELAY_LINE_SIMULATION_MODE = "";

  assign DELAY_LINE_MOVE_OUT = DELAY_LINE_MOVE;
  assign DELAY_LINE_DIRECTION_OUT = DELAY_LINE_DIRECTION;
  assign DELAY_LINE_WIDE_OUT = DELAY_LINE_WIDE;
  assign DELAY_LINE_LOAD_OUT = DELAY_LINE_LOAD;
  assign DELAY_LINE_OUT_OF_RANGE = DELAY_LINE_OUT_OF_RANGE_IN;

real  FB_DIV;

  parameter        RESETONLOCK = 0;//?? static info

  parameter        VCOFREQUENCY = 0.0;
  
  integer  FRAC_MULTIPLIER;
  real     FRAC_DIV;
  
  reg local_FB_FRAC_VAL;
  initial begin
    local_FB_FRAC_VAL = (FB_FRAC_VAL !== 24'b0 ) ? FB_FRAC_VAL : 24'b1;
    FRAC_MULTIPLIER = 1;
  end
  
    
  
  
  wire        divq_reset;
  wire        ccc_pll_rfclk, rfclk;
  wire        ccc_pll_fbclk, ccc_pll_frac_fbclk;
  wire        bypclk0, bypclk1, bypclk2, bypclk3;
  wire        foutdiv0_clk, foutdiv1_clk, foutdiv2_clk, foutdiv3_clk;
  wire        fbclk, fbclk_in, foutfben_clk;
  wire [7:0]  ccc_pll_clk, ccc_pll_norm_clk, ccc_pll_lp_clk;      // outputs of the PLL
  wire        ccc_pll_reset, ccc_pll_powerdown, ccc_pll_bypass;   // Inverted input signals
  reg [13:0]  post_div_val;
  reg         powerup_reset;
  reg         rfdiv_en;
  integer     rfclk_count;
  wire        bypass_go;
  wire [2:0]  div0_phase_sel, div1_phase_sel, div2_phase_sel, div3_phase_sel;
  wire        fb_clk, ref_clk_1;
  
  wire        deskew;
  
  PLL_DRI_REGISTERS #(    
                  .SOFTRESET	        (	SOFTRESET	),
                  .SOFT_POWERDOWN_N	  (	SOFT_POWERDOWN_N	),
                  .RFDIV_EN	          (	RFDIV_EN	),
                  .OUT0_DIV_EN	      (	OUT0_DIV_EN	),
                  .OUT1_DIV_EN	      (	OUT1_DIV_EN	),
                  .OUT2_DIV_EN	      (	OUT2_DIV_EN	),
                  .OUT3_DIV_EN	      (	OUT3_DIV_EN	),
                  .SOFT_REF_CLK_SEL	  (	SOFT_REF_CLK_SEL	),
                  .RESET_ON_LOCK	    (	RESET_ON_LOCK	),
                  .BYPASS_CLK_SEL	    (	BYPASS_CLK_SEL	),
                  .BYPASS_GO_EN_N	    (	BYPASS_GO_EN_N	),
                  .BYPASS_PLL	        (	BYPASS_PLL	),
                  .BYPASS_OUT_DIVIDER	(	BYPASS_OUT_DIVIDER	),
                  .FF_REQUIRES_LOCK	  (	FF_REQUIRES_LOCK	),
                  .FSE_N	            (	FSE_N	),
                  .FB_CLK_SEL_0	      (	FB_CLK_SEL_0	),
                  .FB_CLK_SEL_1	      (	FB_CLK_SEL_1	),
                  .RFDIV	            (	RFDIV	),
                  .FRAC_EN	          (	FRAC_EN	),
                  .FRAC_DAC_EN	      (	FRAC_DAC_EN	),
                  .DIV0_RST_DELAY	    (	DIV0_RST_DELAY	),
                  .DIV0_VAL	          (	DIV0_VAL	),
                  .DIV1_RST_DELAY	    (	DIV1_RST_DELAY	),
                  .DIV1_VAL	          (	DIV1_VAL	),
                  .DIV2_RST_DELAY	    (	DIV2_RST_DELAY	),
                  .DIV2_VAL	          (	DIV2_VAL	),
                  .DIV3_RST_DELAY	    (	DIV3_RST_DELAY	),
                  .DIV3_VAL	          (	DIV3_VAL	),
                  .DIV3_CLK_SEL	      (	DIV3_CLK_SEL	),
                  .BW_INT_CTRL	      (	BW_INT_CTRL	),
                  .BW_PROP_CTRL	      (	BW_PROP_CTRL	),
                  .IREF_EN	          (	IREF_EN	),
                  .IREF_TOGGLE	      (	IREF_TOGGLE	),
                  .LOCK_CNT	          (	LOCK_CNT	),
                  .DESKEW_CAL_CNT	    (	DESKEW_CAL_CNT	),
                  .DESKEW_CAL_EN	    (	DESKEW_CAL_EN	),
                  .DESKEW_CAL_BYPASS	(	DESKEW_CAL_BYPASS	),
                  .SYNC_REF_DIV_EN	  (	SYNC_REF_DIV_EN	),
                  .SYNC_REF_DIV_EN_2	(	SYNC_REF_DIV_EN_2	),
                  .OUT0_PHASE_SEL	    (	OUT0_PHASE_SEL	),
                  .OUT1_PHASE_SEL	    (	OUT1_PHASE_SEL	),
                  .OUT2_PHASE_SEL	    (	OUT2_PHASE_SEL	),
                  .OUT3_PHASE_SEL	    (	OUT3_PHASE_SEL	),
                  .SOFT_LOAD_PHASE_N	(	SOFT_LOAD_PHASE_N	),
                  .SSM_DIV_VAL	      (	SSM_DIV_VAL	),
                  .FB_FRAC_VAL	      (	FB_FRAC_VAL	),
                  .SSM_SPREAD_MODE	  (	SSM_SPREAD_MODE	),
                  .SSM_MODULATION	    (	SSM_MODULATION	),
                  .FB_INT_VAL	        (	FB_INT_VAL	),
                  .SSM_EN_N	          (	SSM_EN_N	),
                  .SSM_EXT_WAVE_EN	  (	SSM_EXT_WAVE_EN	),
                  .SSM_EXT_WAVE_MAX_ADDR	(	SSM_EXT_WAVE_MAX_ADDR	),
                  .SSM_RANDOM_EN	    (	SSM_RANDOM_EN	),
                  .SSM_RANDOM_PATTERN_SEL	(	SSM_RANDOM_PATTERN_SEL	) )
            u_dri_registers (
                  .DRI_CLK        ( DRI_CLK ),
                  .DRI_CTRL       ( DRI_CTRL ),
                  .DRI_WDATA      ( DRI_WDATA ),
                  .DRI_ARST_N     ( DRI_ARST_N ),
                  .DRI_RDATA      ( DRI_RDATA ),
                  .DRI_INTERRUPT  ( DRI_INTERRUPT ),                  
                  .div0_phase_sel ( div0_phase_sel ),
                  .div1_phase_sel ( div1_phase_sel ),
                  .div2_phase_sel ( div2_phase_sel ),
                  .div3_phase_sel ( div3_phase_sel ),
                  .LOCK           ( LOCK )
  );

  assign deskew = ~u_dri_registers.fse_n;
  assign ccc_pll_clk = (u_dri_registers.iref_toggle & u_dri_registers.iref_en & ~POWERDOWN_N) ? ccc_pll_lp_clk : ccc_pll_norm_clk;
  pll_lp_vco  u_lp_vco (.CLKOUT(ccc_pll_lp_clk[7]), .EN(u_dri_registers.iref_toggle & u_dri_registers.iref_en));
  
  always @(rfclk) begin
    u_pll.u_pll.MAIN.fccc_divider_external =  deskew ? u_dri_registers.fb_int_val * u_dri_registers.div1_val : 'd1;
    FRAC_MULTIPLIER = (FB_FRAC_VAL !== 24'b0 ) ? 2**(24 - $log10($itor(FB_FRAC_VAL)) / $log10(2)) : 0;
    FRAC_DIV = ($itor(FB_INT_VAL) + ($itor(FB_FRAC_VAL) / 2**24) ) * FRAC_MULTIPLIER;
    u_frac_div.NUMERATOR = FRAC_DIV;
  end
  
  initial begin
    rfclk_count = 0;
    powerup_reset = 1'b0;
    wait (rfclk_count > 1);
    FB_DIV = $itor(u_dri_registers.fb_int_val) + ($itor(u_dri_registers.fb_frac_val) / 2**24) * $itor(u_dri_registers.frac_dac_en & u_dri_registers.frac_en);
    wait (rfclk_count > 9);
    powerup_reset = 1'b1;
  end
  
  always @(posedge rfclk) begin
    rfclk_count = rfclk_count + 1;
    rfdiv_en = u_dri_registers.rfdiv_en & ( (u_dri_registers.sync_ref_div_en & REFCLK_SYNC_EN) | ~u_dri_registers.sync_ref_div_en_2 );
  end

  assign ARST_N = ( (u_dri_registers.iref_toggle & u_dri_registers.iref_en) ? 1'b1 : !ccc_pll_powerdown ) & powerup_reset;

  assign ccc_pll_powerdown = ~( POWERDOWN_N & u_dri_registers.soft_powerdown_n );            // Anding both the register and the external input
  assign ccc_pll_reset     = !(powerup_reset);
  assign ccc_pll_bypass    = 1'b0;

  assign CLKSSCG = ccc_pll_fbclk; 


  //post divider value logic
  always @(rfclk)begin
    case ( u_dri_registers.fb_clk_sel_0 )
       0: post_div_val = u_dri_registers.div0_val;
       1: post_div_val = u_dri_registers.div1_val;
       2: post_div_val = u_dri_registers.div2_val;
       3:begin
           if (u_dri_registers.div3_clk_sel) post_div_val = u_dri_registers.div2_val * u_dri_registers.div3_val; 
           else post_div_val = u_dri_registers.div3_val;
         end
       default: $display (" Warning: Unsupported selection applied at time %0.1fps! Instance: %m", $realtime);
    endcase
  end

  /*PLL_DELAY u_delay(.DELAY_LINE_LOAD            (DELAY_LINE_LOAD),
                    .DELAY_LINE_WIDE            (DELAY_LINE_WIDE),
                    .DELAY_LINE_DIRECTION       (DELAY_LINE_DIRECTION),
                    .DELAY_LINE_MOVE            (DELAY_LINE_MOVE),
                    .DELAY_LINE_OUT_OF_RANGE    (DELAY_LINE_OUT_OF_RANGE),
                  
                    .FB_CLK                     (FB_CLK),
                    .REF_CLK_0                  (REF_CLK_0),
                    .REF_CLK_1                  (REF_CLK_1),
                    
                    .FB_CLK                     (fb_clk),
                    .REF_CLK_0_OUT                (REF_CLK_0),
                    .REF_CLK_1_OUT                (ref_clk_1) );
  assign u_delay.powerup_reset = powerup_reset;*/
  
  assign fb_clk = FB_CLK;
  assign ref_clk_1 = REF_CLK_1;
                  
  assign rfclk = (REF_CLK_SEL & u_dri_registers.soft_ref_clk_sel) ? ref_clk_1 : REF_CLK_0 ;
   
   CCC_RF_DIV u_rf_div(.CLKIN(rfclk), 
                       .DIV(u_dri_registers.rfdiv), 
                       .ARST_N(ARST_N & rfdiv_en), 
                       .CLKOUT(ccc_pll_rfclk) );
   
  assign bypass_go = !( BYPASS_EN_N & u_dri_registers.bypass_go_en_n );
  
  assign bypclk0 = u_dri_registers.bypass_clk_sel[0] ? rfclk : fb_clk ;
  assign bypclk1 = u_dri_registers.bypass_clk_sel[1] ? rfclk : fb_clk ;
  assign bypclk2 = u_dri_registers.bypass_clk_sel[2] ? rfclk : fb_clk ;
  assign bypclk3 = u_dri_registers.bypass_clk_sel[3] ? rfclk : fb_clk ;
   
  assign OUT0 = (u_dri_registers.iref_toggle & u_dri_registers.iref_en & ~POWERDOWN_N) ? ccc_pll_lp_clk[7] : (u_dri_registers.bypass_out_divider[0] & bypass_go ? bypclk0 : foutdiv0_clk);
  assign OUT1 = u_dri_registers.bypass_out_divider[1] & bypass_go ? bypclk1 : foutdiv1_clk ;
  assign OUT2 = u_dri_registers.bypass_out_divider[2] & bypass_go ? bypclk2 : foutdiv2_clk ;
  assign OUT3 = u_dri_registers.bypass_out_divider[3] & bypass_go ? bypclk3 : foutdiv3_clk ;
 
  assign fbclk = u_dri_registers.fb_clk_sel_0[1] ? ( u_dri_registers.fb_clk_sel_0[0] ? /*11*/ foutdiv3_clk : /*10*/ foutdiv2_clk ) 
                                 : ( u_dri_registers.fb_clk_sel_0[0] ? /*01*/ foutdiv1_clk : /*00*/ foutdiv0_clk );
  
  assign foutfben_clk = u_dri_registers.fb_clk_sel_1  ? fbclk         : ccc_pll_clk[7] ;
  assign fbclk_in     = deskew         ? foutfben_clk  : fb_clk ;
  assign u_pll.u_pll.MAIN.external_feedback = ~deskew | u_dri_registers.fb_clk_sel_1;
  
   CCC_FB_DIV u_fb_div(.CLKIN(fbclk_in), 
                       .DIV(u_dri_registers.fb_int_val), 
                       .ARST_N(ARST_N), 
                       .divq_reset(!divq_reset), 
                       .CLKOUT(ccc_pll_fbclk) );
   
   frac_divider 
                  //.NUMERATOR    ( FRAC_DIV            )
          u_frac_div (
                  .DENOMINATOR  ( FRAC_MULTIPLIER[11:0] ),
                  .CLKIN        ( fbclk_in              ), 
                  .CLKOUT       ( ccc_pll_frac_fbclk    ));
   
  always @ ( ccc_pll_rfclk or u_dri_registers.frac_en or u_dri_registers.frac_dac_en  or u_dri_registers.fb_frac_val or u_dri_registers.fb_int_val) begin
      u_pll.u_pll.MAIN.FB_DIV = ( (u_dri_registers.frac_en & u_dri_registers.frac_dac_en & |u_dri_registers.fb_frac_val) ? ($itor(FRAC_DIV)/$itor(FRAC_MULTIPLIER)) : u_dri_registers.fb_int_val );
  end
  initial
    u_pll.u_pll.MAIN.FB_DIV = 1.0;
    
   CCC_PLL #(.VCOFREQUENCY(VCOFREQUENCY), .FB_DIV( FB_INT_VAL ), 
             .POST_DIV( (FB_CLK_SEL_1 == 1'b1) ? ((FB_CLK_SEL_0 == 'd0) * DIV0_VAL) + ((FB_CLK_SEL_0 == 'd1) * DIV1_VAL) + ((FB_CLK_SEL_0 == 'd2) * DIV2_VAL) + ((FB_CLK_SEL_0 == 'd3) * DIV3_VAL) : 0.25 )
             )
             u_pll(.FBIN((u_dri_registers.frac_en & u_dri_registers.frac_dac_en) ? ccc_pll_frac_fbclk : ccc_pll_fbclk), .CLKIN(ccc_pll_rfclk),
                   .RESET(ccc_pll_reset), .BYPASS(ccc_pll_bypass), .POWERDOWN(ccc_pll_powerdown),
                   .CLKDIV(6'b1), .FBDIV(12'b1), .POSTDIV(14'b1), .VCODIV(3'h0),
                   .SSMD(2'b0), .SSMF(5'b0), .SSE(1'b0),
                   .FBSEL(1'b0),  .PLL_RANGE(4'hF),
                   .MODE_32K(1'b0), .MODE_1V2(1'b0), .MODE_3V3(1'b0),
                   .LOCKWIN(3'h0), .LOCKCNT(4'b0),
                   .VCO0(ccc_pll_norm_clk[7]), .VCO45(ccc_pll_norm_clk[6]), .VCO90(ccc_pll_norm_clk[5]),
                   .VCO135(ccc_pll_norm_clk[4]), .VCO180(ccc_pll_norm_clk[3]), .VCO225(ccc_pll_norm_clk[2]),
                   .VCO270(ccc_pll_norm_clk[1]), .VCO315(ccc_pll_norm_clk[0]),
                   .LOCK(LOCK), .divq_reset(divq_reset));
   
   assign post_div_reset_on_lock = u_dri_registers.reset_on_lock ? LOCK : 1'b1 ;
   
   
   
  PLL_PHASE_SELECT u_phase_sel0 (
                .LOAD_PHASE_N         ( LOAD_PHASE_N ),
                .SOFT_LOAD_PHASE_N    ( u_dri_registers.soft_load_phase_n ),
                .PHASE_DIRECTION      ( PHASE_DIRECTION ),
                .PHASE_ROTATE         ( PHASE_ROTATE ),
                .PHASE_OUT_SEL        ( PHASE_OUT0_SEL ),
                .OUT_PHASE_SEL        ( u_dri_registers.out0_phase_sel[2:0] ),
                .VCO_PHASE_SEL        ( div0_phase_sel[2:0] ) );
  
  PLL_PHASE_SELECT u_phase_sel1 (
                .LOAD_PHASE_N         ( LOAD_PHASE_N ),
                .SOFT_LOAD_PHASE_N    ( u_dri_registers.soft_load_phase_n ),
                .PHASE_DIRECTION      ( PHASE_DIRECTION ),
                .PHASE_ROTATE         ( PHASE_ROTATE ),
                .PHASE_OUT_SEL        ( PHASE_OUT1_SEL ),
                .OUT_PHASE_SEL        ( u_dri_registers.out1_phase_sel[2:0] ),
                .VCO_PHASE_SEL        ( div1_phase_sel[2:0] ) );

  PLL_PHASE_SELECT u_phase_sel2 (
                .LOAD_PHASE_N         ( LOAD_PHASE_N ),
                .SOFT_LOAD_PHASE_N    ( u_dri_registers.soft_load_phase_n ),
                .PHASE_DIRECTION      ( PHASE_DIRECTION ),
                .PHASE_ROTATE         ( PHASE_ROTATE ),
                .PHASE_OUT_SEL        ( PHASE_OUT2_SEL ),
                .OUT_PHASE_SEL        ( u_dri_registers.out2_phase_sel[2:0] ),
                .VCO_PHASE_SEL        ( div2_phase_sel[2:0] ) );                

  PLL_PHASE_SELECT u_phase_sel3 (
                .LOAD_PHASE_N         ( LOAD_PHASE_N ),
                .SOFT_LOAD_PHASE_N    ( u_dri_registers.soft_load_phase_n ),
                .PHASE_DIRECTION      ( PHASE_DIRECTION ),
                .PHASE_ROTATE         ( PHASE_ROTATE ),
                .PHASE_OUT_SEL        ( PHASE_OUT3_SEL ),
                .OUT_PHASE_SEL        ( u_dri_registers.out3_phase_sel[2:0] ),
                .VCO_PHASE_SEL        ( div3_phase_sel[2:0] ) );
                
  wire [3:0] postdiv_pd;
  reg divq_reset_reg;
  initial
    divq_reset_reg <= 1'b0;
  always @(posedge u_pll.CLKIN)
    divq_reset_reg <= divq_reset;
  PF_PLLUM28HLPMFFRAC_postdiv_pd_sync u_PLLUM28HLPMFFRAC_postdiv_pd_sync(
                .clk_to_postdiv       ({u_post_div3.byp_pre_mux_clk_out_1, u_post_div2.byp_pre_mux_clk_out_1, u_post_div1.byp_pre_mux_clk_out_1, u_post_div0.byp_pre_mux_clk_out_1}),
                .clk_to_postdivb      ({~u_post_div3.byp_pre_mux_clk_out_1, ~u_post_div2.byp_pre_mux_clk_out_1, ~u_post_div1.byp_pre_mux_clk_out_1, ~u_post_div0.byp_pre_mux_clk_out_1}),
                .DIVSTART0            ( u_dri_registers.div0_rst_delay  ),
                .DIVSTART1            ( u_dri_registers.div1_rst_delay  ),
                .DIVSTART2            ( u_dri_registers.div2_rst_delay  ),
                .DIVSTART3            ( u_dri_registers.div3_rst_delay  ),
                .LOCK                 ( LOCK                            ), 
                .postdiv_pd           ( postdiv_pd                      ), 
                .POSTDIVEN            ( {OUT3_EN & u_dri_registers.out3_div_en, OUT2_EN & u_dri_registers.out2_div_en, OUT1_EN & u_dri_registers.out1_div_en, OUT0_EN & u_dri_registers.out0_div_en} ),
                .RESETONLOCK          ( u_dri_registers.reset_on_lock   ),
                .vco_0_del            ( ccc_pll_norm_clk[7]                  ), 
                .VCOPHSEL0            ( div0_phase_sel ),
                .VCOPHSEL1            ( div1_phase_sel ),
                .VCOPHSEL2            ( div2_phase_sel ),
                .VCOPHSEL3            ( div3_phase_sel ) );
  PF_PLLUM28HLPMFFRAC_cmosdiv_2to127 u_PLLUM28HLPMFFRAC_cmosdiv_2to127_0(
                .CLK                  ( u_post_div0.byp_pre_mux_clk_out_1 ), 
                .clk_out              ( clkout_postdivb0                  ), 
                .div                  ( u_dri_registers.div0_val          ), 
                .RST                  ( postdiv_pd[0]                     ) );
  PF_PLLUM28HLPMFFRAC_cmosdiv_2to127 u_PLLUM28HLPMFFRAC_cmosdiv_2to127_1(
                .CLK                  ( u_post_div1.byp_pre_mux_clk_out_1 ), 
                .clk_out              ( clkout_postdivb1                  ), 
                .div                  ( u_dri_registers.div1_val          ), 
                .RST                  ( postdiv_pd[1]                     ) );
  PF_PLLUM28HLPMFFRAC_cmosdiv_2to127 u_PLLUM28HLPMFFRAC_cmosdiv_2to127_2(
                .CLK                  ( u_post_div2.byp_pre_mux_clk_out_1 ), 
                .clk_out              ( clkout_postdivb2                  ), 
                .div                  ( u_dri_registers.div2_val          ), 
                .RST                  ( postdiv_pd[2]                     ) );
  PF_PLLUM28HLPMFFRAC_cmosdiv_2to127 u_PLLUM28HLPMFFRAC_cmosdiv_2to127_3(
                .CLK                  ( u_post_div3.byp_pre_mux_clk_out_1 ), 
                .clk_out              ( clkout_postdivb3                  ), 
                .div                  ( u_dri_registers.div3_val          ), 
                .RST                  ( postdiv_pd[3]                     ) );
  assign foutdiv0_clk = clkout_postdivb0;
  assign foutdiv1_clk = clkout_postdivb1;
  assign foutdiv2_clk = clkout_postdivb2;
  assign foutdiv3_clk = clkout_postdivb3;
  
   CCC_POST_DIV u_post_div0 (
                .DIVSTART             ( u_dri_registers.div0_rst_delay  ),
                .RESET_ON_LOCK        ( u_dri_registers.reset_on_lock   ),
                .ARST_N               ( 1'b1 ),
                .VCO0                 ( ccc_pll_clk[7] ),
                .VCO45                ( ccc_pll_clk[6] ),
                .VCO90                ( ccc_pll_clk[5] ),
                .VCO135               ( ccc_pll_clk[4] ),
                .VCO180               ( ccc_pll_clk[3] ),
                .VCO225               ( ccc_pll_clk[2] ),
                .VCO270               ( ccc_pll_clk[1] ),
                .VCO315               ( ccc_pll_clk[0] ),
                .BYP_CLK              ( bypclk0 ),
                .VCOPHSEL             ( div0_phase_sel ),
                .BYPASS_PRE           ( u_dri_registers.bypass_pll[0] & bypass_go ),
                .POSTDIV              ( u_dri_registers.div0_val),
                .CKPOST3SEL           ( 1'b0 ),
                .POSTDIVEN            ( OUT0_EN & u_dri_registers.out0_div_en ),
                .FOUTDIV2             ( foutdiv2_clk ),
                .divq_reset           ( ~divq_reset ),
                .LOCK                 ( LOCK        ),
                //.divq_reset           ( post_div_reset_on_lock ),
                .FOUTDIV              (   ) );
   
   CCC_POST_DIV u_post_div1 (
                .DIVSTART             ( u_dri_registers.div1_rst_delay  ),
                .RESET_ON_LOCK        ( u_dri_registers.reset_on_lock   ),
                .ARST_N               ( ARST_N ),
                .VCO0                 ( ccc_pll_clk[7] ),
                .VCO45                ( ccc_pll_clk[6] ),
                .VCO90                ( ccc_pll_clk[5] ),
                .VCO135               ( ccc_pll_clk[4] ),
                .VCO180               ( ccc_pll_clk[3] ),
                .VCO225               ( ccc_pll_clk[2] ),
                .VCO270               ( ccc_pll_clk[1] ),
                .VCO315               ( ccc_pll_clk[0] ),
                .BYP_CLK              ( bypclk1 ),
                .VCOPHSEL             ( div1_phase_sel ),
                .BYPASS_PRE           ( u_dri_registers.bypass_pll[1] & bypass_go ),
                .POSTDIV              ( u_dri_registers.div1_val ),
                .CKPOST3SEL           ( 1'b0 ),
                .POSTDIVEN            ( OUT1_EN & u_dri_registers.out1_div_en ),
                .FOUTDIV2             ( foutdiv2_clk ),
                .divq_reset           ( ~divq_reset ),
                .LOCK                 ( LOCK        ),
                //.divq_reset           ( post_div_reset_on_lock ),
                .FOUTDIV              (   ) );
   
   CCC_POST_DIV u_post_div2 (
                .DIVSTART             ( u_dri_registers.div2_rst_delay  ),
                .RESET_ON_LOCK        ( u_dri_registers.reset_on_lock   ),
                .ARST_N(ARST_N),
                .VCO0  (ccc_pll_clk[7]),
                .VCO45 (ccc_pll_clk[6]),
                .VCO90 (ccc_pll_clk[5]),
                .VCO135(ccc_pll_clk[4]),
                .VCO180(ccc_pll_clk[3]),
                .VCO225(ccc_pll_clk[2]),
                .VCO270(ccc_pll_clk[1]),
                .VCO315(ccc_pll_clk[0]),
                .BYP_CLK(bypclk2),
                .VCOPHSEL(div2_phase_sel),
                .BYPASS_PRE(u_dri_registers.bypass_pll[2]),
                .POSTDIV(u_dri_registers.div2_val),
                .CKPOST3SEL(1'b0),
                .POSTDIVEN( OUT2_EN & u_dri_registers.out2_div_en ),
                .FOUTDIV2(foutdiv2_clk),
                .divq_reset           ( ~divq_reset ),
                .LOCK                 ( LOCK        ),
                //.divq_reset           ( post_div_reset_on_lock ),
                .FOUTDIV( ) );
   
   CCC_POST_DIV u_post_div3 (
                .DIVSTART          ( u_dri_registers.div3_rst_delay  ),
                .RESET_ON_LOCK     ( u_dri_registers.reset_on_lock   ),
                .ARST_N(ARST_N),
                .VCO0  (ccc_pll_clk[7]),
                .VCO45 (ccc_pll_clk[6]),
                .VCO90 (ccc_pll_clk[5]),
                .VCO135(ccc_pll_clk[4]),
                .VCO180(ccc_pll_clk[3]),
                .VCO225(ccc_pll_clk[2]),
                .VCO270(ccc_pll_clk[1]),
                .VCO315(ccc_pll_clk[0]),
                .BYP_CLK(bypclk3),
                .VCOPHSEL(div3_phase_sel),
                .BYPASS_PRE(u_dri_registers.bypass_pll[3]),
                .POSTDIV(u_dri_registers.div3_val),
                .CKPOST3SEL(u_dri_registers.div3_clk_sel),
                .POSTDIVEN( OUT3_EN & u_dri_registers.out3_div_en ),
                .FOUTDIV2(foutdiv2_clk),
                .divq_reset           ( ~divq_reset ),
                .LOCK                 ( LOCK        ),
                //.divq_reset           ( post_div_reset_on_lock ),
                .FOUTDIV( ) );
  specify
    specparam PATHPULSE$     = (1.0, 1.0);
    ( REF_CLK_0 => OUT0 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_1 => OUT0 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_0 => OUT1 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_1 => OUT1 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_0 => OUT2 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_1 => OUT2 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_0 => OUT3 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_1 => OUT3 ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    
    $setup(posedge DELAY_LINE_DIRECTION, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $setup(negedge DELAY_LINE_DIRECTION, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, posedge DELAY_LINE_DIRECTION, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, negedge DELAY_LINE_DIRECTION, 0.0, NOTIFY_REG);
    
    $setup(posedge DELAY_LINE_WIDE, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $setup(negedge DELAY_LINE_WIDE, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, posedge DELAY_LINE_WIDE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, negedge DELAY_LINE_WIDE, 0.0, NOTIFY_REG);
    
    $recovery(posedge DELAY_LINE_LOAD, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $recovery(negedge DELAY_LINE_LOAD, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, posedge DELAY_LINE_LOAD, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, negedge DELAY_LINE_LOAD, 0.0, NOTIFY_REG);
    
    $setup(posedge PHASE_DIRECTION, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $setup(negedge PHASE_DIRECTION, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, posedge PHASE_DIRECTION, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, negedge PHASE_DIRECTION, 0.0, NOTIFY_REG);
    
    $setup(posedge PHASE_OUT0_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $setup(negedge PHASE_OUT0_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, posedge PHASE_OUT0_SEL, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, negedge PHASE_OUT0_SEL, 0.0, NOTIFY_REG);
    
    $setup(posedge PHASE_OUT1_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $setup(negedge PHASE_OUT1_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, posedge PHASE_OUT1_SEL, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, negedge PHASE_OUT1_SEL, 0.0, NOTIFY_REG);
    
    $setup(posedge PHASE_OUT2_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $setup(negedge PHASE_OUT2_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, posedge PHASE_OUT2_SEL, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, negedge PHASE_OUT2_SEL, 0.0, NOTIFY_REG);
    
    $setup(posedge PHASE_OUT3_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $setup(negedge PHASE_OUT3_SEL, posedge PHASE_ROTATE, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, posedge PHASE_OUT3_SEL, 0.0, NOTIFY_REG);
    $hold (posedge PHASE_ROTATE, negedge PHASE_OUT3_SEL, 0.0, NOTIFY_REG);
        
    $width(posedge DELAY_LINE_MOVE, 0.0, 0, NOTIFY_REG);
    $width(negedge DELAY_LINE_MOVE, 0.0, 0, NOTIFY_REG);
    
    $width(posedge FB_CLK, 0.0, 0, NOTIFY_REG);
    $width(negedge FB_CLK, 0.0, 0, NOTIFY_REG);
    
    $width(posedge REF_CLK_0, 0.0, 0, NOTIFY_REG);
    $width(negedge REF_CLK_0, 0.0, 0, NOTIFY_REG);
    
    $width(posedge REF_CLK_1, 0.0, 0, NOTIFY_REG);
    $width(negedge REF_CLK_1, 0.0, 0, NOTIFY_REG);
    
    $width(posedge PHASE_ROTATE, 0.0, 0, NOTIFY_REG);
    $width(negedge PHASE_ROTATE, 0.0, 0, NOTIFY_REG);
    
    $width(negedge BYPASS_EN_N, 0.0, 0, NOTIFY_REG);
    $width(negedge PHASE_ROTATE, 0.0, 0, NOTIFY_REG);
    
    $period( posedge FB_CLK, 0.0, NOTIFY_REG );
    $period( negedge FB_CLK, 0.0, NOTIFY_REG );
    
    $period( posedge REF_CLK_0, 0.0, NOTIFY_REG );
    $period( negedge REF_CLK_0, 0.0, NOTIFY_REG );
    
    $period( posedge REF_CLK_1, 0.0, NOTIFY_REG );
    $period( negedge REF_CLK_1, 0.0, NOTIFY_REG );
  endspecify

endmodule


`timescale 1 ps/ 1 ps
module pll_lp_vco  (CLKOUT, EN);

  output reg CLKOUT;
  input EN;
  parameter real PERIOD = 166666.6667;
  localparam real half_period = PERIOD / 2;
  
  always begin
    forever begin
      CLKOUT = 1'b0;
      # half_period;	    
      CLKOUT = EN;
      # half_period;
      
    end
  end
  
endmodule


`timescale 1 ps/ 1ps
module PLL_PHASE_SELECT (
                          input                   LOAD_PHASE_N,
                          input                   SOFT_LOAD_PHASE_N,
                          input                   PHASE_DIRECTION,
                          input                   PHASE_ROTATE,
                          input                   PHASE_OUT_SEL,
                          input      [2:0]        OUT_PHASE_SEL,
                          output reg [2:0]        VCO_PHASE_SEL
);

  initial begin
    #1;
    VCO_PHASE_SEL <= OUT_PHASE_SEL;
  end
  
  always @( negedge SOFT_LOAD_PHASE_N ) begin
    if ( $time > 0 )
      VCO_PHASE_SEL <= OUT_PHASE_SEL;
  end
  always @( negedge LOAD_PHASE_N ) begin
    if ( $time > 0 )
      VCO_PHASE_SEL <= OUT_PHASE_SEL;
  end
  
  always @( posedge PHASE_ROTATE ) begin
    if ( PHASE_OUT_SEL === 1'b1 ) begin
      if ( PHASE_DIRECTION === 1'b1 )
        VCO_PHASE_SEL <= VCO_PHASE_SEL + 1'b1;
      else
        VCO_PHASE_SEL <= VCO_PHASE_SEL - 1'b1;
    end
  end
  
endmodule



`timescale 1ps / 1ps
module PLL_DRI_REGISTERS (
                  input                                 DRI_CLK,
                  input                        [10:0]   DRI_CTRL,
                  input                        [32:0]   DRI_WDATA,
                  input                                 DRI_ARST_N,
                  output                       [32:0]   DRI_RDATA,
                  output                                DRI_INTERRUPT,                  
                  input                        [2:0]    div0_phase_sel,
                  input                        [2:0]    div1_phase_sel,
                  input                        [2:0]    div2_phase_sel,
                  input                        [2:0]    div3_phase_sel,
                  input                                 LOCK
);

  parameter           SOFTRESET = 1'b0;
  parameter           SOFT_POWERDOWN_N = 1'b1;
  parameter           RFDIV_EN = 1'b0;
  parameter           OUT0_DIV_EN = 1'b0;
  parameter           OUT1_DIV_EN = 1'b0;
  parameter           OUT2_DIV_EN = 1'b0;
  parameter           OUT3_DIV_EN = 1'b0;
  parameter           SOFT_REF_CLK_SEL = 1'b0;
  parameter           RESET_ON_LOCK = 1'b0;
  parameter   [3:0]   BYPASS_CLK_SEL = 4'b0;
  parameter           BYPASS_GO_EN_N = 1'b0;
  parameter   [3:0]   BYPASS_PLL = 4'b0;
  parameter   [3:0]   BYPASS_OUT_DIVIDER = 4'b0;
  parameter           FF_REQUIRES_LOCK = 1'b0;
  parameter           FSE_N = 1'b0;
  parameter   [1:0]   FB_CLK_SEL_0 = 2'b0;
  parameter           FB_CLK_SEL_1 = 1'b0;
  parameter   [5:0]   RFDIV = 6'b0;
  parameter           FRAC_EN = 1'b0;
  parameter           FRAC_DAC_EN = 1'b0;
  parameter   [2:0]   DIV0_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV0_VAL = 7'b0;
  parameter   [2:0]   DIV1_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV1_VAL = 7'b0;
  parameter   [2:0]   DIV2_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV2_VAL = 7'b0;
  parameter   [2:0]   DIV3_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV3_VAL = 3'b0;
  parameter           DIV3_CLK_SEL = 1'b0;
  parameter   [1:0]   BW_INT_CTRL = 2'b0;
  parameter   [1:0]   BW_PROP_CTRL = 2'b0;
  parameter           IREF_EN = 1'b0;
  parameter           IREF_TOGGLE = 1'b0;
  parameter   [3:0]   LOCK_CNT = 4'b0;
  parameter   [2:0]   DESKEW_CAL_CNT = 3'b0;
  parameter           DESKEW_CAL_EN = 1'b0;
  parameter           DESKEW_CAL_BYPASS = 1'b0;
  parameter           SYNC_REF_DIV_EN = 1'b0;
  parameter           SYNC_REF_DIV_EN_2 = 1'b0;
  parameter   [2:0]   OUT0_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT1_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT2_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT3_PHASE_SEL = 3'b0;
  parameter           SOFT_LOAD_PHASE_N = 1'b0;
  parameter   [5:0]   SSM_DIV_VAL = 6'b0;
  parameter   [23:0]  FB_FRAC_VAL = 24'b0;
  parameter           SSM_SPREAD_MODE = 1'b0;
  parameter   [4:0]   SSM_MODULATION = 5'b0;
  parameter   [11:0]  FB_INT_VAL = 12'b0;
  parameter           SSM_EN_N = 1'b0;
  parameter   [1:0]   SSM_EXT_WAVE_EN = 2'b0;
  parameter   [7:0]   SSM_EXT_WAVE_MAX_ADDR = 8'b0;
  parameter           SSM_RANDOM_EN = 1'b0;
  parameter   [1:0]   SSM_RANDOM_PATTERN_SEL = 2'b0;
  
    wire           softreset;
  wire           soft_powerdown_n;
  wire           rfdiv_en;
  wire           out0_div_en;
  wire           out1_div_en;
  wire           out2_div_en;
  wire           out3_div_en;
  wire           soft_ref_clk_sel;
  wire           reset_on_lock;
  wire   [3:0]   bypass_clk_sel;
  wire           bypass_go_en_n;
  wire   [3:0]   bypass_pll;
  wire   [3:0]   bypass_out_divider;
  wire           ff_requires_lock;
  wire           fse_n;
  wire   [1:0]   fb_clk_sel_0;
  wire           fb_clk_sel_1;
  wire   [5:0]   rfdiv;
  wire           frac_en;
  wire           frac_dac_en;
  wire   [2:0]   div0_rst_delay;
  wire   [6:0]   div0_val;
  wire   [2:0]   div1_rst_delay;
  wire   [6:0]   div1_val;
  wire   [2:0]   div2_rst_delay;
  wire   [6:0]   div2_val;
  wire   [2:0]   div3_rst_delay;
  wire   [6:0]   div3_val;
  wire           div3_clk_sel;
  wire   [1:0]   bw_int_ctrl;
  wire   [1:0]   bw_prop_ctrl;
  wire           iref_en;
  wire           iref_toggle;
  wire   [3:0]   lock_cnt;
  wire   [2:0]   deskew_cal_cnt;
  wire           deskew_cal_en;
  wire           deskew_cal_bypass;
  wire           sync_ref_div_en;
  wire           sync_ref_div_en_2;
  wire   [2:0]   out0_phase_sel;
  wire   [2:0]   out1_phase_sel;
  wire   [2:0]   out2_phase_sel;
  wire   [2:0]   out3_phase_sel;
  wire           soft_load_phase_n;
  wire   [5:0]   ssm_div_val;
  wire   [23:0]  fb_frac_val;
  wire           ssm_spread_mode;
  wire   [4:0]   ssm_modulation;
  wire   [11:0]  fb_int_val;
  wire           ssm_en_n;
  wire   [1:0]   ssm_ext_wave_en;
  wire   [7:0]   ssm_ext_wave_max_addr;
  wire           ssm_random_en;
  wire   [1:0]   ssm_random_pattern_sel;

  wire                m_we;
  wire      [31:0]    m_addr, m_wdata;
  reg       [31:0]    m_rdata;
  
  scb_slv u_scb_slv(
            .DRI_CLK                                ( DRI_CLK                                           ),
            .DRI_CTRL                               ( DRI_CTRL[10:0]                                    ),
            .DRI_WDATA                              ( DRI_WDATA[32:0]                                   ),
            .DRI_ARST_N                             ( DRI_ARST_N                                        ),
            .DRI_RDATA                              ( DRI_RDATA[32:0]                                   ),
            .DRI_INTERRUPT                          ( DRI_INTERRUPT                                     ),
            .m_we                                   ( m_we                                              ),
            .m_addr                                 ( m_addr[31:0]                                      ),
            .m_rdata                                ( m_rdata[31:0]                                     ),
            .m_wdata                                ( m_wdata[31:0]                                     ) );

  reg [31:0] INIT[12:0];
  
  initial begin
    // 0x0	SOFT_RESET
    INIT[0][0]      = SOFTRESET;
    
    // 0x4	PLL_CTRL
    INIT[1][0]      = SOFT_POWERDOWN_N;
    INIT[1][1]      = RFDIV_EN;
    INIT[1][2]      = OUT0_DIV_EN;
    INIT[1][3]      = OUT1_DIV_EN;
    INIT[1][4]      = OUT2_DIV_EN;
    INIT[1][5]      = OUT3_DIV_EN;
    INIT[1][6]      = SOFT_REF_CLK_SEL;
    INIT[1][7]      = RESET_ON_LOCK;
    INIT[1][11:8]   = BYPASS_CLK_SEL[3:0];
    INIT[1][12]     = BYPASS_GO_EN_N;
    INIT[1][19:16]  = BYPASS_PLL[3:0];
    INIT[1][23:20]  = BYPASS_OUT_DIVIDER[3:0];
    
    //0x8	PLL_REF_FB
    INIT[2][0]      = FSE_N;
    INIT[2][2:1]    = FB_CLK_SEL_0[1:0];
    INIT[2][3]      = FB_CLK_SEL_1;
    INIT[2][13:8]   = RFDIV[5:0];
    
    // 0xC	PLL_FRACN
    INIT[3][0]      = FRAC_EN;
    INIT[3][1]      = FRAC_DAC_EN;
    
    // 0x10	PLL_DIV_0_1
    INIT[4][5:3]    = DIV0_RST_DELAY[2:0];
    INIT[4][14:8]   = DIV0_VAL[6:0];
    INIT[4][21:19]  = DIV1_RST_DELAY[2:0];
    INIT[4][30:24]  = DIV1_VAL[6:0];
    
    // 0x14	PLL_DIV_2_3
    INIT[5][5:3]    = DIV2_RST_DELAY[2:0];
    INIT[5][14:8]   = DIV2_VAL[6:0];
    INIT[5][21:19]  = DIV3_RST_DELAY[2:0];
    INIT[5][30:24]  = DIV3_VAL[6:0];
    INIT[5][31]     = DIV3_CLK_SEL;
    
    // 0x18	PLL_CTRL2
    INIT[6][1:0]    = BW_INT_CTRL[1:0];
    INIT[6][3:2]    = BW_PROP_CTRL[1:0];
    INIT[6][4]      = IREF_EN;
    INIT[6][5]      = IREF_TOGGLE;
    INIT[6][12:9]   = LOCK_CNT[3:0];
    
    // 0x1C	PLL_CAL
    INIT[7][2:0]    = DESKEW_CAL_CNT[2:0];
    INIT[7][3]      = DESKEW_CAL_EN;
    INIT[7][4]      = DESKEW_CAL_BYPASS;
    //INIT[7][14:8]   = DESKEW_CAL_IN[6:0];
    
    //0x20	PLL_PHADJ
    INIT[8][0]      = SYNC_REF_DIV_EN;
    INIT[8][1]      = SYNC_REF_DIV_EN;
    INIT[8][4:2]    = OUT0_PHASE_SEL[2:0];
    INIT[8][7:5]    = OUT1_PHASE_SEL[2:0];
    INIT[8][10:8]   = OUT2_PHASE_SEL[2:0];
    INIT[8][13:11]  = OUT3_PHASE_SEL[2:0];
    INIT[8][14]     = SOFT_LOAD_PHASE_N;
    
    // 0x24 SSCG_REG_0
    INIT[9][5:0]    = SSM_DIV_VAL[5:0];
    INIT[9][29:6]   = FB_FRAC_VAL[23:0];
    
    // 0x28 SSCG_REG_1
    INIT[10][0]     = SSM_SPREAD_MODE;
    INIT[10][5:1]   = SSM_MODULATION[4:0];
    
    // 0x2C SSCG_REG_2
    INIT[11][11:0]  = FB_INT_VAL[11:0];
    
    // 0x30 SSCG_REG_3
    INIT[12][0]     = SSM_EN_N;
    INIT[12][2:1]   = SSM_EXT_WAVE_EN[1:0];
    INIT[12][10:3]  = SSM_EXT_WAVE_MAX_ADDR[7:0];
    INIT[12][19]    = SSM_RANDOM_EN;
    INIT[12][21:20] = SSM_RANDOM_PATTERN_SEL[1:0];
  end
  
  
  always @( posedge m_we ) begin
    case ( m_addr[5:2] ) 
      4'd0  : INIT[0][0] = m_wdata[0];
      4'd1  : begin
              INIT[1][12:0]   = m_wdata[12:0];
              INIT[1][23:16]  = m_wdata[23:16];
              end
      4'd2  : begin
              INIT[2][3:0]    = m_wdata[3:0];
              INIT[2][13:8]   = m_wdata[13:8];
              end
      4'd3  : INIT[3][1:0]    = m_wdata[1:0];
      4'd4  : begin
              INIT[4][5:3]    = m_wdata[5:3];
              INIT[4][14:8]   = m_wdata[14:8];
              INIT[4][21:19]  = m_wdata[21:19];
              INIT[4][30:24]  = m_wdata[30:24];
              end
      4'd5  : begin
              INIT[5][5:3]    = m_wdata[5:3];
              INIT[5][14:8]   = m_wdata[14:8];
              INIT[5][21:19]  = m_wdata[21:19];
              INIT[5][31:24]  = m_wdata[31:24];
              end
      4'd6  : begin
              INIT[6][5:0]    = m_wdata[5:0];
              INIT[6][12:9]   = m_wdata[12:9];
              end
      4'd7  : begin
              INIT[7][4:0]    = m_wdata[4:0];
              INIT[7][14:8]   = m_wdata[14:8];
              end
      4'd8  : INIT[8][14:0]   = m_wdata[14:0];
      4'd9  : INIT[9][29:0]   = m_wdata[29:0];
      4'd10 : INIT[10][5:0]   = m_wdata[5:0];
      4'd11 : INIT[11][11:0]  = m_wdata[11:0];
      4'd12 : begin
              INIT[12][10:0]  = m_wdata[10:0];
              INIT[12][21:19] = m_wdata[21:19];
              end
    endcase
  end
  
  always @( * ) begin
    case ( m_addr[5:2] ) 
      4'd0  : m_rdata[31:0]   = {31'b0,INIT[0][0]};
      4'd1  : m_rdata[31:0]   = {8'b0, INIT[1][23:16], 2'b0, LOCK, INIT[1][12:0]};
      4'd2  : m_rdata[31:0]   = {18'b0, INIT[2][13:8], 4'b0, INIT[2][3:0]};
      4'd3  : m_rdata[31:0]   = {30'b0, INIT[3][1:0]};
      4'd4  : m_rdata[31:0]   = {1'b0, INIT[4][30:24], 2'b0, INIT[4][21:19], div1_phase_sel[2:0], 1'b0, INIT[4][14:8], 2'b0, INIT[4][5:3], div0_phase_sel[2:0]};
      4'd5  : m_rdata[31:0]   = {INIT[5][31:24], 2'b0, INIT[5][21:19], div3_phase_sel[2:0], 1'b0, INIT[5][14:8], 2'b0, INIT[5][5:3], div2_phase_sel[2:0]};
      4'd6  : m_rdata[31:0]   = {19'b0, INIT[6][12:9], 3'b0, INIT[6][5:0]};
      4'd7  : m_rdata[31:0]   = {17'b0, INIT[7][14:8], 3'b0, INIT[7][4:0]};
      4'd8  : m_rdata[31:0]   = {17'b0, INIT[8][14:0]};
      4'd9  : m_rdata[31:0]   = {2'b0, INIT[9][29:0]};
      4'd10 : m_rdata[31:0]   = {26'b0, INIT[10][5:0]};
      4'd11 : m_rdata[31:0]   = {20'b0, INIT[11][11:0]};
      4'd12 : m_rdata[31:0]   = {10'b0, INIT[11][21:19], 8'b0, INIT[11][10:0]};
    endcase
  end
  assign	softreset = 	    INIT[0][0]      	;
  assign	soft_powerdown_n = 	    INIT[1][0]      	;
  assign	rfdiv_en = 	    INIT[1][1]      	;
  assign	out0_div_en = 	    INIT[1][2]      	;
  assign	out1_div_en = 	    INIT[1][3]      	;
  assign	out2_div_en = 	    INIT[1][4]      	;
  assign	out3_div_en = 	    INIT[1][5]      	;
  assign	soft_ref_clk_sel = 	    INIT[1][6]      	;
  assign	reset_on_lock = 	    INIT[1][7]      	;
  assign	bypass_clk_sel[3:0] = 	    INIT[1][11:8]   	;
  assign	bypass_go_en_n = 	    INIT[1][12]     	;
  assign	bypass_pll[3:0] = 	    INIT[1][19:16]  	;
  assign	bypass_out_divider[3:0] = 	    INIT[1][23:20]  	;
  assign	fse_n = 	    INIT[2][0]      	;
  assign	fb_clk_sel_0[1:0] = 	    INIT[2][2:1]    	;
  assign	fb_clk_sel_1 = 	    INIT[2][3]      	;
  assign	rfdiv[5:0] = 	    INIT[2][13:8]   	;
  assign	frac_en = 	    INIT[3][0]      	;
  assign	frac_dac_en = 	    INIT[3][1]      	;
  assign	div0_rst_delay[2:0] = 	    INIT[4][5:3]    	;
  assign	div0_val[6:0] = 	    INIT[4][14:8]   	;
  assign	div1_rst_delay[2:0] = 	    INIT[4][21:19]  	;
  assign	div1_val[6:0] = 	    INIT[4][30:24]  	;
  assign	div2_rst_delay[2:0] = 	    INIT[5][5:3]    	;
  assign	div2_val[6:0] = 	    INIT[5][14:8]   	;
  assign	div3_rst_delay[2:0] = 	    INIT[5][21:19]  	;
  assign	div3_val[6:0] = 	    INIT[5][30:24]  	;
  assign	div3_clk_sel = 	    INIT[5][31]     	;
  assign	bw_int_ctrl[1:0] = 	    INIT[6][1:0]    	;
  assign	bw_prop_ctrl[1:0] = 	    INIT[6][3:2]    	;
  assign	iref_en = 	    INIT[6][4]      	;
  assign	iref_toggle = 	    INIT[6][5]      	;
  assign	lock_cnt[3:0] = 	    INIT[6][12:9]   	;
  assign	deskew_cal_cnt[2:0] = 	    INIT[7][2:0]    	;
  assign	deskew_cal_en = 	    INIT[7][3]      	;
  assign	deskew_cal_bypass = 	    INIT[7][4]      	;
  assign	sync_ref_div_en = 	    INIT[8][0]      	;
  assign	sync_ref_div_en_2 = 	    INIT[8][1]      	;
  assign	out0_phase_sel[2:0] = 	    INIT[8][4:2]    	;
  assign	out1_phase_sel[2:0] = 	    INIT[8][7:5]    	;
  assign	out2_phase_sel[2:0] = 	    INIT[8][10:8]   	;
  assign	out3_phase_sel[2:0] = 	    INIT[8][13:11]  	;
  assign	soft_load_phase_n = 	    INIT[8][14]     	;
  assign	ssm_div_val[5:0] = 	    INIT[9][5:0]    	;
  assign	fb_frac_val[23:0] = 	    INIT[9][29:6]   	;
  assign	ssm_spread_mode = 	    INIT[10][0]     	;
  assign	ssm_modulation[4:0] = 	    INIT[10][5:1]   	;
  assign	fb_int_val[11:0] = 	    INIT[11][11:0]  	;
  assign	ssm_en_n = 	    INIT[12][0]     	;
  assign	ssm_ext_wave_en[1:0] = 	    INIT[12][2:1]   	;
  assign	ssm_ext_wave_max_addr[7:0] = 	    INIT[12][10:3]  	;
  assign	ssm_random_en = 	    INIT[12][19]    	;
  assign	ssm_random_pattern_sel[1:0] = 	    INIT[12][21:20] 	;

endmodule



`timescale 1ps / 1ps
module PLL_DELAY (input       DELAY_LINE_LOAD,
                  input       DELAY_LINE_WIDE,
                  input       DELAY_LINE_DIRECTION,
                  input       DELAY_LINE_MOVE,
                  output      DELAY_LINE_OUT_OF_RANGE,
                  
                  input       FB_CLK,
                  input       REF_CLK_0,
                  input       REF_CLK_1,
                  
                  output      REF_CLK_0_OUT,
                  output      REF_CLK_1_OUT,
                  output      FB_CLK_OUT );




  reg NOTIFY_REG;

  parameter           DATA_RATE = 0.0; 
  parameter           FORMAL_NAME = ""; 
  parameter           INTERFACE_NAME = ""; 
  parameter           INTERFACE_LEVEL = 3'b0;
  parameter           SOFTRESET = 1'b0;
  parameter           SOFT_POWERDOWN_N = 1'b1;
  parameter           RFDIV_EN = 1'b0;
  parameter           OUT0_DIV_EN = 1'b0;
  parameter           OUT1_DIV_EN = 1'b0;
  parameter           OUT2_DIV_EN = 1'b0;
  parameter           OUT3_DIV_EN = 1'b0;
  parameter           SOFT_REF_CLK_SEL = 1'b0;
  parameter           RESET_ON_LOCK = 1'b0;
  parameter   [3:0]   BYPASS_CLK_SEL = 4'b0;
  parameter           BYPASS_GO_EN_N = 1'b0;
  parameter   [3:0]   BYPASS_PLL = 4'b0;
  parameter   [3:0]   BYPASS_OUT_DIVIDER = 4'b0;
  parameter           FF_REQUIRES_LOCK = 1'b0;
  parameter           FSE_N = 1'b0;
  parameter   [1:0]   FB_CLK_SEL_0 = 2'b0;
  parameter           FB_CLK_SEL_1 = 1'b0;
  parameter   [5:0]   RFDIV = 6'b0;
  parameter           FRAC_EN = 1'b0;
  parameter           FRAC_DAC_EN = 1'b0;
  parameter   [2:0]   DIV0_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV0_VAL = 7'b0;
  parameter   [2:0]   DIV1_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV1_VAL = 7'b0;
  parameter   [2:0]   DIV2_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV2_VAL = 7'b0;
  parameter   [2:0]   DIV3_RST_DELAY = 3'b0;
  parameter   [6:0]   DIV3_VAL = 3'b0;
  parameter           DIV3_CLK_SEL = 1'b0;
  parameter   [1:0]   BW_INT_CTRL = 2'b0;
  parameter   [1:0]   BW_PROP_CTRL = 2'b0;
  parameter           IREF_EN = 1'b0;
  parameter           IREF_TOGGLE = 1'b0;
  parameter   [3:0]   LOCK_CNT = 4'b0;
  parameter   [2:0]   DESKEW_CAL_CNT = 3'b0;
  parameter           DESKEW_CAL_EN = 1'b0;
  parameter           DESKEW_CAL_BYPASS = 1'b0;
  parameter           SYNC_REF_DIV_EN = 1'b0;
  parameter           SYNC_REF_DIV_EN_2 = 1'b0;
  parameter   [2:0]   OUT0_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT1_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT2_PHASE_SEL = 3'b0;
  parameter   [2:0]   OUT3_PHASE_SEL = 3'b0;
  parameter           SOFT_LOAD_PHASE_N = 1'b0;
  parameter   [5:0]   SSM_DIV_VAL = 6'b0;
  parameter   [23:0]  FB_FRAC_VAL = 24'b0;
  parameter           SSM_SPREAD_MODE = 1'b0;
  parameter   [4:0]   SSM_MODULATION = 5'b0;
  parameter   [11:0]  FB_INT_VAL = 12'b0;
  parameter           SSM_EN_N = 1'b0;
  parameter   [1:0]   SSM_EXT_WAVE_EN = 2'b0;
  parameter   [7:0]   SSM_EXT_WAVE_MAX_ADDR = 8'b0;
  parameter           SSM_RANDOM_EN = 1'b0;
  parameter   [1:0]   SSM_RANDOM_PATTERN_SEL = 2'b0;
  parameter   [1:0]   CDMUX0_SEL = 2'b0;
  parameter           CDMUX1_SEL = 1'b0;
  parameter           CDMUX2_SEL = 1'b0;
  parameter   [7:0]   CDELAY0_SEL = 8'b0;
  parameter           CDELAY0_EN = 1'b0;
  parameter           DRI_EN = 1'b0;
  parameter           DELAY_LINE_SIMULATION_MODE = "";
  parameter           RESETONLOCK = 0;//?? static info
  parameter           VCOFREQUENCY = 0.0;

  wire    dly_out;
  reg     powerup_reset;
  
  assign REF_CLK_0_OUT = REF_CLK_0;
  
  assign FB_CLK_OUT     = CDMUX1_SEL ? FB_CLK     : dly_out;
  assign REF_CLK_1_OUT  = CDMUX2_SEL ? dly_out    : REF_CLK_1;
  
  initial begin
    powerup_reset = 1'b0;
    #500;
    powerup_reset = 1'b1;
  end
  
  
  PLL_DELAY_IP u_delay(.load       (DELAY_LINE_LOAD),
                    .dly_wide   (DELAY_LINE_WIDE),
                    .direction  (DELAY_LINE_DIRECTION),
                    .reset_b    (CDELAY0_EN & powerup_reset),
                    .move       (DELAY_LINE_MOVE),
                    .dly_en     (CDELAY0_EN),
                    .dly        (CDELAY0_SEL),
                  
                    .fbclk      (FB_CLK),
                    .ref_clk_1  (REF_CLK_1),
                    .cdmux0_sel (CDMUX0_SEL),
                    .oor        (DELAY_LINE_OUT_OF_RANGE),
                    .dly_out    (dly_out));
                    
  specify
    specparam PATHPULSE$     = (1.0, 1.0);
    ( REF_CLK_0 => REF_CLK_0_OUT ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( REF_CLK_1 => REF_CLK_1_OUT ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
    ( FB_CLK => FB_CLK_OUT ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
  endspecify

endmodule

`timescale 1ps / 1ps
module PLL_DELAY_IP(input       load,
                    input       dly_wide,
                    input       direction,
                    input       reset_b,
                    input       move,
                    input       dly_en,
                    input [7:0] dly,
                  
                    input       fbclk,
                    input       ref_clk_1,
                    input [1:0] cdmux0_sel,
                    output      oor,
                    output      dly_out );

  
  wire [7:0]    dly_int;
  wire [7:0]    dly_sel;
  wire  [7:0]   sel0_dly;
  wire  [15:0]  sel1_dly;
  
  wire          dly_in;
  wire          dly_1, dly_2;
  
  assign dly_in = cdmux0_sel ? ref_clk_1 : fbclk;
  assign dly_int[7:0] = dly_wide ? {dly[6:0], 1'b0} : {1'b0, dly[6:0]};
  
  iog_dlycntl dlycntl ( .load           ( load          ), 
                        .widemode       ( dly_wide      ),
                        .direction      ( direction     ), 
                        .dly            ( dly_int[7:0]  ),
                        .dly_sel        ( dly_sel[7:0]  ), 
                        .mvdly_en       ( 1'b1          ), 
                        .reset_b        ( reset_b       ), 
                        .edgedetect     ( 1'b0          ),
                        .oor            ( oor           ), 
                        .move_pulse     ( move          ), 
                        .dataedge       ( 1'b0          ));
                        
                        
  assign 
  sel0_dly[7:0] = (dly_sel[2:0] == 3'b000) ? 8'd1 :
                    ((dly_sel[2:0] == 3'b001) ? 8'd2 :
                    ((dly_sel[2:0] == 3'b010) ? 8'd4 :
                    ((dly_sel[2:0] == 3'b011) ? 8'd8 :
                    ((dly_sel[2:0] == 3'b100) ? 8'd16 :
                    ((dly_sel[2:0] == 3'b101) ? 8'd32 :
                    ((dly_sel[2:0] == 3'b110) ? 8'd64 :
                    ((dly_sel[2:0] == 3'b111) ? 8'd128 : 8'b0 )))))));
  assign 
  sel1_dly[7:0] = (dly_sel[6:3] == 4'b0000) ? 8'd1 :
                    ((dly_sel[6:3] == 4'b0001) ? 8'd2 :
                    ((dly_sel[6:3] == 4'b0010) ? 8'd4 :
                    ((dly_sel[6:3] == 4'b0011) ? 8'd8 :
                    ((dly_sel[6:3] == 4'b0100) ? 8'd16 :
                    ((dly_sel[6:3] == 4'b0101) ? 8'd32 :
                    ((dly_sel[6:3] == 4'b0110) ? 8'd64 :
                    ((dly_sel[6:3] == 4'b0111) ? 8'd128 : 8'b0 )))))));
  assign 
  sel1_dly[15:8] = (dly_sel[6:3] == 4'b1000) ? 8'd1 :
                    ((dly_sel[6:3] == 4'b1001) ? 8'd2 :
                    ((dly_sel[6:3] == 4'b1010) ? 8'd4 :
                    ((dly_sel[6:3] == 4'b1011) ? 8'd8 :
                    ((dly_sel[6:3] == 4'b1100) ? 8'd16 :
                    ((dly_sel[6:3] == 4'b1101) ? 8'd32 :
                    ((dly_sel[6:3] == 4'b1110) ? 8'd64 :
                    ((dly_sel[6:3] == 4'b1111) ? 8'd128 : 8'b0 )))))));
                    
  
  DLL_DELAY_BLOCK grx_dly128_1( .DIN (dly_in & dly_en) ,
                                .SEL_0 (sel0_dly[7:0]),
                                .SEL_1 (sel1_dly[15:0]),
                                .DOUT (dly_1),
                                .DOUT_f(),
                                .DOUT_r());
  assign pass128 = grx_dly128_1.taps[128];
  DLL_DELAY_BLOCK grx_dly128_2( .DIN (pass128 & dly_en) ,
                                .SEL_0 (sel0_dly[7:0]),
                                .SEL_1 (sel1_dly[15:0]),
                                .DOUT (dly_2),
                                .DOUT_f(),
                                .DOUT_r());
  assign dly_out = (dly_en == 1'b0) ? dly_in : 
                  ((dly_sel[7] == 1'b0) ? dly_1 : 
                  ((dly_sel[7] == 1'b1) ? dly_2 : 1'b0));
                  
endmodule


module PF_PLLUM28HLPMFFRAC_postdiv_pd_sync (clk_to_postdiv, clk_to_postdivb, DIVSTART0, DIVSTART1, DIVSTART2,
	DIVSTART3, LOCK, postdiv_pd, POSTDIVEN, RESETONLOCK, vco_0_del, VCOPHSEL0,
	VCOPHSEL1, VCOPHSEL2, VCOPHSEL3);
wire        divq_reset;
input [2:0] VCOPHSEL1;
input [2:0] VCOPHSEL2;
input LOCK;
output [3:0] postdiv_pd;
input [2:0] DIVSTART0;
input [2:0] DIVSTART1;
input [3:0] POSTDIVEN;
input [2:0] VCOPHSEL0;
input [3:0] clk_to_postdiv;
input [3:0] clk_to_postdivb;
input [2:0] DIVSTART3;
input [2:0] DIVSTART2;
input vco_0_del;
input RESETONLOCK;
input [2:0] VCOPHSEL3;
wire [3:0] pden_lk_enb;
wire en_from_lock;
wire [2:0] VCOPHSEL1;
wire [3:0] en_changed;
reg [3:0] postdiven_int;
wire [3:0] postdiv_pd_intB;
wire VDD;
wire [3:0] clkselmux;
reg [3:0] postdiven_sync;
reg [3:0] postdiven_sync_outb_clk;
reg [3:0] postdiven_sync_out;
wire [2:0] VCOPHSEL2;
wire LOCK;
wire [3:0] postdiv_pd;
reg vco_div4_int2;
wire [2:0] DIVSTART0;
wire [2:0] DIVSTART1;
reg vco_div4_int1;
wire [3:0] POSTDIVEN;
wire [3:0] en_sync_int;
wire VSS;
wire tiehigh;
wire [2:0] VCOPHSEL0;
wire [3:0] clk_to_postdiv;
wire [3:0] clk_to_postdivb;
wire [2:0] DIVSTART3;
wire vco_div4_buf;
wire [2:0] DIVSTART2;
wire tielow;
wire vco_0_del;
wire RESETONLOCK;
wire pd_stable;
wire [3:0] postdiven_lock_en;
wire NET1;
wire [2:0] VCOPHSEL3;

nand (en_from_lock, RESETONLOCK, ~LOCK);


PF_PLLUM28HLPMFFRAC_divsw8 Xdly_rst_cnt_3_ ( .CLK(clk_to_postdiv[3]), .div({DIVSTART3[2], DIVSTART3[1], DIVSTART3[0]}),
	.LOADB(postdiven_sync_outb_clk[3]), .OUTB(postdiv_pd_intB[3]));
PF_PLLUM28HLPMFFRAC_divsw8 Xdly_rst_cnt_2_ ( .CLK(clk_to_postdiv[2]), .div({DIVSTART2[2], DIVSTART2[1], DIVSTART2[0]}),
	.LOADB(postdiven_sync_outb_clk[2]), .OUTB(postdiv_pd_intB[2]));
PF_PLLUM28HLPMFFRAC_divsw8 Xdly_rst_cnt_1_ ( .CLK(clk_to_postdiv[1]), .div({DIVSTART1[2], DIVSTART1[1], DIVSTART1[0]}),
	.LOADB(postdiven_sync_outb_clk[1]), .OUTB(postdiv_pd_intB[1]));
PF_PLLUM28HLPMFFRAC_divsw8 Xdly_rst_cnt_0_ ( .CLK(clk_to_postdiv[0]), .div({DIVSTART0[2], DIVSTART0[1], DIVSTART0[0]}),
	.LOADB(postdiven_sync_outb_clk[0]), .OUTB(postdiv_pd_intB[0]));

initial begin
  postdiven_sync_outb_clk[3:0]  = 4'b0;
  postdiven_sync_out[3:0]       = 4'b0;
  postdiven_int[3:0]            = 4'b0;
  postdiven_sync[3:0]           = 4'b0;
  vco_div4_int1                 = 1'b0;
  vco_div4_int2                 = 1'b0;
end
always @(posedge divq_reset) begin
  postdiven_sync_outb_clk[3:0]  = 4'b0;
  postdiven_sync_out[3:0]       = 4'b0;
  postdiven_int[3:0]            = 4'b0;
  postdiven_sync[3:0]           = 4'b0;
  vco_div4_int1                 = 1'b0;
  vco_div4_int2                 = 1'b0;
end


always @(posedge clkselmux[3])
  postdiven_sync_outb_clk[3] <= postdiven_sync_out[3];
always @(posedge clkselmux[2])
  postdiven_sync_outb_clk[2] <= postdiven_sync_out[2];
always @(posedge clkselmux[1])
  postdiven_sync_outb_clk[1] <= postdiven_sync_out[1];
always @(posedge clkselmux[0])
  postdiven_sync_outb_clk[0] <= postdiven_sync_out[0];  

  
always @(posedge vco_0_del) begin
  if ( $time > 0 ) begin
    postdiven_sync_out[3:0] <= en_sync_int[3:0];
    postdiven_int[3:0]      <= ~pden_lk_enb[3:0];
    postdiven_sync[3:0]     <= postdiven_int[3:0];
  end
end
  
nand (pden_lk_enb[3], en_from_lock, POSTDIVEN[3]);
nand (pden_lk_enb[2], en_from_lock, POSTDIVEN[2]);
nand (pden_lk_enb[1], en_from_lock, POSTDIVEN[1]);
nand (pden_lk_enb[0], en_from_lock, POSTDIVEN[0]);

nand (postdiv_pd[3], postdiven_sync_outb_clk[3], postdiv_pd_intB[3]);
nand (postdiv_pd[2], postdiven_sync_outb_clk[2], postdiv_pd_intB[2]);
nand (postdiv_pd[1], postdiven_sync_outb_clk[1], postdiv_pd_intB[1]);
nand (postdiv_pd[0], postdiven_sync_outb_clk[0], postdiv_pd_intB[0]);

assign clkselmux[3] = VCOPHSEL3[2] ? clk_to_postdiv[3] : clk_to_postdivb[3];
assign clkselmux[2] = VCOPHSEL2[2] ? clk_to_postdiv[2] : clk_to_postdivb[2];
assign clkselmux[1] = VCOPHSEL1[2] ? clk_to_postdiv[1] : clk_to_postdivb[1];
assign clkselmux[0] = VCOPHSEL0[2] ? clk_to_postdiv[0] : clk_to_postdivb[0];
  
assign en_sync_int[3] = pd_stable ? postdiven_sync[3] : postdiven_sync_out[3];
assign en_sync_int[2] = pd_stable ? postdiven_sync[2] : postdiven_sync_out[2];
assign en_sync_int[1] = pd_stable ? postdiven_sync[1] : postdiven_sync_out[1];
assign en_sync_int[0] = pd_stable ? postdiven_sync[0] : postdiven_sync_out[0];
  
xor (en_changed[3], postdiven_sync[3], postdiven_int[3]);
xor (en_changed[2], postdiven_sync[2], postdiven_int[2]);
xor (en_changed[1], postdiven_sync[1], postdiven_int[1]);
xor (en_changed[0], postdiven_sync[0], postdiven_int[0]);


always @(posedge vco_0_del) begin
  vco_div4_int1 <= vco_div4_buf;
  vco_div4_int2 <= vco_div4_int1;
end
 

assign vco_div4_buf = ~vco_div4_int2;
nor (pd_stable, en_changed[0], en_changed[1], en_changed[2], en_changed[3]);
//not (pd_stable, divq_reset);




endmodule



module PF_PLLUM28HLPMFFRAC_divsw8 (
                      input                   CLK,
                      input                   LOADB,
                      input   [2:0]           div,
                      output                  OUTB);
  wire qb1;
  wire qb2;
  wire tb2;
  wire tb1;
  wire tb0;
  wire NET1;
  wire qb0;

  assign tb0 = ~NET1;
  nand (tb1, qb0, NET1);
  assign OUTB = ~NET1;

  PF_PLLUM28HLPMFFRAC_tff_st1x_loadb X4 ( .CLK(CLK), .D(div[2]), .LOADB(LOADB), .QB(qb2), .TB(tb2));
  PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff0 ( .CLK(CLK), .D(div[0]), .LOADB(LOADB), .QB(qb0),	.TB(tb0));
  PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff1 ( .CLK(CLK), .D(div[1]), .LOADB(LOADB), .QB(qb1),	.TB(tb1));

  nand (NET1, qb0, qb1, qb2);
  nand (tb2, qb0, qb1, NET1);

endmodule

module PF_PLLUM28HLPMFFRAC_tff_st1x_loadb (
                      input                   CLK, 
                      input                   D, 
                      input                   LOADB, 
                      output                  QB, 
                      input                   TB);
  wire d1;
  reg Q;
  wire d0;
  
  initial
    Q <= 1'b0;

  always @(posedge CLK)
    Q <= d1;

  assign d1 = LOADB ? d0 : D;
  xnor (d0, Q, TB);
  assign QB = ~Q;
endmodule




module PF_PLLUM28HLPMFFRAC_cmosdiv_2to127 (CLK, clk_out, div, RST);
input RST;
input CLK;
output clk_out;
input [6:0] div;

wire clk_int;
wire div_1_mode;
wire qload;
wire RST_or_div_1_mode;
wire qb5;
wire clk_intrti;
wire load_div2;
wire div1_int;
wire qb0_mux_out;
wire load;
wire div_2_mode;
wire t5B;
wire VDD;
wire qb1;
wire t3B;
wire qb2;
wire RST;
wire t2B;
wire qb3;
wire qb1_mux_out;
wire load_div2B;
wire div_1_modeB;
wire clk1_1;
wire clk_intrt;
wire CLK;
wire RSTB;
wire VSS;
wire clk_intrtB;
wire clk_out_2_to_127;
wire qb4;
wire clk_out;
wire div_2_modeb;
wire q0;
wire qb1_mux_sel;
wire tiehigh;
wire clk1_3;
wire clk1_4;
wire div2_int;
wire clk_intrtiB;
wire q1;
wire clk1_2;
wire t4B;
wire t1B;
wire qloadb;
wire tielow;
wire [6:0] div;
wire div2rstB;
wire qb2345;
wire NET1;
wire qb0;
wire qb2345B;
wire loadbi;
wire qb0_mux_sel;

assign clk_out = div_1_mode ? ~clk1_3 : ~clk_out_2_to_127;
assign div_1_modeB = ~div_1_mode;
nand  (clk_out_2_to_127, clk_intrti, clk_intrt);
assign load = qload;

PF_PLLUM28HLPMFFRAC_ffbrx1cstm X5 ( .CLK(CLK), .D(loadbi), .Q(qloadb), .QB(qload),
	.RST(RST_or_div_1_mode));
nand (clk_intrti, div[0], clk_intrtiB);
PF_PLLUM28HLPMFFRAC_ffbrx1cstm X7 ( .CLK(qloadb), .D(load_div2B), .Q(load_div2), .QB(load_div2B),
	.RST(~div2rstB));
nand (RST_or_div_1_mode, RSTB, div_1_modeB);
nor (div2rstB, div_2_mode, RST);
PF_PLLUM28HLPMFFRAC_latchx1cstmb X10 ( .CLK(div_1_mode), .CLKB(div_1_modeB), .D(CLK), .QB(clk1_1));
nand (clk1_2, RSTB, clk1_1);
nand (clk1_3, div_1_mode, clk1_2);
nand (t2B, qb1, qb0);

nand (t3B,qb2,qb1,qb0);
nand (t5B,qb4,qb3,qb2,qb1,qb0);
nand (t4B,qb3,qb2,qb1,qb0);
not (qb2345,qb2345B);
nor (div_1_mode, div[1], ~div_2_mode);

nand (loadbi,qloadb,qb2345,qb1_mux_out,qb0_mux_out);
nand (qb2345B,qb5,qb4,qb3,qb2);
not (q0,qb0);
not (q1,qb1);
assign qb1_mux_out = qb1_mux_sel ? q1 : qb1;
nand (qb1_mux_sel,div[0],load_div2);
assign qb0_mux_out = qb0_mux_sel ? qb0 : q0;
nand (qb0_mux_sel,div[0],load_div2);
not (RSTB,RST);
assign clk_int = div_2_mode ? qloadb : load_div2;
assign div1_int = div_2_mode ? div[0] : div[1];
assign div2_int = div_2_mode ? div[1] : div[2];
not (t1B,qb0);



PF_PLLUM28HLPMFFRAC_ffqbibrbx1cstm Xff_reset_clk ( .CLK(CLK), .D(clk_int), .Q(clk_intrt), .QB(clk_intrtB),
	.QIB(clk_intrtiB), .RB(RSTB));
  
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff0 ( .CLK(CLK), .D(div1_int), .LOADB(~load), .QB(qb0), .TB(RST));
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff1 ( .CLK(CLK), .D(div2_int), .LOADB(~load), .QB(qb1), .TB(t1B));
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff2 ( .CLK(CLK), .D(div[3]), .LOADB(~load), .QB(qb2), .TB(t2B));
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff3 ( .CLK(CLK), .D(div[4]), .LOADB(~load), .QB(qb3), .TB(t3B));
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff4 ( .CLK(CLK), .D(div[5]), .LOADB(~load), .QB(qb4), .TB(t4B));
PF_PLLUM28HLPMFFRAC_tff_st1x_loadb Xtff5 ( .CLK(CLK), .D(div[6]), .LOADB(~load), .QB(qb5), .TB(t5B));
nor (div_2_mode, div[2], div[3], div[4], div[5], div[6]);

endmodule


module PF_PLLUM28HLPMFFRAC_ffqbibrbx1cstm (CLK, D, Q, QB, QIB,
	RB);
input RB;
input D;
input CLK;
output Q;
output QB;
output QIB;

reg q1;
reg qi;
initial begin
	q1=0;
	qi=0;
end


assign clk1 = CLK;

always @(posedge clk1 or negedge RB) begin
	if (~RB)
		q1 <= 1'b0;
	else
        	q1 <= D;
end
always @(clk1 or D or RB) begin
	if (~RB)
		qi <= 1'b0;
	if (~clk1)
		qi <= D;
end

buf  (QB,~q1);
buf  (Q,~QB);
buf  (QIB,~qi);

endmodule


module PF_PLLUM28HLPMFFRAC_ffbrx1cstm (CLK, D, Q, QB, RST);
input D;
input CLK;
input RST;
output QB;
output Q;


reg q1;
initial begin
	if (RST)
		q1 = 0;
	else begin
		q1 = 0;
	end
end


assign clk1 = CLK;
always @(posedge clk1 or posedge RST) begin
	if (RST)
		q1 <= 1'b0;
	else
        	q1 <= D;
end

buf (QB,~q1);
buf (Q,~QB);



endmodule


module PF_PLLUM28HLPMFFRAC_latchx1cstmb (CLK, CLKB, D, QB);
output QB;
input D;
input CLK;
input CLKB;

wire clki;
wire clko;
reg q1;
assign clk1 = (CLK);

always @(clk1 or D) begin
	if (clk1)
		q1 <= D;
end

not (QB,q1);


endmodule
`timescale 1ps / 1ps

module ICB_NGMUX (
                  input                                 SEL,
                  input                                 CLK0,
                  input                                 CLK1,
                  output                                Y
);

  parameter             NGMUX_MODE                                                  = 1'b0;
  parameter             CLK0_SOURCE_SEL                                             = 1'b0;
  parameter             CLK1_SOURCE_SEL                                             = 1'b0;
  
  parameter             CHANGE_CYCLES                                               = 3;
  parameter             CHANGE_CYCLES_NOT_ALIVE                                     = 15;
  parameter             CHANGE_CYCLES_INTERMITTENT                                  = 47;
  parameter             TPD                                                         = 0;
  
  wire          SEL_int;
  wire          CLK0_int;
  wire          CLK1_int;
  wire          Y_zd;
  reg           NOTIFY_REG;
  
  buf #(TPD:TPD:TPD) U0   ( SEL_int                                     , SEL                                          );
  buf #(TPD:TPD:TPD) U1   ( CLK0_int                                    , CLK0                                         );
  buf #(TPD:TPD:TPD) U2   ( CLK1_int                                    , CLK1                                         );
  
  pmos U3   ( Y                                           , Y_zd                                        , 0 );

  wire                  Y_glitch;
  reg       [1:0]       CLKOUT_neg_edges;
  reg       [1:0]       CLKIN_neg_edges;
  reg                   SEL_prev;
  reg                   busy;
  reg                   out_en;
  reg                   CLK0_virtual;
  reg                   CLK1_virtual;
  integer               OTHER_CLKIN_neg_edges;
  time                  last_posedge_CLK0, period_CLK0;
  time                  last_posedge_CLK1, period_CLK1;
  
  assign phase1       = SEL_int ^ SEL_prev;
  assign phase2       = !(SEL_int ^ SEL_prev) & busy;
  assign Y_glitch     = (SEL_prev === 1'b0) ? CLK0_int : ( (SEL_prev === 1'b1) ? CLK1_int : 1'bx );
  assign Y_zd         = out_en ? Y_glitch : 1'b0;
  
  initial begin
    CLKOUT_neg_edges        = 2'b0;
    CLKIN_neg_edges         = 2'b0;
    out_en                  = 1'b1;
    busy                    = 1'b0;
    OTHER_CLKIN_neg_edges   = 1'b0;
    last_posedge_CLK0       = 0;
    period_CLK0             = 0;
    last_posedge_CLK1       = 0;
    period_CLK1             = 0;
        
    wait ( SEL_int !== 1'bx );
    SEL_prev = SEL_int;
  end

  

  always @( SEL_int ) begin
    if ( $time > 0 ) begin
      CLKOUT_neg_edges  = 2'b0;
      busy              = 1'b1;
      
      if ( (SEL_int !== 1'b0) && (SEL_int !== 1'b1) )
        $display("Warning : SEL input went unknown at time %0.1fns. Instance: %m",$realtime);
    end
  end
    
  always @( negedge Y_glitch ) begin
    if ( (phase2 === 1'b1) && (CLKOUT_neg_edges < CHANGE_CYCLES) ) begin
      CLKOUT_neg_edges = CLKOUT_neg_edges + 1'b1;

      if ( CLKOUT_neg_edges === CHANGE_CYCLES ) begin
        out_en            = 1'b1;
        busy              = 1'b0;
        CLKIN_neg_edges   = 0;
      end
    end
  end

  
  
  always @( negedge CLK0_int ) begin
    if ( last_posedge_CLK0 == 0 )
      period_CLK0 = $time - last_posedge_CLK0;
      
    if ( (phase1 === 1'b1) && ( SEL_prev === 1'b0) ) begin
      if ( CLKIN_neg_edges < CHANGE_CYCLES ) begin
        CLKIN_neg_edges = CLKIN_neg_edges + 1'b1;

        if ( CLKIN_neg_edges === CHANGE_CYCLES ) begin
          // Disable the output clock
          out_en            = 1'b0;
          SEL_prev          = SEL_int;
        end
      end
    end
    else begin
      if ( (phase1 === 1'b1) && ( SEL_prev === 1'b1) && (period_CLK1 < $time - last_posedge_CLK1) ) begin
        // The second clock might be dead
        if ( CLKIN_neg_edges > 0 ) begin
          if ( NGMUX_MODE != 0 ) begin
            if ( OTHER_CLKIN_neg_edges < CHANGE_CYCLES_INTERMITTENT )
              OTHER_CLKIN_neg_edges = OTHER_CLKIN_neg_edges + 1;
            if ( OTHER_CLKIN_neg_edges == CHANGE_CYCLES_INTERMITTENT ) begin
              // Disable the output clock
              out_en            = 1'b0;
              SEL_prev          = SEL_int;
            end
          end
        end
        else begin
          if ( OTHER_CLKIN_neg_edges < CHANGE_CYCLES_NOT_ALIVE )
            OTHER_CLKIN_neg_edges = OTHER_CLKIN_neg_edges + 1;
          if ( OTHER_CLKIN_neg_edges == CHANGE_CYCLES_NOT_ALIVE ) begin
            // Disable the output clock
            out_en            = 1'b0;
            SEL_prev          = SEL_int;
          end
        end
      end
    end
  end

  always @( negedge CLK1_int ) begin
    if ( last_posedge_CLK1 == 0 )
      period_CLK1 = $time - last_posedge_CLK1;
      
    if ( (phase1 === 1'b1) && ( SEL_prev === 1'b1) ) begin
      if ( CLKIN_neg_edges < CHANGE_CYCLES ) begin
        CLKIN_neg_edges = CLKIN_neg_edges + 1'b1;

        if ( CLKIN_neg_edges === CHANGE_CYCLES ) begin
          // Disable the output clock
          out_en            = 1'b0;
          SEL_prev          = SEL_int;
        end
      end
    end
    else begin
      if ( (phase1 === 1'b1) && ( SEL_prev === 1'b0) && (period_CLK0 < $time - last_posedge_CLK0) ) begin
        // The second clock might be dead
        if ( CLKIN_neg_edges > 0 ) begin
          if ( NGMUX_MODE != 0 ) begin
            if ( OTHER_CLKIN_neg_edges < CHANGE_CYCLES_INTERMITTENT )
              OTHER_CLKIN_neg_edges = OTHER_CLKIN_neg_edges + 1;
            if ( OTHER_CLKIN_neg_edges == CHANGE_CYCLES_INTERMITTENT ) begin
              // Disable the output clock
              out_en            = 1'b0;
              SEL_prev          = SEL_int;
            end
          end
        end
        else begin
          if ( OTHER_CLKIN_neg_edges < CHANGE_CYCLES_NOT_ALIVE )
            OTHER_CLKIN_neg_edges = OTHER_CLKIN_neg_edges + 1;
          if ( OTHER_CLKIN_neg_edges == CHANGE_CYCLES_NOT_ALIVE ) begin
            // Disable the output clock
            out_en            = 1'b0;
            SEL_prev          = SEL_int;
          end
        end
      end
    end
  end

  specify
    specparam PATHPULSE$     = (1.0, 1.0);
    
    ( CLK0 *> (Y+:Y) ) = (10.0:10.0:10.0, 10.0:10.0:10.0);
    ( CLK1 *> (Y+:Y) ) = (10.0:10.0:10.0, 10.0:10.0:10.0);
    
    $setup(posedge SEL, negedge CLK0, 0.0, NOTIFY_REG);
    $setup(negedge SEL, negedge CLK0, 0.0, NOTIFY_REG);
    $hold (negedge CLK0, posedge SEL, 0.0, NOTIFY_REG);
    $hold (negedge CLK0, negedge SEL, 0.0, NOTIFY_REG);
    $setup(posedge SEL, negedge CLK1, 0.0, NOTIFY_REG);
    $setup(negedge SEL, negedge CLK1, 0.0, NOTIFY_REG);
    $hold (negedge CLK1, posedge SEL, 0.0, NOTIFY_REG);
    $hold (negedge CLK1, negedge SEL, 0.0, NOTIFY_REG);
    $period( posedge CLK0, 0.0, NOTIFY_REG );
    $period( posedge CLK1, 0.0, NOTIFY_REG );
    $width(posedge SEL, 0.0, 0, NOTIFY_REG);
    $width(negedge SEL, 0.0, 0, NOTIFY_REG);

  endspecify
  
endmodule


  




`timescale 1ps / 1ps
module clk_div_3p5 ( clko, clk );
 
  output 		clko;
  input 		clk;

  localparam    [2:0]   DIVIDER                                                     = 3'd2;
  localparam            DIV = (DIVIDER[2:0] == 3'b0) ? 1 :
                              ((DIVIDER[2:0] == 3'd1) ? 2 :
                              ((DIVIDER[2:0] == 3'd2) ? 3.5 :
                              ((DIVIDER[2:0] == 3'd3) ? 4 :
                              ((DIVIDER[2:0] == 3'd4) ? 5 : 1 ))));
 
  wire 		    clko;
  reg 		    clko_en;
  time          clkin_last_posedge;
  time          clkin_period_pos;
  time          clkin_period_pos_T1;
  time          clkin_last_negedge;
  time          clkin_period_neg;
  time          clkin_period_neg_T1;
  time          CLK_DIFF; 
  reg [2:0]     count_posedges;
  reg [2:0] 	count_negedges;
  reg           rst_by_pause_pos;
  reg           rst_by_pause_neg;
  reg           pon_rst;
  wire          design_rst;
 
  initial begin
    clko_en = 1'b0;
    clkin_last_posedge = 0;
    clkin_period_pos = 0;
    clkin_period_pos_T1 = 0;
    clkin_last_negedge = 0;
    clkin_period_neg = 0;
    clkin_period_neg_T1 = 0;
    count_posedges = 3'b0;
    count_negedges = 3'b0;
    rst_by_pause_pos   = 1'b0;
    rst_by_pause_neg   = 1'b0;
    CLK_DIFF = 700;
    pon_rst = 1'b1;
    repeat (5) @(posedge clk);
    pon_rst = 1'b0;
  end

  always @( posedge clk ) begin
    if ( clkin_last_posedge > 0 ) begin
      clkin_period_pos <= $time - clkin_last_posedge;
      clkin_period_pos_T1 <= clkin_period_pos;
    end
    clkin_last_posedge = $time;
  end
 
  always @( negedge clk ) begin
    if ( clkin_last_negedge > 0 ) begin
      clkin_period_neg <= $time - clkin_last_negedge;
      clkin_period_neg_T1 <= clkin_period_neg;
    end
    clkin_last_negedge = $time;
  end 
  
 
  // [PU] Adding logic for self reset in case input clock is paused and changed
  // SAR 112151, 112896,113681
  time clk_period_pos_diff;
  always@(*) begin
    if(clkin_period_pos > clkin_period_pos_T1)
      clk_period_pos_diff = (clkin_period_pos - clkin_period_pos_T1);
    else
      clk_period_pos_diff ='b0;
  end

  time clk_period_neg_diff;
  always@(*) begin
    if(clkin_period_neg > clkin_period_neg_T1)
      clk_period_neg_diff = (clkin_period_neg - clkin_period_neg_T1);
    else
      clk_period_neg_diff ='b0;
  end
  
  always @(*) begin
    if ( clkin_last_posedge > 0 ) begin
      if (clk_period_pos_diff > CLK_DIFF) begin
         rst_by_pause_pos = 1'b1;
         repeat (5) @(posedge clk);
	     rst_by_pause_pos = 1'b0;
      end
    end
  end
  
  always @(*) begin
    if ( clkin_last_negedge > 0 ) begin
      if (clk_period_neg_diff > CLK_DIFF) begin
         rst_by_pause_neg = 1'b1;
         repeat (5) @(negedge clk);
	     rst_by_pause_neg = 1'b0;
      end
    end
  end
  
  assign design_rst = (rst_by_pause_pos == 1'b1 || rst_by_pause_neg == 1'b1 || pon_rst == 1'b1) ? 1'b1 : 1'b0;
                      
  always @( posedge clk or posedge design_rst) begin
      //[JT]112151 Reintialing the values if there is any diffrence in clock period.  
      if( design_rst )begin
        count_posedges = 3'b111;
	    count_negedges = 3'd3;end
      if ( clko_en === 1'b1  ) begin
          if (count_posedges == 3'b110)
            count_posedges = 3'b0;
          else
            count_posedges = count_posedges + 1'b1;
      end
      else begin
        clko_en <= 1'b1;
        count_posedges = 3'b111;
        count_negedges = 3'd3;
      end
  end
  
  always @( negedge clk ) begin
    if ( clkin_last_posedge > 0 ) begin
      if ( clko_en === 1'b1 ) begin
        if (count_negedges == 3'b110)
          count_negedges = 3'b0;
        else
          count_negedges = count_negedges + 1'b1;
      end
    end
  end
  
  reg clko_pos = 1'b0;
  always @( posedge clk or posedge design_rst) begin
    if( design_rst )
      clko_pos = 3'b0;
    else if (count_posedges == 3'b110)
      clko_pos = 3'b1;
    else if (count_posedges == 3'b001)
      clko_pos = 1'b0;
  end
  
  reg clko_neg = 1'b0;
  always @( negedge clk or posedge design_rst) begin
    if( design_rst )
      clko_neg = 3'b0;
    else if (count_negedges == 3'b110)
      clko_neg = 3'b1;
    else if (count_negedges == 3'b001)
      clko_neg = 3'b0;
  end
  
  assign clko = clko_pos | clko_neg;
 
endmodule




`timescale 1ps / 1ps
module clk_div_5 ( clko, clk );
 
  output 		clko;
  input 		clk;
  //input 		rst_n;

  localparam    [2:0]   DIVIDER                                                     = 3'd2;
  localparam            DIV = (DIVIDER[2:0] == 3'b0) ? 1 :
                              ((DIVIDER[2:0] == 3'd1) ? 2 :
                              ((DIVIDER[2:0] == 3'd2) ? 3.5 :
                              ((DIVIDER[2:0] == 3'd3) ? 4 :
                              ((DIVIDER[2:0] == 3'd4) ? 5 : 1 ))));
 
  reg 		    clko, clko_en;
  time        clkin_last_posedge;
  time        clkin_period;
  time        clkout_period;
  reg [3:0] 	count_posedges;
  reg [3:0] 	count_negedges;

  localparam MAX_COUNT = 4'b1010;
 
  initial begin
    clko 	= 1'b0;
    clko_en = 1'b0;
    clkin_last_posedge = 0;
    clkout_period = 0;
    clkin_period = 0;
    count_posedges = 4'd0;
    count_negedges = 4'd0;
  end
  
  always @( posedge clk ) begin
    if ( clkin_last_posedge > 0 ) begin
      clkin_period = $time - clkin_last_posedge;
      clkout_period = ($time - clkin_last_posedge) * 3;
      if ( clko_en === 1'b1 ) begin
        count_posedges = count_posedges + 1'b1;
      end
      else begin
        clko_en <= 1'b1;
        count_posedges = 4'd10;
        count_negedges = 4'd5;
      end
    end
    clkin_last_posedge = $time;
  end
  
  always @( posedge clk ) begin
    if ( clkin_last_posedge > 0 ) begin
      if ( clko_en === 1'b1 ) begin
        count_negedges = count_negedges + 1'b1;
      end
    end
  end
  
  
  always begin
    wait (clko_en === 1'b1) 
    forever begin
      wait ( ((clk === 1'b1) && (count_posedges == MAX_COUNT)) || ((clk === 1'b1) && (count_negedges == MAX_COUNT)) );
      clko = 1'b1;
      if (count_posedges == MAX_COUNT)
        count_posedges = 4'b0;
        if (count_negedges == MAX_COUNT)
        count_negedges = 4'b0;
      # clkout_period;
      clko = 1'b0;
    end
  end
 
  
 
endmodule



`timescale 1ps / 1ps
module HS_IO_CLK (
                  input                                 A,
                  output                                Y
);

  parameter TPD = 0;

  wire          A_int;
  wire          Y_zd;


  buf #(TPD:TPD:TPD) U0   ( A_int                                       , A                                            );
  pmos U1   ( Y                                           , Y_zd                                        , 0 );

  assign Y_zd = A_int;
  
   specify
    specparam PATHPULSE$     = (1.00, 1.00);
    specparam tpdLH_A_to_Y  = (10.00:10.00:10.00);
    specparam tpdHL_A_to_Y  = (10.00:10.00:10.00);
    
    // Path Delays
    ( A => Y ) = (tpdLH_A_to_Y, tpdHL_A_to_Y);
  endspecify
 
endmodule



`timescale 1ps / 1ps

/*module ICB_CLKDIVDELAY (
                  output                                DELAY_LINE_OUT_OF_RANGE,
                  input                                 DELAY_LINE_DIR,
                  input                                 DELAY_LINE_MOVE,
                  input                                 DELAY_LINE_LOAD,
                  input                                 RST_N,
                  input                                 BIT_SLIP,
                  input                                 A,
                  output                                Y_DIV,
                  output                                Y_FB,
                  output                                Y_ND,
                  output                                Y
);
  parameter             DELAY_LINE_SIMULATION_MODE                                  = "";
  parameter     [2:0]   DIVIDER                                                     = 3'b0;
  parameter             DELAY_LINE_EN                                               = 1'b0;
  parameter     [6:0]   DELAY_LINE_VAL                                              = 7'b0;
  parameter             DELAY_VAL_X2                                                = 1'b0;
  parameter     [1:0]   FB_SOURCE_SEL_0                                             = 2'b0;
  parameter     [1:0]   FB_SOURCE_SEL_1                                             = 2'b0;

  ICB_CLKDIVDELAY_IP #(.DELAY_LINE_SIMULATION_MODE(DELAY_LINE_SIMULATION_MODE),
                          .DIVIDER(DIVIDER),
                          .DELAY_LINE_EN(DELAY_LINE_EN),
                          .DELAY_LINE_VAL(DELAY_LINE_VAL),
                          .DELAY_VAL_X2(DELAY_VAL_X2),
                          .FB_SOURCE_SEL_0(FB_SOURCE_SEL_0),
                          .FB_SOURCE_SEL_1(FB_SOURCE_SEL_1) )
                   u0 (.DELAY_LINE_OUT_OF_RANGE(DELAY_LINE_OUT_OF_RANGE),
                       .DELAY_LINE_DIR(DELAY_LINE_DIR),
                       .DELAY_LINE_MOVE(DELAY_LINE_MOVE),
                       .DELAY_LINE_LOAD(DELAY_LINE_LOAD),
                       .RST_N(RST_N),
                       .BIT_SLIP(BIT_SLIP),
                       .A(A),
                       .Y_DIV(Y_DIV),
                       .Y_FB(Y_FB),
                       .Y_ND(Y_ND),
                       .Y(Y) );
endmodule
*/
module ICB_CLKDIVDELAY (
                  output                                DELAY_LINE_OUT_OF_RANGE,
                  input                                 DELAY_LINE_DIR,
                  input                                 DELAY_LINE_MOVE,
                  input                                 DELAY_LINE_LOAD,
                  input                                 RST_N,
                  input                                 BIT_SLIP,
                  input                                 A,
                  output                                Y_DIV,
                  output                                Y_FB,
                  output                                Y_ND,
                  output                                Y
);
  parameter             DELAY_LINE_SIMULATION_MODE                                  = "";
  parameter     [2:0]   DIVIDER                                                     = 3'b0;
  parameter             DELAY_LINE_EN                                               = 1'b0;
  parameter     [6:0]   DELAY_LINE_VAL                                              = 7'b0;
  parameter             DELAY_VAL_X2                                                = 1'b0;
  parameter     [1:0]   FB_SOURCE_SEL_0                                             = 2'b0;
  parameter     [1:0]   FB_SOURCE_SEL_1                                             = 2'b0;
  
  
  localparam            TPD                                                         = 0;
  localparam            DELAY_LINE_STEP                                             = (DELAY_LINE_SIMULATION_MODE == "DISABLED") ? 0 : 25;
  reg                   NOTIFY_REG;
  
  reg    [7:0]  delay_line_val_int;
  reg           DELAY_LINE_OUT_OF_RANGE_zd;
  wire          DELAY_LINE_DIR_int;
  wire          DELAY_LINE_DIR_int_inverted;
  wire          DELAY_LINE_MOVE_int;
  wire          DELAY_LINE_LOAD_int;
  wire          RST_N_int;
  wire          BIT_SLIP_int;
  wire          A_int;
  wire          Y_DIV_zd;
  reg           Y_zd;
  reg           reset_gate;
  reg           glob_periph_reset_b;
  real          delay_value;
 
  initial begin
    glob_periph_reset_b = 1'b0;
    delay_line_val_int  = DELAY_LINE_VAL;
    delay_value         = (delay_line_val_int + 1) * (DELAY_VAL_X2 + 1) * DELAY_LINE_EN * DELAY_LINE_STEP;
    reset_gate          = RST_N_int;
    DELAY_LINE_OUT_OF_RANGE_zd = 1'b0;
    #100;
    glob_periph_reset_b = 1'b1;
  end

  buf #(TPD:TPD:TPD) U1   ( DELAY_LINE_DIR_int                          , DELAY_LINE_DIR                               );
  buf #(TPD:TPD:TPD) U2   ( DELAY_LINE_MOVE_int                         , DELAY_LINE_MOVE                              );
  buf #(TPD:TPD:TPD) U3   ( DELAY_LINE_LOAD_int                         , DELAY_LINE_LOAD                              );
  and #(TPD:TPD:TPD) U4   ( RST_N_int                                   , RST_N, glob_periph_reset_b                   );
  buf #(TPD:TPD:TPD) U5   ( BIT_SLIP_int                                , BIT_SLIP                                     );
  buf #(TPD:TPD:TPD) U6   ( A_int                                       , A                                            );
  


  pmos U0   ( DELAY_LINE_OUT_OF_RANGE                     , DELAY_LINE_OUT_OF_RANGE_zd                  , 0 );
  pmos U7   ( Y_DIV                                       , Y_DIV_zd                                    , 0 );
  pmos U8   ( Y                                           , Y_zd                                        , 0 );
  pmos U9   ( Y_FB                                        , Y_zd                                        , 0 );
  pmos U10  ( Y_ND                                        , A_int                                       , 0 );
  
  
  
  
  reg           bit_slip_div1, bit_slip_div1_1, bit_slip_div1_2, bit_slip_div1_3, bit_slip_reg;
  reg   [2:0]   bit_slip;
  reg           slip_pulse_reg;
  wire          slip_pulse;
  reg           div_in;
  
  
  initial begin
    bit_slip_reg = 1'b0;
    bit_slip[2:0] = 3'b0;
    slip_pulse_reg = 1'b0;
  end
  
  assign slip_pulse = bit_slip[1] & bit_slip[2];
  
  always @(posedge A_int) begin
    bit_slip[0] <= BIT_SLIP_int;
    bit_slip[1] <= bit_slip[0];
    bit_slip[2] <= ~bit_slip[1];
  end
  
  always @(posedge A_int) begin
    slip_pulse_reg <= ~slip_pulse;
    div_in <= A_int;
  end
  
  always @(A_int) begin
    div_in <= A_int;
  end
  
  always @(posedge BIT_SLIP_int) begin
    bit_slip_reg <= 1'b1;
    bit_slip_div1 <= 1'b1;
    bit_slip_div1_1 <= 1'b0;
    bit_slip_div1_2 <= 1'b0;
    bit_slip_div1_3 <= 1'b0;
  end
  
  
  
  wire  clk_div2, clk_div3p5, clk_div4, clk_div5; 
  reg   clk_div1;
  wire  clkin_div2    = ( DIVIDER[2:0] == 3'd2 ) || ( DIVIDER[2:0] == 3'd4 ) ? div_in & slip_pulse_reg : 1'b0;
  wire  clkin_div3p5  = ( DIVIDER[2:0] == 3'd7 ) ? div_in & slip_pulse_reg : 1'b0;
  wire  clkin_div4    = ( DIVIDER[2:0] == 3'd4 ) ? clk_div2 : 1'b0;
  wire  clkin_div5    = ( DIVIDER[2:0] == 3'd5 ) ? div_in & slip_pulse_reg : 1'b0;
  wire  clk_div_out   = ( DIVIDER[2:0] == 3'd1 ) ? clk_div1 & slip_pulse_reg : 
                        (( DIVIDER[2:0] == 3'd2 ) ? clk_div2 :
                        (( DIVIDER[2:0] == 3'd7 ) ? clk_div3p5 :
                        (( DIVIDER[2:0] == 3'd4 ) ? clk_div4 :
                        (( DIVIDER[2:0] == 3'd5 ) ? clk_div5 : 1'b0 ))));
  
  assign Y_DIV_zd = clk_div_out & reset_gate;
  
  always @(A_int) 
    Y_zd <= #delay_value A_int;

  Divide_2 u_div_2( .CLKIN( clkin_div2 ), .CLKOUT( clk_div2 ), .DIV( 3'b010 ), .RESET(1'b0) );
  
  clk_div_3p5 u_div_3p5 ( .clko( clk_div3p5 ), .clk( clkin_div3p5 ));
  
  Divide_2 u_div_4( .CLKIN( clkin_div4 ), .CLKOUT( clk_div4 ), .DIV( 3'b010 ), .RESET(1'b0) );
    
  clk_div_5 u_div_5 ( .clko( clk_div5 ), .clk( clkin_div5 ) );
  /*Odd_Divider #(.DIV_LENGTH(3)) 
        u_div_5(.CLKIN(clkin_div5), 
              .CLKOUT(clk_div5), 
              .DIV(4'b0101), 
              .SYNC_RESET( 1'b0 ),
              .ASYNC_RESET( 1'b1 )
              );*/
  
  always @( negedge A_int ) begin
    reset_gate = RST_N_int;
  end
  
  assign DELAY_LINE_DIR_int_inverted = ~DELAY_LINE_DIR_int; //SAR 110772
  
  always @( posedge DELAY_LINE_MOVE_int ) begin
    DELAY_LINE_OUT_OF_RANGE_zd  = (DELAY_LINE_DIR_int_inverted) ? (delay_line_val_int === 7'b0) : DELAY_VAL_X2 ? (delay_line_val_int === 8'b1111_1111) : (delay_line_val_int === 7'b111_1111);
    if ( DELAY_LINE_LOAD_int !== 1'b1 )
    delay_line_val_int          = DELAY_LINE_DIR_int_inverted ? ( delay_line_val_int - 1 ) : ( delay_line_val_int + 1 );
    delay_value                 = (delay_line_val_int + 1) *  DELAY_LINE_EN * DELAY_LINE_STEP;
  end
  
  always @( posedge DELAY_LINE_LOAD_int ) begin
    delay_line_val_int = DELAY_LINE_VAL;
  end
  
  always @(posedge A_int) begin
    bit_slip_div1_1 <= bit_slip_reg & bit_slip_div1;
    bit_slip_div1_2 <= bit_slip_div1_1 & bit_slip_div1;
    bit_slip_div1   <= ~bit_slip_div1_2;
  end
  
  always @( negedge bit_slip_div1_2 ) begin
    bit_slip_div1   <= 1'b1;
    bit_slip_reg    <= 1'b0;
  end
  
  always @( A_int ) 
    clk_div1 <= A_int;
  
  specify
    specparam PATHPULSE$      = (1, 1);
    specparam tpd_CLK_to_Q    = (10:10:10);
    (A => Y_DIV)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
    (A => Y_ND)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
    (A => Y)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
    (A => Y_FB)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
    (DELAY_LINE_LOAD => DELAY_LINE_OUT_OF_RANGE)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
    (DELAY_LINE_MOVE => DELAY_LINE_OUT_OF_RANGE)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q

    // Latch Data setup and hold timing checks
    $setup(posedge BIT_SLIP, negedge A, 0.0, NOTIFY_REG);
    $setup(negedge BIT_SLIP, negedge A, 0.0, NOTIFY_REG);
    $hold (negedge A, posedge BIT_SLIP, 0.0, NOTIFY_REG);
    $hold (negedge A, negedge BIT_SLIP, 0.0, NOTIFY_REG);

    $setup(posedge RST_N, negedge A, 0.0, NOTIFY_REG);
    $setup(negedge RST_N, negedge A, 0.0, NOTIFY_REG);
    $hold (negedge A, posedge RST_N, 0.0, NOTIFY_REG);
    $hold (negedge A, negedge RST_N, 0.0, NOTIFY_REG);

    $setup(posedge BIT_SLIP, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge BIT_SLIP, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge BIT_SLIP, 0.0, NOTIFY_REG);
    $hold (posedge A, negedge BIT_SLIP, 0.0, NOTIFY_REG);

    $setup(posedge RST_N, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge RST_N, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge RST_N, 0.0, NOTIFY_REG);
    $hold (posedge A, negedge RST_N, 0.0, NOTIFY_REG);
    
    $setup(posedge DELAY_LINE_DIR, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $setup(negedge DELAY_LINE_DIR, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, posedge DELAY_LINE_DIR, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, negedge DELAY_LINE_DIR, 0.0, NOTIFY_REG);
    
    $recovery(negedge DELAY_LINE_LOAD, posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG);
    $hold (posedge DELAY_LINE_MOVE, negedge DELAY_LINE_LOAD, 0.0, NOTIFY_REG);

    $period( posedge A, 0.0, NOTIFY_REG );
    $period( posedge DELAY_LINE_MOVE, 0.0, NOTIFY_REG );
    $width( posedge DELAY_LINE_LOAD, 0.0, 0, NOTIFY_REG );
    $width( negedge DELAY_LINE_LOAD, 0.0, 0, NOTIFY_REG );

  endspecify
  
endmodule



`timescale 1ps / 1ps

module ICB_CLKDIV (
                  input                                 RST_N,
                  input                                 BIT_SLIP,
                  input                                 A,
                  output                                Y_DIV
);
  parameter     [2:0]   DIVIDER                                                     = 3'b0;
  reg                   NOTIFY_REG;
  
  
  ICB_CLKDIVDELAY #(.DIVIDER(DIVIDER)) u0(
                  .DELAY_LINE_OUT_OF_RANGE              (),
                  .DELAY_LINE_DIR                       (1'b0),
                  .DELAY_LINE_MOVE                      (1'b0),
                  .DELAY_LINE_LOAD                      (1'b0),
                  .RST_N                                (RST_N),
                  .BIT_SLIP                             (BIT_SLIP),
                  .A                                    (A),
                  .Y_DIV                                (Y_DIV),
                  .Y_FB                                 (),
                  .Y_ND                                 (),
                  .Y                                    ());
   specify
    specparam PATHPULSE$      = (1, 1);
    specparam tpd_CLK_to_Q    = (10:10:10);
    (A => Y_DIV)  = (tpd_CLK_to_Q, tpd_CLK_to_Q);   // CLK2Q
 
    // Latch Data setup and hold timing checks
    $setup(posedge BIT_SLIP, negedge A, 0.0, NOTIFY_REG);
    $setup(negedge BIT_SLIP, negedge A, 0.0, NOTIFY_REG);
    $hold (negedge A, posedge BIT_SLIP, 0.0, NOTIFY_REG);
    $hold (negedge A, negedge BIT_SLIP, 0.0, NOTIFY_REG);

    $setup(posedge RST_N, negedge A, 0.0, NOTIFY_REG);
    $setup(negedge RST_N, negedge A, 0.0, NOTIFY_REG);
    $hold (negedge A, posedge RST_N, 0.0, NOTIFY_REG);
    $hold (negedge A, negedge RST_N, 0.0, NOTIFY_REG);

    $setup(posedge BIT_SLIP, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge BIT_SLIP, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge BIT_SLIP, 0.0, NOTIFY_REG);
    $hold (posedge A, negedge BIT_SLIP, 0.0, NOTIFY_REG);

    $setup(posedge RST_N, posedge A, 0.0, NOTIFY_REG);
    $setup(negedge RST_N, posedge A, 0.0, NOTIFY_REG);
    $hold (posedge A, posedge RST_N, 0.0, NOTIFY_REG);
    $hold (posedge A, negedge RST_N, 0.0, NOTIFY_REG);

    $period( posedge A, 0.0, NOTIFY_REG );

  endspecify
 
endmodule


`timescale 1ps / 1ps

module ICB_CLKSTOP (
                  input                                 A,
                  output                                Y,
                  input                                 EN
);
  parameter TPD = 0;

  wire          A_int;
  wire          Y_zd;
  wire          EN_int;

  buf #(TPD:TPD:TPD) U0   ( A_int                                       , A                                            );
  buf #(TPD:TPD:TPD) U2   ( EN_int                                      , EN                                           );
  
  pmos U1   ( Y                                           , Y_zd                                        , 0 );
  
  and (Y_zd, EN_int, A_int);
  
endmodule
`timescale 1ps / 1ps

module ICB_CLKSTOP_EN (
                  input                                 EN,
                  output                                EN_OUT
);

  parameter TPD = 1;

  wire          EN_int;
  wire          EN_OUT_zd;

  buf #(TPD:TPD:TPD) U0   ( EN_int                                      , EN                                           );

  pmos U1   ( EN_OUT                                      , EN_OUT_zd                                   , 0 );

  buf(EN_OUT_zd, EN_int);
  
endmodule

`timescale 1ps / 1ps

module ICB_INT (
                  input                                 A,
                  output                                Y
);

  parameter TPD = 0;

  wire          A_int;
  wire          Y_zd;


  buf #(TPD:TPD:TPD) U0   ( A_int                                       , A                                            );
  pmos U1   ( Y                                           , Y_zd                                        , 0 );

  assign Y_zd = A_int;
  
  specify
    specparam PATHPULSE$     = (1.00, 1.00);
    specparam tpdLH_A_to_Y  = (10.00:10.00:10.00);
    specparam tpdHL_A_to_Y  = (10.00:10.00:10.00);
    
    // Path Delays
    ( A => Y ) = (tpdLH_A_to_Y, tpdHL_A_to_Y);
  endspecify
endmodule



`timescale 1ps / 1ps
module ICB_MUXING (
                  input                                 A
);

  parameter     [5:0]   BANK_OUT_CCW_SEL                                            = 6'b0;
  parameter     [5:0]   BANK_OUT_CW_SEL                                             = 6'b0;
  parameter             DYNEN                                                       = 1'b0;
  parameter             DYNEN_SOFT_RESET                                            = 1'b0;
  parameter    [71:0]   NMUX_SEL                                                    = 72'b0;
  parameter             SOFT_RESET                                                  = 1'b0;
  parameter    [11:0]   RESERVED                                                    = 12'b0;
  parameter             SOFT_RESET_PERIPH                                           = 1'b0;
  parameter    [29:0]   BANKCLK_CCW_SOURCE_SEL                                      = 30'b0;
  parameter    [29:0]   BANKCLK_CW_SOURCE_SEL                                       = 30'b0;
  parameter    [59:0]   CLKSTOP_SOURCE_SEL                                          = 60'b0;
  parameter    [23:0]   STOP_SEL                                                    = 24'b0;
  
endmodule



`timescale 1ps / 1ps

module INIT (
                  output                                FABRIC_POR_N,
                  output                                GPIO_ACTIVE,
                  output                                HSIO_ACTIVE,
                  output                                PCIE_INIT_DONE,
                  output      [11:0]                    RFU,
                  output                                SRAM_INIT_DONE,
                  output                                UIC_INIT_DONE,
                  output                                USRAM_INIT_DONE 
            );
            
  localparam            SCB_CLK_PERIOD                                              = 1000;
  parameter             FABRIC_POR_N_SIMULATION_DELAY                               = 0.0;
  parameter             GPIO_ACTIVE_SIMULATION_DELAY                                = 0.0;
  parameter             HSIO_ACTIVE_SIMULATION_DELAY                                = 0.0;
  parameter             PCIE_INIT_DONE_SIMULATION_DELAY                             = 1 * SCB_CLK_PERIOD;
  parameter             RFU_SIMULATION_DELAY                                        = 0.0;                    // This one is not used anymore
  parameter             SRAM_INIT_DONE_SIMULATION_DELAY                             = 3 * SCB_CLK_PERIOD;     // SRAM_INIT_DONE
  parameter             UIC_INIT_DONE_SIMULATION_DELAY                              = 9 * SCB_CLK_PERIOD;    // UIC_INIT_DONE
  parameter             USRAM_INIT_DONE_SIMULATION_DELAY                            = 6 * SCB_CLK_PERIOD;    // USRAM_INIT_DONE
  
  
  localparam            MINIMUM_SIMULATION_DELAY                                    = 10;
  
  localparam            FABRIC_POR_N_SIMULATION_DELAY_INT                           = (FABRIC_POR_N_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)    ? FABRIC_POR_N_SIMULATION_DELAY : MINIMUM_SIMULATION_DELAY;
  localparam            GPIO_ACTIVE_SIMULATION_DELAY_INT                            = (GPIO_ACTIVE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)     ? GPIO_ACTIVE_SIMULATION_DELAY : MINIMUM_SIMULATION_DELAY;
  localparam            HSIO_ACTIVE_SIMULATION_DELAY_INT                            = (HSIO_ACTIVE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)     ? HSIO_ACTIVE_SIMULATION_DELAY : MINIMUM_SIMULATION_DELAY;
  
  localparam            PCIE_INIT_DONE_SIMULATION_DELAY_INT                         = (PCIE_INIT_DONE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)  ? PCIE_INIT_DONE_SIMULATION_DELAY : 1 * SCB_CLK_PERIOD;
  localparam            SRAM_INIT_DONE_SIMULATION_DELAY_INT                         = (SRAM_INIT_DONE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)  ? SRAM_INIT_DONE_SIMULATION_DELAY + (2 * SCB_CLK_PERIOD) : 5 * SCB_CLK_PERIOD;
  localparam            UIC_INIT_DONE_SIMULATION_DELAY_INT                          = (UIC_INIT_DONE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY)   ? UIC_INIT_DONE_SIMULATION_DELAY : 9 * SCB_CLK_PERIOD;
  localparam            USRAM_INIT_DONE_SIMULATION_DELAY_INT                        = (USRAM_INIT_DONE_SIMULATION_DELAY > MINIMUM_SIMULATION_DELAY) ? USRAM_INIT_DONE_SIMULATION_DELAY + (2 * SCB_CLK_PERIOD) : 8 * SCB_CLK_PERIOD;

  localparam            RFU_0_SIMULATION_DELAY                                      = PCIE_INIT_DONE_SIMULATION_DELAY_INT + SCB_CLK_PERIOD;           // XCVR_INIT_DONE
  
  localparam            RFU_1_SIMULATION_DELAY                                      = USRAM_INIT_DONE_SIMULATION_DELAY_INT - (2 * SCB_CLK_PERIOD);    // USRAM_INIT_FROM_SVNM_DONE
  localparam            RFU_2_SIMULATION_DELAY                                      = USRAM_INIT_DONE_SIMULATION_DELAY_INT - SCB_CLK_PERIOD;          // USRAM_INIT_FROM_UPROM_DONE
  localparam            RFU_3_SIMULATION_DELAY                                      = USRAM_INIT_DONE_SIMULATION_DELAY_INT;                           // USRAM_INIT_FROM_SPI_DONE
  
  localparam            RFU_4_SIMULATION_DELAY                                      = SRAM_INIT_DONE_SIMULATION_DELAY_INT - (2 * SCB_CLK_PERIOD);     // SRAM_INIT_FROM_SVNM_DONE
  localparam            RFU_5_SIMULATION_DELAY                                      = SRAM_INIT_DONE_SIMULATION_DELAY_INT - SCB_CLK_PERIOD;           // SRAM_INIT_FROM_UPROM_DONE
  localparam            RFU_6_SIMULATION_DELAY                                      = SRAM_INIT_DONE_SIMULATION_DELAY_INT;                            // SRAM_INIT_FROM_SPI_DONE
  
  localparam            RFU_7_SIMULATION_DELAY                                      = 0.0;
  localparam            RFU_8_SIMULATION_DELAY                                      = 0.0;
  localparam            RFU_9_SIMULATION_DELAY                                      = 0.0;
  localparam            RFU_10_SIMULATION_DELAY                                     = 0.0;
  localparam            RFU_11_SIMULATION_DELAY                                     = PCIE_INIT_DONE_SIMULATION_DELAY_INT;                            // AUTOCALIB_DONE

  initial begin
    if ( SRAM_INIT_DONE_SIMULATION_DELAY_INT < PCIE_INIT_DONE_SIMULATION_DELAY_INT + 2 * SCB_CLK_PERIOD )
      $display("WARNING %m: SRAM_INIT_DONE assertion delay should be larger than the PCIE_INIT_DONE assertion delay by at least 2ns");
    if ( USRAM_INIT_DONE_SIMULATION_DELAY_INT < SRAM_INIT_DONE_SIMULATION_DELAY_INT + 2 * SCB_CLK_PERIOD )
      $display("WARNING %m: USRAM_INIT_DONE assertion delay should be larger than the SRAM_INIT_DONE assertion delay by at least 3ns");
    if ( UIC_INIT_DONE_SIMULATION_DELAY_INT < USRAM_INIT_DONE_SIMULATION_DELAY_INT + 1 * SCB_CLK_PERIOD )
      $display("WARNING %m: DEVICE_INIT_DONE assertion delay should be larger than the USRAM_INIT_DONE assertion delay by at least 3ns");
  end
  
  reg                                   FABRIC_POR_N_zd;
  reg                                   GPIO_ACTIVE_zd;
  reg                                   HSIO_ACTIVE_zd;
  reg                                   PCIE_INIT_DONE_zd;
  reg           [11:0]                  RFU_zd;
  reg                                   SRAM_INIT_DONE_zd;
  reg                                   UIC_INIT_DONE_zd;
  reg                                   USRAM_INIT_DONE_zd;
  
  pmos ( FABRIC_POR_N                                , FABRIC_POR_N_zd                             , 0 );
  pmos ( GPIO_ACTIVE                                 , GPIO_ACTIVE_zd                              , 0 );
  pmos ( HSIO_ACTIVE                                 , HSIO_ACTIVE_zd                              , 0 );
  pmos ( PCIE_INIT_DONE                              , PCIE_INIT_DONE_zd                           , 0 );
  pmos ( RFU[0]                                      , RFU_zd[0]                                   , 0 );
  pmos ( RFU[1]                                      , RFU_zd[1]                                   , 0 );
  pmos ( RFU[2]                                      , RFU_zd[2]                                   , 0 );
  pmos ( RFU[3]                                      , RFU_zd[3]                                   , 0 );
  pmos ( RFU[4]                                      , RFU_zd[4]                                   , 0 );
  pmos ( RFU[5]                                      , RFU_zd[5]                                   , 0 );
  pmos ( RFU[6]                                      , RFU_zd[6]                                   , 0 );
  pmos ( RFU[7]                                      , RFU_zd[7]                                   , 0 );
  pmos ( RFU[8]                                      , RFU_zd[8]                                   , 0 );
  pmos ( RFU[9]                                      , RFU_zd[9]                                   , 0 );
  pmos ( RFU[10]                                     , RFU_zd[10]                                  , 0 );
  pmos ( RFU[11]                                     , RFU_zd[11]                                  , 0 );
  pmos ( SRAM_INIT_DONE                              , SRAM_INIT_DONE_zd                           , 0 );
  pmos ( UIC_INIT_DONE                               , UIC_INIT_DONE_zd                            , 0 );
  pmos ( USRAM_INIT_DONE                             , USRAM_INIT_DONE_zd                          , 0 );
                  
  initial begin
    FABRIC_POR_N_zd     = 1'b0;
    #FABRIC_POR_N_SIMULATION_DELAY_INT;
    FABRIC_POR_N_zd     = 1'b1;
  end
  
  initial begin
    GPIO_ACTIVE_zd     = 1'b0;
    #GPIO_ACTIVE_SIMULATION_DELAY_INT;
    GPIO_ACTIVE_zd     = 1'b1;
  end
  
  initial begin
    HSIO_ACTIVE_zd     = 1'b0;
    #HSIO_ACTIVE_SIMULATION_DELAY_INT;
    HSIO_ACTIVE_zd     = 1'b1;
  end
  
  initial begin
    PCIE_INIT_DONE_zd     = 1'b0;
    #PCIE_INIT_DONE_SIMULATION_DELAY_INT;
    PCIE_INIT_DONE_zd     = 1'b1;
  end
  
  initial begin
    RFU_zd[0]      = 12'b0;
    #RFU_0_SIMULATION_DELAY;
    RFU_zd[0]      = 12'b1;
  end
  
  initial begin
    RFU_zd[1]      = 12'b0;
    #RFU_1_SIMULATION_DELAY;
    RFU_zd[1]      = 12'b1;
  end
  
  initial begin
    RFU_zd[2]      = 12'b0;
    #RFU_2_SIMULATION_DELAY;
    RFU_zd[2]      = 12'b1;
  end
  
  initial begin
    RFU_zd[3]      = 12'b0;
    #RFU_3_SIMULATION_DELAY;
    RFU_zd[3]      = 12'b1;
  end
  
  initial begin
    RFU_zd[4]      = 12'b0;
    #RFU_4_SIMULATION_DELAY;
    RFU_zd[4]      = 12'b1;
  end
  
  initial begin
    RFU_zd[5]      = 12'b0;
    #RFU_5_SIMULATION_DELAY;
    RFU_zd[5]      = 12'b1;
  end
  
  initial begin
    RFU_zd[6]      = 12'b0;
    #RFU_6_SIMULATION_DELAY;
    RFU_zd[6]      = 12'b1;
  end
  
  initial begin
    RFU_zd[7]      = 12'b0;
    #RFU_7_SIMULATION_DELAY;
    RFU_zd[7]      = 12'b1;
  end
  
  initial begin
    RFU_zd[8]      = 12'b0;
    #RFU_8_SIMULATION_DELAY;
    RFU_zd[8]      = 12'b1;
  end
  
  initial begin
    RFU_zd[9]      = 12'b0;
    #RFU_9_SIMULATION_DELAY;
    RFU_zd[9]      = 12'b1;
  end
  
  initial begin
    RFU_zd[10]      = 12'b0;
    #RFU_10_SIMULATION_DELAY;
    RFU_zd[10]      = 12'b1;
  end
  
  initial begin
    RFU_zd[11]      = 12'b0;
    #RFU_11_SIMULATION_DELAY;
    RFU_zd[11]      = 12'b1;
  end
  
  initial begin
    SRAM_INIT_DONE_zd     = 1'b0;
    #SRAM_INIT_DONE_SIMULATION_DELAY_INT;
    SRAM_INIT_DONE_zd     = 1'b1;
  end
  
  initial begin
    UIC_INIT_DONE_zd     = 1'b0;
    #UIC_INIT_DONE_SIMULATION_DELAY_INT;
    UIC_INIT_DONE_zd     = 1'b1;
  end
  
  initial begin
    USRAM_INIT_DONE_zd     = 1'b0;
    #USRAM_INIT_DONE_SIMULATION_DELAY_INT;
    USRAM_INIT_DONE_zd     = 1'b1;
  end
  
endmodule

`timescale 1ps / 1ps

module CRN_INT (
                  input                                 A,
                  output                                Y
);

  parameter TPD = 0;

  wire          A_int;
  wire          Y_zd;


  buf #(TPD:TPD:TPD) U0   ( A_int                                       , A                                            );
  pmos U1   ( Y                                           , Y_zd                                        , 0 );

  assign Y_zd = A_int;
  
  specify
    specparam PATHPULSE$     = (1.0, 1.0);
    ( A => Y ) = (0.0:0.0:0.0, 0.0:0.0:0.0);
  endspecify  
endmodule



