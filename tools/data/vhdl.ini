;NOTE: This file is for running vhdl from hiernav

;Set the title of the Simulation menu in the hierarchy navigator
[SimTitle]
  title = VHDL

;we want to be able to write all the net lists from
;the Navigator using "make" so we add [MakeVhdl]
;the name "MakeVhdl" is arbitrary.  It matches the value specified after
;#Make in a command in the [SimTools] section
[MakeVhdl]
;need a process if we are going to make the net lists from the Navigator
   Process = vhdl &R
;we use the extension .vhd so we need the following line to let the
;Navigator know this.
   Extension = .vhd
;we want to put the .vhd files in the same directory with the symbols so
;we leave the Path blank.
   Path =
;the Vhdl Model attribute is number 80.  If attribute #80 has a value
;it means that the symbol is a vhdl primitive or has a .vhd file supplied
;by the user.  So, if we run make from the Navigator we must have the
;following line
   ModelAttribute = 80

;we want to be able to compile the net lists from
;the Navigator using "compile" so we add [CompileVhdl]
;the name "CompileVhdl" is arbitrary.  It matches the value specified after
;#Compile in a command in the [SimTools] section
[CompileVhdl]
   Process = zvan -nc &R
;the RootProcess runs only on the top schematic
   RootProcess = zvan -nc &Ptb&F
;the compiled files have extension .sim
   Extension = .sim
   ModelExt = .vhd
;we want to put the .sim files in the same directory with the
;symbols so we leave the Path blank.
   Path =
;the .vhd files are in the same directory with the symbols so
;we leave the ModelPath blank.
   ModelPath =
;the Vhdl Model attribute is number 80.  If attribute #80 has a value
;it means that the symbol is a vhdl primitive or has a .vhd file supplied
;by the user.  So, if we run compile from the Navigator we must have the
;following line
   ModelAttribute = 80

;the SimTools section directs the simulation interface to the appropriate
;information for generating VHDL models (using the built-in "make" facility),
;compiling the models, and starting the simulator.  Each of these functions
;is represented by an entry in the first section of the simulation menu
;of the hierarchy navigator
[SimTools]
;the next line invokes the "make" facility to write the vhdl net lists.
   Code vhdl = #Make MakeVhdl
;the next line invokes the "compile" facility to compile the vhdl net lists.
   Compile vhdl = #Compile CompileVhdl
;the next line invokes the "simulate" facility to start vhdl using the
;commands from "Simulate"
   Start vhdl = #Simulate Simulate

;we want to be able to start vhdl from the Navigator so we add [Simulate]
;the name "Simulate" is arbitrary.  It matches the value specified after
;#simulate in a command in the [SimTools] section
[Simulate]
;Command is the entire command line to start the simulator
   Command = dummysim cfg_tb_%
;Waves is the entire command line to start the Waveform Viewer
   Waves =
;SimAppName is the name the simulator uses to identify itself to the Navigator
   SimAppName =
;ExitMsg is the command to tell the simulator to quit
   ExitMsg =
;FirstMsg is the name of the section that contains the messages to send to
;the simulator when it starts up.
   FirstMsg =

[SimControls]
   MaxLine = 40
   RootPrefix  = /e/uut
   HierChar = /
   Continue = \

[SimButtons]
   Run = run
   Stop = ^C
   Delta = run

;Entries in the SimMenu section get transferred directly to the simulation
;menu in the hierarchy navigator.  The corresponding  commands are sent to
;the simulator when the menu item is selected.
[SimMenu]
   Monitor = Monitor %*n
   Trace=Trace %n
   Hold Val = Hold %{ ????? '0' '1'} %*n
   List All = List *
   
;The Defaults section specifies the default values for a number of parameters
;in the output VHDL
[Defaults]
   net_type = std_logic 
   bus_type = std_logic_vector()
   work_Lib = WORK
   model_lib = GENERICS
   use_lib_section = Generic
   tb_entity=testbench
   tb_arch=behavior

[Generic]
LIBRARY vanmacro;
USE vanmacro.components.ALL;
LIBRARY ieee;
LIBRARY generics;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE generics.components.ALL;

[Synopsys]
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_arith.ALL;

[LAT_VHD]
LIBRARY ieee;
LIBRARY generics;
LIBRARY lat_vhd;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE generics.components.ALL;
USE lat_vhd.components.ALL;

[LAT6K_VHD]
LIBRARY ieee;
LIBRARY generics;
LIBRARY lat_vhd;
LIBRARY lsc_mod;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE generics.components.ALL;
USE lat_vhd.components.ALL;
USE lsc_mod.components.ALL;

[FPGA_VHD]
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

[ep5g00]
library IEEE;
use IEEE.std_logic_1164.all;
library ec;
use ec.components.all;

[LatticeEC]
library IEEE;
use IEEE.std_logic_1164.all;
library ec;
use ec.components.all;

[ep5g00p]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp;
use ecp.components.all;

[LatticeECP]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp;
use ecp.components.all;

[LatticeECP2-DSP]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2;
use ecp2.components.all;

[LatticeECP2]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2;
use ecp2.components.all;

[LatticeECP2S]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2s;
use ecp2s.components.all;

[LatticeECP2M]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2m;
use ecp2m.components.all;

[LatticeECP2M-DSP]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2m;
use ecp2m.components.all;

[LatticeECP2MS]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp2ms;
use ecp2ms.components.all;

[Lattice-SC]
library IEEE;
use IEEE.std_logic_1164.all;
library SC;
use SC.COMPONENTS.all;

[LatticeSC]
library IEEE;
use IEEE.std_logic_1164.all;
library SC;
use SC.COMPONENTS.all;

[LatticeSCM]
library IEEE;
use IEEE.std_logic_1164.all;
library SCM;
use SCM.COMPONENTS.all;

[Lattice-SCM]
library IEEE;
use IEEE.std_logic_1164.all;
library SCM;
use SCM.COMPONENTS.all;

[LatticeXP]
library IEEE;
use IEEE.std_logic_1164.all;
library xp;
use xp.components.all;

[mg5g00]
library IEEE;
use IEEE.std_logic_1164.all;
library xp;
use xp.components.all;

[LatticeXP2]
library IEEE;
use IEEE.std_logic_1164.all;
library xp2;
use xp2.components.all;

[mg5a00]
library IEEE;
use IEEE.std_logic_1164.all;
library xp2;
use xp2.components.all;

[MachXO]
library IEEE;
use IEEE.std_logic_1164.all;
library MACHXO;
use MACHXO.components.all;

[or2c00a]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA2;
use ORCA2.orcacomp.all;

[or2t00a]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA2;
use ORCA2.orcacomp.all;

[or2t00b]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA2;
use ORCA2.orcacomp.all;

[or3c00]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA3;
use ORCA3.orcacomp.all;

[or3l00]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA3;
use ORCA3.orcacomp.all;

[or3t00]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA3;
use ORCA3.orcacomp.all;

[orca4]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[orli10g]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[orso42g5]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[orso82g5]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[orspii]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[ort42g5]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[ort82g5]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[or4efpsc]
library IEEE;
use IEEE.std_logic_1164.all;
library ORCA4;
use ORCA4.orcacomp.all;

[LatticeECP3]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp3;
use ecp3.components.all;

[MachXO2]
library IEEE;
use IEEE.std_logic_1164.all;
library MACHXO2;
use MACHXO2.components.all;

[Platform Manager]
library IEEE;
use IEEE.std_logic_1164.all;
library LPTM;
use LPTM.components.all;

[ECP5U]
library IEEE;
use IEEE.std_logic_1164.all;
library ECP5U;
use ECP5U.components.all;

[Platform Manager 2]
library IEEE;
use IEEE.std_logic_1164.all;
library LPTM2;
use LPTM2.components.all;

[ECP5UM]
library IEEE;
use IEEE.std_logic_1164.all;
library ecp5um;
use ecp5um.components.all;

[MachXO3L]
library IEEE;
use IEEE.std_logic_1164.all;
library MACHXO3L;
use MACHXO3L.components.all;

[MachXO3LF]
library IEEE;
use IEEE.std_logic_1164.all;
library MACHXO3LF;
use MACHXO3LF.components.all;

[LIFDB1]
library IEEE;
use IEEE.std_logic_1164.all;
library SNOW;
use SNOW.components.all;

