<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE        SVF_Plus    SYSTEM    "SVF_Plus.dtd" >
<!--
    03/04/05 Spinti: Changed the PROGRAM_SECURITY pulse width to 50.
    03/08/05 Spinti: Changed the DISABLE delay to 200ms, ENABLE delay to 20ms, and DISCHARGE delay to 10ms.     
-->
<SVF_Plus version="1.0">
<Header>
    <Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
    <Interface protocol="JTAG_1149.1"/>
    
</Setup>
<Parameter>
    <!-- Length fields are in number if bits -->
    <Instruction_Length  value="INSTRUCTION_REGISTER_LENGTH"/> 
    <Row_Width           value="DEVICE_ROW_WIDTH"/> 
    <Address_Length      value="ADDRESS_REGISTER_LENGTH"/> 
    <Address length="ADDRESS_LENGTH">
        INI_ADDRESS            
    </Address>
    <ID_Length           value="DEVICE_ID_LENGTH"/>
    <Usercode_Length     value="DEVICE_USERCODE_LENGTH"/>
    <Arch_Length         value="ARCHITECH_LENGTH"/>
    <Arch_Row            value="ARCHITECH_ROW"/>
    <PWP    value="PROGRAMING_PULSE_WIDTH"/>
    <PWV    value="VERIFY_PULSE_WIDTH"/>
    <PWE    value="ERASE_PULSE_WIDTH"/>
    <Instruction>
        EXTEST                = 0x00;
        ADDPLD                = 0x01;
        DATAPLD               = 0x02;
        ERASEAND              = 0x03;
        ERASEARCH             = 0x04;
        PROGPLD               = 0x05;
        PROGESF               = 0x06;
        READPLD               = 0x08;
        DISCHARGE             = 0x09;
        ADDCFG                = 0x0A;
        DATACFG               = 0x0B;
        ERASECFG              = 0x0C;
        PROGCFG               = 0x0D;
        READCFG               = 0x0E;
        CFGBE                 = 0x16;
        SAFESTATE             = 0x17;
        PROGRAMEN             = 0x18;
        IDCODE                = 0x19;
        PROGRAMDIS            = 0x1A;
        ADDSTATUS             = 0x1B;
        SAMPLE                = 0x1C;
        ERASEUES              = 0x1D;
        SHIFTUES              = 0x1E;
        PROGUES               = 0x1F;
        BYPASS                = 0xFF;
    </Instruction>
</Parameter>
<Data>
    <DataField    name="IDTDI">
        <FieldBlock    row_width="DEVICE_ID_LENGTH">
            ID_DATA
        </FieldBlock>
    </DataField>
    <DataField    name="Address_CFG">
        <FieldBlock    row_width="4">
            0x80,
            0x40,
            0x20,
            0x10
        </FieldBlock>
    </DataField>
</Data>
<Operation_List label="TurboOperation0">
    "Erase,Program,Verify" = " INIT      ! Initialize, 
                    READ_ID      ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE       ! Enable the programming mode, 
                    ERASE        ! Erase the device, 
                    FULL_ADDRESS_PROGRAM     ! Full Address Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE         ! Program USERCODE,
                    FULL_ADDRESS_VERIFY      !Full Address Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL]  ! Verify CFG, 
                    SYNCFUNCTION, 
                    VERIFY_USERCODE          ! Verify USERCODE,
                    SYNCFUNCTION, 
                    SYNCFUNCTION, 
                    DISABLE ! Exit the programming mode" ;

    "Erase,Program,Verify,Secure" = " INIT ! Initialize, 
                    READ_ID      ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE       ! Enable the programming mode, 
                    ERASE        ! Erase the device, 
                    FULL_ADDRESS_PROGRAM     ! Full Address Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE         ! Program USERCODE,
                    FULL_ADDRESS_VERIFY      !Full Address Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL]  ! Verify CFG, 
                    SYNCFUNCTION, 
                    VERIFY_USERCODE          ! Verify USERCODE,
                    PROGRAM_SECURITY         ! Secure device,
                    SYNCFUNCTION, 
                    DISABLE      ! Exit the programming mode" ;

    "Program Only" = " INIT      ! Initialize, 
                    READ_ID      ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE       ! Enable the programming mode, 
                    ERASE        ! Erase the device, 
                    FULL_ADDRESS_PROGRAM     ! Full Address Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE         ! Program USERCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Verify Only" = " INIT     ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    FULL_ADDRESS_VERIFY     !Full Address Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL] ! Verify CFG, 
                    SYNCFUNCTION, 
                    VERIFY_VERIFY_USERCODE  ! Verify USERCODE,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Verify ID" = " INIT       ! Initialize, 
                    READ_ID    ! Check the IDCODE" ; 

    "Verify USERCODE" = "INIT  ! Initialize, 
                    READ_ID	! Check the IDCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_USERCODE  ! Verify USERCODE"; 

    "Erase Only" = " INIT      ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Secure Device" = " INIT   ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    PROGRAM_SECURITY ! Secure device,
                    DISABLE    ! Exit the programming mode" ;

    "Bypass" = " INIT     ! Initialize" ;

    "Enable Only" = " INIT     ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode" ;

    "Disable Only" = " INIT    ! Initialize, 
                    SYNCFUNCTION, 
                    DISABLE ! Exit the programming mode" ;
</Operation_List>

<Operation_List label="TurboOperation1">
    "Erase,Program,Verify" = " INIT          ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM    ! Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE         ! Program USERCODE,
                    VERIFY     ! Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL]  ! Verify CFG, 
                    SYNCFUNCTION, 
                    VERIFY_USERCODE          ! Verify USERCODE,
                    SYNCFUNCTION, 
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Erase,Program,Verify,Secure" = " INIT   ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM    ! Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE         ! Program USERCODE,
                    VERIFY     ! Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL]  ! Verify CFG, 
                    SYNCFUNCTION, 
                    VERIFY_USERCODE          ! Verify USERCODE,
                    PROGRAM_SECURITY         ! Secure device,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Program Only" = " INIT    ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM    ! Program Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION,
                    PROGRAM_USERCODE         ! Program USERCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Verify Only" = " INIT     ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    VERIFY     ! Verify Fuse Map,
                    VERIFY_CFG [SEQUENTIAL] ! Verify CFG, 
                    SYNCFUNCTION,
                    VERIFY_VERIFY_USERCODE  ! Verify USERCODE,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Verify ID" = " INIT       ! Initialize, 
                    READ_ID    ! Check the IDCODE" ; 

    "Verify USERCODE" = "INIT  ! Initialize, 
                    READ_ID	! Check the IDCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_USERCODE  ! Verify USERCODE" ;

    "Erase Only" = " INIT      ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Secure Device" = " INIT   ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    PROGRAM_SECURITY ! Secure device,
                    DISABLE    ! Exit the programming mode" ;

    "Bypass" = " INIT  ! Initialize" ;
</Operation_List>

<Operation_List label="TurboOperation2">
    "Erase,Program,Verify" = " INIT  ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    FULL_ADDRESS_PROGRAM_VERIFY ! Full Address Program and Verify Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL]    ! Program CFG,
                    SYNCFUNCTION, 
                    VERIFY_CFG [SEQUENTIAL]     ! Verify CFG, 
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE            ! Program USERCODE,
                    VERIFY_USERCODE             ! Verify USERCODE,
                    SYNCFUNCTION, 
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Erase,Program,Verify,Secure" = " INIT ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    FULL_ADDRESS_PROGRAM_VERIFY ! Full Address Program and Verify Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL]    ! Program CFG,
                    SYNCFUNCTION, 
                    VERIFY_CFG [SEQUENTIAL]     ! Verify CFG, 
                    SYNCFUNCTION, 
                    PROGRAM_USERCODE            ! Program USERCODE,
                    VERIFY_USERCODE             ! Verify USERCODE,
                    PROGRAM_SECURITY ! Secure device,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Program Only" = " INIT    ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    FULL_ADDRESS_PROGRAM [SEQUENTIAL] ! Full Address Program Fuse Map,
                    SYNCFUNCTION,
                    PROGRAM_CFG [SEQUENTIAL] ! Program CFG,
                    SYNCFUNCTION, 
                    SYNCFUNCTION,
                    PROGRAM_USERCODE         ! Program USERCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Verify Only" = " INIT     ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    FULL_ADDRESS_VERIFY [SEQUENTIAL] ! Full Address Verify Fuse Map, 
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_CFG [SEQUENTIAL]  ! Verify CFG, 
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_VERIFY_USERCODE   ! Verify USERCODE,
                    SYNCFUNCTION, 
                    DISABLE    ! Exit the programming mode" ;

    "Verify ID" = " INIT       ! Initialize, 
                    READ_ID    ! Check the IDCODE" ; 

    "Verify USERCODE" = "INIT  ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_USERCODE  ! Verify USERCODE,	
                    SYNCFUNCTION, 
                    DISABLE ! Exit the programming mode" ;

    "Erase Only" = " INIT      ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE ! Exit the programming mode" ;

    "Secure Device" = " INIT   ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION, 
                    PROGRAM_SECURITY   ! Secure device,
                    DISABLE    ! Exit the programming mode" ;

    "Bypass" = " INIT     ! Initialize" ;
</Operation_List>

<Operation_List label="TurboOperation3">
    "Erase,Program,Verify" = " INIT    ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM_VERIFY            ! Program and Verify Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL]  ! Program CFG,
                    SYNCFUNCTION,
                    VERIFY_CFG [SEQUENTIAL]   ! Verify CFG, 
                    SYNCFUNCTION,
                    PROGRAM_USERCODE          ! Program USERCODE,
                    VERIFY_USERCODE           ! Verify USERCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Erase,Program,Verify,Secure" = " INIT    ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM_VERIFY            ! Program and Verify Fuse Map,
                    PROGRAM_CFG [SEQUENTIAL]  ! Program CFG,
                    SYNCFUNCTION,
                    VERIFY_CFG [SEQUENTIAL]   ! Verify CFG, 
                    SYNCFUNCTION,
                    PROGRAM_USERCODE          ! Program USERCODE,
                    VERIFY_USERCODE           ! Verify USERCODE,
                    PROGRAM_SECURITY          ! Secure device,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Program Only" = " INIT    ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device, 
                    PROGRAM [SEQUENTIAL]      ! Program Fuse Map,
                    SYNCFUNCTION,
                    PROGRAM_CFG [SEQUENTIAL]  ! Program CFG,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    PROGRAM_USERCODE          ! Program USERCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Verify Only" = " INIT     ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    VERIFY [SEQUENTIAL]       ! Verify Fuse Map, 
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_CFG [SEQUENTIAL]   ! Verify CFG, 
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_VERIFY_USERCODE    ! Verify USERCODE,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Verify ID" = " INIT       ! Initialize, 
                    READ_ID    ! Check the IDCODE" ; 

    "Verify USERCODE" = "INIT  ! Initialize, 
                    READ_ID	! Check the IDCODE,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    VERIFY_USERCODE ! Verify USERCODE,	
                    SYNCFUNCTION, 
                    DISABLE         ! Exit the programming mode" ;

    "Erase Only" = " INIT      ! Initialize, 
                    READ_ID    ! Check the IDCODE,
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode, 
                    ERASE      ! Erase the device,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    DISABLE    ! Exit the programming mode" ;

    "Secure Device" = " INIT   ! Initialize, 
                    READ_ID    ! Check the IDCODE, 
                    SYNCFUNCTION,
                    ENABLE     ! Enable the programming mode,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    SYNCFUNCTION,
                    PROGRAM_SECURITY      ! Secure device,
                    DISABLE    ! Exit the programming mode" ;

    "Bypass" = " INIT          ! Initialize" ;
</Operation_List>

<Script>
<![CDATA[
int32 ArchTemp = Arch_Length;
// created: spinti 04/14/2003
function INIT {
    HDR 0;
    HIR 0;
    TDR 0;
    TIR 0;
    ENDDR IDLE;
    ENDIR IDLE;
    FREQUENCY 1E6 HZ;
    STATE IDLE;
    SYNC;
}

// created: spinti 04/14/2003
function READ_ID {
    SIR Instruction_Length TDI  (IDCODE);
    SDR_VERIFY ID_Length   TDI  (#1^ID_Length)
                           TDO  (IDTDI[1])
                           MASK (DEVICE_ID_MASK);
    SYNC;
}

// created: spinti 04/14/2003
function ENABLE {
    SYNC;
    // Shift in program enable instruction
    SIR Instruction_Length TDI (PROGRAMEN);
    RUN_TEST TCK 3 DELAY 20;
    SYNC;
}

// created: spinti 04/14/2003
function DISABLE {
    // Shift in program disable instruction
    SIR Instruction_Length TDI (PROGRAMDIS);
    RUN_TEST TCK 3 DELAY 200;
    SYNC;
}

// created: spinti 04/14/2003
function ERASE {
    SYNC;
    // Shift in Erase All instruction
    SIR Instruction_Length TDI (CFGBE);
    RUN_TEST TCK 3 DELAY PWE;

    // Shift in discharge instruction
    SIR Instruction_Length TDI (DISCHARGE);
    RUN_TEST TCK 3 DELAY 10;
    SYNC;
}

// Program Functions _____________________________________________
// created: spinti 04/14/2003
function FULL_ADDRESS_PROGRAM {
    FuseArray_TDI.row = 1;
    Address.row = 1;
    
    SIR Instruction_Length TDI (BYPASS);
    SDR 1 TDI (#0);
    SYNC;
    
    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    repeat Address_Length-1 {
        // Shift in PLD Data instruction
        SIR Instruction_Length TDI (DATAPLD);
        // Shift in row data
        SDR Row_Width TDI (FuseArray_TDI);

        // Shift in PLD Program instruction
        SIR Instruction_Length TDI (PROGPLD);
        RUN_TEST TCK 3 DELAY PWP;
        SYNC;

        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        Address[1] = Address[1] >> 1;
        // Shift in address 
        SDR Address_Length TDI (Address[1]);
    } // repeat
    Address[1] = #1@(#0^(Address_Length-1));

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    // Shift in row data
    SDR Row_Width TDI (FuseArray_TDI);

    // Shift in PLD Program instruction
    SIR Instruction_Length TDI (PROGPLD);
    RUN_TEST TCK 3 DELAY PWP;

    SYNC;
}

// created: spinti 04/15/2003
function PROGRAM {
    FuseArray_TDI.row = 1;
    Address.row = 1;
    
    SIR Instruction_Length TDI (BYPASS);
    SDR Address_Length TDI (#0);
    SYNC;
    
    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    repeat Address_Length-1 {
        // Shift in PLD Data instruction
        SIR Instruction_Length TDI (DATAPLD);
        // Shift in row data
        SDR Row_Width TDI (FuseArray_TDI);

        // Shift in PLD Program instruction
        SIR Instruction_Length TDI (PROGPLD);
        RUN_TEST TCK 3 DELAY PWP;
        SYNC;

        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        Address[1] = Address[1] >> 1;
		ESDR 1 TDI (#0);
    } // repeat
    Address[1] = #1@(#0^(Address_Length-1));

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    // Shift in row data
    SDR Row_Width TDI (FuseArray_TDI);

    // Shift in PLD Program instruction
    SIR Instruction_Length TDI (PROGPLD);
    RUN_TEST TCK 3 DELAY PWP;

    SYNC;
}

// created: spinti 04/15/2003
function FULL_ADDRESS_PROGRAM_VERIFY {
    int32 Row = 1;
    FuseArray_TDI.row = 1;
    Address.row = 1;

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    // Shift in row data
    SDR Row_Width TDI (FuseArray_TDI);
    SYNC;

    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    // Shift in PLD Program instruction
    SIR Instruction_Length TDI (PROGPLD);
    RUN_TEST TCK 3 DELAY PWP;

    // Shift in PLD Read instruction 
    SIR Instruction_Length TDI (READPLD);
    RUN_TEST TCK 3 DELAY PWV;
    SYNC;

    repeat Address_Length - 1 {
        // Shift in PLD column data instruction 
        SIR Instruction_Length TDI (DATAPLD);
        // Shift in data for next row and verify previous row at the same time
        SDR_VERIFY Row_Width TDI (FuseArray_TDI[Row+1])
                             TDO (FuseArray_TDI[Row]);
        Row = Row + 1;

        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        // Shift in address 
        Address[1] = Address[1] >> 1;
        SDR Address_Length TDI (Address[1]);

        // Shift in PLD Program instruction
        SIR Instruction_Length TDI (PROGPLD);
        RUN_TEST TCK 3 DELAY PWP;

        // Shift in PLD Read instruction 
        SIR Instruction_Length TDI (READPLD);
        RUN_TEST TCK 3 DELAY PWV;
        SYNC;
    }
    Address[1] = #1@(#0^(Address_Length-1));
    // Shift in PLD column data instruction 
    SIR Instruction_Length TDI (DATAPLD);
    // Verify Last Row by shifting in all one's into data register
    SDR_VERIFY Row_Width TDI (#1^Row_Width)
                         TDO (FuseArray_TDI[Row]);
    SYNC;
}

// created: spinti 04/15/2003
function PROGRAM_VERIFY {
    int32 Row = 1;
    FuseArray_TDI.row = 1;
    Address.row = 1;

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    // Shift in row data
    SDR Row_Width TDI (FuseArray_TDI);
    SYNC;

    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    // Shift in PLD Program instruction
    SIR Instruction_Length TDI (PROGPLD);
    RUN_TEST TCK 3 DELAY PWP;

    // Shift in PLD Read instruction 
    SIR Instruction_Length TDI (READPLD);
    RUN_TEST TCK 3 DELAY PWV;
    SYNC;

    repeat Address_Length - 1 {
        // Shift in PLD column data instruction 
        SIR Instruction_Length TDI (DATAPLD);
        // Shift in data for next row and verify previous row at the same time
        SDR_VERIFY Row_Width TDI (FuseArray_TDI[Row+1])
                             TDO (FuseArray_TDI[Row]);
        Row = Row + 1;

        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        // Shift in address 
        ESDR 1 TDI (#0);

        // Shift in PLD Program instruction
        SIR Instruction_Length TDI (PROGPLD);
        RUN_TEST TCK 3 DELAY PWP;

        // Shift in PLD Read instruction 
        SIR Instruction_Length TDI (READPLD);
        RUN_TEST TCK 3 DELAY PWV;
        SYNC;
    }
    // Shift in PLD column data instruction 
    SIR Instruction_Length TDI (DATAPLD);
    // Verify Last Row by shifting in all one's into data register
    SDR_VERIFY Row_Width TDI (#1^Row_Width)
                         TDO (FuseArray_TDI[Row]);
    SYNC;
}

// created: spinti 04/16/2003
function PROGRAM_CFG {	
    datastream SavedFuseMap[1][ARCHITECH_LENGTH];
    int32 i = 1;
    ArchArray_TDI.row = 1; 
    Address_CFG.row = 1;
    SavedFuseMap[1] = ArchArray_TDI[1];
    SYNC;
    repeat 4 {
        // Shift in CFG Address instruction
        SIR Instruction_Length TDI (ADDCFG);
        // Shift in address 
        SDR 4 TDI (Address_CFG[i]);
		i = i + 1;
        // Shift in CFG Data instruction
        SIR Instruction_Length TDI (DATACFG);
        // Shift in row data
        SDR Arch_Row TDI (SavedFuseMap[1]);
        SavedFuseMap[1] = SavedFuseMap[1] >> Arch_Row;  
        // Shift in CFG Program instruction
        SIR Instruction_Length TDI (PROGCFG);
        RUN_TEST TCK 3 DELAY PWP;  
    } // repeat
    SYNC;
}

// created: spinti 04/28/2003
function PROGRAM_USERCODE {
    Usercode_TDI.row = 1;
    // Shift in Data Shift instruction 
    SIR Instruction_Length	TDI (SHIFTUES);
    SDR Usercode_Length	TDI	(Usercode_TDI[1]);
    // Goto Run Test Idle 
    SIR Instruction_Length	TDI (PROGUES);
    RUN_TEST TCK 3 DELAY PWP;
    SYNC;
}

// Verify Functions _____________________________________________
// created: spinti 04/16/2003
function FULL_ADDRESS_VERIFY {
    int32 Row = 1;
    FuseArray_TDI.row = 1;
    Address.row = 1;

    SIR Instruction_Length TDI (BYPASS);
    SDR 1 TDI (#0);
    SYNC;

    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    repeat Address_Length-1 {
        // Shift in PLD Read instruction 
        SIR Instruction_Length TDI (READPLD);
        RUN_TEST TCK 3 DELAY PWV;

        // Shift in PLD column data instruction 
        SIR Instruction_Length TDI (DATAPLD);
        // Verify Last Row by shifting in all one's into data register
        STATE IDLE;
        SDR_VERIFY Row_Width TDI (#1^Row_Width)
                             TDO (FuseArray_TDI[Row]);
        SYNC;

        Row = Row+1;
        Address[1] = Address[1] >> 1;
        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        // Shift in address 
        SDR Address_Length TDI (Address[1]);
    } // repeat
    Address[1] = #1@(#0^(Address_Length-1));

    // Shift in PLD Read instruction 
    SIR Instruction_Length TDI (READPLD);
    RUN_TEST TCK 3 DELAY PWV;

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    STATE IDLE;
    // Verify Last Row by shifting in all one's into data register
    SDR_VERIFY Row_Width TDI (#1^Row_Width)
                         TDO (FuseArray_TDI[Row]);

    SYNC;
}

// created: spinti 04/16/2003
function VERIFY {
    int32 Row = 1;
    FuseArray_TDI.row = 1;
    Address.row = 1;

    SIR Instruction_Length TDI (BYPASS);
    SDR 1 TDI (#0);
    SYNC;

    // Shift in PLD Address instruction
    SIR Instruction_Length TDI (ADDPLD);
    // Shift in address 
    SDR Address_Length TDI (Address[1]);

    repeat Address_Length-1 {
        // Shift in PLD Read instruction 
        SIR Instruction_Length TDI (READPLD);
        RUN_TEST TCK 3 DELAY PWV;

        // Shift in PLD column data instruction 
        SIR Instruction_Length TDI (DATAPLD);
        // Verify Last Row by shifting in all one's into data register
        STATE IDLE;
        SDR_VERIFY Row_Width TDI (#1^Row_Width)
                             TDO (FuseArray_TDI[Row]);
        SYNC;

        Row = Row+1;
        Address[1] = Address[1] >> 1;
        // Shift in PLD Address instruction
        SIR Instruction_Length TDI (ADDPLD);
        // Shift in address 
        ESDR 1 TDI (#0);
    } // repeat
    Address[1] = #1@(#0^(Address_Length-1));

    // Shift in PLD Read instruction 
    SIR Instruction_Length TDI (READPLD);
    RUN_TEST TCK 3 DELAY PWV;

    // Shift in PLD Data instruction
    SIR Instruction_Length TDI (DATAPLD);
    STATE IDLE;
    // Verify Last Row by shifting in all one's into data register
    SDR_VERIFY Row_Width TDI (#1^Row_Width)
                         TDO (FuseArray_TDI[Row]);
    SYNC;
}

// created: spinti 04/16/2003
function VERIFY_CFG {
    datastream SavedFuseMap[1][ARCHITECH_LENGTH];
    int32 i = 1;
    ArchArray_TDI.row = 1;
    Address_CFG.row = 1;
    SavedFuseMap[1] = ArchArray_TDI[1];
	
    repeat 4 {
        // Shift in CFG Address instruction
        SIR Instruction_Length TDI (ADDCFG);
        // Shift in address 
        SDR 4 TDI (Address_CFG[i]);
        
		i = i + 1;
        // Shift in CFG Read instruction
        SIR Instruction_Length TDI (READCFG);
        RUN_TEST TCK 3 DELAY PWV;

        // Shift in CFG Data instruction
        SIR Instruction_Length TDI (DATACFG);
        // Verify Last Row by shifting in all one's into data register
        SDR_VERIFY Arch_Row TDI (#1^Arch_Row)
                            TDO (SavedFuseMap[1]);
        SavedFuseMap[1] = SavedFuseMap[1] >> Arch_Row; 
        SYNC;       
    } // repeat
    SYNC;
}

// created: spinti 04/28/2003
function VERIFY_USERCODE {
    SYNC;
    Usercode_TDI.row = 1;
    // Shift in Read Usercode instruction 
    SIR Instruction_Length TDI (SHIFTUES);
    SDR_VERIFY Usercode_Length TDI  (#1^Usercode_Length)
                               TDO  (Usercode_TDI)
                               MASK (#1^Usercode_Length);
    SYNC;
}

// created: spinti 04/28/2003
function VERIFY_VERIFY_USERCODE {
    SYNC;
    Usercode_TDI.row = 1;
    // Shift in Read Usercode instruction 
    SIR Instruction_Length TDI (SHIFTUES);
    SDR_VERIFY Usercode_Length TDI  (#1^Usercode_Length)
                               TDO  (Usercode_TDI)
                               MASK (#0^Usercode_Length);
    SYNC;
}

// created: spinti 04/16/2003
function PROGRAM_SECURITY {
    // Shift in Program Security Fuse instruction
    SIR Instruction_Length TDI (PROGESF);
    RUN_TEST TCK 3 DELAY 50;
    SYNC;
}
function SYNCFUNCTION {
    SYNC;
}
]]>
</Script>
</SVF_Plus>
