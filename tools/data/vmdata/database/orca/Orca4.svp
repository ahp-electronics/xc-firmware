<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >

<!-- 
	10/27/03 Nguyen added support of Comment "!"
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<Instruction>
		BYPASS				= 0x3F;
		EXTEST	 			= 0x00;
		BSAMPLE	 			= 0x01;
		BPRELOAD				= 0x03;
		RUNBIST				= 0x04;
		IDCODE 				= 0x05;
		USERCODE 			= 0x06;
		ISC_ENABLE 			= 0x08;
		ISC_PROGRAM			= 0x09;
		ISC_NOOP			= 0x0A;
		ISC_DISABLE			= 0x0B;
		ISC_PROGRAM_USERCODE	= 0x0D;
		ISC_READ				= 0x0E;
		PLC_SCAN_RING1		= 0x11;
		PLC_SCAN_RING2		= 0x12;
		PLC_SCAN_RING3		= 0x13;
		RAM_WRITE			= 0x14;
		RAM_READ			= 0x15;
		SCAN1				= 0x19;
		SCAN2				= 0x1A;
		SCAN3				= 0x1B;
		SCAN4				= 0x1C;
		SCAN5				= 0x1D;
		SCAN6				= 0x1E;
		SCAN7				= 0x1F;
		SCAN8				= 0x20;
		SCAN9				= 0x21;
		SCAN10				= 0x22;
		SCAN11				= 0x23;
		SCAN12				= 0x24;
		SCAN13				= 0x25;
		SCAN14				= 0x26;
		SCAN15				= 0x27;
		SCAN16				= 0x28;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
</Data>
<Operation_List>
	"Read and Save"	=	"INIT, READ_ID, SAVE_ID, ENABLE, SAVE_ARRAY, SAVE_USERCODE, DISABLE";
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"INIT, READ_ID, SAVE_USERCODE";
	
	"Disable Only" = "	INIT 	! Initialize, 
	 			 	DISABLE ! Exit the programming mode"	;
	 			 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
						
	"Program,Verify" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
				 			DISABLE ! Exit the programming mode"	;
						
	"Program" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					ENABLE	! Enable the programming mode, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
		 			DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							ENABLE	! Enable the programming mode, 
							VERIFY_ONLY	! Verify Fuse Map, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "   INIT 	! Initialize"	;
	"Serial Program" = "	INIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	INIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
						READ_DONE_BIT 	! Read DONE Bit"	;


</Operation_List>
<Operation_List label="SingleSVFOperation">
	"Read and Save"	=	"SVFINIT, READ_ID, SVF_SAVE_ID, ENABLE, SVF_SAVE_ARRAY, SVF_SAVE_USERCODE, DISABLE";
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	 			 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
						
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
				 			DISABLE ! Exit the programming mode"	;
								 							 
	"Program" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					ENABLE	! Enable the programming mode, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
 			 		DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							VERIFY_ONLY	! Verify Fuse Map,  
							DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "   SVFINIT 	! Initialize"	;
	"Serial Program" = "	SVFINIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
						READ_DONE_BIT 	! Read DONE Bit"	;

</Operation_List>
<Operation_List label="TurboOperation">
	"Read and Save"	=	"INIT,SAVE_ARRAY,SAVE_USERCODE";
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"INIT, SAVE_USERCODE";			 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Program,Verify" = "	INIT 	! Initialize, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE"	;
	"Program" = "	INIT 	! Initialize, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							VERIFY_ONLY	! Verify Fuse Map"	;
	"Re-Initialize" = "   INIT 	! Initialize"	;
	"Serial Program" = "	INIT 	! Initialize,   
					SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	INIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
						READ_DONE_BIT 	! Read DONE Bit"	;


</Operation_List>
<Operation_List label="ChainSVFOperation">
	"Read and Save"	=	"INIT,SVF_SAVE_ARRAY,SVF_SAVE_USERCODE";
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, SVF_SAVE_USERCODE";				 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE"	;					 
	"Program" = "	SVFINIT 	! Initialize,  
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							VERIFY_ONLY	! Verify Fuse Map"	;
	"Re-Initialize" = "   SVFINIT 	! Initialize"	;
	"Serial Program" = "	SVFINIT 	! Initialize,    
					SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
						READ_DONE_BIT 	! Read DONE Bit"	;



	
</Operation_List>
<Script>
<![CDATA[

function INIT {
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IDLE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}


function SVFINIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IDLE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}
function PRELOAD {				
   ! Shift in Preload(0x03) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}
function SAMPLE {				
   ! Shift in Preload(0x03) instruction;
   SIR Instruction_Length TDI(BSAMPLE);
   STATE DRPAUSE;
   STATE IDLE;
}
function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Preload(0x03) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#0^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   Bscan[1] = SavedBScanTDO[1];	
   ! Shift in Preload(0x03) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, Bscan);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ! Shift in Preload(0x03) instruction;
   ENDDR DRPAUSE;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}
function ENABLE {
	! Shift in ISC ENABLE(0x08) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 32
						DELAY 1;
}

function DISABLE {
	! Shift in ISC DISABLE(0x0B) instruction;
	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 32
					  DELAY 1;
}
function READ_ID {
	! Shift in IDCODE(0x05) instruction;
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#0^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);
}
function SERIAL_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI);
    
}
function PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in ISC PROGRAM (0x09) instruction;
	SIR Instruction_Length	TDI (ISC_PROGRAM);
	RUN_TEST	IDLE TCK 64 DELAY 1;
	! Shift in  TOTAL_FUSE_MAP  Bits;
	SDR	TotalFuse		TDI	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
}
function PROGRAM_USERCODE {
	! Shift in ISC PROGRAM USERCODE(0x0D) instruction;
	SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 	20
				DELAY 	1;
	SDR Usercode_Length	TDI	(Usercode_TDI[1]);
}

// Verify Functions _____________________________________________
function VERIFY {
	! Shift in ISC READ (0x0E) instruction; 
	SIR Instruction_Length	TDI	(ISC_READ);
	
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
	
	SDR 24 TDI(#111111111000000010000000);
	
	SDR_VERIFY	Row_Width		TDI	(#1^Row_Width)
								TDO	(#1^Row_Width)
								MASK((#0^(Row_Width-8))@(#1^8));
					 
	SDR 32 TDI(#11111111111100001100000000110000);
	
	SDR_VERIFY	Row_Width		TDI	(#1^Row_Width)
								TDO	(#1^Row_Width)
								MASK((#0^(Row_Width-8))@(#1^7)@(#0^1));
	
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
}
function VERIFY_ONLY {
	FuseArray_TDI.row = 1;
	! Shift in ISC READ (0x0E) instruction;  
	SIR Instruction_Length	TDI	(ISC_READ);
	RUN_TEST	IDLE TCK 64 DELAY 1;
	ENDDR SHIFTDR;
	! Shift out 29 Dummy Bits;
	SDR 29 TDI(#0^29);
	ENDDR DRPAUSE;
	! Shift out  TOTAL_FUSE_MAP  Bits;
	SDR_VERIFY 	TotalFuse			TDI	(#0^TotalFuse)
									TDO	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 32 DELAY 1;
}
function VERIFY_USERCODE {
	IF (Usercode_TDI.row = 1)
	{
		! Shift in READ USERCODE(0x06) instruction; 
		SIR Instruction_Length TDI (USERCODE);
		SDR_VERIFY	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI);
	}
}

function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	! Shift in IDCODE(0x05) instruction;
	SIR Instruction_Length	TDI	(IDCODE);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SVF_SAVE_ID	{
	! Shift in IDCODE(0x05) instruction;
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}
function SAVE_ARRAY {
	datastream SavedFuseMap[1][TotalFuse];
	file NewFile = "FILE_SAVE";

	! Shift in ISC READ (0x0E) instruction;
	SIR Instruction_Length	TDI	(ISC_READ);
	RUN_TEST	IDLE TCK 64 DELAY 1;
	ENDDR SHIFTDR;
	! Shift out 29 Dummy Bits;
	SDR 29 TDI(#0^29);
	ENDDR DRPAUSE;
	! Shift out  TOTAL_FUSE_MAP  Bits;
	SDR 	TotalFuse			TDI	(#0^TotalFuse)
								TDO	(SavedFuseMap);
	RUN_TEST	IDLE TCK 32 DELAY 1;
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SVF_SAVE_ARRAY {
	! Shift in ISC READ (0x0E) instruction;
	SIR Instruction_Length	TDI	(ISC_READ);
	RUN_TEST	IDLE 	TCK 32
					 	DELAY 1;
	ENDDR SHIFTDR;
	! Shift out 29 Dummy Bits;
	SDR 29 TDI(#0^29);
	ENDDR DRPAUSE;		
	! Shift out  TOTAL_FUSE_MAP  Bits;	 		
	SDR_VERIFY	TotalFuse	TDI	(#0^TotalFuse)
							TDO	(#1^TotalFuse)
							MASK(#0^TotalFuse);
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
}
function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	! Shift in READ USERCODE(0x06) instruction; 
	SIR Instruction_Length	TDI (USERCODE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 	32
				DELAY 	1;
	// Shift in Data Shift instruction 
	SDR	Usercode_Length	TDI(#0^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SVF_SAVE_USERCODE {
	! Shift in READ USERCODE(0x06) instruction; 
	SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
								TDO	(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
}
function READ_DONE_BIT {
	datastream SavedDONE_BIT[1][1];
	file	NewFile = "FILE_SAVE"; 
	SDR 1	TDI	(0x00)
		TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}

]]>
</Script>
</SVF_Plus>