<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>

<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1">
	</Interface>
</Setup>

<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	
	<Instruction>
		BYPASS				= 0x07;
		EXTEST	 			= 0x00;
		BSAMPLE	 			= 0x04;
		IDCODE 				= 0x03;
		USERCODE 			= 0x01;
		PSR2				= 0x05;
		RAM_WRITE			= 0x02;
		RAM_READ			= 0x06;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
</Data>
<Operation_List label="TurboOperation0">
	"Program,Verify" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION,
							PROGRAM	[SEQUENTIAL]! Program Fuse Map,
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION,
							VERIFY	[SEQUENTIAL]! Verify Fuse Map,
							SYNCFUNCTION,
							SYNCFUNCTION,			
							SYNCFUNCTION,
							SYNCFUNCTION, 
		 			 		SYNCFUNCTION"	;
	"Program" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					SYNCFUNCTION,
					SYNCFUNCTION, 
					SYNCFUNCTION,
					PROGRAM	[SEQUENTIAL]! Program Fuse Map,
					SYNCFUNCTION,
					SYNCFUNCTION,
					SYNCFUNCTION,
					SYNCFUNCTION,
					SYNCFUNCTION, 
					SYNCFUNCTION, 
					SYNCFUNCTION, 
 			 		SYNCFUNCTION"	;
	"Serial Program" = "	INIT 	! Initialize, 
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION, 
							SYNCFUNCTION,
							PROGRAM	[SEQUENTIAL]! Program Fuse Map,
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION,
							SYNCFUNCTION, 
							SYNCFUNCTION, 
							SYNCFUNCTION, 
		 			 		SYNCFUNCTION"	;

	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SYNCFUNCTION,
						SYNCFUNCTION" ;
	"Serial Enable Only" = "	INIT 	! Initialize, 
						SYNCFUNCTION,
						SYNCFUNCTION,
						SYNCFUNCTION" ;
	"Disable Only" = "	INIT 	! Initialize, 
						SYNCFUNCTION, 
						SYNCFUNCTION"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
								SYNCFUNCTION, 
								SYNCFUNCTION"	;

</Operation_List>
<Script>
<![CDATA[
function INIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR IDLE;
	ENDIR IDLE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
	SYNC	BYPASS_INFO	INSTRUCTION 3 0x07
						DATA 1 0x00 ;
}
function READ_ID {
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length 	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (DEVICE_ID_MASK);
	SYNC;
}
function PROGRAM {
	FuseArray_TDI.row = 1;
	// Load in program instruction with auto increment
	SIR Instruction_Length	TDI (RAM_WRITE);
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
	// Shift in row data 
	SDR	TotalFuse	TDI	(FuseArray_TDI[1]);
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
	SYNC;
}
function VERIFY {
	// Shift Verify Instruction 
	SIR Instruction_Length	TDI	(RAM_READ);
	
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
	
	SDR 24 TDI(#111111111000000010000000);
	
	SDR_VERIFY	Row_Width		TDI	(#1^Row_Width)
								TDO	(#1^Row_Width)
								MASK((#0^(Row_Width-8))@(#1^8));
					 
	SDR 32 TDI(#11111111111100001100000000110000);
	
	SDR_VERIFY	Row_Width		TDI	(#1^Row_Width)
								TDO	(#1^Row_Width)
								MASK((#0^(Row_Width-8))@(#1^7)@(#0^1));
	
	RUN_TEST	IDLE TCK 32
					 DELAY 1;
	SYNC;
}
function SYNCFUNCTION {
	SYNC;
}
]]>
</Script>
</SVF_Plus>