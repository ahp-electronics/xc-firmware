<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<!-- 
	10/27/03 Nguyen added support of Comment "!"
	05/25/04 Nguyen added support of Skipping All 1s Row Programming
	08/04/04 Nguyen added back the delay on ENABLE function
	08/09/04 Nguyen took out support of Skipping All 1s Row Programming
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>

<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1">
	</Interface>
</Setup>

<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	
	<Instruction>
		EXTEST  = 0x00;
		IDCODE	= 0x01;
		BPRELOAD 	= 0x02;
		PROG_MODE 	= 0x0F;
		ROW 	= 0x03;
		COLUMN 	= 0x04;
		ERASE_ALL 	= 0x05;
		PROGRAM_INST = 0x06;
		VERIFY_INST	= 0x07;
		SECURITY1 = 0x08;
		HIGHZ	= 0x11;
		USERCODE = 0x10;
		BYPASS	= 0x3F;
		CAPTURE_INST = 0x01;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
</Data>

<Operation_List>
	"Read and Save JEDEC"	=	"INIT, SAVE_ID, SAVE_USERCODE, IO_STATE, ENABLE, SAVE_ARRAY, SAVE_EFUSE, EXIT_DISABLE";
	"Calculate Checksum"	=	"INIT, SAVE_ID, SAVE_USERCODE, IO_STATE, ENABLE, SAVE_ARRAY, SAVE_EFUSE, EXIT_DISABLE";
	"Read and Save"	=	"INIT, SAVE_ID, SAVE_USERCODE, IO_STATE, ENABLE, SAVE_ARRAY, SAVE_EFUSE, EXIT_DISABLE";
	"Calculate Data CRC"	=	"INIT, SAVE_ID, SAVE_USERCODE, IO_STATE, ENABLE, SAVE_ARRAY, SAVE_EFUSE, EXIT_DISABLE";
		
	"Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
								PROGRAM_EFUSE ! Program Efuse row,
								FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map, 
								VERIFY_EFUSE ! Verify Efuse row,
								EXIT_VERIFY_USERCODE !Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode";
	
	"Erase,Program,Verify,Secure"	=	"	INIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											IO_STATE ! Program Bscan register,
											ENABLE	! Enable the programming mode, 
											ERASE	! Erase the device, 
											FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
											PROGRAM_EFUSE ! Program Efuse row,
											FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map,
											VERIFY_EFUSE ! Verify Efuse row,
											PROGRAM_SECURITY ! Secure device, 
											EXIT_VERIFY_USERCODE !Verify USERCODE,
						 			 		DISABLE ! Exit the programming mode";
	"Program Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
							FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
							PROGRAM_EFUSE ! Program Efuse row,
		 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map,
							VERIFY_EFUSE ! Verify Efuse row,
							EXIT_VERIFY_USERCODE !Verify USERCODE,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	"Display USERCODE"	=	"INIT, 
						 READ_ID, 
						SAVE_USERCODE";

	"Read and Save USERCODE"	=	"INIT, SAVE_USERCODE";
	"Verify USERCODE"	=	"INIT, READ_ID, EXIT_VERIFY_USERCODE";
	"Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register, 
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
		 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Re-Initialize" = "	INIT 	! Initialize,  
						ENABLE	! Enable the programming mode,
						ERASE	! Erase the device, 
						FULL_ADDRESS_PROGRAM	! Full Address Program initial Fuse Map,
						PROGRAM_EFUSE ! Program initial Efuse row,
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	 	
</Operation_List>
<Operation_List label="SingleSVFOperation">
	"Read and Save JEDEC"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									SVF_SAVE_USERCODE	! Read USERCODE, 
									IO_STATE ! Program Bscan register,
									ENABLE	! Enable the programming mode, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
				 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Calculate Checksum"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									SVF_SAVE_USERCODE	! Read USERCODE, 
									IO_STATE ! Program Bscan register,
									ENABLE	! Enable the programming mode, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
				 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Read and Save"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									SVF_SAVE_USERCODE	! Read USERCODE, 
									IO_STATE ! Program Bscan register,
									ENABLE	! Enable the programming mode, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
				 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Calculate Data CRC"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									SVF_SAVE_USERCODE	! Read USERCODE, 
									IO_STATE ! Program Bscan register,
									ENABLE	! Enable the programming mode, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
				 			 		EXIT_DISABLE ! Exit the programming mode"	;
		 			 		
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
								PROGRAM_EFUSE ! Program Efuse row,
								FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map,
								VERIFY_EFUSE ! Verify Efuse row,
								EXIT_VERIFY_USERCODE !Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode";
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											IO_STATE ! Program Bscan register,
											ENABLE	! Enable the programming mode, 
											ERASE	! Erase the device, 
											FULL_ADDRESS_PROGRAM	! Program Fuse Map,
											PROGRAM_EFUSE ! Program Efuse row,
											FULL_ADDRESS_VERIFY		! Verify Fuse Map, 
											VERIFY_EFUSE ! Verify Efuse row, 
											PROGRAM_SECURITY ! Secure device,
											EXIT_VERIFY_USERCODE !Verify USERCODE,
						 			 		DISABLE ! Exit the programming mode";
	"Program Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
							FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
							PROGRAM_EFUSE ! Program Efuse row, 
		 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map, 
							VERIFY_EFUSE ! Verify Efuse row,
							EXIT_VERIFY_USERCODE !Verify USERCODE,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT	! Initialize,
					 SVF_SAVE_ID	! Read the IDCODE";
	"Display USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SVF_SAVE_USERCODE		! Read USERCODE"	;
	"Read and Save USERCODE"	=	"INIT, 
									 SVF_SAVE_USERCODE !Read USERCODE";
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE !Verify USERCODE"	;
	"PreVerify USERCODE"	=	"INIT 	! Initialize, 
								VERIFY_USERCODE !Verify USERCODE"	;
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register, 
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
		 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "	SVFINIT 	! Initialize, 
						ENABLE	! Enable the programming mode, 
						ERASE	! Erase the device, 
						FULL_ADDRESS_PROGRAM	! Full Address Program initial Fuse Map,
						PROGRAM_EFUSE ! Program initial Efuse row,
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	 
</Operation_List>
<Operation_List label="TurboOperation">
	"Read and Save JEDEC"	=	"INIT, SAVE_ARRAY, SAVE_EFUSE";
	"Calculate Checksum"	=	"INIT, SAVE_ARRAY, SAVE_EFUSE, SAVE_USERCODE";
	"Read and Save"	=	"INIT, SAVE_ARRAY, SAVE_EFUSE";
	"Calculate Data CRC"	=	"INIT, SAVE_ARRAY, SAVE_EFUSE, SAVE_USERCODE";
	"Erase,Program,Verify" = "	INIT 	! Initialize, 
								ERASE	! Erase the device, 
								FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
								PROGRAM_EFUSE ! Program Efuse row,
								FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map,
								VERIFY_EFUSE ! Verify Efuse row";
	"Erase,Program,Verify,Secure"	=	"	INIT 	! Initialize, 
											ERASE	! Erase the device, 
											FULL_ADDRESS_PROGRAM	! Program Fuse Map,
											PROGRAM_EFUSE ! Program Efuse row,
											FULL_ADDRESS_VERIFY		! Verify Fuse Map, 
											VERIFY_EFUSE ! Verify Efuse row, 
						 			 		PROGRAM_SECURITY ! Secure device";
	"Program Only"	=	"	INIT 	! Initialize, 
							ERASE	! Erase the device, 
							FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
							PROGRAM_EFUSE ! Program Efuse row"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							ENABLE	! Enable the programming mode, 
							FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map, 
							VERIFY_EFUSE ! Verify Efuse row"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"   INIT	! Initialize,
	                    READ_ID	! Check the IDCODE,
					    SAVE_ID	! Read the IDCODE";
	"Display USERCODE"	=	"INIT, READ_ID, SAVE_USERCODE";
	"Read and Save USERCODE"	=	"INIT, 
									SAVE_USERCODE !Read USERCODE";
	"Verify USERCODE"	=	"INIT,
							 VERIFY_USERCODE ! Verify USERCODE";
	"Erase Only"	=	"	INIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Disable,Verify_usercode" = "	INIT 	! Initialize, 
									EXIT_VERIFY_USERCODE !Verify USERCODE,
	 			 					DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "	INIT 	! Initialize,  
						ERASE	! Erase the device,
						FULL_ADDRESS_PROGRAM	! Full Address Program initial Fuse Map,
						PROGRAM_EFUSE ! Program initial Efuse row"	;
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
						ENABLE	! Enable the programming mode"	;
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	 
</Operation_List>
<Operation_List label="ChainSVFOperation">
	"Read and Save JEDEC"	=	"	SVFINIT 	! Initialize, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row"	;
	"Calculate Checksum"	=	"	SVFINIT 	! Initialize, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
									SVF_SAVE_USERCODE ! Read USERCODE"	;
	"Read and Save"	=	"	SVFINIT 	! Initialize, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row"	;
	"Calculate Data CRC"	=	"	SVFINIT 	! Initialize, 
									SVF_SAVE_ARRAY ! Read Fuse Map,
									SVF_SAVE_EFUSE ! Read Efuse row,
									SVF_SAVE_USERCODE ! Read USERCODE"	;
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize,
								ERASE	! Erase the device, 
								FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
								PROGRAM_EFUSE ! Program Efuse row,
								FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map,
								VERIFY_EFUSE ! Verify Efuse row";
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize,
											ERASE	! Erase the device, 
											FULL_ADDRESS_PROGRAM	! Program Fuse Map,
											PROGRAM_EFUSE ! Program Efuse row,
											FULL_ADDRESS_VERIFY		! Verify Fuse Map, 
											VERIFY_EFUSE ! Verify Efuse row, 
						 			 		PROGRAM_SECURITY ! Secure device";
	"Program Only"	=	"	SVFINIT 	! Initialize, 
							ERASE	! Erase the device, 
							FULL_ADDRESS_PROGRAM	! Full Address Program Fuse Map,
							PROGRAM_EFUSE ! Program Efuse row"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							FULL_ADDRESS_VERIFY	! Full Address Verify Fuse Map, 
							VERIFY_EFUSE ! Verify Efuse row";
	"Display ID" = 	"SVFINIT	! Initialize,
					 READ_ID	! Check the IDCODE, 
					 SVF_SAVE_ID	! Read the IDCODE";
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display USERCODE"	=	"	SVFINIT 	! Initialize, 
								SVF_SAVE_USERCODE		! Read USERCODE"	;
	"Read and Save USERCODE"	=	"INIT, 
									 SVF_SAVE_USERCODE !Read USERCODE";
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize,
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE !Verify USERCODE"	;
	"PreVerify USERCODE"	=	"INIT 	! Initialize, 
								VERIFY_USERCODE !Verify USERCODE"	;
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		EXIT_DISABLE ! Exit the programming mode"	;
	"Disable,Verify_usercode" = "	SVFINIT 	! Initialize, 
									EXIT_VERIFY_USERCODE !Verify USERCODE,
	 			 					DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "	SVFINIT 	! Initialize,
						ERASE	! Erase the device,
						FULL_ADDRESS_PROGRAM	! Full Address Program initial Fuse Map,
						PROGRAM_EFUSE ! Program initial Efuse row"	;
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
						ENABLE	! Enable the programming mode"	;
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	 
</Operation_List>
<Script>
<![CDATA[
function INIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH;
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR IDLE;
	ENDIR IDLE;
	FREQUENCY 9E5 HZ;
	STATE IDLE;
}

function SVFINIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH;
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR IDLE;
	ENDIR IDLE;
	FREQUENCY 9E5 HZ;
	STATE IDLE;
}

function PRELOAD {				
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}
function INI_PRELOAD {				
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#0^BSCAN_Length);
}
function SAMPLE {				
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}
function INI_SAMPLE {				
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}
function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#0^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   Bscan[1] = SavedBScanTDO[1];	
   ! Shift in Preload(0x02) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, Bscan);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ! Shift in Preload(0x02) instruction;
   ENDDR DRPAUSE;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}

function ENABLE {
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR Instruction_Length TDI (PROG_MODE);
	RUN_TEST	TCK 3
				DELAY 20;
	! Shift in Password(0x08);
	SDR 	5 TDI (08);
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length	TDI (ROW);
	// Prog Init/shift row all 0s 
	SDR	Address_Length	TDI (#0^Address_Length);
}

function DISABLE {
	STATE IDLE;
}

function EXIT_DISABLE {
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x0C);
	SDR 	5 TDI (0x0C);
	STATE IDLE;
}

function READ_ID {
	! Shift in IDCODE(0x01) instruction;
	SIR  Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length 	TDI (#0^ID_Length)
							TDO	(IDTDI[1])
							MASK (DEVICE_ID_MASK);
}

function VERIFY_ERASE {
	Address.row = 1;
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length TDI (ROW);
	SDR Address_Length TDI(#1^Address_Length);
	! Shift in ERASE ALL(0x05) instruction;
	SIR_VERIFY Instruction_Length TDI (ERASE_ALL)
						          TDO (CAPTURE_INST);
	RUN_TEST	TCK 3
				DELAY PWE;
	! Shift in ROW(0x03) instruction;
	SIR_VERIFY Instruction_Length TDI (ROW)
						          TDO (CAPTURE_INST);
	SDR Address_Length TDI (Address[1]);

	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length TDI (COLUMN);
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);	
	
	SDR_VERIFY Row_Width TDI(#0^Row_Width)
						 TDO(#1^Row_Width);
	
}

function ERASE {
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length TDI (ROW);
	SDR Address_Length TDI(#1^Address_Length);
	! Shift in ERASE ALL(0x05) instruction;
	SIR Instruction_Length TDI (ERASE_ALL);
	RUN_TEST	TCK 3
				DELAY PWE;
	
}

// Program Functions _____________________________________________
function PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;

	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length	TDI (ROW);
	! Prog Init/shift row all 0s; 
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length	TDI (COLUMN);
	! Prog Init/shift col all 0s;
	SDR	Row_Width	TDI (#0^Row_Width);
	! Shift in PROGRAM(0x06) instruction;
	SIR Instruction_Length	TDI (PROGRAM_INST);
	RUN_TEST	TCK 3
				DELAY PWP;
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length	TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length	TDI (Address);
	// Program the rest of the device
	repeat Address_Length -1{
		! Shift in COLUMN(0x04) instruction; 
		SIR Instruction_Length 	TDI (COLUMN);
		! Shift in Row = RowCount;
		SDR	Row_Width	TDI	(FuseArray_TDI);
		! Shift in PROGRAM(0x06) instruction;
		SIR Instruction_Length	TDI (PROGRAM_INST);
		// Goto Run Test Idle
		RUN_TEST	TCK 	3
					DELAY 	PWP;
		! Shift in ROW(0x03) instruction; 
		SIR Instruction_Length	TDI (ROW);
		// Exclusive Shift address by one bit 
		ESDR	1	TDI (#0);
		RowCount = RowCount + 1;
	} // repeat
	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length 	TDI (COLUMN);
	! Shift in Row = RowCount;
	SDR	Row_Width	TDI	(FuseArray_TDI);
	! Shift in PROGRAM(0x06) instruction;
	SIR Instruction_Length	TDI (PROGRAM_INST);
	// Goto Run Test Idle
	RUN_TEST	TCK 	3
				DELAY 	PWP;
}

function PROGRAM_EFUSE {
	int32	RowCount = 1;
	! Shift in ROW(0x03) instruction;
	SIR 	Instruction_Length TDI (ROW);
	! Prog Init/shift row all 0s; 
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x09);
	SDR 	5 TDI (09);
	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length	TDI (COLUMN);
	! Shift in Efuse Data Row = RowCount;
	SDR	Row_Width	TDI	(EFuseArray_TDI);
	! Shift in PROGRAM(0x06) instruction;
	SIR Instruction_Length	TDI (PROGRAM_INST);
	// Goto Run Test Idle
	RUN_TEST	TCK 	3
				DELAY 	PWP;
	
}
function PROGRAM_SECURITY {
	! Shift in SECURITY(0x08) instruction; 
	SIR Instruction_Length	TDI	(SECURITY1);
	RUN_TEST	TCK 	3
				DELAY 	PWP;
}


// Verify Functions _____________________________________________
function VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_TDO.row = 1;
	FuseArray_MASK.row = 1;

	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	RUN_TEST	TCK 3
				DELAY 20;
	! Shift in Password(0x08);
	SDR 	5 TDI (08);
	
	! Shift in ROW(0x03) instruction; 
	SIR Instruction_Length TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length TDI (Address[1]);

	// Verify the device 
	repeat Address_Length -1{
		! Shift in COLUMN(0x04) instruction; 
		SIR Instruction_Length TDI (COLUMN);
		SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
		! Shift in VERIFY(0x07) instruction;
		SIR Instruction_Length TDI (VERIFY_INST);	
		RUN_TEST	TCK 3 DELAY 2E-3;
		! Shift out Row = RowCount;
		SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
								TDO	(FuseArray_TDO)
								MASK (FuseArray_MASK);

		! Shift in ROW(0x03) instruction;
		SIR Instruction_Length TDI (ROW);
		// Exclusive Shift address by one bit 
		ESDR	1	TDI (#0);
		RowCount = RowCount + 1;
	}
	! Shift in COLUMN(0x04) instruction;  
	SIR Instruction_Length TDI (COLUMN);
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);	
	! Shift out Row = RowCount;
	SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
							TDO	(FuseArray_TDO)
							MASK (FuseArray_MASK);
}
function EXIT_VERIFY_USERCODE {
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x0C);
	SDR 	5 TDI (0x0C);
	! Shift in READ USERCODE(0x10) instruction;
	SIR Instruction_Length	TDI (USERCODE);
	RUN_TEST	TCK 3
				DELAY PWV;
	! Shift in READ USERCODE(0x10) instruction;
	SDR_VERIFY	Usercode_Length	TDI(#0^Usercode_Length)
									TDO(Usercode_TDO)
									MASK(#1^Usercode_Length);
}
function VERIFY_USERCODE {
	! Shift in READ USERCODE(0x10) instruction;
	SIR Instruction_Length	TDI (USERCODE);
	RUN_TEST	TCK 3
				DELAY PWP;
	SDR_VERIFY	Usercode_Length	TDI(#0^Usercode_Length)
									TDO(Usercode_TDO)
									MASK(#1^Usercode_Length);
}
function VERIFY_EFUSE {
	int32	RowCount = 1;
	! Shift in ROW(0x03) instruction; 
	SIR 	Instruction_Length TDI (ROW);
	! Prog Init/shift row all 0s; 
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x09);
	SDR 	5 TDI (09);
	! Shift in COLUMN(0x04) instruction; 
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
	! Shift in Efuse Data Row = RowCount;
	SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
							TDO	(EFuseArray_TDO)
							MASK (EFuseArray_MASK);
}
// Read n Save Functions _____________________________________________ 
function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in IDCODE(0x01) instruction; 
	SIR Instruction_Length	TDI	(IDCODE);
	// Shift out ID 
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SVF_SAVE_ID	{
	! Shift in IDCODE(0x01) instruction;
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length 	TDI (#0^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}
function SAVE_ARRAY {
	int32	RowCount = 1;
	datastream SavedFuseMap[Address_Length][Row_Width];
	file NewFile = "FILE_SAVE";
	Address.row = 1;
	
	! Shift in ROW(0x03) instruction; 
	SIR Instruction_Length TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length TDI (Address[1]);

	// Verify the device 
	repeat Address_Length -1 {
		! Shift in COLUMN(0x04) instruction; 
		SIR Instruction_Length TDI (COLUMN);
		// init col for row
		SDR Row_Width TDI((#1)@(#0^(Row_Width-1)));
		
		! Shift in VERIFY(0x07) instruction;
		SIR Instruction_Length TDI (VERIFY_INST);
		
		! Shift out Row = RowCount;
		SDR			Row_Width	TDI	(#1@(#0^(Row_Width-1)))
								TDO	(SavedFuseMap);

		! Shift in ROW(0x03) instruction; 
		SIR Instruction_Length TDI (ROW);
		// Exclusive Shift address by one bit 
		ESDR	1	TDI (#0);
		RowCount = RowCount +1;
	}
	! Shift in COLUMN(0x04) instruction;  
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI((#1)@(#0^(Row_Width-1)));
		
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
		
	! Shift out Row = RowCount;
	SDR			Row_Width	TDI	(#1@(#0^(Row_Width-1)))
				TDO	(SavedFuseMap);

	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SVF_SAVE_ARRAY {
	int32	RowCount = 1;
	Address.row = 1;
	
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length TDI (Address[1]);

	// Verify the device 
	repeat Address_Length -1{
		! Shift in COLUMN(0x04) instruction; 
		SIR Instruction_Length TDI (COLUMN);
		// init col for row
		SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
		! Shift in VERIFY(0x07) instruction;
		SIR Instruction_Length TDI (VERIFY_INST);
		! Shift Out Data Row = RowCount;
		SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
								TDO	(#1^Row_Width)
								MASK (#0^Row_Width);

		! Shift in ROW(0x03) instruction; 
		SIR Instruction_Length	TDI	(ROW);
		// Shift Address to the left by 1 bit
		Address[1] = Address[1] >> 1;
		// Shift Full address
		SDR	Address_Length	TDI	(Address[1]);
		RowCount = RowCount +1;
	}
	! Shift in COLUMN(0x04) instruction; 
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
	! Shift Out Data Row = RowCount;
	SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
							TDO	(#1^Row_Width)
							MASK (#0^Row_Width);
	Address[1] = #1@(#0^(Address_Length-1));
}
function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	
	! Shift in BYPASS(0x3F) instruction;
	SIR Instruction_Length	TDI (BYPASS);
	! Shift in READ USERCODE(0x10) instruction;
	SIR Instruction_Length	TDI (USERCODE);
	RUN_TEST	TCK 3
				DELAY PWP;
	SDR	Usercode_Length	TDI(#0^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SVF_SAVE_USERCODE {
	! Shift in BYPASS(0x3F) instruction;
	SIR Instruction_Length	TDI (BYPASS);
	! Shift in READ USERCODE(0x10) instruction;
	SIR Instruction_Length	TDI (USERCODE);
	RUN_TEST	TCK 3
				DELAY PWP;
	SDR_VERIFY	Usercode_Length	TDI(#0^Usercode_Length)
									TDO(#0^Usercode_Length)
									MASK(#0^Usercode_Length);
}
function SAVE_EFUSE {
	int32	RowCount = 1;
	datastream SavedEfuse[1][Row_Width];
	file NewFile = "FILE_SAVE";
	! Shift in ROW(0x03) instruction;
	SIR 	Instruction_Length TDI (ROW);
	! Prog Init/shift row all 0s ;
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x09);
	SDR 	5 TDI (09);
	! Shift in COLUMN(0x04) instruction; 
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
	! Shift Out Efuse Data Row = RowCount; 
	SDR			Row_Width	TDI	(#0^Row_Width)
							TDO	(SavedEfuse);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (EFuseArray_TDI, SavedEfuse);
	fclose 	NewFile;					
}
function SVF_SAVE_EFUSE {
	int32	RowCount = 1;
	! Shift in ROW(0x03) instruction;
	SIR 	Instruction_Length TDI (ROW);
	! Prog Init/shift row all 0s ;
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	! Shift in Password(0x09);
	SDR 	5 TDI (09);
	! Shift in COLUMN(0x04) instruction; 
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
	! Shift Out Efuse Data Row = RowCount; 
	SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
							TDO	(#1^Row_Width)
							MASK (#0^Row_Width);
}
////////////////////////////////////////////////////////////////////
// Full Address operations
// Program Functions _____________________________________________
function FULL_ADDRESS_PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	Address.row = 1;

	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length	TDI (ROW);
	! Prog Init/shift row all 0s ;
	SDR	Address_Length	TDI (#0^Address_Length);
	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length	TDI (COLUMN);
	! Prog Init/shift col all 0s;
	SDR	Row_Width	TDI (#0^Row_Width);
	! Shift in PROGRAM(0x06) instruction;
	SIR Instruction_Length	TDI (PROGRAM_INST);
	RUN_TEST	TCK 3
				DELAY PWP;
	
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length	TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length	TDI (Address);
	// Program the rest of the device
	repeat Address_Length -1 {
		! Data Row = RowCount;
		! Shift in COLUMN(0x04) instruction; 
		SIR Instruction_Length 	TDI (COLUMN);
		! Shift in Data;
		SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
		! Shift in PROGRAM(0x06) instruction;
		SIR Instruction_Length	TDI (PROGRAM_INST);
		// Goto Run Test Idle
		RUN_TEST	TCK 	3 DELAY 	PWP;
		! Shift in ROW(0x03) instruction; 
		SIR Instruction_Length	TDI	(ROW);
		// Shift Address to the left by 1 bit
		Address[1] = Address[1] >> 1;
		// Shift Full address
		SDR	Address_Length	TDI	(Address[1]);
		RowCount = RowCount +1;
	} // repeat
	! Data Row = RowCount;
	! Shift in COLUMN(0x04) instruction;
	SIR Instruction_Length 	TDI (COLUMN);
	! Shift in Data;
	SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
	! Shift in PROGRAM(0x06) instruction;
	SIR Instruction_Length	TDI (PROGRAM_INST);
	// Goto Run Test Idle
	RUN_TEST	TCK 	3 DELAY 	PWP;
	Address[1] = #1@(#0^(Address_Length-1));
}

// Verify Functions _____________________________________________
function FULL_ADDRESS_VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_TDO.row = 1;
	FuseArray_MASK.row = 1;
	Address.row = 1;
	
	! Shift in PROGRAM MODE(0x0F) instruction;
	SIR 	Instruction_Length TDI (PROG_MODE);
	RUN_TEST	TCK 3
				DELAY 20;
	! Shift in Password(0x08);
	SDR 	5 TDI (08);
	
	! Shift in ROW(0x03) instruction;
	SIR Instruction_Length TDI (ROW);
	// Shift in intial address 
	SDR	Address_Length TDI (Address[1]);

	// Verify the device 
	repeat Address_Length -1{
		! Shift in COLUMN(0x04) instruction;
		SIR Instruction_Length TDI (COLUMN);
		// init col for row
		SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
		! Shift in VERIFY(0x07) instruction;
		SIR Instruction_Length TDI (VERIFY_INST);
		! Shift Out Data Row = RowCount;
		SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
								TDO	(FuseArray_TDO)
								MASK (FuseArray_MASK);

		! Shift in ROW(0x03) instruction;
		SIR Instruction_Length	TDI	(ROW);
		// Shift Address to the left by 1 bit
		Address[1] = Address[1] >> 1;
		// Shift Full address
		SDR	Address_Length	TDI	(Address[1]);
		RowCount = RowCount +1;
	}
	! Shift in COLUMN(0x04) instruction; 
	SIR Instruction_Length TDI (COLUMN);
	// init col for row
	SDR Row_Width TDI(#1@(#0^(Row_Width-1)));
	! Shift in VERIFY(0x07) instruction;
	SIR Instruction_Length TDI (VERIFY_INST);
	! Shift Out Data Row = RowCount;
	SDR_VERIFY	Row_Width	TDI	(#1@(#0^(Row_Width-1)))
							TDO	(FuseArray_TDO)
							MASK (FuseArray_MASK);
	Address[1] = #1@(#0^(Address_Length-1));
}

]]>
</Script>
</SVF_Plus>