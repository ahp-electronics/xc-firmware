<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<!-- 
	05/04/10 Nguyen Created
	03/02/11 Nguyen replace the DISABLE with DISABLE_REFRESH for the FLASH read operations (CR_52486)
	03/10/12 Nguyen updated the FLASH_ENABLE function to do the SRAM erase first for all OFFLINE operations (CR_56189)
	10/05/12 Nguyen removed "DISABLE" on the "XFLASH Program and TransFR" operation based on requested CR 58387
	
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<MDRDelay value="MDR_DELAY"/>
	<Instruction>
		EXTEST	 			= 0x15;
		EXTEST_PULSE        = 0x2D;
		EXTEST_TRAIN        = 0x2E;
		INTEST              = 0x2C;
		CLAMP               = 0x78;
		HIGHZ               = 0x18;
		LSC_ENABLE_X        = 0x74;
		ISC_DISABLE         = 0x26;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
	<DataField	name="ISPID">
		<FieldBlock	row_width="8">
			ISP_ID
		</FieldBlock>
	</DataField>
	<DataField    name="I2C_Address_CFG">
        <FieldBlock    row_width="14">
            0x00,
            0x10,
            0x08,
            0x18,
            0x04,
            0x14,
            0x0C,
            0x1C,
            0x02,
            0x12,
            0x0A,
            0x1A,
            0x06,
            0x16
        </FieldBlock>
    </DataField>
    <DataField    name="I2C_Address_FaultLog">
        <FieldBlock    row_width="16">
            0x00,
            0xE0,
            0x70,
            0xA8,
            0x38,
            0xC4,
            0x54,
            0x8C,
            0x1C,
            0xFC,
            0x62,
            0xB2,
            0x2A,
            0xDA,
            0x46,
            0x96
        </FieldBlock>
    </DataField>
    <DataField    name="Address_CFG">
        <FieldBlock    row_width="14">
            0x1000,
            0x1008,
            0x1010,
            0x1018,
            0x1020,
            0x1028,
            0x1030,
            0x1038,
            0x1040,
            0x1048,
            0x1050,
            0x1058,
            0x1060,
            0x1068
        </FieldBlock>
    </DataField>
</Data>
<Operation_List>	
	"I2C Erase,Program,Verify" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 
	"I2C I2CSA Erase Only" =	"ASC_INIT 	! Initialize, 
								 ASCREAD_ID	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_INIT 	! Initialize, 
								 ASCREAD_ID	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
											 			 			 		 	
	"I2C Program" =	 	"ASC_INIT 	! Initialize, 
						 ASCREAD_ID	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	"I2C Background Program" =	 	"ASC_INIT 	! Initialize, 
						 ASCREAD_ID	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = "ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = "ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC,
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																											 							  
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	
	"I2C Background Only" = 	"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC,
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																											 							  
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 						 
	"I2C Read Status Register" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,	
							     ASCSAVE_ID	,	
								 ASC_SAVE_STATUS";
								 
	"I2C Background Read Status Register" = "ASC_INIT 	! Initialize, 
										     ASCREAD_ID	! Check the IDCODE,	
										     ASCSAVE_ID	,	
											 ASC_SAVE_STATUS";
								 								 
	"I2C Verify ID" = "ASC_INIT 	! Initialize, 
					   ASCREAD_ID	! Check the IDCODE";
					     
	"I2C Background Verify ID" = "ASC_INIT 	! Initialize, 
					     		  ASCREAD_ID	! Check the IDCODE";
					     
	"I2C Display ID" = "ASC_INIT 	! Initialize, 
					    ASCSAVE_ID";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_INIT 	! Initialize, 
					    ASCSAVE_ID";
					    
	"I2C Refresh" = 		"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Read Shadow Registers" = "ASC_INIT 	! Initialize, 
								   ASCREAD_ID	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	
	"I2C Background Read Shadow Registers" = "ASC_INIT 	! Initialize, 
								   ASCREAD_ID	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
								   					 
	"I2C Read FaultLog Registers" = "ASC_INIT 	! Initialize, 
								     ASCREAD_ID	! Check the IDCODE,	
								     ASCSAVE_ID,
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_REGISTERS,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = "ASC_INIT 	! Initialize, 
								     ASCREAD_ID	! Check the IDCODE,	
								     ASCSAVE_ID,
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_REGISTERS,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C Read FaultLog Memory" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_SAVE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_SAVE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 
	"I2C FaultLog Erase Only" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 
	"I2C Read and Save" = "ASC_INIT 	! Initialize, 
						   ASCREAD_ID	! Check the IDCODE,
						   ASCSAVE_ID,
						   ASC_ENABLE	! Enable the ASC,
						   ASCSAVE_USERCODE,						    									 	
						   ASC_SAVE,
						   ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = "ASC_INIT 	! Initialize, 
						   ASCREAD_ID	! Check the IDCODE,
						   ASCSAVE_ID,
						   ASC_ENABLE	! Enable the ASC,
						   ASCSAVE_USERCODE,						    									 	
						   ASC_SAVE,
						   ASC_EXIT_USERMODE ! Exit the programming mode";
						   
	"I2C Calculate Data CRC"	=	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,
								   	ASCSAVE_ID,
								   ASC_ENABLE	! Enable the ASC, 									 	
								   ASC_SAVE,
								   ASC_EXIT_USERMODE ! Exit the programming mode";
								   
	"I2C Background Calculate Data CRC"	=	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,
								   	ASCSAVE_ID,
								   ASC_ENABLE	! Enable the ASC, 									 	
								   ASC_SAVE,
								   ASC_EXIT_USERMODE ! Exit the programming mode";
				 		  	 
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,  
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
							 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
							 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
							 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_INIT 	! Initialize, 
								 JTAGI2CREAD_ID	! Check the IDCODE,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_INIT 	! Initialize, 
						 JTAGI2CREAD_ID	! Check the IDCODE,	
						 JTAGI2C_ENABLE	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
						 JTAGI2CCHECK_STATUS ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
							 JTAGI2CCHECK_STATUS ! Read the status,
		 			 		 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
							 JTAGI2C_VERIFY	! Verify ASC CFG,
							 JTAGI2CCHECK_STATUS ! Read the status bit,	
							 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 							 
	"JTAGI2C Read Status Register" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
									 JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
								     JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
									 
	"JTAGI2C Verify ID" = "JTAGI2C_INIT 	! Initialize, 
					     JTAGI2CREAD_ID	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
					     		  JTAGI2CREAD_ID	! Check the IDCODE,
								  JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
					     
	"JTAGI2C Display ID" = "JTAGI2C_INIT 	! Initialize, 
					    JTAGI2CSAVE_ID";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
							       JTAGI2CSAVE_ID,
					    		   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";	
	
	"JTAGI2C Refresh" = 		"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
								 				    
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_INIT 	! Initialize,
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
								     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_INIT 	! Initialize, 
								   JTAGI2CREAD_ID	! Check the IDCODE,	
								   JTAGI2CSAVE_ID,
								   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
											   JTAGI2CREAD_ID	! Check the IDCODE,	
											   JTAGI2CSAVE_ID,
											   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow,
											   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
								   
								   
	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
									     JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,
								     JTAGI2CSAVE_ID,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										     JTAGI2CREAD_ID	! Check the IDCODE,
										     JTAGI2CSAVE_ID,	
										     JTAGI2C_ENABLE	! Enable the ASC, 
											 JTAGI2C_SAVE_FAULTLOG_MEMORY,
											 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
											 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							     JTAGI2CREAD_ID	! Check the IDCODE,
							     JTAGI2CSAVE_ID,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 								 
	"JTAGI2C Read and Save" = "JTAGI2C_INIT 	! Initialize, 
						   JTAGI2CREAD_ID	! Check the IDCODE,
						   JTAGI2CSAVE_ID,
						   JTAGI2C_ENABLE	! Enable the ASC, 									 	
						   JTAGI2C_SAVE,
						   JTAGI2CSAVE_USERCODE,
						   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read and Save" = " JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									   JTAGI2CREAD_ID	! Check the IDCODE,
									   JTAGI2CSAVE_ID,
									   JTAGI2C_ENABLE	! Enable the ASC, 									 	
									   JTAGI2C_SAVE,
									   JTAGI2CSAVE_USERCODE,
									   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
						   
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,
								   JTAGI2CSAVE_ID,
								   JTAGI2C_ENABLE	! Enable the ASC, 									 	
								   JTAGI2C_SAVE,
								   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 		 JTAGI2CREAD_ID	! Check the IDCODE,
								   			 JTAGI2CSAVE_ID,
								   			 JTAGI2C_ENABLE	! Enable the ASC, 									 	
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
						
					 			 								
	
			 						 						 							 			 							 		 													 			 															  				 			 										  																 						 						  																
</Operation_List>
<Operation_List label="SingleSVFOperation">		 			 				
	"I2C Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 			 			 		 	
	"I2C I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	
	"I2C Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Program" =	 	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"I2C Background Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 							 
	"I2C Read Status Register" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASCSAVE_ID	,	
									 ASC_SAVE_STATUS";
	"I2C Background Read Status Register" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASCSAVE_ID	,	
									 ASC_SAVE_STATUS";
									 									 
	"I2C Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
	"I2C Background Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
					     					     
	"I2C Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF";	
					     
	"I2C Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Background Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
							 
	"I2C Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"I2C Background Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
	"I2C Read FaultLog Registers" = "ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASCSAVE_ID,
										 ASC_ENABLE	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = "ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASCSAVE_ID,
										 ASC_ENABLE	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
										 
	"I2C Read FaultLog Memory" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASCSAVE_ID,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASCSAVE_ID,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 
	"I2C Read and Save" = "ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID_SVF	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = "ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID_SVF	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";		 			 								 						 			 								 			 		
	
	"I2C Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID_SVF	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID_SVF	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
								     
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,  
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
							 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
							 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
							 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_INIT 	! Initialize, 
								 JTAGI2CREAD_ID	! Check the IDCODE,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_INIT 	! Initialize, 
						 JTAGI2CREAD_ID	! Check the IDCODE,	
						 JTAGI2C_ENABLE	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
						 JTAGI2CCHECK_STATUS ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
							 JTAGI2CCHECK_STATUS ! Read the status,
		 			 		 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
							 JTAGI2C_VERIFY	! Verify ASC CFG,
							 JTAGI2CCHECK_STATUS ! Read the status bit,	
							 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 							 
	"JTAGI2C Read Status Register" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
									 JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
								     JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
									 
	"JTAGI2C Verify ID" = "JTAGI2C_INIT 	! Initialize, 
					     JTAGI2CREAD_ID	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
					     		  JTAGI2CREAD_ID	! Check the IDCODE,
								  JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
					     
	"JTAGI2C Display ID" = "JTAGI2C_INIT 	! Initialize, 
					    JTAGI2CSAVE_ID";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
							       JTAGI2CSAVE_ID,
					    		   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";	
	
	"JTAGI2C Refresh" = 		"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
								 				    
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_INIT 	! Initialize,
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
								     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_INIT 	! Initialize, 
								   JTAGI2CREAD_ID	! Check the IDCODE,	
								   JTAGI2CSAVE_ID,
								   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
											   JTAGI2CREAD_ID	! Check the IDCODE,	
											   JTAGI2CSAVE_ID,
											   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow,
											   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
								   
								   
	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
									     JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,
								     JTAGI2CSAVE_ID,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										     JTAGI2CREAD_ID	! Check the IDCODE,
										     JTAGI2CSAVE_ID,	
										     JTAGI2C_ENABLE	! Enable the ASC, 
											 JTAGI2C_SAVE_FAULTLOG_MEMORY,
											 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
											 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							     JTAGI2CREAD_ID	! Check the IDCODE,
							     JTAGI2CSAVE_ID,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 								 
	"JTAGI2C Read and Save" = "JTAGI2C_INIT 	! Initialize, 
						   JTAGI2CREAD_ID	! Check the IDCODE,
						   JTAGI2CSAVE_ID,
						   JTAGI2C_ENABLE	! Enable the ASC, 									 	
						   JTAGI2C_SAVE,
						   JTAGI2CSAVE_USERCODE,
						   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read and Save" = " JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									   JTAGI2CREAD_ID	! Check the IDCODE,
									   JTAGI2CSAVE_ID,
									   JTAGI2C_ENABLE	! Enable the ASC, 									 	
									   JTAGI2C_SAVE,
									   JTAGI2CSAVE_USERCODE,
									   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
						   
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,
								   JTAGI2CSAVE_ID,
								   JTAGI2C_ENABLE	! Enable the ASC, 									 	
								   JTAGI2C_SAVE,
								   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 		 JTAGI2CREAD_ID	! Check the IDCODE,
								   			 JTAGI2CSAVE_ID,
								   			 JTAGI2C_ENABLE	! Enable the ASC, 									 	
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
								     
								     							     					 			 					 			 																					 			 							
</Operation_List>
<Operation_List label="TurboOperation">
	"I2C Erase,Program,Verify" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 
	"I2C I2CSA Erase Only" =	"ASC_INIT 	! Initialize, 
								 ASCREAD_ID	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_INIT 	! Initialize, 
								 ASCREAD_ID	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
											 			 			 		 	
	"I2C Program" =	 	"ASC_INIT 	! Initialize, 
						 ASCREAD_ID	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	"I2C Background Program" =	 	"ASC_INIT 	! Initialize, 
						 ASCREAD_ID	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = "ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = "ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC,
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																											 							  
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	
	"I2C Background Only" = 	"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC,
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																											 							  
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 						 
	"I2C Read Status Register" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,	
							     ASCSAVE_ID	,	
								 ASC_SAVE_STATUS";
								 
	"I2C Background Read Status Register" = "ASC_INIT 	! Initialize, 
										     ASCREAD_ID	! Check the IDCODE,	
										     ASCSAVE_ID	,	
											 ASC_SAVE_STATUS";
								 								 
	"I2C Verify ID" = "ASC_INIT 	! Initialize, 
					   ASCREAD_ID	! Check the IDCODE";
					     
	"I2C Background Verify ID" = "ASC_INIT 	! Initialize, 
					     		  ASCREAD_ID	! Check the IDCODE";
					     
	"I2C Display ID" = "ASC_INIT 	! Initialize, 
					    ASCSAVE_ID";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_INIT 	! Initialize, 
					    ASCSAVE_ID";
					    
	"I2C Refresh" = 		"ASC_INIT 	! Initialize, 
							 ASCREAD_ID	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Read Shadow Registers" = "ASC_INIT 	! Initialize, 
								   ASCREAD_ID	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	
	"I2C Background Read Shadow Registers" = "ASC_INIT 	! Initialize, 
								   ASCREAD_ID	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
								   					 
	"I2C Read FaultLog Registers" = "ASC_INIT 	! Initialize, 
								     ASCREAD_ID	! Check the IDCODE,	
								     ASCSAVE_ID,
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_REGISTERS,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = "ASC_INIT 	! Initialize, 
								     ASCREAD_ID	! Check the IDCODE,	
								     ASCSAVE_ID,
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_REGISTERS,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C Read FaultLog Memory" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_SAVE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_SAVE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 
	"I2C FaultLog Erase Only" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_INIT 	! Initialize, 
							     ASCREAD_ID	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 
	"I2C Read and Save" = "ASC_INIT 	! Initialize, 
						   ASCREAD_ID	! Check the IDCODE,
						   ASCSAVE_ID,
						   ASC_ENABLE	! Enable the ASC,
						   ASCSAVE_USERCODE,						    									 	
						   ASC_SAVE,
						   ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = "ASC_INIT 	! Initialize, 
						   ASCREAD_ID	! Check the IDCODE,
						   ASCSAVE_ID,
						   ASC_ENABLE	! Enable the ASC,
						   ASCSAVE_USERCODE,						    									 	
						   ASC_SAVE,
						   ASC_EXIT_USERMODE ! Exit the programming mode";
						   
	"I2C Calculate Data CRC"	=	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,
								   	ASCSAVE_ID,
								   ASC_ENABLE	! Enable the ASC, 									 	
								   ASC_SAVE,
								   ASC_EXIT_USERMODE ! Exit the programming mode";
								   
	"I2C Background Calculate Data CRC"	=	"ASC_INIT 	! Initialize, 
									 ASCREAD_ID	! Check the IDCODE,
								   	ASCSAVE_ID,
								   ASC_ENABLE	! Enable the ASC, 									 	
								   ASC_SAVE,
								   ASC_EXIT_USERMODE ! Exit the programming mode";					 	 			 									 			 													 			 															  				 			 										  								
	
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,  
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
							 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
							 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
							 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_INIT 	! Initialize, 
								 JTAGI2CREAD_ID	! Check the IDCODE,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_INIT 	! Initialize, 
						 JTAGI2CREAD_ID	! Check the IDCODE,	
						 JTAGI2C_ENABLE	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
						 JTAGI2CCHECK_STATUS ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
							 JTAGI2CCHECK_STATUS ! Read the status,
		 			 		 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
							 JTAGI2C_VERIFY	! Verify ASC CFG,
							 JTAGI2CCHECK_STATUS ! Read the status bit,	
							 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 							 
	"JTAGI2C Read Status Register" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
									 JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
								     JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
									 
	"JTAGI2C Verify ID" = "JTAGI2C_INIT 	! Initialize, 
					     JTAGI2CREAD_ID	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
					     		  JTAGI2CREAD_ID	! Check the IDCODE,
								  JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
					     
	"JTAGI2C Display ID" = "JTAGI2C_INIT 	! Initialize, 
					    JTAGI2CSAVE_ID";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
							       JTAGI2CSAVE_ID,
					    		   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";	
	
	"JTAGI2C Refresh" = 		"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
								 				    
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_INIT 	! Initialize,
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
								     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_INIT 	! Initialize, 
								   JTAGI2CREAD_ID	! Check the IDCODE,	
								   JTAGI2CSAVE_ID,
								   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
											   JTAGI2CREAD_ID	! Check the IDCODE,	
											   JTAGI2CSAVE_ID,
											   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow,
											   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
								   
								   
	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
									     JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,
								     JTAGI2CSAVE_ID,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										     JTAGI2CREAD_ID	! Check the IDCODE,
										     JTAGI2CSAVE_ID,	
										     JTAGI2C_ENABLE	! Enable the ASC, 
											 JTAGI2C_SAVE_FAULTLOG_MEMORY,
											 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
											 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							     JTAGI2CREAD_ID	! Check the IDCODE,
							     JTAGI2CSAVE_ID,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 								 
	"JTAGI2C Read and Save" = "JTAGI2C_INIT 	! Initialize, 
						   JTAGI2CREAD_ID	! Check the IDCODE,
						   JTAGI2CSAVE_ID,
						   JTAGI2C_ENABLE	! Enable the ASC, 									 	
						   JTAGI2C_SAVE,
						   JTAGI2CSAVE_USERCODE,
						   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read and Save" = " JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									   JTAGI2CREAD_ID	! Check the IDCODE,
									   JTAGI2CSAVE_ID,
									   JTAGI2C_ENABLE	! Enable the ASC, 									 	
									   JTAGI2C_SAVE,
									   JTAGI2CSAVE_USERCODE,
									   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
						   
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,
								   JTAGI2CSAVE_ID,
								   JTAGI2C_ENABLE	! Enable the ASC, 									 	
								   JTAGI2C_SAVE,
								   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 		 JTAGI2CREAD_ID	! Check the IDCODE,
								   			 JTAGI2CSAVE_ID,
								   			 JTAGI2C_ENABLE	! Enable the ASC, 									 	
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
							
</Operation_List>
<Operation_List label="ChainSVFOperation">
	"I2C Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
									 ASC_VERIFY	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_I2CSA ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 			 			 		 	
	"I2C I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_I2CSA ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	
	"I2C Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE	! Enable the ASC, 
						 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS	! Program CFG,
						 ASCPROGRAM_USERCODE	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Program" =	 	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS	! Program CFG,
									 ASCPROGRAM_USERCODE	! Program USERCODE,
									 ASC_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASC_ERASE_BECFG	! Erase the ASC CFG,									 
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"I2C Background Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCVERIFY_USERCODE		! Verify USERCODE,																																				
							 ASC_VERIFY	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 							 
	"I2C Read Status Register" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASCSAVE_ID	,	
									 ASC_SAVE_STATUS";
	"I2C Background Read Status Register" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASCSAVE_ID	,	
									 ASC_SAVE_STATUS";
									 									 
	"I2C Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
	"I2C Background Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
					     					     
	"I2C Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF";	
					     
	"I2C Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Background Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
							 
	"I2C Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"I2C Background Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASCSAVE_ID,
								   ASC_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
	"I2C Read FaultLog Registers" = "ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASCSAVE_ID,
										 ASC_ENABLE	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = "ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASCSAVE_ID,
										 ASC_ENABLE	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
										 
	"I2C Read FaultLog Memory" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASCSAVE_ID,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASCSAVE_ID,	
									 ASC_ENABLE	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASCSAVE_ID,	
								 ASC_ENABLE	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 
	"I2C Read and Save" = "ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID_SVF	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = "ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID_SVF	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";		 			 								 						 			 								 			 		
	
	"I2C Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID_SVF	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID_SVF	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
								     
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,  
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
									 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
							 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
							 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_PROGRAM_I2CSA ! Program I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
							 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_INIT 	! Initialize, 
								 JTAGI2CREAD_ID	! Check the IDCODE,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_INIT 	! Initialize,
										 JTAGI2CREAD_ID	! Check the IDCODE,	
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_INIT 	! Initialize, 
						 JTAGI2CREAD_ID	! Check the IDCODE,	
						 JTAGI2C_ENABLE	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
						 JTAGI2CCHECK_STATUS ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE	! Program USERCODE,
									 JTAGI2CCHECK_STATUS ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
							 JTAGI2CCHECK_STATUS ! Read the status,
		 			 		 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS ! Read the status,
				 			 		 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_ENABLE	! Enable the ASC, 
							 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
							 JTAGI2C_VERIFY	! Verify ASC CFG,
							 JTAGI2CCHECK_STATUS ! Read the status bit,	
							 JTAGI2C_DIRECT_DISABLE ! Exit the programming mode"	;
							 
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
									 JTAGI2CREAD_ID	! Check the IDCODE,
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2CVERIFY_USERCODE		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS ! Read the status bit,	
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 							 
	"JTAGI2C Read Status Register" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
									 JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2CSAVE_ID	,	
								     JTAGI2C_SAVE_STATUS,
									 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
									 
	"JTAGI2C Verify ID" = "JTAGI2C_INIT 	! Initialize, 
					     JTAGI2CREAD_ID	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
					     		  JTAGI2CREAD_ID	! Check the IDCODE,
								  JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
					     
	"JTAGI2C Display ID" = "JTAGI2C_INIT 	! Initialize, 
					    JTAGI2CSAVE_ID";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
							       JTAGI2CSAVE_ID,
					    		   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";	
	
	"JTAGI2C Refresh" = 		"JTAGI2C_INIT 	! Initialize, 
							 JTAGI2CREAD_ID	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
								 				    
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_INIT 	! Initialize,
								     JTAGI2CREAD_ID	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
								     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
							 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_INIT 	! Initialize, 
								   JTAGI2CREAD_ID	! Check the IDCODE,	
								   JTAGI2CSAVE_ID,
								   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize,
											   JTAGI2CREAD_ID	! Check the IDCODE,	
											   JTAGI2CSAVE_ID,
											   JTAGI2C_READ_SHADOW_REGISTERS	! Read ASC Shadow,
											   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode"	;
								   
								   
	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
										 JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									     JTAGI2CREAD_ID	! Check the IDCODE,	
									     JTAGI2CSAVE_ID,
									     JTAGI2C_ENABLE	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS,
										 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_INIT 	! Initialize, 
								     JTAGI2CREAD_ID	! Check the IDCODE,
								     JTAGI2CSAVE_ID,	
									 JTAGI2C_ENABLE	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_INIT 	! Initialize, 
										     JTAGI2CREAD_ID	! Check the IDCODE,
										     JTAGI2CSAVE_ID,	
										     JTAGI2C_ENABLE	! Enable the ASC, 
											 JTAGI2C_SAVE_FAULTLOG_MEMORY,
											 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
											 JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_INIT 	! Initialize, 
							     JTAGI2CREAD_ID	! Check the IDCODE,
							     JTAGI2CSAVE_ID,	
								 JTAGI2C_ENABLE	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
									 								 
	"JTAGI2C Read and Save" = "JTAGI2C_INIT 	! Initialize, 
						   JTAGI2CREAD_ID	! Check the IDCODE,
						   JTAGI2CSAVE_ID,
						   JTAGI2C_ENABLE	! Enable the ASC, 									 	
						   JTAGI2C_SAVE,
						   JTAGI2CSAVE_USERCODE,
						   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read and Save" = " JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									   JTAGI2CREAD_ID	! Check the IDCODE,
									   JTAGI2CSAVE_ID,
									   JTAGI2C_ENABLE	! Enable the ASC, 									 	
									   JTAGI2C_SAVE,
									   JTAGI2CSAVE_USERCODE,
									   JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
						   
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_INIT 	! Initialize, 
									 JTAGI2CREAD_ID	! Check the IDCODE,
								   JTAGI2CSAVE_ID,
								   JTAGI2C_ENABLE	! Enable the ASC, 									 	
								   JTAGI2C_SAVE,
								   JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_INIT 	! Initialize, 
									 		 JTAGI2CREAD_ID	! Check the IDCODE,
								   			 JTAGI2CSAVE_ID,
								   			 JTAGI2C_ENABLE	! Enable the ASC, 									 	
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_BACKGROUND ! Exit the programming mode";
								     
							 									 			 		
</Operation_List>
<Operation_List label="SingleSVFOperationRevC">
	"I2C Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,		
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,		
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	
	"I2C I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
									 			 			 		 	
	"I2C Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE_SVF	! Enable the ASC, 
						 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS_SVF	! Program CFG,
						 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE_SVF	! Enable the ASC, 
						 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS_SVF	! Program CFG,
						 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
							 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
							 ASC_VERIFY_SVF	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
							 ASC_VERIFY_SVF	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 						 
	"I2C Read Status Register" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASC_SAVE_STATUS_SVF";
	"I2C Background Read Status Register" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASC_SAVE_STATUS_SVF";
								     								     
	"I2C Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
	"I2C Background Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
					     					     
	"I2C Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCSAVE_ID_SVF";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCSAVE_ID_SVF";		
					     
	"I2C Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Background Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
							 
	"I2C Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASC_SVF_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"I2C Background Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASC_SVF_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
	"I2C Read FaultLog Registers" = 	"ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASC_ENABLE_SVF	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS_SVF,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = 	"ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASC_ENABLE_SVF	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS_SVF,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
										 
	"I2C Read FaultLog Memory" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY_SVF,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY_SVF,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 	 			 		
	"I2C Read and Save" = 	"ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = 	"ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
							 		 			 								 						 			 								 			 		
	
	"I2C Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";	
	
	"I2C Background Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
								     
	
	
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
											 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
											 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
											 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
											 JTAGI2CCHECK_STATUS_SVF ! Read the status,
						 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
											 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
											 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
											 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
											 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
											 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
											 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
											 JTAGI2C_EXIT_USERMODE_BACKGROUND_SVF ! Exit the programming mode"	;
									 
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the JTAGI2C, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
											 		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
											 		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
													 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
													 JTAGI2CCHECK_STATUS_SVF ! Read the status,
								 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
													 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
													 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
													 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
													 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
													 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
													 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
													 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
													 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
													 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
									 
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
										 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
										 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									     JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									     JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									     JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
									 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_SVF_INIT 	! Initialize, 
								 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
										 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
										 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS_SVF ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
						 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
						 
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the JTAGI2C, 
						 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS_SVF ! Read the status,
	 			 		 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								   JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								   JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								   JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
								   JTAGI2CCHECK_STATUS_SVF ! Read the status,
			 			 		   JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
						 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
						 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
						 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
						 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								    JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								    JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 						 
	"JTAGI2C Read Status Register" = "JTAGI2C_SVF_INIT 	! Initialize, 
							     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
							     JTAGI2C_SAVE_STATUS_SVF,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								    		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								    		 JTAGI2C_SAVE_STATUS_SVF,
									 		 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
									 								 
	"JTAGI2C Verify ID" = "JTAGI2C_SVF_INIT 	! Initialize, 
					     JTAGI2CREAD_ID_SVF	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
					              JTAGI2CREAD_ID_SVF	! Check the IDCODE,
					              JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
					     					     
	"JTAGI2C Display ID" = "JTAGI2C_SVF_INIT 	! Initialize, 
					     JTAGI2CSAVE_ID_SVF";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
					     		   JTAGI2CSAVE_ID_SVF,
					     		   JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";	
					     
	"JTAGI2C Refresh" = 		"JTAGI2C_SVF_INIT 	! Initialize, 
							 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
	
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
							 		 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 						 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_SVF_INIT 	! Initialize, 
								   JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								   JTAGI2C_READ_SHADOW_REGISTERS_SVF	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_READ_SHADOW_REGISTERS_SVF	! Read ASC Shadow,
								   			 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;

	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_SVF_INIT 	! Initialize, 
									     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS_SVF,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										     JTAGI2C_SAVE_FAULTLOG_REGISTERS_SVF,
										     JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_SVF_INIT 	! Initialize, 
								     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
								     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY_SVF,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									         JTAGI2C_SAVE_FAULTLOG_MEMORY_SVF,
									         JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									         JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
							     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
							     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
								 								 	 			 		
	"JTAGI2C Read and Save" = "JTAGI2C_SVF_INIT 	! Initialize, 
						     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
						     JTAGI2C_ENABLE	! Enable the JTAGI2C, 
							 JTAGI2C_SAVE	! Read ASC CFG,
							 JTAGI2CSAVE_USERCODE		! Read USERCODE,																																											 
							 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
			 			 								 						 			 								 			 		
	"JTAGI2C Background Read and Save" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								      JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								      JTAGI2C_ENABLE	! Enable the ASC, 
							          JTAGI2C_SAVE	! Read ASC CFG,
							          JTAGI2CSAVE_USERCODE		! Read USERCODE,																																											 
							          JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
							 
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_SVF_INIT 	! Initialize, 
						     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						     		 JTAGI2C_ENABLE	! Enable the ASC, 
								     JTAGI2C_SAVE,
								     JTAGI2C_EXIT_USERMODE ! Exit the programming mode";	
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								      		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								             JTAGI2C_ENABLE	! Enable the ASC, 
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
									     
								     							     							 
</Operation_List>
<Operation_List label="ChainSVFOperationRevC">
	"I2C Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 ASC_EXIT_USERMODE ! Exit the programming mode"	;
									 
	"I2C Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,		
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase,Program,Verify,I2CSA" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 ASC_PROGRAM_STATUS_SVF	! Program CFG,
									 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
									 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 ASC_VERIFY_SVF	! Verify ASC CFG,
									 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,		
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR ! Exit the programming mode"	;
									 								 
	"I2C I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background I2CSA Program" =	"ASC_SVF_INIT 	! Initialize, 
									 ASCREAD_ID_SVF	! Check the IDCODE,	
									 ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 ASC_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 ASC_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	
	"I2C I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
	
	"I2C Background I2CSA Erase Only" =	"ASC_SVF_INIT 	! Initialize, 
								 ASCREAD_ID_SVF	! Check the IDCODE,	
								 ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR ! Exit the programming mode"	;
	
									 			 			 		 	
	"I2C Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE_SVF	! Enable the ASC, 
						 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS_SVF	! Program CFG,
						 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Program" =	 	"ASC_SVF_INIT 	! Initialize, 
						 ASCREAD_ID_SVF	! Check the IDCODE,	
						 ASC_ENABLE_SVF	! Enable the ASC, 
						 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 ASC_PROGRAM_STATUS_SVF	! Program CFG,
						 ASCPROGRAM_USERCODE_SVF	! Program USERCODE,
						 ASC_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 ASC_EXIT_USERMODE ! Exit the programming mode"	;
						 			 		 
	"I2C Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
							 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Erase Only" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASC_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"I2C Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
							 ASC_VERIFY_SVF	! Verify ASC CFG,
							 ASC_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"I2C Background Verify Only" = 	"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_ENABLE_SVF	! Enable the ASC, 
							 ASCVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
							 ASC_VERIFY_SVF	! Verify ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode"	;
							 						 
	"I2C Read Status Register" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASC_SAVE_STATUS_SVF";
	"I2C Background Read Status Register" = "ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,	
								     ASC_SAVE_STATUS_SVF";
								     								     
	"I2C Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
	"I2C Background Verify ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCREAD_ID_SVF	! Check the IDCODE";
					     					     
	"I2C Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCSAVE_ID_SVF";					     									 							 								 							 			 																													  
	
	"I2C Background Display ID" = "ASC_SVF_INIT 	! Initialize, 
					     ASCSAVE_ID_SVF";		
					     
	"I2C Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
	
	"I2C Background Refresh" = 		"ASC_SVF_INIT 	! Initialize, 
							 ASCREAD_ID_SVF	! Check the IDCODE,	
							 ASC_REFRESH	! Refresh"	;
							 
	"I2C Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASC_SVF_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;

	"I2C Background Read Shadow Registers" = "ASC_SVF_INIT 	! Initialize, 
								   ASCREAD_ID_SVF	! Check the IDCODE,	
								   ASC_SVF_READ_SHADOW_REGISTERS	! Read ASC Shadow"	;
								   
	"I2C Read FaultLog Registers" = 	"ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASC_ENABLE_SVF	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS_SVF,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Registers" = 	"ASC_SVF_INIT 	! Initialize, 
									     ASCREAD_ID_SVF	! Check the IDCODE,	
									     ASC_ENABLE_SVF	! Enable the ASC, 
										 ASC_SAVE_FAULTLOG_REGISTERS_SVF,
										 ASC_EXIT_USERMODE ! Exit the programming mode";
										 
	"I2C Read FaultLog Memory" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY_SVF,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read FaultLog Memory" = 	"ASC_SVF_INIT 	! Initialize, 
								     ASCREAD_ID_SVF	! Check the IDCODE,
								     ASC_ENABLE_SVF	! Enable the ASC, 
									 ASC_SAVE_FAULTLOG_MEMORY_SVF,
									 ASC_EXIT_USERMODE ! Exit the programming mode";
									 
	"I2C FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background FaultLog Erase Only" = "ASC_SVF_INIT 	! Initialize, 
							     ASCREAD_ID_SVF	! Check the IDCODE,
							     ASC_ENABLE_SVF	! Enable the ASC, 
								 ASC_ERASE_FAULTLOG_MEMORY,
								 ASC_EXIT_USERMODE ! Exit the programming mode";
								 							 	 			 		
	"I2C Read and Save" = 	"ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
	
	"I2C Background Read and Save" = 	"ASC_SVF_INIT 	! Initialize, 
						     ASCREAD_ID	! Check the IDCODE,
						     ASCSAVE_ID,	
							 ASC_ENABLE	! Enable the ASC, 
							 ASCSAVE_USERCODE		! Read USERCODE,																																											 
							 ASC_SAVE	! Read ASC CFG,
							 ASC_EXIT_USERMODE ! Exit the programming mode";
							 		 			 								 						 			 								 			 		
	
	"I2C Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";	
	
	"I2C Background Calculate Data CRC"	=	"ASC_SVF_INIT 	! Initialize, 
						     		 ASCREAD_ID	! Check the IDCODE,	
						     		 ASCSAVE_ID,
						     		 ASC_ENABLE	! Enable the ASC, 
								     ASC_SAVE,
								     ASC_EXIT_USERMODE ! Exit the programming mode";
								     
	
	
	"JTAGI2C Erase,Program,Verify" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
											 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
											 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
											 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
											 JTAGI2CCHECK_STATUS_SVF ! Read the status,
						 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
											 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
											 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
											 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
											 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
											 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
											 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
											 JTAGI2C_EXIT_USERMODE_BACKGROUND_SVF ! Exit the programming mode"	;
									 
									 
	"JTAGI2C Erase,Program,Verify,I2CSA" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the JTAGI2C, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase,Program,Verify,I2CSA" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
											 		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
											 		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
													 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
													 JTAGI2CCHECK_STATUS_SVF ! Read the status,
								 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
													 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
													 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
													 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
													 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
													 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
													 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
													 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
													 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
													 JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
									 
									 								 
	"JTAGI2C I2CSA Program" =	"JTAGI2C_SVF_INIT 	! Initialize, 
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									 JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									 JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Program" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
										 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
										 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									     JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
									     JTAGI2C_PROGRAM_I2CSA_SVF ! Program I2CSA,
									     JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR_SVF ! Exit the programming mode"	;
									 
	"JTAGI2C I2CSA Erase Only" =	"JTAGI2C_SVF_INIT 	! Initialize, 
								 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
								 JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background I2CSA Erase Only" =	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
										 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
										 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										 JTAGI2C_ERASE_I2CSA_SVF ! Erase the I2CSA,
										 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 								 			 			 		 	
	"JTAGI2C Program" =	 	"JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
						 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS_SVF ! Read the status,
	 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
						 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
						 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
						 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
						 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	 
	 "JTAGI2C Background Program" =	 	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
									 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
									 JTAGI2CCHECK_STATUS_SVF ! Read the status,
				 			 		 JTAGI2C_PROGRAM_STATUS_SVF	! Program CFG,
									 JTAGI2CPROGRAM_USERCODE_SVF	! Program USERCODE,
									 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,
									 JTAGI2C_PROGRAM_DONE_BIT_SVF	! Program CFG DONE bit,	
									 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
						 
						 			 		 
	"JTAGI2C Erase Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the JTAGI2C, 
						 JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
						 JTAGI2CCHECK_STATUS_SVF ! Read the status,
	 			 		 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Erase Only" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								   JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								   JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								   JTAGI2C_ERASE_BECFG_SVF	! Erase the ASC CFG,									 
								   JTAGI2CCHECK_STATUS_SVF ! Read the status,
			 			 		   JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
		 			 		 			 			 		 			
	"JTAGI2C Verify Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
						 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
						 JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
						 JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
						 JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
						 JTAGI2C_DIRECT_DISABLE_SVF ! Exit the programming mode"	;
	
	"JTAGI2C Background Verify Only" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								    JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								    JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									JTAGI2CVERIFY_USERCODE_SVF		! Verify USERCODE,																																				
									JTAGI2C_VERIFY_SVF	! Verify ASC CFG,
									JTAGI2CCHECK_STATUS_SVF ! Read the status bit,	
									JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 						 
	"JTAGI2C Read Status Register" = "JTAGI2C_SVF_INIT 	! Initialize, 
							     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
							     JTAGI2C_SAVE_STATUS_SVF,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read Status Register" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								    		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								    		 JTAGI2C_SAVE_STATUS_SVF,
									 		 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
									 								 
	"JTAGI2C Verify ID" = "JTAGI2C_SVF_INIT 	! Initialize, 
					     JTAGI2CREAD_ID_SVF	! Check the IDCODE";
					     
	"JTAGI2C Background Verify ID" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
					              JTAGI2CREAD_ID_SVF	! Check the IDCODE,
					              JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
					     					     
	"JTAGI2C Display ID" = "JTAGI2C_SVF_INIT 	! Initialize, 
					     JTAGI2CSAVE_ID_SVF";					     									 							 								 							 			 																													  
	
	"JTAGI2C Background Display ID" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
					     		   JTAGI2CSAVE_ID_SVF,
					     		   JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";	
					     
	"JTAGI2C Refresh" = 		"JTAGI2C_SVF_INIT 	! Initialize, 
							 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
							 JTAGI2C_REFRESH	! Refresh"	;
	
	"JTAGI2C Background Refresh" = 		"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     JTAGI2C_REFRESH	! Refresh,
							 		 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;
							 						 
	"JTAGI2C Read Shadow Registers" = "JTAGI2C_SVF_INIT 	! Initialize, 
								   JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								   JTAGI2C_READ_SHADOW_REGISTERS_SVF	! Read ASC Shadow"	;

	"JTAGI2C Background Read Shadow Registers" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_READ_SHADOW_REGISTERS_SVF	! Read ASC Shadow,
								   			 JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode"	;

	"JTAGI2C Read FaultLog Registers" = "JTAGI2C_SVF_INIT 	! Initialize, 
									     JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
									     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										 JTAGI2C_SAVE_FAULTLOG_REGISTERS_SVF,
										 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Registers" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
										     JTAGI2C_SAVE_FAULTLOG_REGISTERS_SVF,
										     JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
										 
	"JTAGI2C Read FaultLog Memory" = "JTAGI2C_SVF_INIT 	! Initialize, 
								     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
								     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									 JTAGI2C_SAVE_FAULTLOG_MEMORY_SVF,
									 JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
	
	"JTAGI2C Background Read FaultLog Memory" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								     		 JTAGI2C_ENABLE_SVF	! Enable the ASC, 
									         JTAGI2C_SAVE_FAULTLOG_MEMORY_SVF,
									         JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY,
									         JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
	
	"JTAGI2C FaultLog Erase Only" = "JTAGI2C_SVF_INIT 	! Initialize, 
							     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
							     JTAGI2C_ENABLE_SVF	! Enable the ASC, 
								 JTAGI2C_ERASE_FAULTLOG_MEMORY,
								 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
								 								 	 			 		
	"JTAGI2C Read and Save" = "JTAGI2C_SVF_INIT 	! Initialize, 
						     JTAGI2CREAD_ID_SVF	! Check the IDCODE,
						     JTAGI2C_ENABLE	! Enable the JTAGI2C, 
							 JTAGI2C_SAVE	! Read ASC CFG,
							 JTAGI2CSAVE_USERCODE		! Read USERCODE,																																											 
							 JTAGI2C_EXIT_USERMODE ! Exit the programming mode";
			 			 								 						 			 								 			 		
	"JTAGI2C Background Read and Save" = "JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								      JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								      JTAGI2C_ENABLE	! Enable the ASC, 
							          JTAGI2C_SAVE	! Read ASC CFG,
							          JTAGI2CSAVE_USERCODE		! Read USERCODE,																																											 
							          JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
							 
	"JTAGI2C Calculate Data CRC"	=	"JTAGI2C_SVF_INIT 	! Initialize, 
						     		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
						     		 JTAGI2C_ENABLE	! Enable the ASC, 
								     JTAGI2C_SAVE,
								     JTAGI2C_EXIT_USERMODE ! Exit the programming mode";	
	
	"JTAGI2C Background Calculate Data CRC"	=	"JTAGI2C_BACKGROUND_SVF_INIT 	! Initialize,
								      		 JTAGI2CREAD_ID_SVF	! Check the IDCODE,	
								             JTAGI2C_ENABLE	! Enable the ASC, 
										     JTAGI2C_SAVE,
										     JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF ! Exit the programming mode";
							     					
</Operation_List>
<Script>
<![CDATA[
function ASC_INIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
} 
function ASC_SVF_INIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
} 
function ASCREAD_ID	{
	datastream	IDArray[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	8	TDI (0x40);
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR	8	TDI  (0x00)
			TDO  (IDArray[1]);
	I2C_STOP;
	IDArray[1] = $IDArray[1];
	IF (IDArray[1] == 0x88)
	{
	}
	ELSEIF (IDArray[1] == 0x8A)
	{
	}
	ELSEIF (IDArray[1] == 0x89)
	{
	}
	ELSE
	{
		print (0,IDArray);
		print (1,"Failed to read the Device's IDCODE. Please check the I2C Slave Address.");
	}
	
}		
function ASCREAD_ID_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	8	TDI (0x40);
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x11)
					MASK (0x00);
	I2C_STOP;
}
function ASCSAVE_ID	{
	datastream SavedID[1][8];
	file	NewFile = "FILE_SAVE"; 
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	8	TDI (0x40);
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR	8	TDI  (0x00)
			TDO  (SavedID[1]);
	I2C_STOP;	
	SavedID[1] = $SavedID[1];		
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function ASCSAVE_ID_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	8	TDI (0x40);
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x00)
					MASK (0x00);
	I2C_STOP;	
}	
function ASC_ENABLE	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_ENPROG(0x04) instruction;
	SDR	8	TDI (0x20); 
	! Shift in PROG MODE KEY;
	SDR	16	TDI (0xA7BC); 
	I2C_STOP;
	RUN_TEST DELAY 1;
} 
function ASC_ENABLE_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_ENPROG(0x04) instruction;
	SDR	8	TDI (0x20); 
	! Shift in PROG MODE KEY;
	SDR	16	TDI (0xA7BC); 
	I2C_STOP;
	RUN_TEST DELAY 1;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	SDR_VERIFY 16  TDI(0x0000)
				  TDO(0x0008)
				  MASK(0x0009);
	I2C_STOP;		
} 
function ASC_ERASE_I2CSA	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;	
	JTAGI2CSLAVE_DADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_DADDR_READ[1] = (DEFAULT_ADDR_READ) ;	
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_ERASEI2CSA(0x11) instruction;
	SDR	8	TDI (0x88); 
	I2C_STOP;
	RUN_TEST	DELAY 100;	
}
function ASC_ERASE_I2CSA_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;	
	JTAGI2CSLAVE_DADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_DADDR_READ[1] = (DEFAULT_ADDR_READ) ;	
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_ERASEI2CSA(0x11) instruction;
	SDR	8	TDI (0x88); 
	I2C_STOP;
	RUN_TEST	DELAY 100;	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_DADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_DADDR_READ[1]);
	SDR_VERIFY 16 TDI(0x0000)
				 TDO(0x0000)
				 MASK(0x0085);
	I2C_STOP;		
}
function ASC_PROGRAM_I2CSA	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	JTAGI2CSLAVE_NADDR_READ[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | 0x01);

	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_WRITEI2CSA(0x12) instruction;
	SDR	8	TDI (0x48); 
	SDR	8	TDI (JTAGI2CN_WRITE[1]); 
	I2C_STOP;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_PROGI2CSA(0x14) instruction;
	SDR	8	TDI (0x28); 
	I2C_STOP;
	RUN_TEST DELAY 10;				
}
function ASC_PROGRAM_I2CSA_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	JTAGI2CSLAVE_NADDR_READ[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | 0x01);

	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_WRITEI2CSA(0x12) instruction;
	SDR	8	TDI (0x48); 
	SDR	8	TDI (JTAGI2CN_WRITE[1]); 
	I2C_STOP;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_PROGI2CSA(0x14) instruction;
	SDR	8	TDI (0x28); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_DADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_DADDR_READ[1]);
	SDR_VERIFY 16 TDI(0x0000)
				 TDO(0x0004)
				 MASK(0x0004);
	I2C_STOP;
}
function ASC_ERASE_BECFG
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	! Erase ASC;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_BECFG(0x21) instruction;
	SDR	8	TDI (0x84); 
	I2C_STOP;
	RUN_TEST DELAY PWE;
}
function ASC_ERASE_BECFG_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	! Erase ASC;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_BECFG(0x21) instruction;
	SDR	8	TDI (0x84);
	I2C_STOP;   
	RUN_TEST	DELAY PWE;
}
function ASCCHECK_STATUS {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	TRY 1{
		SDR_VERIFY 16 TDI(0x0000)
					 TDO(0x0000)
					 MASK(0x0081);
	}
	ELSE
	{
		I2C_STOP;
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	8	TDI (0xA0); 
		I2C_STOP;
		RUN_TEST DELAY 10;
		print (1,"CRC Error. Cannot continue.");
	}
	I2C_STOP;	
}

function ASCCHECK_STATUS_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY 16 TDI(0x0000)
				 TDO(0x0000)
				 MASK(0x0081);
	I2C_STOP;		
}
function ASC_PROGRAM_STATUS	
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream TmpDataArray[1][64];
	datastream TmpDataArray2[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	
	CFGArray_TDI.row = 1;
	I2C_Address_CFG.row = 1;
	repeat 14 {
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		TmpDataArray[1] = CFGArray_TDI[RowCount];
		TmpDataArray[1] = $TmpDataArray[1]; 
		DataByte[1] = TmpDataArray[1];
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 8);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 16);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 24);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 32);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 40);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 48);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 56);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		
		! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	8	TDI (0x44); 
		SDR	64	TDI (TmpDataArray2[1]); 
		I2C_STOP;
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	8	TDI (0x24); 
		! Shift in Row Address;
		SDR	8	TDI ( I2C_Address_CFG[RowAddr]); 
		I2C_STOP;
		RUN_TEST DELAY 100;
		RowAddr = RowAddr + 1;
		RowCount = RowCount +1;	
	}	
}		
function ASC_PROGRAM_STATUS_SVF	
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream TmpDataArray[1][64];
	datastream TmpDataArray2[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	
	CFGArray_TDI.row = 1;
	I2C_Address_CFG.row = 1;
	repeat 14 {
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		TmpDataArray[1] = CFGArray_TDI[RowCount]; 
		TmpDataArray[1] = $TmpDataArray[1];
		DataByte[1] = TmpDataArray[1];
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 8);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 16);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 24);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 32);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 40);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 48);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 56);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
    	! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	8	TDI (0x44); 
		SDR	64	TDI (TmpDataArray2[1]); 
		I2C_STOP;
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	8	TDI (0x24); 
		! Shift in Row Address;
		SDR	8	TDI ( I2C_Address_CFG[RowAddr]); 
		I2C_STOP;
		RUN_TEST DELAY 100;
		RowAddr = RowAddr + 1;
		RowCount = RowCount +1;	
	}			
}																																				
function ASC_VERIFY	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream TmpDataArray[1][64];
	datastream TmpDataArray2[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	CFGArray_TDI.row = 1;
	I2C_Address_CFG.row = 1;
	TRY 1 {	
		I2C_START;
	    ! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	8	TDI (0xA4);
		! Shift in Row Address;
		SDR	8	TDI (I2C_Address_CFG[RowAddr]); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		repeat 14 {
			TmpDataArray[1] = CFGArray_TDI[RowCount];
			TmpDataArray[1] = $TmpDataArray[1]; 
			DataByte[1] = TmpDataArray[1];
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 8);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 16);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 24);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 32);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 40);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 48);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			DataByte[1] = (TmpDataArray[1] << 56);
			DataByte[1] = $DataByte[1];
			TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
			! Shift out Data Row = RowCount; 	
	    	SDR_VERIFY	64	TDI  (#1^64)
							TDO  (TmpDataArray2[1])
							MASK (#1^64);				
			RowCount = RowCount +1;					
		}
		I2C_STOP;				
	}
	ELSE
	{
		I2C_STOP;	
		I2C_START;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	8	TDI (0xA0); 
		I2C_STOP;
		RUN_TEST DELAY 10;			
		print (1, "Failed in Function VERIFY /see log file for more details/ ");
	}		
}	
function ASC_VERIFY_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream TmpDataArray[1][64];
	datastream TmpDataArray2[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	CFGArray_TDI.row = 1;
	I2C_Address_CFG.row = 1;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
	SDR	8	TDI (0xA4); 
	! Shift in Row Address;
	SDR	8	TDI (I2C_Address_CFG[RowAddr]); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);	
	repeat 14 {
		TmpDataArray[1] = CFGArray_TDI[RowCount];
		TmpDataArray[1] = $TmpDataArray[1]; 
		DataByte[1] = TmpDataArray[1];
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 8);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 16);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 24);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 32);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 40);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 48);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		DataByte[1] = (TmpDataArray[1] << 56);
		DataByte[1] = $DataByte[1];
		TmpDataArray2[1] = (TmpDataArray2[1] @ DataByte[1]) << 8;
		! Shift out Data Row = RowCount; 	
    	SDR_VERIFY	64	TDI  (0x0000000000000000)
						TDO  (TmpDataArray2[1])
						MASK (#1^64);
		RowCount = RowCount +1;	
	}
	I2C_STOP;			
}	
function ASC_PROGRAM_DONE_BIT {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_PROGDONE(0x27) instruction;
	SDR	8	TDI (0xE4); 
	I2C_STOP;
	RUN_TEST DELAY 100;
}	
function ASC_PROGRAM_DONE_BIT_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_PROGDONE(0x27) instruction;
	SDR	8	TDI (0xE4); 
	I2C_STOP;
	RUN_TEST DELAY 100;
	I2C_START;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY 16 TDI(0x0000)
				 TDO(0x0002)
				 MASK(0x0003);
	I2C_STOP;	
}	
function ASC_DIRECT_DISABLE_WITH_NEW_ADDR {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_NADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_NADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_NADDR_WRITE);	
}
function ASC_DIRECT_DISABLE_WITH_NEW_ADDR_SVF {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_NADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_NADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;					
}
function ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;

	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (JTAGI2CSLAVE_ADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_ADDR_WRITE);
}
function ASC_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
}
function ASC_DIRECT_DISABLE {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
}
function ASC_DIRECT_DISABLE_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
}
function ASC_EXIT_USERMODE {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
}
function ASC_EXIT_USERMODE_WITH_NEW_ADDR {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_NADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_NADDR_WRITE);	
}
function ASC_EXIT_USERMODE_WITH_DEFAULT_ADDR {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;

	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	8	TDI (0xA0); 
	I2C_STOP;
	RUN_TEST DELAY 10;
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (JTAGI2CSLAVE_ADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_ADDR_WRITE);
}
function ASC_REFRESH {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	8	TDI (0x14); 	
	I2C_STOP;
	RUN_TEST DELAY 10;
}
function ASCPROGRAM_USERCODE	
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream UserCode[1][64];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	IF (Usercode_TDO.row = 1)
	{
		UserCode[1] = Usercode_TDO[1];
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	8	TDI (0x44);
		SDR	64	TDI (UserCode[1]); 
		I2C_STOP;
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	8	TDI (0x24); 
		! Shift in Row Address;
		SDR	8	TDI (0x0E); 
		I2C_STOP;
		RUN_TEST DELAY 100;		
	}
		
}
function ASCPROGRAM_USERCODE_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream UserCode[1][64];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	IF (Usercode_TDO.row = 1)
	{
		UserCode[1] = Usercode_TDO[1];
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	8	TDI (0x44);
		SDR	64	TDI (UserCode[1]); 
		I2C_STOP;
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	8	TDI (0x24); 
		! Shift in Row Address;
		SDR	8	TDI (0x0E); 
		I2C_STOP;
		RUN_TEST DELAY 100;		
	}
}
function ASCVERIFY_USERCODE {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	IF (Usercode_TDO.row = 1)
	{
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	8	TDI (0xA4); 
		! Shift in Row Address;
		SDR	8	TDI (0x0E); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		SDR_VERIFY 32 TDI(0x00000000)
					  TDO(Usercode_TDO[1]);
		I2C_STOP;		 
	}
}
function ASCVERIFY_USERCODE_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	IF (Usercode_TDO.row = 1)
	{
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	8	TDI (0xA4); 
		! Shift in Row Address;
		SDR	8	TDI (0x0E); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		SDR_VERIFY 32 TDI(0x00000000)
					  TDO(Usercode_TDO[1]);
		I2C_STOP; 
	}
}
function ASCSAVE_USERCODE {
	datastream SavedUsercode[1][32];
	datastream DataByte[1][8];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
	SDR	8	TDI (0xA4); 
	! Shift in Row Address;
	SDR	8	TDI (0x0E); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR 32 TDI(0x00000000)
		   TDO(SavedUsercode[1]);				
	I2C_STOP;
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDO, SavedUsercode);
	fclose 	NewFile;
}
function ASC_SAVE	
{
	datastream SavedArray[1][896];
	datastream DataByte[1][8];
	int32	RowAddr = 1;
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_Address_CFG.row = 1;
	I2C_START;
    ! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
	SDR	8	TDI (0xA4); 
	! Shift in Row Address;
	SDR	8	TDI (I2C_Address_CFG[RowAddr]); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	repeat 14 {
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		DataByte[1] = $DataByte[1];
		SavedArray[1] = ((SavedArray[1]) @ (DataByte[1])) << 8;				
	}
	I2C_STOP;
	SavedArray[1] = $SavedArray[1];
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (SysIOArray_TDI, SavedArray);
	fclose 	NewFile;
}
function ASC_SAVE_FAULTLOG_REGISTERS
{
	datastream SavedFaultLogArray[1][56];
	datastream DataByte[1][8];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSOFTFAULT(0x73) instruction;
	SDR	8	TDI (0xCE); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDVERFAULT(0x75) instruction;
	SDR	8	TDI (0xAE); 
	SDR	8	TDI (0x00); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR 56 TDI(0x00000000000000)
		   TDO(SavedFaultLogArray[1]);
	I2C_STOP;
	//print (0,SavedFaultLogArray);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedFaultLogArray);
	fclose 	NewFile;
}
function ASC_SAVE_FAULTLOG_REGISTERS_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSOFTFAULT(0x73) instruction;
	SDR	8	TDI (0xCE); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDVERFAULT(0x75) instruction;
	SDR	8	TDI (0xAE); 
	SDR	8	TDI (0x00);
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY 56 TDI(0x00000000000000)
		  		  TDO(0x00000000000000)
		          MASK(0x00000000000000);
	I2C_STOP;
}
function ASC_ERASE_FAULTLOG_MEMORY
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_ERASEFAULT(0x71) instruction;
	SDR	8	TDI (0x8E); 
	RUN_TEST DELAY 10;
	I2C_STOP; 
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	SDR	8	TDI (0xFF); 
	I2C_STOP;
}
function ASC_ERASE_FAULTLOG_FULL_MEMORY
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	8	TDI (0x6E); 
	I2C_STOP;
	
	TRY 1 {
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);	
		! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
		SDR	8	TDI (0xC0); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		SDR_VERIFY 16 TDI(0x0000)
			          TDO(0x0800)
			          MASK(0x0801);
		I2C_STOP;		
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_ERASEFAULT(0x71) instruction;
		SDR	8	TDI (0x8E); 
		RUN_TEST DELAY 10;
		I2C_STOP; 
	}
	ELSE
	{
		I2C_STOP;
	}
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	SDR	8	TDI (0xFF); 
	I2C_STOP;
}
function ASC_SAVE_FAULTLOG_MEMORY
{
	datastream SavedFaultLogRow[1][56];
	datastream DataByte[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	8	TDI (0x6E); 
	I2C_STOP;
	
	TRY 1 {
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);	
		! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
		SDR	8	TDI (0xC0); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		SDR_VERIFY 16 TDI(0x0000)
			          TDO(0x0000)
			          MASK(0x0601);
		I2C_STOP;	
	}
	ELSE
	{
		I2C_STOP;
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	8	TDI (0xA0); 
		I2C_STOP;
		RUN_TEST DELAY PWP;
		print (1,"The Faultlog is being used. Cannot continue.");
	}
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	8	TDI (0x6E); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	repeat 16 {
		SDR 56 TDI(0x00000000000000)
		  	   TDO(SavedFaultLogRow[1]);
		print (0,SavedFaultLogRow);
	}
	I2C_STOP;
}
function ASC_SAVE_FAULTLOG_MEMORY_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	8	TDI (0x2E); 
	! Shift in Read Fault keycode (0xAC);
	SDR	8	TDI (0x35); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	8	TDI (0x6E); 
	I2C_STOP;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	8	TDI (0x6E); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	repeat 16 {
		SDR_VERIFY 56 TDI(0x00000000000000)
		  	  		 TDO(0x00000000000000)
		  	  		 MASK(0x00000000000000);		
	}
	I2C_STOP;
}
function ASC_READ_SHADOW_REGISTERS
{
	datastream SavedRowArray[1][64];
	datastream SavedArray[1][896];
	int32	RowAddr = 1;
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_Address_CFG.row = 1;
	repeat 14 {
		I2C_START;
		! Shift in Slave Address + WR;
		SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
		! Shift in ASC_I2C_INSTR_RDSHDW(0x33) instruction;
		SDR	8	TDI (0xCC); 
		SDR	8	TDI (I2C_Address_CFG[RowAddr]); 
		I2C_RESTART;
		! Shift in Slave Address + RD;
		SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
		! Shift out first byte of data;
		SDR 64 TDI(0x0000000000000000)
			   TDO(SavedRowArray[1]);
		SavedArray[1] = ((SavedArray[1]) @ (SavedRowArray[1])) << 64;
		I2C_STOP;
		RowAddr = RowAddr + 1;	
		print (0,SavedRowArray);	
	}
	I2C_STOP;
	//SavedArray[1] = $SavedArray[1];
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (SysIOArray_TDI, SavedArray);
	fclose 	NewFile;
}
function ASC_SAVE_STATUS
{
	datastream SavedSTATUS[1][16];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR 16 TDI(0x0000)
		  TDO(SavedSTATUS[1]);
	I2C_STOP;
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;	
}
function ASC_SAVE_STATUS_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	I2C_START;
	! Shift in Slave Address + WR;
	SDR	8	TDI (JTAGI2CSLAVE_ADDR_WRITE[1]);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	8	TDI (0xC0); 
	I2C_RESTART;
	! Shift in Slave Address + RD;
	SDR	8	TDI  (JTAGI2CSLAVE_ADDR_READ[1]);
	SDR_VERIFY 16 TDI(0x0000)
		  		 TDO(0x0000)
		  		 MASK(0x0000);
	I2C_STOP;			
}

function JTAGI2C_INIT {
	HDR 1 TDI(#0);
	HIR 8 TDI(#11111111);
	TDR 0;
	TIR 0;
	ENDDR IDLE;
	ENDIR IDLE;
	STATE IDLE;
	! Shift in LSC_ENABLE_X(0x74) instruction;
    SIR 8 TDI (LSC_ENABLE_X);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	! I2C LSC_I2CI_CRBR_WT to set XO2 SCL frequency; 
	SIR 8 TDI (0x9C);
	! I2C Prescale Control Register Setting;
	SDR 16 TDI(0x0000);                  
	RUN_TEST	IDLE TCK 2 DELAY 1;	
	SDR 16 TDI(0x8000);                  
	RUN_TEST	IDLE TCK 2 DELAY 1;
} 
function JTAGI2C_BACKGROUND_INIT {
	HDR 1 TDI(#0);
	HIR 8 TDI(#11111111);
	TDR 0;
	TIR 0;
	ENDDR IDLE;
	ENDIR IDLE;
	STATE IDLE;
	! Shift in LSC_ENABLE_X(0x74) instruction;
    SIR 8 TDI (LSC_ENABLE_X);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 10;
	! I2C LSC_I2CI_CRBR_WT to set XO2 SCL frequency; 
	SIR 8 TDI (0x9C);
	! I2C Prescale Control Register Setting;
	SDR 16 TDI(0x0000);                  
	RUN_TEST	IDLE TCK 2 DELAY 1;	
	SDR 16 TDI(0x8000);                  
	RUN_TEST	IDLE TCK 2 DELAY 1;	
} 
function JTAGI2C_BACKGROUND_SVF_INIT {
	HDR 1 TDI(#0);
	HIR 8 TDI(#11111111);
	TDR 0;
	TIR 0;
	STATE IDLE;
	! Shift in LSC_ENABLE_X(0x74) instruction;
    SIR 8 TDI (LSC_ENABLE_X);
    SDR 8 TDI(0x00);
	RUN_TEST	IDLE	TCK 2 DELAY 10;	
}
function JTAGI2C_SVF_INIT {
	HDR 1 TDI(#0);
	HIR 8 TDI(#11111111);
	TDR 0;
	TIR 0;
	STATE IDLE;
} 
function JTAGI2CREAD_ID	{
	datastream	IDArray[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	TRY 1{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1,"Failed to read the Device's IDCODE. Please check the I2C Slave Address.");
	}

	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	16	TDI (0x1002);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR	8	TDI  (0x9E);
	SDR	8	TDI  (0x00)
			TDO  (IDArray[1]);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	IF (IDArray[1] == 0x88)
	{
	}
	ELSEIF (IDArray[1] == 0x8A)
	{
	}
	ELSEIF (IDArray[1] == 0x89)
	{
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1,"Failed to read the Device's IDCODE.");
	}
}	
function JTAGI2CREAD_ID_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI ((0x50) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	16	TDI (0x1002);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR	8	TDI  (0x9E);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x88)
					MASK (0x00);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2CSAVE_ID	{
	datastream SavedID[1][8];
	file	NewFile = "FILE_SAVE"; 
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	16	TDI (0x1002);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR	8	TDI  (0x9E);
	SDR	8	TDI  (0x00)
			TDO  (SavedID[1]);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;			
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function JTAGI2CSAVE_ID_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDID(0x02) instruction;
	SDR	16	TDI (0x1002);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR	8	TDI  (0x9E);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x00)
					MASK (0x00);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
}	
function JTAGI2C_ENABLE	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_ENPROG(0x04) instruction;
	SDR	16	TDI (0x1004); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in PROG MODE KEY1;
	SDR	16	TDI (0x103D); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in PROG MODE KEY2;
	SDR	16	TDI (0x10E5); 
	RUN_TEST IDLE TCK 1000 ; 
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	TRY 1{
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x10)
					 MASK(0x90);	
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1,"Failed to enter the programming mode. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	
} 
function JTAGI2C_ENABLE_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_ENPROG(0x04) instruction;
	SDR	16	TDI (0x1004); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in PROG MODE KEY1;
	SDR	16	TDI (0x103D); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in PROG MODE KEY2;
	SDR	16	TDI (0x10E5); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				 TDO(0x10)
				 MASK(0x90);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;		
} 
function JTAGI2C_ERASE_I2CSA	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	JTAGI2CSLAVE_DADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_DADDR_WRITE[1] = $JTAGI2CSLAVE_DADDR_WRITE[1];
	JTAGI2CSLAVE_DADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CSLAVE_DADDR_READ[1] = $JTAGI2CSLAVE_DADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_ERASEI2CSA(0x11) instruction;
	SDR	16	TDI (0x1011); 
	RUN_TEST	IDLE TCK 2 DELAY PWE;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_DADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_DADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	TRY 1{
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x00)
					 MASK(0xA1);
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1; 
		print (1,"Failed to erase the I2CSA. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
}
function JTAGI2C_ERASE_I2CSA_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_DADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	JTAGI2CSLAVE_DADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_DADDR_WRITE[1] = $JTAGI2CSLAVE_DADDR_WRITE[1];
	JTAGI2CSLAVE_DADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CSLAVE_DADDR_READ[1] = $JTAGI2CSLAVE_DADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_ERASEI2CSA(0x11) instruction;
	SDR	16	TDI (0x1011); 
	RUN_TEST	IDLE TCK 2 DELAY PWE;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_DADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_DADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				 TDO(0x00)
				 MASK(0xA1);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
		
}
function JTAGI2C_PROGRAM_I2CSA	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	JTAGI2CSLAVE_NADDR_READ[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | 0x01);

	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_WRITEI2CSA(0x12) instruction;
	SDR	16	TDI (0x1012); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI ((0x10) @ (JTAGI2CN_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_PROGI2CSA(0x14) instruction;
	SDR	16	TDI (0x1014); 
	RUN_TEST	IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY 100;
		
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_NADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	TRY 1{
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x20)
					 MASK(0x20);
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1; 
		print (1,"Failed to program the I2CSA. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;					
}
function JTAGI2C_PROGRAM_I2CSA_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_READ[1][8];
	
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = (DEFAULT_ADDR_READ) ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	JTAGI2CSLAVE_NADDR_READ[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | 0x01);

	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_WRITEI2CSA(0x12) instruction;
	SDR	16	TDI (0x1012); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI ((0x10) @ (JTAGI2CN_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1])); 
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_PROGI2CSA(0x14) instruction;
	SDR	16	TDI (0x1014); 
	RUN_TEST	IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY 100;
		
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_NADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				 TDO(0x20)
				 MASK(0x20);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;    		
}
function JTAGI2C_ERASE_BECFG
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	TRY 1{
		! Erase ASC;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_BECFG(0x21) instruction;
		SDR	16	TDI (0x1021); 
		loop PWE {
			RUN_TEST IDLE TCK 2 DELAY 10;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
			SDR	16	TDI (0x1003); 
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Slave Address + RD;
			SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI  (0x2800);
			RUN_TEST IDLE TCK 1000 ;
			SIR	8	TDI  (0x9E);
			SDR_VERIFY 8 TDI(0x00)
				  		 TDO(0x00)
				         MASK(0x01);		
		}	
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;	
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1, "Failed in Function ERASE /see log file for more details/ ");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	 
}
function JTAGI2C_ERASE_BECFG_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Erase ASC;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_BECFG(0x21) instruction;
	SDR	16	TDI (0x1021); 
	RUN_TEST IDLE TCK 1000 DELAY PWE; 
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST	IDLE TCK 1000 ;
}
function JTAGI2CCHECK_STATUS {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	TRY 1{
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x00)
					 MASK(0x81);
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1; 
		print (1,"CRC Error. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST	IDLE TCK 1000 ;
	
}

function JTAGI2CCHECK_STATUS_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				 TDO(0x00)
				 MASK(0x81);	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;		
}
function JTAGI2C_PROGRAM_STATUS	
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream ASCTmpDataArray[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	CFGArray_TDI.row = 1;
	Address_CFG.row = 1;
	TRY 1{
		repeat 14 {
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			ASCTmpDataArray[1] = CFGArray_TDI[RowCount]; 
	    	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR 8 TDI(0x9D);
			! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
			SDR	16	TDI (0x1022); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = ASCTmpDataArray[1];
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 8);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 16);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;		
			DataByte[1] = (ASCTmpDataArray[1] << 24);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 32);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 40);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 48);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (ASCTmpDataArray[1] << 56);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
			SDR	16	TDI (0x1024); 
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Row Address;
			SDR	16	TDI ( Address_CFG[RowAddr]);
			RUN_TEST IDLE TCK 1000 ; 
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 2 DELAY 100;
			RowAddr = RowAddr + 1;
			RowCount = RowCount +1;	
		}	
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;	
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1, "Failed in Function PROGRAM /see log file for more details/ ");
	}
}		
function JTAGI2C_PROGRAM_STATUS_SVF	
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream ASCTmpDataArray[1][64];
	datastream DataByte[1][8];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	CFGArray_TDI.row = 1;
	Address_CFG.row = 1;
	repeat 14 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		ASCTmpDataArray[1] = CFGArray_TDI[RowCount]; 
    	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR 8 TDI(0x9D);
		! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	16	TDI (0x1022); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = ASCTmpDataArray[1];
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 8);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 16);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;		
		DataByte[1] = (ASCTmpDataArray[1] << 24);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 32);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 40);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 48);		
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (ASCTmpDataArray[1] << 56);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);						
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	16	TDI (0x1024); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI (Address_CFG[RowAddr]); 
		RUN_TEST IDLE TCK 1000 ; 
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 50;
		RowAddr = RowAddr + 1;
		RowCount = RowCount +1;	
	}		
}																																				
function JTAGI2C_VERIFY	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream DataByte[1][8];
	datastream TmpDataArray[1][64];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	CFGArray_TDI.row = 1;
	Address_CFG.row = 1;
	TRY 1 {	
		repeat 14 {
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
			SDR	16	TDI (0x1025); 
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Row Address;
			SDR	16	TDI (Address_CFG[RowAddr]); 
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Slave Address + RD;
			SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI (0x2000); 
			RUN_TEST IDLE TCK 1000 ;
			TmpDataArray[1] = CFGArray_TDI[RowCount];
			! Shift out Data Row = RowCount; 	
	    	DataByte[1] = (TmpDataArray[1]);
	    	DataByte[1] = $DataByte[1];
	    	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
			SIR	8	TDI  (0x9E);	
	    	SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1])
							MASK (0xFF);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 8);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 16);			
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 24);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;	
			DataByte[1] = (TmpDataArray[1] << 32);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 40);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 48);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (TmpDataArray[1] << 56);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (DataByte[1]);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);	
			SDR	16	TDI  (0x2800);
			RUN_TEST IDLE TCK 1000 ;
			SIR	8	TDI  (0x9E);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			RowAddr = RowAddr + 1;
			RowCount = RowCount +1;	
		}			
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;	
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1, "Failed in Function VERIFY /see log file for more details/ ");
	}		
}	
function JTAGI2C_VERIFY_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	datastream DataByte[1][8];
	datastream TmpDataArray[1][64];
	int32	RowCount = 1;
	int32	RowAddr = 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	CFGArray_TDI.row = 1;
	Address_CFG.row = 1;	
	repeat 14 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	16	TDI (0x1025); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI (Address_CFG[RowAddr]); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI (0x2000); 
		RUN_TEST IDLE TCK 1000 ;
		TmpDataArray[1] = CFGArray_TDI[RowCount];
		! Shift out Data Row = RowCount; 	
    	DataByte[1] = (TmpDataArray[1]);
    	DataByte[1] = $DataByte[1];
    	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR	8	TDI  (0x9E);	
    	SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1])
						MASK (0xFF);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 8);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 16);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 24);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;	
		DataByte[1] = (TmpDataArray[1] << 32);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 40);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 48);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (TmpDataArray[1] << 56);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (DataByte[1]);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		RowAddr = RowAddr + 1;
		RowCount = RowCount +1;	
	}
}	
function JTAGI2C_PROGRAM_DONE_BIT {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_PROGDONE(0x27) instruction;
	SDR	16	TDI (0x1027); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY 100;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	TRY 1{
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x40)
					 MASK(0xC0);
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1,"Failed to program the DONE. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}	
function JTAGI2C_PROGRAM_DONE_BIT_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_PROGDONE(0x27) instruction;
	SDR	16	TDI (0x5027); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY 100;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				 TDO(0x40)
				 MASK(0xC0);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
}	
function JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	

	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_NADDR_WRITE);			
}
function JTAGI2C_DIRECT_DISABLE_WITH_NEW_ADDR_SVF {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	

	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = (JTAGI2CSLAVE_ADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address:");
	print (0,JTAGI2CSLAVE_ADDR_WRITE);
}
function JTAGI2C_DIRECT_DISABLE_WITH_DEFAULT_ADDR_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_DIRECT_DISABLE {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_DIRECT_DISABLE_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_EXIT_USERMODE {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_EXIT_USERMODE_BACKGROUND {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_EXIT_USERMODE_BACKGROUND_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	

	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;	
		
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address: ");
	print (0,JTAGI2CSLAVE_NADDR_WRITE);			
}
function JTAGI2C_EXIT_USERMODE_WITH_NEW_ADDR_SVF {
	datastream JTAGI2CN_WRITE[1][8];
	datastream JTAGI2CSLAVE_NADDR_WRITE[1][8];
	JTAGI2CN_WRITE[1] = (NEW_I2C_ADDR_WRITE ) ;
	JTAGI2CN_WRITE[1] = $JTAGI2CN_WRITE[1];
	
	JTAGI2CSLAVE_NADDR_WRITE[1] = (SLAVE_ADDRESS_WRITE) ;
	JTAGI2CSLAVE_NADDR_WRITE[1] = $JTAGI2CSLAVE_NADDR_WRITE[1];
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] & 0x0F);
	JTAGI2CSLAVE_NADDR_WRITE[1] = (JTAGI2CSLAVE_NADDR_WRITE[1] | (JTAGI2CN_WRITE[1] << 1));
	

	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_NADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;	
		
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;	
}
function JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
	JTAGI2CSLAVE_ADDR_WRITE[1] = (JTAGI2CSLAVE_ADDR_WRITE[1] >> 1);
	print (0,"Current I2C Slave Address:");
	print (0,JTAGI2CSLAVE_ADDR_WRITE);
}
function JTAGI2C_EXIT_USERMODE_WITH_DEFAULT_ADDR_SVF {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = (DEFAULT_ADDR_WRITE) ;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
	SDR	16	TDI (0x1005); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
	
	! Shift in ISC DISABLE(0x26) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 2 DELAY 1;
}
function JTAGI2C_REFRESH {
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_LDSHDW(0x28) instruction;
	SDR	16	TDI (0x1028); 	
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 2 DELAY PWP;
}
function JTAGI2CPROGRAM_USERCODE	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream DataByte[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	IF (Usercode_TDO.row = 1)
	{
		TRY 1{
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
			SDR	16	TDI (0x1022); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = Usercode_TDO[1];
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 8);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 16);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 24);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 32);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 40);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 48);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 56);
			DataByte[1] = $DataByte[1];
			SDR	16	TDI ((0x10) @ (DataByte[1])); 
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
			SDR	16	TDI (0x1024); 
			RUN_TEST IDLE TCK 1000 ;
			! Shift in Row Address;
			SDR	16	TDI ( 0x1070);
			RUN_TEST IDLE TCK 1000 ; 
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 2 DELAY 100;	
		}
		ELSE
		{
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
			SDR	16	TDI (0x1005); 
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 2 DELAY 20;	
			! Shift in ISC DISABLE(0x26) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 2 DELAY 1;
			print (1, "Failed in Function PROGRAM USERCODE /see log file for more details/ ");
		}
	}	
}
function JTAGI2CPROGRAM_USERCODE_SVF	{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream DataByte[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	IF (Usercode_TDO.row = 1)
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_WRITECFG(0x22) instruction;
		SDR	16	TDI (0x1022); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = Usercode_TDO[1];
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 8);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 16);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 24);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 32);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 40);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 48);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 56);
		DataByte[1] = $DataByte[1];
		SDR	16	TDI ((0x10) @ (DataByte[1])); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_PROGCFG(0x24) instruction;
		SDR	16	TDI (0x1024); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI ( 0x1070);
		RUN_TEST IDLE TCK 1000 ; 
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 100;
	}	
}
function JTAGI2CVERIFY_USERCODE {
	datastream DataByte[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	IF (Usercode_TDO.row = 1)
	{
		TRY 1{
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ; 
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
			SDR	16	TDI (0x1025); 
			RUN_TEST IDLE TCK 1000 ; 
			! Shift in Row Address;
			SDR	16	TDI (0x1070); 
			RUN_TEST IDLE TCK 1000 ; 
			! Shift in Slave Address + RD;
			SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
			RUN_TEST IDLE TCK 1000 ; 
			SDR	16	TDI  (0x2000);
			RUN_TEST IDLE TCK 1000 ; 
			! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
			SIR 8 TDI(0x9E);
			DataByte[1] = (Usercode_TDO[1]);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 8);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 16);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;
			DataByte[1] = (Usercode_TDO[1] << 24);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;			 
			DataByte[1] = (Usercode_TDO[1] << 32);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;			 
			DataByte[1] = (Usercode_TDO[1] << 40);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
			RUN_TEST IDLE TCK 1000 ;			 
			DataByte[1] = (Usercode_TDO[1] << 48);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);	
			RUN_TEST IDLE TCK 1000 ;			 
			DataByte[1] = (Usercode_TDO[1] << 56);
			DataByte[1] = $DataByte[1];
			SDR_VERIFY 8 TDI(0x00)
						 TDO(DataByte[1]);
						 			 			 			 
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);	
			SDR	16	TDI  (0x2800);
			RUN_TEST IDLE TCK 1000 ;
			SIR	8	TDI  (0x9E);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ; 
		}
		ELSE
		{
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 1000 ;
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in Slave Address + WR;
			SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
			RUN_TEST IDLE TCK 1000 ;
			! Check ACK;
			! Shift in LSC_I2C_SR_RD(0x9F) instruction;
			SIR	8	TDI  (0x9F);
			SDR_VERIFY	8	TDI  (0x00)
							TDO  (0x04)
							MASK (0x24);
			! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
			SIR	8	TDI  (0x9D);
			! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
			SDR	16	TDI (0x1005); 
			RUN_TEST IDLE TCK 1000 ;
			SDR	16	TDI  (0x5000);
			RUN_TEST IDLE TCK 2 DELAY 20;	
			! Shift in ISC DISABLE(0x26) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 2 DELAY 1;
			print (1, "Failed in Function VERIFY USERCODE /see log file for more details/ ");
		}
	}
	
}
function JTAGI2CVERIFY_USERCODE_SVF {
	datastream DataByte[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	
	IF (Usercode_TDO.row = 1)
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ; 
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	16	TDI (0x1025); 
		RUN_TEST IDLE TCK 1000 ; 
		! Shift in Row Address;
		SDR	16	TDI (0x1070); 
		RUN_TEST IDLE TCK 1000 ; 
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ; 
		SDR	16	TDI  (0x2000);
		RUN_TEST IDLE TCK 1000 ; 
		! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR 8 TDI(0x9E);
		DataByte[1] = (Usercode_TDO[1]);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 8);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 16);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;
		DataByte[1] = (Usercode_TDO[1] << 24);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;			 
		DataByte[1] = (Usercode_TDO[1] << 32);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;			 
		DataByte[1] = (Usercode_TDO[1] << 40);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
		RUN_TEST IDLE TCK 1000 ;			 
		DataByte[1] = (Usercode_TDO[1] << 48);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);	
		RUN_TEST IDLE TCK 1000 ;			 
		DataByte[1] = (Usercode_TDO[1] << 56);
		DataByte[1] = $DataByte[1];
		SDR_VERIFY 8 TDI(0x00)
					 TDO(DataByte[1]);
					 			 			 			 
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;  
	}
}
function JTAGI2CSAVE_USERCODE {
	datastream ASCSavedUsercode[1][32];
	datastream DataByte[1][8];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];	
	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ; 
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
	SDR	16	TDI (0x1025); 
	RUN_TEST IDLE TCK 1000 ; 
	! Shift in Row Address;
	SDR	16	TDI (0x1070); 
	RUN_TEST IDLE TCK 1000 ; 
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ; 	
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ; 
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR	8	TDI  (0x9E);
	SDR	8	TDI  (0x00)
			TDO  (DataByte[1]);
	ASCSavedUsercode[1] = ((ASCSavedUsercode[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR	8	TDI  (0x00)
			TDO  (DataByte[1]);
	ASCSavedUsercode[1] = ((ASCSavedUsercode[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR	8	TDI  (0x00)
			TDO  (DataByte[1]);
	ASCSavedUsercode[1] = ((ASCSavedUsercode[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR	8	TDI  (0x00)
			TDO  (DataByte[1]);			
	ASCSavedUsercode[1] = ((ASCSavedUsercode[1]) @ (DataByte[1])) << 8;				
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;  
	ASCSavedUsercode[1] = $ASCSavedUsercode[1];
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDO, ASCSavedUsercode);
	fclose 	NewFile;
}
function JTAGI2C_SAVE	
{
	datastream ASCSavedArray[1][896];
	datastream DataByte[1][8];
	int32	RowAddr = 1;
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];	
	Address_CFG.row = 1;
	repeat 14 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ASC_I2C_INSTR_VERCFG(0x25) instruction;
		SDR	16	TDI (0x1025); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI (Address_CFG[RowAddr]); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x2000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR 8 TDI(0x9E);
		! Shift out first byte of data;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ASCSavedArray[1] = ((ASCSavedArray[1]) @ (DataByte[1])) << 8;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
		RowAddr = RowAddr + 1;		
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	ASCSavedArray[1] = $ASCSavedArray[1];
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (SysIOArray_TDI, ASCSavedArray);
	fclose 	NewFile;
}

function JTAGI2C_READ_SHADOW_REGISTERS
{
	datastream ShadowSavedArray[1][896];
	datastream ShadowSavedRowArray[1][64];
	datastream DataByte[1][8];
	int32	RowAddr = 1;
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];	
	Address_CFG.row = 1;
	repeat 14 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ASC_I2C_INSTR_RDSHDW(0x33) instruction;
		SDR	16	TDI (0x1033); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI (Address_CFG[RowAddr]); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x2000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR 8 TDI(0x9E);
		! Shift out first byte of data;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = DataByte[1];
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		ShadowSavedRowArray[1] = ((ShadowSavedRowArray[1]) @ (DataByte[1])) << 8;
		ShadowSavedArray[1] = ((ShadowSavedArray[1]) @ (DataByte[1])) << 8;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
		RowAddr = RowAddr + 1;	
		print (0,ShadowSavedRowArray);	
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;	
}
function JTAGI2C_READ_SHADOW_REGISTERS_SVF
{
	int32	RowAddr = 1;
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];	
	Address_CFG.row = 1;
	repeat 14 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Shift in ASC_I2C_INSTR_RDSHDW(0x33) instruction;
		SDR	16	TDI (0x1033); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Row Address;
		SDR	16	TDI (Address_CFG[RowAddr]); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x2000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR 8 TDI(0x9E);
		! Shift out first byte of data;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(0x00)
			  MASK(0x00);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
		RowAddr = RowAddr + 1;	
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2C_SAVE_FAULTLOG_REGISTERS
{
	datastream SavedFaultLogReg[1][56];
	datastream DataByte[1][8];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSOFTFAULT(0x73) instruction;
	SDR	16	TDI (0x1073); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDVERFAULT(0x75) instruction;
	SDR	16	TDI (0x1075); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in row address;
	SDR	16	TDI (0x1000); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	SavedFaultLogReg[1] = ((SavedFaultLogReg[1]) @ (DataByte[1])) << 8;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 
	print (0,SavedFaultLogReg);
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedFaultLogReg);
	fclose 	NewFile;
}
function JTAGI2C_SAVE_FAULTLOG_REGISTERS_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDSOFTFAULT(0x73) instruction;
	SDR	16	TDI (0x1073); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDVERFAULT(0x75) instruction;
	SDR	16	TDI (0x1075); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in row address;
	SDR	16	TDI (0x1000); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2C_ERASE_FAULTLOG_MEMORY
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_ERASEFAULT(0x71) instruction;
	SDR	16	TDI (0x1071); 
	RUN_TEST IDLE TCK 2 DELAY 10;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 
	
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2C_ERASE_FAULTLOG_FULL_MEMORY
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	16	TDI (0x1076); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
			 	 TDO(0x00)
			 	 MASK(0x01);					 
	TRY 1 {
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
				 	 TDO(0x08)
				 	 MASK(0x08);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
		
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		print (0,"FaultLog is full. Erasing Faultlog memory...");
		! Shift in ASC_I2C_INSTR_ERASEFAULT(0x71) instruction;
		SDR	16	TDI (0x1071); 
		RUN_TEST IDLE TCK 2 DELAY 10;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
	}
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2C_SAVE_FAULTLOG_MEMORY
{
	datastream SavedFaultLogRow[1][56];
	datastream DataByte[1][8];
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	16	TDI (0x1076); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	
	TRY 1 {
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
		SDR	16	TDI (0x1003); 
		RUN_TEST IDLE TCK 1000 ;
		! Shift in Slave Address + RD;
		SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x2000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
		SIR 8 TDI(0x9E);
		SDR_VERIFY 8 TDI(0x00)
					 TDO(0x00)
					 MASK(0x01);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
				 	 TDO(0x00)
				 	 MASK(0x06);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);	
		SDR	16	TDI  (0x2800);
		RUN_TEST IDLE TCK 1000 ;
		SIR	8	TDI  (0x9E);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ; 
		
	}
	ELSE
	{
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Disable FaultLog Read;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
		SDR	16	TDI (0x1074); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI (0x10FF); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 1000 ;
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in Slave Address + WR;
		SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
		RUN_TEST IDLE TCK 1000 ;
		! Check ACK;
		! Shift in LSC_I2C_SR_RD(0x9F) instruction;
		SIR	8	TDI  (0x9F);
		SDR_VERIFY	8	TDI  (0x00)
						TDO  (0x04)
						MASK (0x24);
		! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
		SIR	8	TDI  (0x9D);
		! Shift in ASC_I2C_INSTR_USERMODE(0x05) instruction;
		SDR	16	TDI (0x1005); 
		RUN_TEST IDLE TCK 1000 ;
		SDR	16	TDI  (0x5000);
		RUN_TEST IDLE TCK 2 DELAY 20;
		! Shift in ISC DISABLE(0x26) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 2 DELAY 1;
		print (1,"The Faultlog is being used. Cannot continue.");
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	16	TDI (0x1076); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	repeat 16 {
		SDR 8 TDI(0x00)
		  	  TDO(DataByte[1]);
		SavedFaultLogRow[1] = DataByte[1];
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		SDR 8 TDI(0x00)
			  TDO(DataByte[1]);
		SavedFaultLogRow[1] = ((SavedFaultLogRow[1]) @ (DataByte[1])) << 8;
		RUN_TEST IDLE TCK 1000 ;
		print (0,SavedFaultLogRow);
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	//print (0,SavedFaultLogArray);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedFaultLogArray);
	fclose 	NewFile;	
}
function JTAGI2C_SAVE_FAULTLOG_MEMORY_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);					
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Read Fault keycode (0xAC);
	SDR	16	TDI (0x10AC); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDALLFAULT(0x76) instruction;
	SDR	16	TDI (0x1076); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	repeat 16 {
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
		SDR_VERIFY 8 TDI(0x00)
		  	  		 TDO(0x00)
		  	  		 MASK(0x00);
		RUN_TEST IDLE TCK 1000 ;
	}
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 
	! Disable FaultLog Read;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in ASC_I2C_INSTR_RDFAULTEN(0x74) instruction;
	SDR	16	TDI (0x1074); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI (0x10FF); 
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ;
}
function JTAGI2C_SAVE_STATUS
{
	datastream ASCSavedSTATUS[1][16];
	datastream DataByte[1][8];
	file NewFile = "FILE_SAVE";
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	ASCSavedSTATUS[1] = ((ASCSavedSTATUS[1]) @ (DataByte[1])) << 8;	
	RUN_TEST IDLE TCK 1000 ;
	SDR 8 TDI(0x00)
		  TDO(DataByte[1]);
	ASCSavedSTATUS[1] = ((ASCSavedSTATUS[1]) @ (DataByte[1])) << 8;	
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 			
	ASCSavedSTATUS[1] = $ASCSavedSTATUS[1];
	//print (0,ASCSavedSTATUS);	
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, ASCSavedSTATUS);
	fclose 	NewFile;	
}
function JTAGI2C_SAVE_STATUS_SVF
{
	datastream JTAGI2CSLAVE_ADDR_WRITE[1][8];
	datastream JTAGI2CSLAVE_ADDR_READ[1][8];
	JTAGI2CSLAVE_ADDR_WRITE[1] = SLAVE_ADDRESS_WRITE;
	JTAGI2CSLAVE_ADDR_WRITE[1] = $JTAGI2CSLAVE_ADDR_WRITE[1];
	JTAGI2CSLAVE_ADDR_READ[1] = SLAVE_ADDRESS_READ;
	JTAGI2CSLAVE_ADDR_READ[1] = $JTAGI2CSLAVE_ADDR_READ[1];
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	! Shift in Slave Address + WR;
	SDR	16	TDI ((0x90) @ (JTAGI2CSLAVE_ADDR_WRITE[1]));
	RUN_TEST IDLE TCK 1000 ;
	! Check ACK;
	! Shift in LSC_I2C_SR_RD(0x9F) instruction;
	SIR	8	TDI  (0x9F);
	SDR_VERIFY	8	TDI  (0x00)
					TDO  (0x04)
					MASK (0x24);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	! Shift in ASC_I2C_INSTR_RDSTATUS(0x03) instruction;
	SDR	16	TDI (0x1003); 
	RUN_TEST IDLE TCK 1000 ;
	! Shift in Slave Address + RD;
	SDR	16	TDI  ((0x90) @ (JTAGI2CSLAVE_ADDR_READ[1]));
	RUN_TEST IDLE TCK 1000 ;
	SDR	16	TDI  (0x2000);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_RXDR_RD(0x9E) instruction;
	SIR 8 TDI(0x9E);
	SDR_VERIFY 8 TDI(0x00)
		  		 TDO(0x00)
		  		 MASK(0x00);
	RUN_TEST IDLE TCK 1000 ;
	SDR_VERIFY 8 TDI(0x00)
		  		 TDO(0x00)
		  		 MASK(0x00);
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);	
	SDR	16	TDI  (0x2800);
	RUN_TEST IDLE TCK 1000 ;
	SIR	8	TDI  (0x9E);
	RUN_TEST IDLE TCK 1000 ;
	! Shift in LSC_I2C_TXDR_WT(0x9D) instruction;
	SIR	8	TDI  (0x9D);
	SDR	16	TDI  (0x5000);
	RUN_TEST IDLE TCK 1000 ; 			
}

]]>
</Script>
</SVF_Plus>