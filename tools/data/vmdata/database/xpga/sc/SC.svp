<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >

<!-- 
	10/27/03 Nguyen added support of Comment "!"
	09/16/04 Spinti: Added RAM_WRITE and RAM_READ instructions.
					 Added JTAG Burst Program operation.
					 Removed Erase, Read, and Program DONE operations.
					 Added function BURST_PROGRAM.
					 Changed program TCK's from 5 to 64.
	09/17/04 Spinti: Changed RAM_WRITE JTAG Burst Program operation to match ORCA4.
					 Removed ENABLE, PROGRAM_USERCODE, and DISABLE from JTAG Burst Program operations.
					 Changed BURST_PROGRAM's RAM_WRITE(0xC1) instruction RUN_TEST IDLE TCK to 10000.
					 Changed BURST_PROGRAM's RUN_TEST IDLE TCK to 100.
    09/20/04 Spinti: Changed Preload to all 1's
	09/24/04 Spinti: Added Fast Program operation (same as JTAG Burst Program).
	10/12/04 Spinti: Removed ENABLE, READ_USERCODE, and DISABLE from Read and Save.
					 Removed TCKs after RAM_READ instruction before shifting data out during Read and Save.
	11/24/04 Nguyen added "Read Programming Status" and "Read DONE Bit" operations
    03/07/05 Spinti: Changed the ENABLE delay to 20ms, and DISABLE delay to 200ms.
    05/02/05 Nguyen changed the CAPTURE function
	01/28/08 Spinti: Added "Refresh from FLASH" operation, function REFRESH_FUNCTION, and function SVF_REFRESH_FUNCTION.
	01/29/08 Spinti: Changed the REFRESH instruction name to LSCC_REFRESH.
	02/27/09 Nguyen: Add the "Erase,Program,Verify" operation in SVF mode (use the Fast program flow).

-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<Instruction>
		BYPASS				= 0xFF;
		EXTEST	 			= 0x00;
		ISC_PROGRAM			= 0x07;
		ISC_READ			= 0x0A;
		ISC_ENABLE 			= 0x15;
		USERCODE 			= 0x17;
		HIGHZ				= 0x18;
		IDCODE 				= 0x19;
		ISC_PROGRAM_USERCODE	= 0x1A;
		ISC_DISABLE			= 0x1E;
		CLAMP				= 0x20;
		LSCC_REFRESH		= 0x23;
		ISC_ERASE_DONE		= 0x24;
		INTEST				= 0x2C;
		ISC_PROGRAM_DONE	= 0x2F;
		ISC_NOOP			= 0x30;
		BSAMPLE	 			= 0x6C;
		BPRELOAD			= 0x6D;
		RUNBIST				= 0x04;
		RAM_WRITE			= 0xC1;
		RAM_READ			= 0xC2;
		SPI_PROGRAM			= 0xDB;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
</Data>
<Operation_List>
	"Read and Save"	=	"INIT, READ_ID,SAVE_ARRAY";
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"INIT, READ_ID, SAVE_USERCODE";
	
	"Disable Only" = "	INIT 	! Initialize, 
	 			 	DISABLE ! Exit the programming mode"	;
	 			 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
						
	"Program,Verify" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							DISABLE ! Exit the programming mode"	;
						
	"Program" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					ENABLE	! Enable the programming mode, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							ENABLE	! Enable the programming mode, 
							VERIFY	! Verify Fuse Map, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "   INIT 	! Initialize"	;
	"Serial Program" = "	INIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	INIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
						SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Fast Program" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,  
								BURST_PROGRAM	! Program Fuse Map"	;
	"Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"Read DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 READ_DONE_BIT	! Read the done bit,
					 DISABLE ! Exit the programming mode"	;
	"Display DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 READ_DONE_BIT	! Read the done bit,
					 DISABLE ! Exit the programming mode"	;
	"Program DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Erase DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Refresh from FLASH" = " 	INIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
					

</Operation_List>
<Operation_List label="SingleSVFOperation">
	"Read and Save"	=	"SVFINIT, READ_ID, SVF_SAVE_ID,SVF_SAVE_ARRAY";
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	 			 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,  
								BURST_PROGRAM	! Program Fuse Map"	;
													
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							DISABLE ! Exit the programming mode"	;
								 							 
	"Program" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					ENABLE	! Enable the programming mode, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable the programming mode, 
							VERIFY	! Verify Fuse Map,  
							DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "   SVFINIT 	! Initialize"	;
	"Serial Program" = "	SVFINIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
						SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Fast Program" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,  
								BURST_PROGRAM	! Program Fuse Map"	;
	"Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 SVF_SAVE_DONE_BIT	! Read the done bit,
					 DISABLE ! Exit the programming mode"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;					 

	"Refresh from FLASH" = " 	SVFINIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
</Operation_List>
<Operation_List label="TurboOperation">
	"Read and Save"	=	"INIT,SAVE_ARRAY,SAVE_USERCODE";
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"INIT, SAVE_USERCODE";			 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Program,Verify" = "	INIT 	! Initialize, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE"	;
	"Program" = "	INIT 	! Initialize, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							VERIFY	! Verify Fuse Map"	;
	"Re-Initialize" = "   INIT 	! Initialize"	;
	"Serial Program" = "	INIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	INIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
						SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Fast Program" = "	INIT 	! Initialize,   
								BURST_PROGRAM	! Program Fuse Map"	;
	"Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;
	"Read DONE bit"	=	"INIT 	! Initialize, 
					 	READ_DONE_BIT	! Read the done bit"	;
	"Program DONE bit"	=	"INIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Erase DONE bit"	=	"INIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase the done bit"	;					 	

	"Refresh from FLASH" = " 	INIT !Initialize,
					REFRESH_FUNCTION ! Refresh";


</Operation_List>
<Operation_List label="ChainSVFOperation">
	"Read and Save"	=	"INIT,SVF_SAVE_ARRAY,SVF_SAVE_USERCODE";
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, SVF_SAVE_USERCODE";				 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE"	;
	"Program" = "	SVFINIT 	! Initialize,  
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map"	;
	"Re-Initialize" = "   SVFINIT 	! Initialize"	;
	"Serial Program" = "	SVFINIT 	! Initialize,   
							SERIAL_PROGRAM"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
						ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
						SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Fast Program" = "	SVFINIT 	! Initialize, 
								BURST_PROGRAM	! Program Fuse Map"	;
	"Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";
	"Capture Only" = "	SVFINIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;
	"Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 	SVF_SAVE_DONE_BIT	! Read the done bit"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase the done bit"	;					 	

	"Refresh from FLASH" = " 	SVFINIT !Initialize,
					REFRESH_FUNCTION ! Refresh";

</Operation_List>
<Script>
<![CDATA[

function INIT {
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IDLE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}

function SVFINIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IDLE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}
function PRELOAD {				
   ! Shift in Preload(0x6D) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}
function SAMPLE {				
   ! Shift in Sample(0x6C) instruction;
   SIR Instruction_Length TDI(BSAMPLE);
   STATE DRPAUSE;
   STATE IDLE;
}
function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Sample(0x6C) instruction;
   SIR Instruction_Length TDI(BSAMPLE);
   SDR BSCAN_Length TDI(#1^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, SavedBScanTDO);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ! Shift in Preload(0x6D) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}

function ENABLE {
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 32 DELAY 20;
}

function DISABLE {
	! Shift in ISC DISABLE(0x1E) instruction;
	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 32 DELAY 200;
}

function READ_ID {
	! Shift in IDCODE(0x19) instruction;
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#0^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);
}

function PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	! Shift in ISC PROGRAM (0x07) instruction;
	SIR Instruction_Length	TDI (ISC_PROGRAM);
	repeat Address_Length {			
		! Shift in Data Row = RowCount;
		SDR	Row_Width	TDI	(FuseArray_TDI);
		RUN_TEST	IDLE	TCK 64 ;
		RowCount = RowCount +1;
	} // repeat
}

function PROGRAM_USERCODE {
	IF (Usercode_TDI.row = 1)
	{
		! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI[1]);
		RUN_TEST	TCK 20 DELAY 	PWP;
	}
}

function PROGRAM_DONE_BIT {
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	// Goto Run Test Idle 
	RUN_TEST	IDLE TCK 5 DELAY 50;
	! Shift in BYPASS(0xFF) instruction;
    SIR_VERIFY	Instruction_Length 	TDI (BYPASS)
						TDO(0xFF)
			   	      	MASK(0x04);	
}
function ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 5 DELAY 50;
}
// Verify Functions _____________________________________________
function VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	! Shift in ISC READ (0x0A) instruction; 
	SIR Instruction_Length	TDI	(ISC_READ);
	repeat Address_Length {	
		RUN_TEST	IDLE	TCK 64 ;	
		! Shift Out Data Row = RowCount;
		SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(FuseArray_TDI)
								MASK(FuseArray_MASK);
		RowCount = RowCount +1;
	} // repeat
}

function VERIFY_ONLY {
	FuseArray_TDI.row = 1;
	! Shift in RAM_READ (0xC2) instruction;  
	SIR Instruction_Length	TDI	(RAM_READ);
	RUN_TEST	IDLE TCK 64 DELAY 1;
	! Shift out  TOTAL_FUSE_MAP  Bits;
	SDR_VERIFY 	TotalFuse			TDI	(#0^TotalFuse)
									TDO	(FuseArray_TDI);
}

function VERIFY_USERCODE {
	IF (Usercode_TDI.row = 1)
	{
		! Shift in READ USERCODE(0x17) instruction; 
		SIR Instruction_Length TDI (USERCODE);
		SDR_VERIFY	Usercode_Length TDI (#0^Usercode_Length)
									TDO	(Usercode_TDI);
	}
}

function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	! Shift in IDCODE(0x19) instruction;
	SIR Instruction_Length	TDI	(IDCODE);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}

function SVF_SAVE_ID	{
	! Shift in IDCODE(0x19) instruction;
	SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}

function SAVE_ARRAY {
	datastream SavedFuseMap[1][TotalFuse];
	file NewFile = "FILE_SAVE";

	! Shift in RAM_READ (0xC2) instruction;
	SIR Instruction_Length	TDI	(RAM_READ);
	ENDDR SHIFTDR;
	! Shift out 32 Dummy Bits;
	SDR 32 TDI(#0^32);
	ENDDR DRPAUSE;
	! Shift out  TOTAL_FUSE_MAP  Bits;
	SDR 	TotalFuse			TDI	(#0^TotalFuse)
								TDO	(SavedFuseMap);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}

function SVF_SAVE_ARRAY {
	! Shift in RAM_READ (0xC2) instruction;
	SIR Instruction_Length	TDI	(RAM_READ);
	! Shift out  TOTAL_FUSE_MAP  Bits;	 		
	SDR_VERIFY	TotalFuse	TDI	(#0^TotalFuse)
							TDO	(#1^TotalFuse)
							MASK(#0^TotalFuse);		
}

function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	! Shift in READ USERCODE(0x17) instruction; 
	SIR Instruction_Length	TDI (USERCODE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 	5 ;
	// Shift in Data Shift instruction 
	SDR	Usercode_Length	TDI(#0^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}

function SVF_SAVE_USERCODE {
	! Shift in READ USERCODE(0x17) instruction; 
	SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#0^Usercode_Length)
								TDO	(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
}

function SERIAL_READ_DONE_BIT {
	datastream SavedDONE_BIT[1][1];
	file	NewFile = "FILE_SAVE"; 
	SDR 1	TDI	(0x00)
		TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function SERIAL_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI);
    
}
function BURST_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in RAM_WRITE(0xC1) instruction;
	SIR Instruction_Length	TDI (RAM_WRITE);
	RUN_TEST	IDLE TCK 10000 DELAY 1;
	! Shift in  TOTAL_FUSE_MAP  Bits;
	SDR	TotalFuse		TDI	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 100 DELAY 1;
}

function READ_DONE_BIT {
	datastream SavedDONE_BIT[1][Instruction_Length];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length	TDI	(IDCODE)
							TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function SVF_SAVE_DONE_BIT {
	! Shift in IDCODE(0x16) instruction;
    SIR_VERIFY Instruction_Length	TDI	(0x16)
				TDO (#1^Instruction_Length)
				MASK(#0^Instruction_Length);
}

function REFRESH_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 1000; 
//	! Shift in LSCC READ STATUS(0x53) instruction;
//    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
//	LCOUNT 20;
//	LDELAY IDLE  DELAY 1000;
//	LSDR	32	TDI(#1^32)
//			TDO(0x00020000)
//			MASK(0x00060103);
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 100 DELAY 10000;
			
}	
function SVF_REFRESH_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 20000; 
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 100 DELAY 10000;
//	! Shift in LSCC READ STATUS(0x53) instruction;
//    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
//	SDR_VERIFY	32	TDI(#1^32)
//					TDO(0x00020000)
//					MASK(0x00060103);
			
}	

]]>
</Script>
</SVF_Plus>