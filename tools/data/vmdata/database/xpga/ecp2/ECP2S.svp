<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<!--    08/12/03 Spinti Created from a copy of LAVA1.svp and added SERIAL_PROGRAM from Orca4.svp
	05/21/04 Spinti: Added "Verify,Refresh" and "Read and Save,Refresh" operations for internal ES testing.
	07/08/04 Nguyen added support of Skipping All 0s Row Programming
	08/09/04 Nguyen took out support of Skipping All 0s Row Programming
	09/09/04 Nguyen added to issue a LSCC BITSTREAM BURST(0x02) instruction and shift in 128 bits of 1's
	into the begiining of the PROGRAM function based on design engineer request.
	09/24/04 Spinti: Added Fast Program operation (same as JTAG Burst Program).
	09/24/04 Nguyen changed the HIGHZ value to all 1's
	09/24/04 Nguyen added one more REFRESH intruction to Refresh function
	10/11/04 Spinti: Added VERIFY_DONE_INIT to the end of Fast Program and old JTAG Burst Program.
	11/17/04 Nguyen added "Read programming Status" operation
	12/15/04 Nguyen added the "IO_STATE" to default to HIGHZ
	02/14/05 Spinti Changed the BYPASS TCK's from 5 to 100 in function DISABLE.
	02/15/05 Nguyen added Verify USERCODE function to Fast Program Operation
    03/04/05 Spinti: Changed the PROGRAM_SECURITY, PROGRAM_DONE_BIT, and ERASE_DONE_BIT pulse width to 50.
    03/07/05 Spinti: Changed the DISABLE delay to 200ms, and ENABLE delay to 20ms.
    03/24/05 Spinti: Added function REFRESH_ENABLE to reset device error state before enabling device.
    				 Changed ENABLE to REFRESH_ENABLE in Erase,Program,Verify and Erase,Program,Verify,Secure.
    03/28/05 Spinti: Changed all operations using REFRESH_ENABLE back to ENABLE.
    03/29/05 Nguyen Added "Refresh,Erase,Program,Verify" and "Refresh,Fast Program" Operations.
    04/22/05 The ISC_ERASE instruction does not erase the usercode. Nguyen added  
    the work around is to write all 0's into the usercode when we want to erase the device
    05/02/05 Nguyen changed the VERIFY_DONE_INIT function to support diferrent bscan lengths of different devices
    06/17/05 Nguyen added the  "VERIFY_STATUS" functions
    06/20/05 Nguyen changed the VERIFY_DONE_INIT functions to VERIFY_PROGRAM_DONE_INIT 
    06/22/05 Nguyen Added CHECK_STATUS function to all the Program operations to check the NON-JTAG Configuration bit
    if this bit == 1 the issue a Refresh instruction before ISC Enable instruction
    06/22/05 Nguyen changed the mask when verify control 0 to mask out the compress bit
    06/07/05 Nguyen added "Verify Status Register" operation
    07/12/05 Nguyen changed the "Refresh" functions
    07/15/05 Nguyen changed the "Read..." to "Display..." functions
    07/15/05 Nguyen added "VERIFY_STATUS" function to all "Verify Only" and "Read and Save" Operations
    12/05/06 Nguyen added "CLEAR_ERROR" to clear the FPGA on blank SPIm.
    11/17/06 Spinti: Disabled hashing when programming Lock Fuses in function PROGRAM_SECURITY_KEY.
    01/02/07 Spinti: Synchronized released and engineering support.
    01/23/07 Spinti: Changed Erase Only to call REFRESH_ENABLE and REFRESH_ERASE for blank SPIm programming.
    				 Changed Fast Program to call REFRESH_ENABLE.
    01/23/07 Spinti: Added SAVE_ID after READ_ID for Display Status Register to reset the bjd file.
	01/30/07 Nguyen: Changed REFRESH_ERASE using the ISSPIFLASH flag for blank SPIm programming.
	02/06/07 Nguyen: Changed the program encryption flow 
	02/13/07 Nguyen: Replaced ENABLE with REFRESH_ENABLE for all encryption operations
	03/28/07 Nguyen added "Refresh from FLASH" operation
	03/28/07 Nguyen changed the function check Key lock to reject the parts with all 0's PES fuses
    03/29/07 Spinti: Changed "Security Read Protection Fuses" to "Security Read Encryption Key".
    08/10/07 Nguyen changed "Fast Program" and "Serial Program" function to support encrypted file.
    		Added IF (ISENCRYPTED == 1)
				  {
					 SDR	72	TDI	(0xCD5DFFFFFFFFFFFFFF);
					 RUN_TEST	  DRPAUSE TCK 1 DELAY 2;
				  }
    		 
	06/04/08 Nguyen updated "FLASH TransFR" operation
	09/05/08 Spinti: Changed print messages to say Row 1, Row 2, and Row 3 instead of TEST, KEY, and REDUNDANT fuses, respectively.
					Also, removed key under-program messages. Only print pass messages or failure due to over program or if the same fuse in all three rows fails under program.
	01/16/09 Nguyen updated Security Operations on SVF Mode
	05/06/09 Nguyen added "Security Fast Program with Encryption Option" operation to support production
	Nguyen: 05/11/09 Added the "Verify DONE bit" and "XSRAM Verify DONE bit" operations 
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<SkipRow value="1"/>
	<KeyLock value="SECURITY_KEYLOCK"/>
	<MDRDelay value="MDR_DELAY"/>
	<Instruction>
		EXTEST	 			= 0xD5;
		INTEST	 			= 0x2C;
		CLAMP	 			= 0x20;
		HIGH_Z	 			= 0x18;
		BPRELOAD 			= 0x1C;
		ISC_ENABLE 			= 0x15;
		ISC_DISABLE			= 0x1E;
		ISC_ADDRESS_SHIFT 	= 0x01;
		ISC_ERASE 			= 0x03;
		ISC_PROGRAM			= 0x07;
		ISC_READ			= 0x0A;
		ISC_PROGRAM_ASIC	= 0xA6;
		ISC_READ_ASIC		= 0xAB;
		ISC_PROGRAM_USERCODE		= 0x1A;
		USERCODE 			= 0x17;
		ISC_PROGRAM_SECURITY	= 0x09;
		ISC_PROGRAM_DONE 		= 0x2F;
		ISC_ERASE_DONE			= 0x24;
		IDCODE 				= 0x16;
		BYPASS				= 0xFF;
		ISC_NOOP			= 0x30;
		<!-- Alternate Instructions -->
		LSCC_PROGRAM_INCR_RTI	= 0x67;
		LSCC_READ_INCR_RTI 		= 0x6A;
		<!-- Proprietary Mode Instructions -->
      	LSCC_TRANSPARENT_ENABLE	= 0x75;
		LSCC_BITSTREAM_BURST	= 0x02;
		LSCC_RESET_ADDRESS		= 0x21;
		LSCC_REFRESH			= 0x23;
		LSCC_ERASE_ROW			= 0x05;
		LSCC_PROGRAM_CTRL0		= 0x47;
		LSCC_READ_CTRL0			= 0x4A;
		LSCC_PROGRAM_ERR_MASK	= 0x68;
		LSCC_READ_ERR_MASK		= 0x6B;
		LSCC_RESET_CRC			= 0x12;
		LSCC_READ_CRC			= 0x73;
		LSCC_READ_STATUS		= 0x53;
		<!-- IP instructions -->
		LSCC_IPA			= 0x32;
		LSCC_IPTESTA		= 0x33;
		LSCC_IPB			= 0x38;
		LSCC_IPTESTB		= 0x39;	
		<!-- Manufacturing instructions -->
		LSCC_MANUFACTURING_SHIFT = 0x80;
		LSCC_ERASE_ALL			 = 0x10;
		LSCC_PROGRAM_PES		 = 0x0F;
		LSCC_READ_PES			 = 0x11;
		LSCC_USER_LOGIC_RESET	 = 0x22;
		<!-- Security instruction -->
		KEY_PROGRAM				= 0xC0;
		LOCK_PROGRAM			= 0xC1;
		TEST_PROGRAM			= 0xC2;
		REDUNDANT_PROGRAM		= 0xC3;
		KEY_READ				= 0xC4;
		LOCK_READ				= 0xC5;
		TEST_READ				= 0xC6;
		REDUNDANT_READ			= 0xC7;
		X_PROGRAM_ENABLE		= 0x35;
		
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANTDO">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000002880000000000000000000000000000
		000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000000000000000000000000000000000000
		000000000000000000000000000002880000000000000000000000000000
		000000
		</FieldBlock>
	</DataField>
</Data>
<Operation_List>
	"Manufacturing Enable SysCONFIG Port" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   X_ENABLE	! Enable the X_Programming mode" ;
						   
	"Manufacturing Initial Readback" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   DISABLE_HASHING ! Disable Hashing,
						   READ_SECURITY_KEY ! Manufacturing Initial Readback,
						   DISABLE ! Exit the programming mode" ;
	
	"Verify Manufacturing Disabled Mode" = "INIT 	! Initialize, 
						   					READ_ID	! Check the IDCODE,
						   					REFRESH_ENABLE	! Enable the programming mode,
						   					DISABLE_PROGRAM_SECURITY_KEY ! Manufacturing Initial Readback,
						   					DISABLE ! Exit the programming mode" ;
	
	"Program Test Fuses with Hashing ON" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,							  
							  PROGRAM_TEST_FUSES ! Program the Test Fuses,
							  DISABLE ! Exit the programming mode" ;
							  
	"Program Test Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_TEST_FUSES ! Program the Test Fuses,
							  DISABLE ! Exit the programming mode" ;
	"Verify Test Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  VERIFY_TEST_FUSES ! Verify the Test Fuses,
							  DISABLE ! Exit the programming mode" ;							  
	
	"Manufacturing Read Test Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   DISABLE_HASHING ! Disable Hashing,
						   CHECK_KEYLOCK ! Check the Key Lock,						   
						   READ_TEST_FUSES ! Read the Test Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Program Key Fuses with Hashing ON" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,
							  PROGRAM_SECURITY_KEY_FUSES ! Program the Key Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Set Key Fuses with Hashing ON" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  SET_SECURITY_KEY_FUSES ! Set the Key Fuses Register,
							  DISABLE ! Exit the programming mode" ;
							  						  
	"Program Key Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_SECURITY_KEY_FUSES ! Program the Key Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Verify Key Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  DISABLE_HASHING ! Disable Hashing,
							  VERIFY_SECURITY_KEY_FUSES ! Verify the Key Fuses,
							  DISABLE ! Exit the programming mode" ;
							  
	"Set Key Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  SET_SECURITY_KEY_FUSES ! Set the Key Fuses Register,
							  DISABLE ! Exit the programming mode" ;
							  
	"Manufacturing Read Key Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   DISABLE_HASHING ! Disable Hashing,						   
						   CHECK_KEYLOCK ! Check the Key Lock,
						   READ_SECURITY_KEY_FUSES ! Read the Key Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Program Redundant Fuses with Hashing ON" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,
							  PROGRAM_REDUNDAND_FUSES ! Program the Redundant Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Program Redundant Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_REDUNDAND_FUSES ! Program the Redundant Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Verify Redundant Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  VERIFY_REDUNDAND_FUSES ! Verify the Redundant Fuses,
							  DISABLE ! Exit the programming mode" ;
							  
	"Manufacturing Read Redundant Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   DISABLE_HASHING ! Disable Hashing,						   
						   CHECK_KEYLOCK ! Check the Key Lock,
						   READ_REDUNDAND_FUSES ! Read the Redundant Fuses,
						   DISABLE ! Exit the programming mode" ;
						   						  					   						  					   
	"Manufacturing Program Lock Fuses" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
						   	  CHECK_KEYLOCK ! Check the Key Lock,
						   	  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_LOCK_FUSES ! Program the Lock Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Manufacturing Program dummy Lock Fuses" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  PROGRAM_DUMMY_LOCK_FUSES ! Program the Dummy Lock Fuses,
							  DISABLE ! Exit the programming mode" ;
							  						  						  						  					   	  						   
	"Manufacturing Read Lock Fuses" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						REFRESH_ENABLE	! Enable the programming mode,
						READ_KEYLOCK ! Read the Key Lock fuses,
						DISABLE ! Exit the programming mode" ;							   
	
	"Manufacturing Program PES Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   PROGRAM_PES_FUSES ! Program the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Program PES Fuses with Hashing OFF" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   DISABLE_HASHING ! Disable Hashing,
						   PROGRAM_PES_FUSES ! Program the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
						   					   
	"Manufacturing Read PES Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   READ_PES_FUSES ! Read the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Manufacturing Majority Decoding Testing" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   REFRESH_ENABLE	! Enable the programming mode,
						   CHECK_KEYLOCK ! Check the Key Lock,
						   DISABLE_HASHING ! Disable Hashing,
						   MAJORITY_DECODING_CHECK ! Majority Decoding Test,
						   DISABLE ! Exit the programming mode" ;
						   					   
	"Program Manufacturing Register" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  PROGRAM_MANUFACTURING_REGISTER ! Program the Manufacturing Register,
							  DISABLE ! Exit the programming mode" ;
	"Read Manufacturing Register" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						REFRESH_ENABLE	! Enable the programming mode,
						READ_MANUFACTURING_REGISTER ! Read the Manufacturing Register,
						DISABLE ! Exit the programming mode" ;
	
	"Manufacturing Enable Hashing" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  ENABLE_HASHING ! Enable Hashing" ;
	"Manufacturing Disable Hashing" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  DISABLE_HASHING ! Enable Hashing" ;							  
	
	"Security Read Encryption Key" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   ENABLE	! Enable the programming mode,
						   CHECK_KEYLOCK ! Check the Key Lock,
						   READ_SECURITY_KEY ! Check the Security Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  PROGRAM_SECURITY_KEY !Program the Security Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Key Lock" = "INIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  REFRESH_ENABLE	! Enable the programming mode,
						  CHECK_KEYLOCK ! Check the Key Lock,
						  DISABLE_HASHING ! Disable Hashing,
						  PROGRAM_LOCK_FUSES ! Program the Lock Fuses,
						  DISABLE ! Exit the programming mode" ;
						  
	"Security Fast Program with Encryption Option" = "INIT 	! Initialize, 
													  READ_ID	! Check the IDCODE,
													  IO_STATE ! Program Bscan register,
													  REFRESH_ENABLE	! Enable the programming mode,
													  ERASE	! Erase the device, 
													  CHECK_KEYLOCK ! Check the Key Lock,													  
													  PROGRAM_SECURITY_KEY_ONLY !Program the Security Key,
													  BURST_PROGRAM	! Program Fuse Map,
													  VERIFY_USERCODE		! Verify USERCODE,
													  DISABLE ! Exit the programming mode,
					 								  VERIFY_STATUS ! Verify Status Register,
													  PROGRAM_LOCK_FUSES_ONLY ! Program the Lock Fuses,
													  DISABLE ! Exit the programming mode" ;													  					 			
							  						  						  							  
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"	INIT, READ_ID, SAVE_ID";
	
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Program USERCODE"	=	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_USERCODE	! Program USERCODE,
						DISABLE ! Exit the programming mode"	; 
	"Secure Device" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_SECURITY ! Secure device,
						DISABLE ! Exit the programming mode"	; 
	"Display USERCODE"	=	"	INIT, READ_ID, SAVE_ID,SAVE_USERCODE";
	
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						IO_STATE ! Program Bscan register,
						ENABLE	! Enable the programming mode"	;
						
	"Program,Verify" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
							PROGRAM_CONTROL	! Program Control Register,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode,
				 			VERIFY_STATUS ! Verify Status Register"	;
	"Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;		
	"Refresh,Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								REFRESH_ENABLE	! Refresh and Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;	
	"Erase,Program,Read and Save" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_STATUS ! Verify Status Register,
								SAVE_ID, 
								SAVE_CONTROL0,
						 		SAVE_ARRAY, 
						 		SAVE_USERCODE,
								PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;					
	"Erase,Program,Verify,Secure"	=	"	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									ENABLE	! Enable the programming mode, 
									ERASE	! Erase the device, 
									PROGRAM_CONTROL	! Program Control Register, 
									PROGRAM	! Program Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,
									VERIFY	! Verify Fuse Map, 
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode,
				 			 		VERIFY_STATUS ! Verify Status Register"	;
	
	"Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							REFRESH_ENABLE	! Enable the programming mode, 
							REFRESH_ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Program" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					ENABLE	! Enable the programming mode, 
					ERASE	! Erase the device, 
					PROGRAM_CONTROL	! Program Control Register,
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode,
		 			VERIFY_STATUS ! Verify Status Register"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					ENABLE	! Enable the programming mode, 
					VERIFY_CONTROL	! Verify Control Register,
					VERIFY	! Verify Fuse Map, 
					VERIFY_USERCODE		! Verify USERCODE, 
		 			DISABLE ! Exit the programming mode,
		 			VERIFY_STATUS ! Verify Status Register"	;
	"Verify,Refresh" =	"	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					ENABLE	! Enable the programming mode, 
					VERIFY_CONTROL	! Verify Control Register,
					VERIFY	! Verify Fuse Map, 
					VERIFY_USERCODE		! Verify USERCODE, 
		 			DISABLE ! Exit the programming mode,
		 			VERIFY_STATUS ! Verify Status Register, 
					REFRESH_FUNCTION ! Refresh";
	"Re-Initialize" = " INIT 	! Initialize,
						ENABLE	! Enable the programming mode, 
						ERASE	! Erase the device, 
	 			 		DISABLE ! Exit the programming mode"	;
	
	"Erase DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Program DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							VERIFY_DONE_BIT	! Verify DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	"Read DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 READ_DONE_BIT	! Read the done bit,
					 DISABLE ! Exit the programming mode"	;
	"Display DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 READ_DONE_BIT	! Read the done bit,
					 DISABLE ! Exit the programming mode"	;
	"Calculate Data CRC"	=	"INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SAVE_CONTROL0,
					             SAVE_ARRAY,
					             SAVE_USERCODE,
		 						 DISABLE";
	"Read and Save ISC"	=	"INIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SAVE_CONTROL0,
						 SAVE_ARRAY, 
						 SAVE_USERCODE, 
						 DISABLE";
	"Read and Save"	=	"INIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SAVE_CONTROL0,
						 SAVE_ARRAY, 
						 SAVE_USERCODE, 
						 DISABLE";
	"Read and Save,Refresh"	=	"INIT, 
					 READ_ID, 
					 SAVE_ID, 
					 ENABLE, 
					 SAVE_CONTROL0,
					 SAVE_ARRAY, 
					 SAVE_USERCODE, 
			 		 DISABLE ! Exit the programming mode, 
			 		 VERIFY_STATUS ! Verify Status Register,
					 REFRESH_FUNCTION ! Refresh";
	"Refresh" = " 	INIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
	
	"Refresh from FLASH" = " 	INIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
					
	"Read Programming Status" = "INIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	"Display Programming Pins Status" = "INIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	
	"Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";
	"Display Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"Verify Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";				             
	"Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
					 			 ENABLE	! Enable programming mode, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"Display Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
					 			 ENABLE	! Enable programming mode, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"Program Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	"Fast Program" = "	INIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								REFRESH_ENABLE	! Enable the programming mode, 
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;
	"Refresh,Fast Program" = "	INIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		REFRESH_ENABLE	! Refresh and Enable the programming mode,  
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;					 			
	
	"JTAG Burst Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"JTAG Burst Enable Only" = "INIT 	! Initialize,
								READ_ID	! Check the IDCODE,
					 			ENABLE	! Enable the programming mode"	;
	"JTAG Burst Read DONE bit" = "	INIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;

	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
						
	"Serial Program" = "	INIT 	! Initialize,   
							SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "INIT 	! Initialize, 
							ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
													
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SAVE_CONTROL0,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 DISABLE";
	"XSRAM Read and Save ISC"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SAVE_CONTROL0,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 DISABLE";
						 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
						             SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
								VERIFY_CONTROL	! Verify Control Register,
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE, 
		 			 			DISABLE ! Exit the programming mode,
		 			 			VERIFY_STATUS ! Verify Status Register"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
									VERIFY_USERCODE		! Verify USERCODE,
			 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			READ_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;
	"XSRAM Verify DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			VERIFY_DONE_BIT	! Verify the DONE bit,
					 			DISABLE ! Exit the programming mode"	;					 			
	"XSRAM Display DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			READ_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;					 			
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 		READ_ID	! Check the IDCODE,
					 		CAPTURE";
	"XSRAM Display Programming Pins Status" = "INIT ! Initialize,
					 		READ_ID	! Check the IDCODE,
					 		CAPTURE";					 		
	"XSRAM Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SAVE_STATUS !Read Status Register,
					             DISABLE";
	"XSRAM Display Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"XSRAM Verify Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";				             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"XSRAM Display Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"XSRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"FLASH TransFR" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
					X_ENABLE	! Enable the X_Programming mode,
					TRANSFR_FUNCTION !FLASH Transparent Field Reconfiguration"	;
	
</Operation_List>
<Operation_List label="SingleSVFOperation">					
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"Program USERCODE"	=	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_USERCODE	! Program USERCODE,
						DISABLE ! Exit the programming mode"	; 
	 			 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Secure Device" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_SECURITY ! Secure device,
						DISABLE ! Exit the programming mode"	; 
						
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
							PROGRAM_CONTROL	! Program Control Register,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode,
				 			VERIFY_STATUS ! Verify Status Register"	;
				 			
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									IO_STATE ! Program Bscan register, 
									ENABLE	! Enable the programming mode,  
									ERASE	! Erase the device, 
									PROGRAM_CONTROL	! Program Control Register, 
									PROGRAM	! Program Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,
									VERIFY	! Verify Fuse Map, 
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode,
				 			 		VERIFY_STATUS ! Verify Status Register"	;
	
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode,  
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;
	"Refresh,Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								REFRESH_ENABLE	! Refresh and Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;						
								 							 
	"Program" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,
					IO_STATE ! Program Bscan register,
					ENABLE	! Enable the programming mode,  
					ERASE	! Erase the device, 
					PROGRAM_CONTROL	! Program Control Register,
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_DONE_BIT	! Program DONE bit,
 			 		DISABLE ! Exit the programming mode,
 			 		VERIFY_STATUS ! Verify Status Register"	;
 	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							REFRESH_ENABLE	! Enable the programming mode, 
							REFRESH_ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							ENABLE	! Enable the programming mode, 
							VERIFY_CONTROL	! Verify Control Register,
							VERIFY	! Verify Fuse Map,  
							VERIFY_USERCODE		! Verify USERCODE,
		 			 		DISABLE ! Exit the programming mode,
		 			 		VERIFY_STATUS ! Verify Status Register"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ENABLE	! Enable the programming mode, 
						ERASE	! Erase the device, 
	 			 		DISABLE ! Exit the programming mode"	;
	
	"Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							VERIFY_DONE_BIT	! Verify DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 				 			 		
	"Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 SVF_SAVE_DONE_BIT	! Erase the done bit,
					 DISABLE ! Exit the programming mode"	;
	
	"Display DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 SVF_SAVE_DONE_BIT	! Erase the done bit,
					 DISABLE ! Exit the programming mode"	;
					 
	"Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
		 						 DISABLE";
	"Erase,Program,Read and Save" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_STATUS ! Verify Status Register,
								SAVE_ID, 
								SVF_SAVE_CONTROL0 !Read Control Register 0,
						 		SVF_SAVE_ARRAY ! Read Fuse Map, 
						 		SVF_SAVE_USERCODE ! Read USERCODE,
								PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"Read and Save ISC"	=	"SVFINIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE, 
						 DISABLE,
						 VERIFY_STATUS ! Verify Status Register";
	"Read and Save"	=	"SVFINIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE, 
						 DISABLE";
	"Refresh" = " 	SVFINIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
	"Refresh from FLASH" = " 	SVFINIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					REFRESH_FUNCTION ! Refresh";
	"Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	
	"Read Programming Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	"Display Programming Pins Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";				 					
	"Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"Display Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"Verify Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode,  
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";								             
	"Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								REFRESH_ENABLE	! Enable the programming mode,  
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;
	"Refresh,Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		REFRESH_ENABLE	! Refresh and Enable the programming mode,  
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;					 			
	
	"JTAG Burst Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"JTAG Burst Enable Only" = "SVFINIT 	! Initialize,
								READ_ID	! Check the IDCODE,
					 			ENABLE	! Enable the programming mode"	;
	"JTAG Burst Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Serial Program" = "	SVFINIT 	! Initialize,   
							SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
								ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	
	"XSRAM Bypass"	=	"	SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 DISABLE";
	"XSRAM Read and Save ISC"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 DISABLE";
						 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
								VERIFY_CONTROL	! Verify Control Register,
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE, 
		 			 			DISABLE ! Exit the programming mode,
		 			 			VERIFY_STATUS ! Verify Status Register"	;
	"XSRAM Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
									VERIFY_USERCODE		! Verify USERCODE,
			 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;
	"XSRAM Verify DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			VERIFY_DONE_BIT	! Verify the DONE bit,
					 			DISABLE ! Exit the programming mode"	;					 			
	"XSRAM Display DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	"XSRAM Display Programming Pins Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";					 
	"XSRAM Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"XSRAM Display Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"XSRAM Verify Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";						             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"XSRAM Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
					X_ENABLE	! Enable the X_Programming mode,
					TRANSFR_FUNCTION ! FLASH Transparent Field Reconfiguration"	;
					
	"Security Read Encryption Key" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   ENABLE	! Enable the programming mode,
						   SVF_READ_SECURITY_KEY ! Check the Security Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  SVF_PROGRAM_SECURITY_KEY !Program the Security Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Key Lock" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  REFRESH_ENABLE	! Enable the programming mode,
						  DISABLE_HASHING ! Disable Hashing,
						  SVF_PROGRAM_LOCK_FUSES ! Program the Lock Fuses,
						  DISABLE ! Exit the programming mode" ;		
	"Security Fast Program with Encryption Option" = "SVFINIT 	! Initialize, 
													  READ_ID	! Check the IDCODE,
													  IO_STATE ! Program Bscan register,
													  REFRESH_ENABLE	! Enable the programming mode,
													  ERASE	! Erase the device, 
													  SVF_PROGRAM_SECURITY_KEY_ONLY !Program the Security Key,
													  BURST_PROGRAM	! Program Fuse Map,
													  VERIFY_USERCODE		! Verify USERCODE,
													  DISABLE ! Exit the programming mode,
													  VERIFY_STATUS ! Verify Status Register,
													  SVF_PROGRAM_LOCK_FUSES_ONLY ! Program the Lock Fuses,
													  DISABLE ! Exit the programming mode" ;
					 								  						  									
</Operation_List>
<Operation_List label="TurboOperation">
	"Manufacturing Initial Readback" = "INIT 	! Initialize, 
						   DISABLE_HASHING ! Disable Hashing,
						   READ_SECURITY_KEY ! Manufacturing Initial Readback" ;
	
	"Verify Manufacturing Disabled Mode" = "INIT 	! Initialize, 
						   					DISABLE_PROGRAM_SECURITY_KEY ! Manufacturing Initial Readback" ;
	
	"Program Test Fuses with Hashing ON" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,							  
							  PROGRAM_TEST_FUSES ! Program the Test Fuses" ;
							  
	"Program Test Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_TEST_FUSES ! Program the Test Fuses" ;
	
	"Manufacturing Read Test Fuses" = "INIT 	! Initialize, 
						   CHECK_KEYLOCK ! Check the Key Lock,
						   DISABLE_HASHING ! Disable Hashing,
						   READ_TEST_FUSES ! Read the Test Fuses" ;
	
	"Program Key Fuses with Hashing ON" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,
							  PROGRAM_SECURITY_KEY_FUSES ! Program the Key Fuses" ;
							  
	"Program Key Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_SECURITY_KEY_FUSES ! Program the Key Fuses" ;
	
	"Manufacturing Read Key Fuses" =  "INIT 	! Initialize, 
						   CHECK_KEYLOCK ! Check the Key Lock,
						   DISABLE_HASHING ! Disable Hashing,
						   READ_SECURITY_KEY_FUSES ! Read the Key Fuses" ;
	
	"Program Redundant Fuses with Hashing ON" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  ENABLE_HASHING ! Enable Hashing,
							  PROGRAM_REDUNDAND_FUSES ! Program the Redundant Fuses" ;
	
	"Program Redundant Fuses with Hashing OFF" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_REDUNDAND_FUSES ! Program the Redundant Fuses" ;
	
	"Manufacturing Read Redundant Fuses" = "INIT 	! Initialize, 
						   CHECK_KEYLOCK ! Check the Key Lock,
						   DISABLE_HASHING ! Disable Hashing,
						   READ_REDUNDAND_FUSES ! Read the Redundant Fuses" ;
						   						  					   						  					   
	"Manufacturing Program Lock Fuses" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
						   	  DISABLE_HASHING ! Disable Hashing,
							  PROGRAM_LOCK_FUSES ! Program the Lock Fuses" ;
	
	"Manufacturing Program dummy Lock Fuses" = "INIT 	! Initialize, 
							  PROGRAM_DUMMY_LOCK_FUSES ! Program the Dummy Lock Fuses" ;
							  						  						  						  					   	  						   
	"Manufacturing Read Lock Fuses" = "INIT 	! Initialize, 
						READ_KEYLOCK ! Read the Key Lock fuses" ;							   
	
	"Manufacturing Program PES Fuses" = "INIT 	! Initialize, 
						   PROGRAM_PES_FUSES ! Program the PES Fuses" ;
						   
	"Manufacturing Read PES Fuses" = "INIT 	! Initialize, 
						   READ_PES_FUSES ! Read the PES Fuses" ;
	
	"Manufacturing Majority Decoding Testing" = "INIT 	! Initialize, 
						   CHECK_KEYLOCK ! Check the Key Lock,
						   DISABLE_HASHING ! Disable Hashing,
						   MAJORITY_DECODING_CHECK ! Majority Decoding Test" ;
						   					   
	"Program Manufacturing Register" = "INIT 	! Initialize, 
							  PROGRAM_MANUFACTURING_REGISTER ! Program the Manufacturing Register" ;
	"Read Manufacturing Register" = "INIT 	! Initialize, 
						READ_MANUFACTURING_REGISTER ! Read the Manufacturing Register" ;
	
	"Manufacturing Enable Hashing" = "INIT 	! Initialize, 
							  ENABLE_HASHING ! Enable Hashing" ;
	"Manufacturing Disable Hashing" = "INIT 	! Initialize, 
							  DISABLE_HASHING ! Enable Hashing" ;							  
	
	"Check Security Key" = "INIT 	! Initialize, 
						   CHECK_KEYLOCK ! Check the Key Lock,
						   READ_SECURITY_KEY ! Check the Security Key" ;
	
	"Security Program Encryption Key" = "INIT 	! Initialize, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  PROGRAM_SECURITY_KEY !Program the Security Key" ;
	
	"Security Program Key Lock" = "INIT 	! Initialize, 
						  CHECK_KEYLOCK ! Check the Key Lock,
						  DISABLE_HASHING ! Disable Hashing,
						  PROGRAM_LOCK_FUSES ! Program the Lock Fuses" ;
	"Security Fast Program with Encryption Option" = "INIT 	! Initialize, 
													  ERASE	! Erase the device, 
													  CHECK_KEYLOCK ! Check the Key Lock,													  
													  PROGRAM_SECURITY_KEY_ONLY !Program the Security Key,
													  BURST_PROGRAM	! Program Fuse Map,
													  VERIFY_USERCODE		! Verify USERCODE,
													  DISABLE ! Exit the programming mode,
					 								  VERIFY_STATUS ! Verify Status Register,
													  PROGRAM_LOCK_FUSES_ONLY ! Program the Lock Fuses,
													  DISABLE ! Exit the programming mode" ;						  
						  
	"Read and Save"	=	"INIT,SAVE_ARRAY,SAVE_USERCODE";
	"Bypass"	=	"	INIT 	! Initialize"	;
	"Verify ID" = 	"	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"INIT, READ_ID, SAVE_ID";
	"Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	INIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"INIT, SAVE_USERCODE";	
	"Program USERCODE"	=	"	INIT 	! Initialize, 
						PROGRAM_USERCODE	! Program USERCODE"	; 		 		
	"Enable Only" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Secure Device" = "	INIT 	! Initialize, 
						PROGRAM_SECURITY ! Secure device"	; 
	"Program,Verify" = "	INIT 	! Initialize, 
							ERASE	! Erase the device, 
							PROGRAM_CONTROL	! Program Control Register,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_STATUS ! Verify Status Register"	;
	"Erase,Program,Verify" = "	INIT 	! Initialize, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		VERIFY_STATUS ! Verify Status Register"	;					
	"Erase,Program,Verify,Secure"	=	"	INIT 	! Initialize,
									ERASE	! Erase the device,  
									PROGRAM_CONTROL	! Program Control Register, 
									PROGRAM	! Program Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,
									VERIFY	! Verify Fuse Map, 
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit,
				 			 		VERIFY_STATUS ! Verify Status Register"	;
	"Erase Only"	=	"	INIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"Program" = "	INIT 	! Initialize, 
					ERASE	! Erase the device, 
					PROGRAM_CONTROL	! Program Control Register,
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_DONE_BIT	! Program DONE bit,
					VERIFY_STATUS ! Verify Status Register"	;
	"Verify Only"	=	"	INIT 	! Initialize, 
							VERIFY_CONTROL	! Verify Control Register,
							VERIFY	! Verify Fuse Map,
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_STATUS ! Verify Status Register"	;
	"Re-Initialize" = " INIT 	! Initialize,
						ERASE	! Erase the device"	;
	
	"Erase DONE bit"	=	"INIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase the done bit"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Verify DONE bit"	=	"SVFINIT 	! Initialize, 
							VERIFY_DONE_BIT	! Verify DONE bit"	;							
	"Read DONE bit"	=	"INIT 	! Initialize, 
					 	READ_DONE_BIT	! Read the done bit"	;
	"Display DONE bit"	=	"INIT 	! Initialize, 
					 	READ_DONE_BIT	! Read the done bit"	;
	"Calculate Data CRC"	=	"INIT ! Initialize,
								 SAVE_CONTROL0,
								 SAVE_ARRAY,
					             SAVE_USERCODE";
	"Erase,Program,Read and Save" = "	INIT 	! Initialize, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_STATUS ! Verify Status Register,
								SAVE_ID, 
								SAVE_CONTROL0 !Read Control Register 0,
						 		SAVE_ARRAY ! Read Fuse Map, 
						 		SAVE_USERCODE ! Read USERCODE,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Read and Save ISC"	=	"INIT, 
						 SAVE_CONTROL0,
						 SAVE_ARRAY, 
						 SAVE_USERCODE";
						 
	"Read and Save"	=	"INIT, 
						 SAVE_CONTROL0,
						 SAVE_ARRAY, 
						 SAVE_USERCODE";
						 
	"Refresh" = " 	INIT !Initialize,
					REFRESH_FUNCTION ! Refresh";
	
	"Refresh from FLASH" = " 	INIT !Initialize,
					REFRESH_FUNCTION ! Refresh";
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
						
	"Read Control Register0" = "INIT ! Initialize,
								 SAVE_ID,
								 SAVE_CONTROL0 !Read Control Register 0";
	"Display Control Register0" = "INIT ! Initialize,
								 SAVE_ID,
								 SAVE_CONTROL0 !Read Control Register 0";								 
	"Program Control Register0" = "INIT ! Initialize,
								 PROGRAM_CONTROL0 ! Program Control Register 0";
	"Read Programming Status" = "INIT ! Initialize,
					 CAPTURE";
	"Display Programming Pins Status" = "INIT ! Initialize,
					 CAPTURE";					 
	"Read Status Register" = "INIT ! Initialize,
							  SAVE_STATUS !Read Status Register";
	"Display Status Register" = "INIT ! Initialize,
							  SAVE_STATUS !Read Status Register";							  
	"Verify Status Register" = "INIT ! Initialize,
								 VERIFY_STATUS !verify Status Register";								  
	"Fast Program" = "	INIT 	! Initialize,
						ERASE	! Erase the device, 
						BURST_PROGRAM	! Program Fuse Map, 
						VERIFY_USERCODE		! Verify USERCODE,
						VERIFY_STATUS ! Verify Status Register"	;
	
								
	"JTAG Burst Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"JTAG Burst Enable Only" = "INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			ENABLE	! Enable the programming mode"	;
	"JTAG Burst Read DONE bit" = "	INIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
								
	"Serial Program" = "	INIT 	! Initialize,   
							SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	INIT 	! Initialize, 
								ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	INIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
									
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 SAVE_CONTROL0,
								 SAVE_ARRAY, 
								 SAVE_USERCODE";
	"XSRAM Read and Save ISC"	=	"INIT, 
								 	 SAVE_CONTROL0,
								 	 SAVE_ARRAY, 
								 	 SAVE_USERCODE";
						 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE";
		 			 		
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								VERIFY_CONTROL	! Verify Control Register,
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE,
		 			 			VERIFY_STATUS ! Verify Status Register"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								READ_DONE_BIT	! Read the done bit"	;
	"XSRAM Verify DONE bit"	=	"INIT 	! Initialize, 
								VERIFY_DONE_BIT	! Verify the DONE bit"	;								
	"XSRAM Display DONE bit"	=	"INIT 	! Initialize, 
								READ_DONE_BIT	! Read the done bit"	;
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 CAPTURE";
	"XSRAM Display Programming Pins Status" = "INIT ! Initialize,
					 CAPTURE";				 
	"XSRAM Read Status Register" = "INIT ! Initialize,
								 	SAVE_STATUS !Read Status Register";
	"XSRAM Display Status Register" = "INIT ! Initialize,
								 	SAVE_STATUS !Read Status Register";								 	
	"XSRAM Verify Status Register" = "INIT ! Initialize,
								 VERIFY_STATUS !verify Status Register";					             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
									  SAVE_ID,
								 	  SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Display Control Register0" = "INIT ! Initialize,
									  SAVE_ID,
								 	  SAVE_CONTROL0 !Read Control Register 0";								 	  
	"XSRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"FLASH TransFR" = "	INIT 	! Initialize, 
					X_ENABLE	! Enable the X_Programming mode,
					TRANSFR_FUNCTION ! FLASH Transparent Field Reconfiguration"	;						
	
</Operation_List>
<Operation_List label="ChainSVFOperation">
	"Read and Save"	=	"INIT,SVF_SAVE_ARRAY,SVF_SAVE_USERCODE";
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, SVF_SAVE_USERCODE";
	"Program USERCODE"	=	"	SVFINIT 	! Initialize, 
						PROGRAM_USERCODE	! Program USERCODE"	; 				 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Secure Device" = "	SVFINIT 	! Initialize, 
						PROGRAM_SECURITY ! Secure device"	; 
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							ERASE	! Erase the device, 
							PROGRAM_CONTROL	! Program Control Register,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_STATUS ! Verify Status Register"	;					 
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		VERIFY_STATUS ! Verify Status Register"	;					
	
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize,
									ERASE	! Erase the device,  
									PROGRAM_CONTROL	! Program Control Register, 
									PROGRAM	! Program Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,
									VERIFY	! Verify Fuse Map, 
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit,
				 			 		VERIFY_STATUS ! Verify Status Register"	;

	"Program" = "	SVFINIT 	! Initialize,
					ERASE	! Erase the device, 
					PROGRAM_CONTROL	! Program Control Register,
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_DONE_BIT	! Program DONE bit,
					VERIFY_STATUS ! Verify Status Register"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize,
							VERIFY_CONTROL	! Program Control Register, 
							VERIFY	! Verify Fuse Map,
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_STATUS ! Verify Status Register"	;
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ERASE	! Erase the device"	;
	
	"Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							ERASE_DONE_BIT	! Erase the done bit"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Verify DONE bit"	=	"SVFINIT 	! Initialize, 
							VERIFY_DONE_BIT	! Verify DONE bit"	;							
	"Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 	SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"Display DONE bit"	=	"SVFINIT 	! Initialize, 
					 	SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE";
	"Erase,Program,Read and Save" = "	SVFINIT 	! Initialize, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_STATUS ! Verify Status Register,
								SAVE_ID, 
								SVF_SAVE_CONTROL0 !Read Control Register 0,
						 		SVF_SAVE_ARRAY ! Read Fuse Map, 
						 		SVF_SAVE_USERCODE ! Read USERCODE,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"Read and Save ISC"	=	"SVFINIT, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE";
	"Read and Save"	=	"SVFINIT, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE";						 
	"Refresh" = " 	SVFINIT !Initialize,
					REFRESH_FUNCTION ! Refresh";
	"Refresh from FLASH" = " 	SVFINIT !Initialize,
					REFRESH_FUNCTION ! Refresh";
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"Read Control Register0" = "SVFINIT ! Initialize,
								 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"Display Control Register0" = "SVFINIT ! Initialize,
								 SVF_SAVE_CONTROL0 !Read Control Register 0";								 
	"Program Control Register0" = "SVFINIT ! Initialize,
								 PROGRAM_CONTROL0 ! Program Control Register 0";
	
	"Read Programming Status" = "SVFINIT ! Initialize,
					 CAPTURE";
	"Display Programming Pins Status" = "SVFINIT ! Initialize,
					 CAPTURE";				 
	"Read Status Register" = "SVFINIT ! Initialize,
							  SAVE_STATUS !Read Status Register";
	"Display Status Register" = "SVFINIT ! Initialize,
							  SAVE_STATUS !Read Status Register";							  
	"Verify Status Register" = "SVFINIT ! Initialize,
								 VERIFY_STATUS !verify Status Register";								  								 
	"Fast Program" = "	SVFINIT 	! Initialize,
						ERASE	! Erase the device, 
						BURST_PROGRAM	! Program Fuse Map,
						VERIFY_USERCODE		! Verify USERCODE,
						VERIFY_STATUS ! Verify Status Register"	;
	
	"JTAG Burst Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"JTAG Burst Enable Only" = "SVFINIT 	! Initialize,
								READ_ID	! Check the IDCODE,
					 			ENABLE	! Enable the programming mode"	;
	"JTAG Burst Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;								 
	"Serial Program" = "	SVFINIT 	! Initialize,    
							SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
								ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
													
	"XSRAM Bypass"	=	"	SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE";
	"XSRAM Read and Save ISC"	=	"SVFINIT, 
								 	 SVF_SAVE_CONTROL0,
								 	 SVF_SAVE_ARRAY, 
								 	 SVF_SAVE_USERCODE";
						 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE";
		 			 		
	"XSRAM Verify Only"	=	"	SVFINIT 	! Initialize, 
								VERIFY_CONTROL	! Verify Control Register,
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE,
		 			 			VERIFY_STATUS ! Verify Status Register"	;
	"XSRAM Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
									VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;
	"XSRAM Verify DONE bit"	=	"SVFINIT 	! Initialize, 
								VERIFY_DONE_BIT	! Verify the DONE bit"	;								
	"XSRAM Display DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 	   CAPTURE";
	"XSRAM Display Programming Pins Status" = "SVFINIT ! Initialize,
					 	   CAPTURE";				 
	"XSRAM Read Status Register" = "SVFINIT ! Initialize,
								 	SVF_SAVE_STATUS !Read Status Register";
	"XSRAM Display Status Register" = "SVFINIT ! Initialize,
								 	SVF_SAVE_STATUS !Read Status Register";								 	
	"XSRAM Verify Status Register" = "SVFINIT ! Initialize,
								 VERIFY_STATUS !verify Status Register";					             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 	  SVF_SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Display Control Register0" = "SVFINIT ! Initialize,
								 	  SVF_SAVE_CONTROL0 !Read Control Register 0";								 	  
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					X_ENABLE	! Enable the X_Programming mode,
					TRANSFR_FUNCTION ! FLASH Transparent Field Reconfiguration"	;						
</Operation_List>
<Operation_List label="SingleSVFOperationRevC">					
	"Bypass"	=	"	SVFINIT 	! Initialize"	;
	"Verify ID" = 	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE"	; 
	"Display ID" = 	"SVFINIT, READ_ID, SVF_SAVE_ID";
	"Disable Only" = "	SVFINIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	"Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"Program USERCODE"	=	"	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_USERCODE	! Program USERCODE,
						DISABLE ! Exit the programming mode"	; 
	 			 		
	"Enable Only" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode"	;
	"Secure Device" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						ENABLE	! Enable the programming mode,
						PROGRAM_SECURITY ! Secure device,
						DISABLE ! Exit the programming mode"	; 
						
	"Program,Verify" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							ENABLE	! Enable the programming mode, 
							ERASE	! Erase the device, 
							PROGRAM_CONTROL	! Program Control Register,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode,
				 			VERIFY_STATUS ! Verify Status Register"	;
				 			
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									IO_STATE ! Program Bscan register, 
									ENABLE	! Enable the programming mode,  
									ERASE	! Erase the device, 
									PROGRAM_CONTROL	! Program Control Register, 
									PROGRAM	! Program Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,
									VERIFY	! Verify Fuse Map, 
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode,
				 			 		VERIFY_STATUS ! Verify Status Register"	;
	
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode,  
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;
	"Refresh,Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								REFRESH_ENABLE	! Refresh and Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY	! Verify Fuse Map, 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		VERIFY_STATUS ! Verify Status Register"	;						
								 							 
	"Program" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,
					IO_STATE ! Program Bscan register,
					ENABLE	! Enable the programming mode,  
					ERASE	! Erase the device, 
					PROGRAM_CONTROL	! Program Control Register,
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_DONE_BIT	! Program DONE bit,
 			 		DISABLE ! Exit the programming mode,
 			 		VERIFY_STATUS ! Verify Status Register"	;
 	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							REFRESH_ENABLE	! Enable the programming mode, 
							REFRESH_ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							ENABLE	! Enable the programming mode, 
							VERIFY_CONTROL	! Verify Control Register,
							VERIFY	! Verify Fuse Map,  
							VERIFY_USERCODE		! Verify USERCODE,
		 			 		DISABLE ! Exit the programming mode,
		 			 		VERIFY_STATUS ! Verify Status Register"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ENABLE	! Enable the programming mode, 
						ERASE	! Erase the device, 
	 			 		DISABLE ! Exit the programming mode"	;
	
	"Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							ENABLE	! Enable programming mode, 
							VERIFY_DONE_BIT	! Verify DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	"Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 SVF_SAVE_DONE_BIT	! Erase the done bit,
					 DISABLE ! Exit the programming mode"	;
	
	"Display DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 ENABLE	! Enable programming mode, 
					 SVF_SAVE_DONE_BIT	! Erase the done bit,
					 DISABLE ! Exit the programming mode"	;
					 
	"Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
		 						 DISABLE";
	"Erase,Program,Read and Save" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								PROGRAM_CONTROL	! Program Control Register,
								PROGRAM	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_STATUS ! Verify Status Register,
								SAVE_ID, 
								SVF_SAVE_CONTROL0 !Read Control Register 0,
						 		SVF_SAVE_ARRAY ! Read Fuse Map, 
						 		SVF_SAVE_USERCODE ! Read USERCODE,
								PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"Read and Save ISC"	=	"SVFINIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE, 
						 DISABLE";
	"Read and Save"	=	"SVFINIT, 
						 READ_ID, 
						 SAVE_ID, 
						 ENABLE, 
						 SVF_SAVE_CONTROL0,
						 SVF_SAVE_ARRAY, 
						 SVF_SAVE_USERCODE, 
						 DISABLE";
	"Refresh" = " 	SVFINIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					SVF_REFRESH_FUNCTION ! Refresh";
	"Refresh from FLASH" = " 	SVFINIT !Initialize,
					READ_ID !Check the IDCODE,
					IO_STATE ! Program Bscan register,
					SVF_REFRESH_FUNCTION ! Refresh";					
	"Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	
	"Read Programming Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	"Display Programming Pins Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";				 					
	"Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"Display Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 ENABLE	! Enable programming mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"Verify Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 ENABLE	! Enable programming mode,  
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";								             
	"Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		REFRESH_ENABLE	! Enable the programming mode,  
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;
	"Refresh,Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		REFRESH_ENABLE	! Refresh and Enable the programming mode,  
						 		ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
					 			DISABLE ! Exit the programming mode,
					 			VERIFY_STATUS ! Verify Status Register"	;					 			
	
	"JTAG Burst Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	 			 		
	"JTAG Burst Enable Only" = "SVFINIT 	! Initialize,
								READ_ID	! Check the IDCODE,
					 			ENABLE	! Enable the programming mode"	;
	"JTAG Burst Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	"Serial Program" = "	SVFINIT 	! Initialize,   
							SERIAL_PROGRAM	! Program Fuse Map"	;
	"Serial Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	 			 		
	"Serial Enable Only" = "	SVFINIT 	! Initialize, 
								ENABLE	! Enable the programming mode"	;
	"Serial Read DONE bit" = "	SVFINIT 	! Initialize, 
								SERIAL_READ_DONE_BIT 	! Read DONE Bit"	;
	
	"XSRAM Bypass"	=	"	SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 DISABLE";
	"XSRAM Read and Save ISC"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 DISABLE";
						 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
								VERIFY_CONTROL	! Verify Control Register,
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE, 
		 			 			DISABLE ! Exit the programming mode,
		 			 			VERIFY_STATUS ! Verify Status Register"	;
	"XSRAM Verify USERCODE"	=	"	SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode, 
									VERIFY_USERCODE		! Verify USERCODE,
			 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;
	"XSRAM Verify DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			VERIFY_DONE_BIT	! Verify the DONE bit,
					 			DISABLE ! Exit the programming mode"	;					 			
	"XSRAM Display DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";
	"XSRAM Display Programming Pins Status" = "SVFINIT ! Initialize,
					 READ_ID	! Check the IDCODE,
					 CAPTURE";					 
	"XSRAM Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"XSRAM Display Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SAVE_ID, 
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,   
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";					             
	"XSRAM Verify Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             VERIFY_STATUS !verify Status Register,
					             DISABLE";						             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"XSRAM Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 TRANSPARENT_READ_ENABLE	! Enable TRANSPARENT programming mode,  
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
					X_ENABLE	! Enable the X_Programming mode,
					SVF_TRANSFR_FUNCTION ! FLASH Transparent Field Reconfiguration"	;
					
	"Security Read Encryption Key" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   ENABLE	! Enable the programming mode,
						   SVF_READ_SECURITY_KEY ! Check the Security Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  REFRESH_ENABLE	! Enable the programming mode,
							  SVF_PROGRAM_SECURITY_KEY !Program the Security Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Key Lock" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  REFRESH_ENABLE	! Enable the programming mode,
						  DISABLE_HASHING ! Disable Hashing,
						  SVF_PROGRAM_LOCK_FUSES ! Program the Lock Fuses,
						  DISABLE ! Exit the programming mode" ;
	
	"Security Fast Program with Encryption Option" = "SVFINIT 	! Initialize, 
													  READ_ID	! Check the IDCODE,
													  IO_STATE ! Program Bscan register,
													  REFRESH_ENABLE	! Enable the programming mode,
													  ERASE	! Erase the device, 
													  CHECK_KEYLOCK ! Check the Key Lock,													  
													  SVF_PROGRAM_SECURITY_KEY_ONLY !Program the Security Key,
													  BURST_PROGRAM	! Program Fuse Map,
													  VERIFY_USERCODE		! Verify USERCODE,
													  DISABLE ! Exit the programming mode,
					 								  VERIFY_STATUS ! Verify Status Register,
													  SVF_PROGRAM_LOCK_FUSES_ONLY ! Program the Lock Fuses,
													  DISABLE ! Exit the programming mode" ;
					 								  					  											
</Operation_List>
<Script>
<![CDATA[
int32	ReturnCode = 0;
function INIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}


function SVFINIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}

function PRELOAD {
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}

function INI_PRELOAD {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length);
}
function SAMPLE {		
	! Shift in Sample(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;		
}

function INI_SAMPLE {	
	! Shift in Sample(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;			
}
function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   Bscan[1] = SavedBScanTDO[1];	
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, Bscan);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ENDDR DRPAUSE;
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}

function ENABLE {
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY 20;
	
}
function X_ENABLE
{
	! Shift in X_PROGRAM_ENABLE(0x35) instruction;
    SIR Instruction_Length TDI (X_PROGRAM_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY 20;
}
// 03/23/05 Spinti: Added function REFRESH_ENABLE to reset device error state before enabling device
function REFRESH_ENABLE {
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	STATE IDLE; 

	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST IDLE TCK 5 DELAY 20;
}
function CLEAR_ERROR {
	IF (ReturnCode == 0x01)
	{
		ReturnCode = 0;
		! Shift in LSCC REFRESH(0x23) instruction;
    	SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
	}	
}
function TRANSPARENT_READ_ENABLE {
	! Shift in LSCC_TRANSPARENT_ENABLE(0x75) instruction;
    SIR Instruction_Length TDI (LSCC_TRANSPARENT_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY 20;
}

function DISABLE {
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 100 DELAY 1;
}
function READ_ID {
	ReturnCode = 0;
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);
}

function ERASE {
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 5 DELAY 	PWP;
	
	! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
	SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
	SDR Usercode_Length	TDI	(#0^Usercode_Length);
	RUN_TEST	TCK 	5 DELAY 	PWP;
	
	! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 5 DELAY 100;
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#0^Usercode_Length);
									
}
// 01/22/07 Spinti: Added function REFRESH_ERASE to clear device for SPIm mode programming
function REFRESH_ERASE {
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 5 DELAY 	PWP;
	
	! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
	SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
	SDR Usercode_Length	TDI	(#1^Usercode_Length);
	RUN_TEST	TCK 	5 DELAY 	PWP;
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#1^Usercode_Length);

	! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 5 DELAY 100;
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#0^Usercode_Length);

	IF (ISSPIFLASH == 1)
	{
		! Shift in ISC PROGRAM DONE(0x2F) instruction;
	    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		// Goto Run Test Idle 
		RUN_TEST	IDLE TCK 5 DELAY 50;
	}
}
function PROGRAM_CONTROL {
	IF (Control_Register_0_TDI.row = 1)
	{
		! Shift in LSCC PROGRAM CONTROL 0(0x47) instruction;
	    SIR Instruction_Length TDI (LSCC_PROGRAM_CTRL0);
		SDR 32 TDI(Control_Register_0_TDI[1]);
		RUN_TEST IDLE TCK 5 DELAY PWP; 
		! Shift in LSCC READ CONTROL 0(0x4A) instruction;
	    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
		RUN_TEST IDLE TCK 5 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(Control_Register_0_TDI[1])
					   MASK(0xFFFFFFFF);
	}
	
}

function PROGRAM_CONTROL0 {
	IF (Control_Register_0_TDI.row = 1)
	{
		! Shift in LSCC PROGRAM CONTROL 0(0x47) instruction;
	    SIR Instruction_Length TDI (LSCC_PROGRAM_CTRL0);
		SDR 32 TDI(Control_Register_0_TDI[1]);
		RUN_TEST IDLE TCK 5 DELAY PWP; 
		! Shift in LSCC READ CONTROL 0(0x4A) instruction;
	    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
		RUN_TEST IDLE TCK 5 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(Control_Register_0_TDI[1])
					   MASK(0xFFFFFFFF);
	}
}

function PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	! Shift in LSCC BITSTREAM BURST(0x02) instruction;
    SIR Instruction_Length	TDI (LSCC_BITSTREAM_BURST);
	SDR	128		TDI	(#1^128);
	RUN_TEST	IDLE TCK 5 DELAY PWP;
	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 5 DELAY 	PWP;
	! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
	// Program the rest of the device
	repeat Address_Length {
		! Shift in Data Row = RowCount; 
		SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
		RUN_TEST	TCK 	5 DELAY 	PWP;
		RowCount = RowCount + 1 ;
		
	} // repeat
}
function SERIAL_PROGRAM {
	FuseArray_TDI.row = 1;
	IF (ISENCRYPTED == 1)
	{
		SDR	74	TDI	(0x03CD5DFFFFFFFFFFFFFF);
		RUN_TEST	  DELAY 2;
	}
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI[1]);
    RUN_TEST	TCK 	1000 ;
}

function BURST_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 5 DELAY 	PWP;
	! Shift in LSCC BITSTREAM BURST(0x02) instruction;
    SIR Instruction_Length	TDI (LSCC_BITSTREAM_BURST);
    IF (ISENCRYPTED == 1)
	{
		SDR	72	TDI	(0xCD5DFFFFFFFFFFFFFF);
		RUN_TEST	DRPAUSE TCK 1 DELAY 2;
	}
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI[1]);
	RUN_TEST	IDLE TCK 256 DELAY PWP;
}

function PROGRAM_USERCODE {
	IF (Usercode_TDI.row = 1)
	{
		! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
	    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
		SDR Usercode_Length	TDI	(Usercode_TDI[1]);
		RUN_TEST	TCK 	5 DELAY 	PWP;
	}
}
function PROGRAM_DONE_BIT {
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	// Goto Run Test Idle 
	RUN_TEST	IDLE TCK 5 DELAY 50;
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 32 DELAY 10;
	! Shift in IDCODE(0x16) instruction;
    SIR_VERIFY	Instruction_Length 	TDI (IDCODE)
									TDO (0x1D);
}
function VERIFY_DONE_BIT {
	! Shift in IDCODE(0x16) instruction;
    SIR_VERIFY Instruction_Length	TDI	(IDCODE)
									TDO (0x1D);
}
function ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 5
				DELAY 50;
	STATE IDLE;
}
// Verify Functions _____________________________________________
function VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 5 DELAY 	PWV;
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	repeat Address_Length {
		RUN_TEST	IDLE TCK 5 DELAY 	PWV;
		! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(FuseArray_TDI)
								MASK(FuseArray_MASK);
		RowCount = RowCount +1;
	}
}
function VERIFY_CONTROL {
	IF (Control_Register_0_TDI.row = 1)
	{
		! Shift in LSCC READ CONTROL 0(0x4A) instruction;
	    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
		RUN_TEST IDLE TCK 5 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
				   	   TDO(Control_Register_0_TDI[1])
				       MASK(0xFFEFFFFF);
	}
	
}
function VERIFY_USERCODE {
	IF (Usercode_TDI.row = 1)
	{
		! Shift in READ USERCODE(0x17) instruction;
	    SIR Instruction_Length TDI (USERCODE);
		SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
									TDO	(Usercode_TDI);
	}
}
function VERIFY_STATUS {
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR_VERIFY	32	TDI(#1^32)
			TDO(0x00020000)
			MASK(0x00060103);
	
}
function CHECK_STATUS {
	datastream SavedStatus[1][32];
	datastream TempStatus[1][32];
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR	32	TDI(#1^32)
			TDO(TempStatus);
	SavedStatus[1] = (TempStatus[1] | 0x00040000);
	IF (SavedStatus[1] == 0x00040000)
	{
		ReturnCode = 0;
	}
	ELSE
	{
		ReturnCode = 1;
	}
		
}

function TURBO_CHECK_STATUS {
	datastream SavedStatus[1][32];
	datastream TempStatus[1][32];
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR	32	TDI(#1^32)
			TDO(TempStatus);
	
	SavedStatus[1] = (TempStatus[1] | 0x00040000);
	IF (SavedStatus[1] == 0x00040000)
	{
		ReturnCode = 0;
	}
	ELSE
	{
		ReturnCode = 0;
		! Shift in LSCC REFRESH(0x23) instruction;
    	SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST	IDLE	TCK 5 DELAY 20;
	}
		
}

function VERIFY_PROGRAM_DONE_INIT {
	BSCANTDO.row = 1;
	BSCANMASK.row = 1;
	! Shift in SAMPLE(0x1C) instruction;
    SIR Instruction_Length TDI (BPRELOAD);
    IF (BSCAN_Length == 234)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x00000000000000000000000000000000000000000288000000000000000)
					        MASK(0x00000000000000000000000000000000000000000288000000000000000);
    }
    ELSEIF (BSCAN_Length == 330)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x00000000000000000000000000000000000000000000000000000000000000000288000000000000000)
					        MASK(0x00000000000000000000000000000000000000000000000000000000000000000288000000000000000);
    }
    ELSEIF (BSCAN_Length == 458)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000)
					        MASK(0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000);
    }
    ELSEIF (BSCAN_Length == 586)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000)
					        MASK(0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000);
    }
    ELSEIF (BSCAN_Length == 714)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002880000000000000000000000000000000)
					        MASK(0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002880000000000000000000000000000000);
    }
    ELSEIF (BSCAN_Length == 1034)
    {
    	SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000000000000000000000000000)
					        MASK (0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028800000000000000000000000000000000000000000000000);
	}
	ELSE
	{
		SDR_VERIFY BSCAN_Length TDI (#1^BSCAN_Length)
					        TDO	(BSCANTDO)
					        MASK (BSCANMASK);
	}
					
}


function PROGRAM_SECURITY {
	! Shift in ISC PROGRAM SECURITY(0x09) instruction;
    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
	RUN_TEST	TCK 	5 DELAY 	50;
	STATE IDLE;
}
function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length	TDI	(IDCODE);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SVF_SAVE_ID	{
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}
function SAVE_ARRAY {
	int32	RowCount = 1;
	datastream SavedFuseMap[Address_Length][Row_Width];
	file NewFile = "FILE_SAVE";

	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	STATE IDLE;
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	// Program the rest of the device 
	repeat Address_Length {
		// Goto Run Test Idle
		RUN_TEST	TCK 	5 DELAY 	PWV;						
		! Shift Out Data Row = RowCount;
	    SDR Row_Width 	TDI (#0^Row_Width)
						TDO (SavedFuseMap);
		RowCount = RowCount +1;
	}
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SVF_SAVE_ARRAY {
	int32	RowCount = 1;
	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	STATE IDLE;
	
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	repeat Address_Length {
		RUN_TEST	TCK 	5 DELAY 	PWV;
		! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(#1^Row_Width)
								MASK (#0^Row_Width);
		RowCount = RowCount +1;
	}
}
function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length	TDI (USERCODE);
	SDR	Usercode_Length	TDI(#1^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SVF_SAVE_USERCODE {
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
}

function SAVE_STATUS {
	datastream SavedSTATUS[1][32];
	file NewFile = "FILE_SAVE";
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR	32	TDI(#1^32)
			TDO(SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}
function SVF_SAVE_STATUS {
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length TDI (LSCC_READ_STATUS);
	SDR_VERIFY 	32 TDI (#1^32)
				   TDO	(#1^32)
				   MASK(#0^32);
}
function SERIAL_READ_DONE_BIT {
	datastream SavedDONE_BIT[1][1];
	file	NewFile = "FILE_SAVE"; 
	
	SDR 1	TDI	(0x00)
			TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function READ_DONE_BIT {
	datastream SavedDONE_BIT[1][Instruction_Length];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length	TDI	(IDCODE)
							TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function SVF_SAVE_DONE_BIT {
	! Shift in IDCODE(0x16) instruction;
    SIR_VERIFY Instruction_Length	TDI	(0x16)
				TDO (#1^Instruction_Length)
				MASK(#0^Instruction_Length);
}

function SAVE_CONTROL0 {
	datastream SavedControl0[1][32];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in LSCC READ CONTROL 0(0x4A) instruction;
    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
	RUN_TEST IDLE TCK 5 DELAY PWV; 
	SDR  32 TDI(0x00000000)
				   TDO(SavedControl0);
				  
	// Write To File 
	fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (Control_Register_0_TDI, SavedControl0);
	fclose 	NewFile;
}

function SVF_SAVE_CONTROL0 
{
	! Shift in LSCC READ CONTROL 0(0x4A) instruction;
    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
	RUN_TEST IDLE TCK 5 DELAY PWV; 
	SDR_VERIFY  32 TDI(0x00000000)
				   TDO(0x00000000)
				   MASK(0x00000000);
}

function TRANSFR_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 1000; 
	
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	LCOUNT 20;
	LDELAY IDLE  DELAY 1000;
	LSDR	32	TDI(#1^32)
			TDO(0x00020000)
			MASK(0x00060103);
	
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 5 DELAY MDRDelay;
}
function SVF_TRANSFR_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 20000; 
	
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR_VERIFY	32	TDI(#1^32)
					TDO(0x00020000)
					MASK(0x00060007);
					
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 5 DELAY MDRDelay;
	
}		
function REFRESH_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 1000; 
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	LCOUNT 20;
	LDELAY IDLE  DELAY 1000;
	LSDR	32	TDI(#1^32)
			TDO(0x00020000)
			MASK(0x00060103);
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 100 DELAY 10000;
			
}	
function SVF_REFRESH_FUNCTION 
{
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 5 DELAY 20000; 
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI (BYPASS);
	RUN_TEST IDLE TCK 100 DELAY 10000;
	! Shift in LSCC READ STATUS(0x53) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_STATUS);
	SDR_VERIFY	32	TDI(#1^32)
					TDO(0x00020000)
					MASK(0x00060103);
			
}	
function CHECK_KEYLOCK 
{
	datastream SavedPESFuse[1][128];
	! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedPESFuse[1]);
	
	IF (SavedPESFuse[1] != 0x00000000000000000000000000000000)
	{
	}
	ELSE
	{
		//! Shift in PROGRAM_PES(0x0F) instruction;
	    //SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
	    //SDR	 128	TDI(0x00000000000000000000000000000001);
		//RUN_TEST IDLE TCK 1000 DELAY 2000;
	    //! Shift in READ_PES(0x11) instruction;
	    //SIR Instruction_Length	TDI (LSCC_READ_PES);
	    //SDR	 1	TDI(0x00);
	    //RUN_TEST IDLE TCK 5 DELAY PWV;
	    //SDR	 128	TDI(#0^128)
		//			TDO(SavedPESFuse[1]);
		
		//IF (SavedPESFuse[1] == 0x00000000000000000000000000000000)
		//{
		//	print (1,"Failed to program the PES fuses. The Key lock is programmed.");
		//}
		print (1,"The Key Lock is programmed. Cannot continue!");
	}	
}
function PROGRAM_SECURITY_KEY 
{
	datastream SavedTestFuse[1][128];
	datastream SavedTestFuse1[1][128];
	datastream SavedKeyFuse[1][128];
	datastream SavedKeyFuse1[1][128];
	datastream SavedRedundantFuse[1][128];
	datastream SavedRedundantFuse1[1][128];
	datastream SavedKeyLock[1][128];
	datastream SavedPESFuse[1][128];
	SecurityKey.row = 1;
	ReturnCode = 1;
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    // verify that no test fuses have been programmed 
    TRY 1 {
		! Shift in TEST_READ(0xC6) instruction;
		SIR Instruction_Length	TDI (TEST_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
    {
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 1 fuses already programmed.");
	}
	// verify that no key fuses have been programmed
	TRY 1 { 
	   	! Shift in KEY_READ(0xC4) instruction;
	    SIR Instruction_Length	TDI (KEY_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
	{
	
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 2 fuses already programmed.");
	}
	// verify that no redundant fuses have been programmed 
	TRY 1 {
		! Shift in REDUNDANT_READ(0xC7) instruction;
	    SIR Instruction_Length	TDI (REDUNDANT_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 3 fuses already programmed.");
	}
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	//Program the TEST fuses
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
				
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedTestFuse[1]);
	
	// Program the test fuses again to check the hashing engine
	//! Shift in TEST_PROGRAM(0xC2) instruction;
    //SIR Instruction_Length	TDI (TEST_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	// Verify the TEST fuses
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse1[1]);						
	IF (SavedTestFuse[1] != SavedTestFuse1[1])
	{
		//print (0,"Failed to program the Row 1 fuses.");	
		//print (0,SavedTestFuse);
		//print (0,SavedTestFuse1);
		TRY 1 {
			check_over_program (SavedTestFuse,SavedTestFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Row 1 fuses. Cannot Continue.");	
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
	}
	ELSE
	{
		print (0,"Row 1 fuses programmed successful.");	
		ReturnCode = 0;
	}				
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the KEY fuses		
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 200 DELAY 2000;
	
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedKeyFuse[1]);
			    			
    // Program the test fuses again to check the hashing engine			
	//! Shift in KEY_PROGRAM(0xC0) instruction;
    //SIR Instruction_Length	TDI (KEY_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 200 DELAY 2000;
	
	// Verify the KEY fuses
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse1[1]);
	IF (SavedKeyFuse[1] != SavedKeyFuse1[1])
	{
		//print (0,"Failed to program the Row 2 fuses.");
		//print (0,SavedKeyFuse);
		//print (0,SavedKeyFuse1);
		TRY 1 {
			check_over_program (SavedKeyFuse,SavedKeyFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
		    print (1,"Failed to program the Row 2 fuses. Cannot Continue.");
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
		
	}
	ELSE
	{
		print (0,"Row 2 fuses programmed successful.");
		ReturnCode = 0;	
	}
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the Redundant fuses
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedRedundantFuse[1]);
    
    // Program the Redundant fuses again to check the hashing engine
	//! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    //SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	// Verify the Redundant fuses
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse1[1]);	
	IF (SavedRedundantFuse[1] != SavedRedundantFuse1[1])
	{
		//print (0,"Failed to program the Row 3 fuses.");	
		//print (0,SavedRedundantFuse);
		//print (0,SavedRedundantFuse1);
		TRY 1 {
			check_over_program (SavedRedundantFuse,SavedRedundantFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Row 3 fuses. Cannot Continue.");	
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
		
	}
	ELSE
	{
		print (0,"Row 3 fuses programmed successful.");	
		ReturnCode = 0;
	}			
	// If All three fuses failed then reject the part
	IF ( ReturnCode == 0x01)
	{
		IF (SavedKeyFuse[1] == SavedRedundantFuse[1])
		{
			TRY 1 {
				check_under_program (SavedKeyFuse,SavedTestFuse1,SavedKeyFuse1,SavedRedundantFuse1);
			}
			ELSE
			{
				! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
			    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
			    SDR 32 TDI(0x00000000);
			    RUN_TEST IDLE TCK 5 DELAY PWP;
				print (1,"Failed to program the Encryption fuses.");
			}
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Encryption fuses.");
		}		
	}
	// Program the Key Lock fuses
	IF (KeyLock == 0x01)
	{
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST	IDLE	TCK 5 DELAY PWP;
		
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    	SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    	SDR 32 TDI(0x0004064D);
    	RUN_TEST	IDLE	TCK 5 DELAY PWP;
    
		! Shift in LOCK_PROGRAM(0xC1) instruction;
    	SIR Instruction_Length	TDI (LOCK_PROGRAM);
    	SDR 128 TDI(0xF0000000000000000000000000000000);
    	RUN_TEST	IDLE TCK 1000 DELAY 5000;
    	
    	! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 5 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 100 DELAY 1;
		
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
	
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST IDLE TCK 5 DELAY 20;

    	! Shift in PROGRAM_PES(0x0F) instruction;
	    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
	    SDR	 128	TDI(0x00000000000000000000000000000001);
		RUN_TEST IDLE TCK 1000 DELAY 2000;
	    TRY 1 {
		    ! Shift in READ_PES(0x11) instruction;
		    SIR Instruction_Length	TDI (LSCC_READ_PES);
		    SDR	 1	TDI(0x00);
		    RUN_TEST IDLE TCK 5 DELAY PWV;
		    SDR_VERIFY	 128	TDI(#0^128)
								TDO(0x00000000000000000000000000000000);
			print (0,"Key Lock fuses programmed successful.");
		}			
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Key Lock fuses.");
				
		}
	}
					
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
}

function PROGRAM_SECURITY_KEY_ONLY 
{
	datastream SavedTestFuse[1][128];
	datastream SavedTestFuse1[1][128];
	datastream SavedKeyFuse[1][128];
	datastream SavedKeyFuse1[1][128];
	datastream SavedRedundantFuse[1][128];
	datastream SavedRedundantFuse1[1][128];
	datastream SavedKeyLock[1][128];
	datastream SavedPESFuse[1][128];
	SecurityKey.row = 1;
	ReturnCode = 1;
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    // verify that no test fuses have been programmed 
    TRY 1 {
		! Shift in TEST_READ(0xC6) instruction;
		SIR Instruction_Length	TDI (TEST_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
    {
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 1 fuses already programmed.");
	}
	// verify that no key fuses have been programmed
	TRY 1 { 
	   	! Shift in KEY_READ(0xC4) instruction;
	    SIR Instruction_Length	TDI (KEY_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
	{
	
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 2 fuses already programmed.");
	}
	// verify that no redundant fuses have been programmed 
	TRY 1 {
		! Shift in REDUNDANT_READ(0xC7) instruction;
	    SIR Instruction_Length	TDI (REDUNDANT_READ);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
					        TDO(0x00000000000000000000000000000000);
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Row 3 fuses already programmed.");
	}
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	//Program the TEST fuses
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
				
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedTestFuse[1]);
	
	// Program the test fuses again to check the hashing engine
	//! Shift in TEST_PROGRAM(0xC2) instruction;
    //SIR Instruction_Length	TDI (TEST_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	// Verify the TEST fuses
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse1[1]);						
	IF (SavedTestFuse[1] != SavedTestFuse1[1])
	{
		//print (0,"Failed to program the Row 1 fuses.");	
		//print (0,SavedTestFuse);
		//print (0,SavedTestFuse1);
		TRY 1 {
			check_over_program (SavedTestFuse,SavedTestFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Row 1 fuses. Cannot Continue.");	
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
	}
	ELSE
	{
		print (0,"Row 1 fuses programmed successful.");	
		ReturnCode = 0;
	}				
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the KEY fuses		
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 200 DELAY 2000;
	
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedKeyFuse[1]);
			    			
    // Program the test fuses again to check the hashing engine			
	//! Shift in KEY_PROGRAM(0xC0) instruction;
    //SIR Instruction_Length	TDI (KEY_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 200 DELAY 2000;
	
	// Verify the KEY fuses
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse1[1]);
	IF (SavedKeyFuse[1] != SavedKeyFuse1[1])
	{
		//print (0,"Failed to program the Row 2 fuses.");
		//print (0,SavedKeyFuse);
		//print (0,SavedKeyFuse1);
		TRY 1 {
			check_over_program (SavedKeyFuse,SavedKeyFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
		    print (1,"Failed to program the Row 2 fuses. Cannot Continue.");
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
		
	}
	ELSE
	{
		print (0,"Row 2 fuses programmed successful.");
		ReturnCode = 0;	
	}
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the Redundant fuses
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedRedundantFuse[1]);
    
    // Program the Redundant fuses again to check the hashing engine
	//! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    //SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    //SDR	 128	TDI(SecurityKey[1]);
	//RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	// Verify the Redundant fuses
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse1[1]);	
	IF (SavedRedundantFuse[1] != SavedRedundantFuse1[1])
	{
		//print (0,"Failed to program the Row 3 fuses.");	
		//print (0,SavedRedundantFuse);
		//print (0,SavedRedundantFuse1);
		TRY 1 {
			check_over_program (SavedRedundantFuse,SavedRedundantFuse1);
			//print (0,"Under-Programming detected.");
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Row 3 fuses. Cannot Continue.");	
		    //print (1,"Over-Programming detected. Cannot Continue!");
		}
		
	}
	ELSE
	{
		print (0,"Row 3 fuses programmed successful.");	
		ReturnCode = 0;
	}			
	// If All three fuses failed then reject the part
	IF ( ReturnCode == 0x01)
	{
		IF (SavedKeyFuse[1] == SavedRedundantFuse[1])
		{
			TRY 1 {
				check_under_program (SavedKeyFuse,SavedTestFuse1,SavedKeyFuse1,SavedRedundantFuse1);
			}
			ELSE
			{
				! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
			    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
			    SDR 32 TDI(0x00000000);
			    RUN_TEST IDLE TCK 5 DELAY PWP;
				print (1,"Failed to program the Encryption fuses.");
			}
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Encryption fuses.");
		}		
	}				
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
}
function SVF_PROGRAM_SECURITY_KEY 
{
	SecurityKey.row = 1;
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    // verify that no test fuses have been programmed 
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	// verify that no key fuses have been programmed
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	// verify that no redundant fuses have been programmed 
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	//Program the TEST fuses
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
				
					
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the KEY fuses		
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 200 DELAY 2000;
	
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the Redundant fuses
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
			
	// Program the Key Lock fuses
	IF (KeyLock == 0x01)
	{
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST	IDLE	TCK 5 DELAY PWP;
		
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    	SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    	SDR 32 TDI(0x0004064D);
    	RUN_TEST	IDLE	TCK 5 DELAY PWP;
    
		! Shift in LOCK_PROGRAM(0xC1) instruction;
    	SIR Instruction_Length	TDI (LOCK_PROGRAM);
    	SDR 128 TDI(0xF0000000000000000000000000000000);
    	RUN_TEST	IDLE TCK 1000 DELAY 5000;
    	
    	! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 5 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 100 DELAY 1;
		
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
	
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST IDLE TCK 5 DELAY 20;

    	! Shift in PROGRAM_PES(0x0F) instruction;
	    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
	    SDR	 128	TDI(0x00000000000000000000000000000001);
		RUN_TEST IDLE TCK 1000 DELAY 2000;
	    ! Shift in READ_PES(0x11) instruction;
	    SIR Instruction_Length	TDI (LSCC_READ_PES);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
							TDO(0x00000000000000000000000000000000);
	}
					
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
}

function SVF_PROGRAM_SECURITY_KEY_ONLY 
{
	SecurityKey.row = 1;
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    // verify that no test fuses have been programmed 
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	// verify that no key fuses have been programmed
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	// verify that no redundant fuses have been programmed 
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				        TDO(0x00000000000000000000000000000000);
	
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	//Program the TEST fuses
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
				
					
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the KEY fuses		
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 200 DELAY 2000;
	
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	//Make sure the data shit in and out the register is corrected.
	! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in REDUNDANT_READ(0xC7) instruction;
	SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);
	
	// Program the Redundant fuses
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
			
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
}
function SET_SECURITY_KEY_FUSES
{
	datastream Manufacturing[1][32];
	datastream SavedKeyFuse[1][128];
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
		
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004064D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(SecurityKey[1])
				TDO(SavedKeyFuse[1]);
	print (0,SavedKeyFuse);
	
    
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR 32 TDI(0x00000C4D);
    SDR 32 TDI(0x00000C4D)
    	   TDO(Manufacturing);
    print (0,Manufacturing);				
}
function PROGRAM_SECURITY_KEY_FUSES 
{
	datastream SavedKeyFuse[1][128];
	datastream SavedKeyFuse1[1][128];
	SecurityKey.row = 1;
	
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedKeyFuse[1]);
    			
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse1[1]);	
				
	IF (SavedKeyFuse[1] == SavedKeyFuse1[1])
	{
		print (0,"Row 2 fuses programmed successful.");
		print (0,SavedKeyFuse);	
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Failed to program the Row 2 fuses.");	
		print (1,SavedKeyFuse);
	}		
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function VERIFY_SECURITY_KEY_FUSES
{
	datastream SavedKeyFuse[1][128];
	datastream SavedTestFuse[1][128];
	datastream SavedRedundantFuse[1][128];
	SecurityKey.row = 1;
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	IF (SavedKeyFuse[1] == SecurityKey[1])
	{
		print (0,"Verify the Row 2 fuses: PASSED");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Verify the Row 2 fuses: FAILED");
		print (1,SavedKeyFuse);
	}
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	IF (SavedTestFuse[1] == SecurityKey[1])
	{
		print (0,"Verify the Row 1 fuses: PASSED");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Verify the Row 1 fuses: FAILED");
		print (1,SavedTestFuse);
	}
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	IF (SavedRedundantFuse[1] == SecurityKey[1])
	{
		print (0,"Verify the Row 3 fuses: PASSED");
		print (0,SavedRedundantFuse);								
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Verify the Row 3 fuses: FAILED");
		print (1,SavedRedundantFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function READ_SECURITY_KEY_FUSES
{
	datastream SavedKeyFuse[1][128];
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	IF (SavedKeyFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 2 fuses are not programmed.");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		print (0,"The Row 2 fuses already programmed.");
		print (0,SavedKeyFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function PROGRAM_REDUNDAND_FUSES 
{
	datastream SavedRedundantFuse[1][128];
	datastream SavedRedundantFuse1[1][128];
	SecurityKey.row = 1;
	
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedRedundantFuse[1]);
    			
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse1[1]);	
				
	IF (SavedRedundantFuse[1] == SavedRedundantFuse1[1])
	{
		print (0,"Row 3 fuses programmed successful.");
		print (0,SavedRedundantFuse);	
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Failed to program the Row 3 fuses.");	
		print (1,SavedRedundantFuse);
	}		
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function VERIFY_REDUNDAND_FUSES
{
	datastream SavedRedundantFuse[1][128];
	SecurityKey.row = 1;
	
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	IF (SavedRedundantFuse[1] == SecurityKey[1])
	{
		print (0,"Verify the Row 3 fuses: PASSED");
		print (0,SavedRedundantFuse);								
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Verify the Row 3 fuses: FAILED");
		print (1,SavedRedundantFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function READ_REDUNDAND_FUSES
{
	datastream SavedRedundantFuse[1][128];
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	IF (SavedRedundantFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 3 fuses are not programmed.");
		print (0,SavedRedundantFuse);								
	}
	ELSE
	{
		print (0,"The Row 3 fuses already programmed.");
		print (0,SavedRedundantFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function ENABLE_HASHING
{
	//print (0,"The MFG<20:0> value 01000000001001001101");	
	//print (0,"Enable MFG_MODE");
	//print (0,"Enable 1st level hashing");
	//print (0,"Enable loading of the fuse value");
	//print (0,"Default value of program pulse width");
	//print (0,"default value for program/Read current");
	//print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function DISABLE_HASHING
{
	//print (0,"The MFG<20:0> value 01000000011001001101");	
	//print (0,"Enable MFG_MODE");
	//print (0,"Disables 1st level hashing");
	//print (0,"Enable loading of the fuse value");
	//print (0,"Default value of program pulse width");
	//print (0,"default value for program/Read current");
	//print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004064D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function PROGRAM_TEST_FUSES 
{
	datastream SavedTestFuse[1][128];
	datastream SavedTestFuse1[1][128];
	SecurityKey.row = 1;
	
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(SecurityKey[1]);
    
    ! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
	RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(SecurityKey[1])
						TDO(SecurityKey[1]);

	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1])
    			TDO(SavedTestFuse[1]);
	
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in TEST_READ(0xC6) instruction;
	SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse1[1]);	
				
	IF (SavedTestFuse[1] == SavedTestFuse1[1])
	{
		print (0,"Row 1 fuses programmed successful.");
		print (0,SavedTestFuse);	
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Failed to program the Row 1 fuses.");	
		print (1,SavedTestFuse);
	}		
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function VERIFY_TEST_FUSES
{
	datastream SavedTestFuse[1][128];
	SecurityKey.row = 1;
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	IF (SavedTestFuse[1] == SecurityKey[1])
	{
		print (0,"Verify the Row 1 fuses: PASSED");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (0,"Verify the Row 1 fuses: FAILED");
		print (1,SavedTestFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function READ_TEST_FUSES
{
	datastream SavedTestFuse[1][128];
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	IF (SavedTestFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 1 fuses are not programmed.");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		print (0,"The Row 1 fuses are programmed.");
		print (0,SavedTestFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function PROGRAM_LOCK_FUSES
{
	datastream SavedPESFuse[1][128];
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	! Shift in LOCK_PROGRAM(0xC1) instruction;
	SIR Instruction_Length	TDI (LOCK_PROGRAM);
	SDR 128 TDI(0xF0000000000000000000000000000000);
	RUN_TEST	IDLE TCK 1000 DELAY 5000;
	
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 100 DELAY 1;
	
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	STATE IDLE; 

	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST IDLE TCK 5 DELAY 20;

	! Shift in PROGRAM_PES(0x0F) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
    SDR	 128	TDI(0x00000000000000000000000000000001);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
    ! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedPESFuse[1]);
	
	IF (SavedPESFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"Key Lock fuses programmed successful.");	
	}
	ELSE
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
		print (1,"Failed to program the Key Lock fuses.");	
	}													
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function PROGRAM_LOCK_FUSES_ONLY
{
	datastream SavedPESFuse[1][128];
	// Program the Key Lock fuses
	IF (KeyLock == 0x01)
	{
		print (0,"Program the Key Lock fuses.");
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST	IDLE	TCK 5 DELAY PWP;
		
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    	SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    	SDR 32 TDI(0x0004064D);
    	RUN_TEST IDLE TCK 5 DELAY PWP;    				
		
		! Shift in LOCK_PROGRAM(0xC1) instruction;
		SIR Instruction_Length	TDI (LOCK_PROGRAM);
		SDR 128 TDI(0xF0000000000000000000000000000000);
		RUN_TEST	IDLE TCK 1000 DELAY 5000;
		
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 5 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 100 DELAY 1;
		
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
	
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST IDLE TCK 5 DELAY 20;
	
		! Shift in PROGRAM_PES(0x0F) instruction;
	    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
	    SDR	 128	TDI(0x00000000000000000000000000000001);
		RUN_TEST IDLE TCK 1000 DELAY 2000;
	    ! Shift in READ_PES(0x11) instruction;
	    SIR Instruction_Length	TDI (LSCC_READ_PES);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR	 128	TDI(#0^128)
					TDO(SavedPESFuse[1]);
		
		IF (SavedPESFuse[1] == 0x00000000000000000000000000000000)
		{
			print (0,"Key Lock fuses programmed successful.");	
		}
		ELSE
		{
			! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
		    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
		    SDR 32 TDI(0x00000000);
		    RUN_TEST IDLE TCK 5 DELAY PWP;
			print (1,"Failed to program the Key Lock fuses.");	
		}													
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
	}
}
function SVF_PROGRAM_LOCK_FUSES
{
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	
	! Shift in LOCK_PROGRAM(0xC1) instruction;
	SIR Instruction_Length	TDI (LOCK_PROGRAM);
	SDR 128 TDI(0xF0000000000000000000000000000000);
	RUN_TEST	IDLE TCK 1000 DELAY 5000;
	
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 5 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 100 DELAY 1;
	
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	STATE IDLE; 

	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST IDLE TCK 5 DELAY 20;

	! Shift in PROGRAM_PES(0x0F) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
    SDR	 128	TDI(0x00000000000000000000000000000001);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
    ! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
						TDO(#0^128);													
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function SVF_PROGRAM_LOCK_FUSES_ONLY
{
	IF (KeyLock == 0x01)
	{		
    	
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST	IDLE	TCK 5 DELAY PWP;
		
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    	SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    	SDR 32 TDI(0x0004064D);
    	RUN_TEST IDLE TCK 5 DELAY PWP;
    	
		! Shift in LOCK_PROGRAM(0xC1) instruction;
		SIR Instruction_Length	TDI (LOCK_PROGRAM);
		SDR 128 TDI(0xF0000000000000000000000000000000);
		RUN_TEST	IDLE TCK 1000 DELAY 5000;
		
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 5 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 100 DELAY 1;
		
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		STATE IDLE; 
	
		! Shift in ISC ENABLE(0x15) instruction;
	    SIR Instruction_Length TDI (ISC_ENABLE);
		RUN_TEST IDLE TCK 5 DELAY 20;
	
		! Shift in PROGRAM_PES(0x0F) instruction;
	    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
	    SDR	 128	TDI(0x00000000000000000000000000000001);
		RUN_TEST IDLE TCK 1000 DELAY 2000;
	    ! Shift in READ_PES(0x11) instruction;
	    SIR Instruction_Length	TDI (LSCC_READ_PES);
	    SDR	 1	TDI(0x00);
	    RUN_TEST IDLE TCK 5 DELAY PWV;
	    SDR_VERIFY	 128	TDI(#0^128)
							TDO(#0^128);													
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(0x00000000);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
	}
}
function PROGRAM_DUMMY_LOCK_FUSES
{
	datastream SavedKeyLock[1][128];
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x000C064D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(#0^128)
				TDO(SavedKeyLock[1]);
	
	print (0,"Dummy Lock Fuses Before Program Key:");
	print (0,SavedKeyLock);
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
	SDR 128 TDI(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(#0^128)
				TDO(SavedKeyLock[1]);
	
	
	print (0,"Dummy Lock Fuses After Program Key:");
	print (0,SavedKeyLock);
	
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0014064D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(#0^128)
				TDO(SavedKeyLock[1]);
	
	print (0,"Dummy Lock Fuses Before Program Redundant:");
	print (0,SavedKeyLock);
						
    ! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(#1^128);
    RUN_TEST IDLE TCK 1000 DELAY 2000;
							
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(#0^128)
				TDO(SavedKeyLock[1]);
	
	print (0,"Dummy Lock Fuses After Program Key:");
	print (0,SavedKeyLock);
																					
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function READ_KEYLOCK 
{
	datastream SavedKeyLock[1][128];
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
	SDR	 128	TDI(#0^128)
			TDO(SavedKeyLock[1]);
	print (0,"The Key Lock is:");
	print (0,SavedKeyLock);
}
function READ_SECURITY_KEY 
{
	datastream SavedTestFuse[1][128];
	datastream SavedKeyFuse[1][128];
	datastream SavedRedundantFuse[1][128];
	
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	IF (SavedTestFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 1 fuses are not programmed.");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		print (0,"The Row 1 fuses are programmed.");
		print (0,SavedTestFuse);
	}
	
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	IF (SavedKeyFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 2 fuses are not programmed.");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		print (0,"The Row 2 fuses are programmed.");
		print (0,SavedKeyFuse);
	}	
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	IF (SavedRedundantFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 3 fuses are not programmed.");		
		print (0,SavedRedundantFuse);						
	}
	ELSE
	{
		print (0,"The Row 3 fuses are programmed.");
		print (0,SavedRedundantFuse);
	}
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}

function SVF_READ_SECURITY_KEY 
{
	// print (0,"The MFG<20:0> value 00000000000001001101");	
	// print (0,"Disable MFG_MODE");
	// print (0,"Enable 1st level hashing");
	// print (0,"Enable loading of the fuse value");
	// print (0,"Default value of program pulse width");
	// print (0,"default value for program/Read current");
	// print (0,"Disable Majority Decode");
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0004024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
				TDO(#0^128)
				MASK(#0^128);
	
	! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
						TDO(#0^128)
						MASK(#0^128);
		
	! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR_VERIFY	 128	TDI(#0^128)
						TDO(#0^128)
						MASK(#0^128);
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
}
function PROGRAM_MANUFACTURING_REGISTER
{
	IF (Control_Register_0_TDI.row = 1)
	{
		! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
	    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
	    SDR 32 TDI(Control_Register_0_TDI[1]);
	    RUN_TEST IDLE TCK 5 DELAY PWP;
	}
}
function READ_MANUFACTURING_REGISTER
{
	datastream Manufacturing[1][32];
	file	NewFile = "FILE_SAVE"; 
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR 32 TDI(0x00000000)
    	   TDO(Manufacturing[1]);
    
    print (0,Manufacturing);
    
    SDR 32 TDI(Manufacturing[1]);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (Control_Register_0_TDI, Manufacturing);
	fclose 	NewFile;
}
function DISABLE_PROGRAM_SECURITY_KEY
{
	datastream SavedTestFuse[1][128];
	datastream SavedKeyFuse[1][128];
	datastream SavedRedundantFuse[1][128];
	datastream SavedPESFuse[1][128];
	datastream SavedKeyLock[1][128];
	
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;					
	! Shift in KEY_PROGRAM(0xC0) instruction;
    SIR Instruction_Length	TDI (KEY_PROGRAM);
    SDR	 128	TDI(#1^128);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	! Shift in REDUNDANT_PROGRAM(0xC3) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_PROGRAM);
    SDR	 128	TDI(#1^128);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
			
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	! Shift in TEST_PROGRAM(0xC2) instruction;
    SIR Instruction_Length	TDI (TEST_PROGRAM);
    SDR	 128	TDI(#1^128);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 5 DELAY PWP;
	! Shift in LOCK_PROGRAM(0xC1) instruction;
	SIR Instruction_Length	TDI (LOCK_PROGRAM);
	SDR 128 TDI(0xF0000000000000000000000000000000);
	RUN_TEST	IDLE TCK 5 DELAY PWP;
	
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0002024D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	
	IF (SavedKeyFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 2 fuses are not programmed.");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		print (0,"The Row 2 fuses are programmed.");
		print (1,SavedKeyFuse);
	}
						
    ! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	
	IF (SavedRedundantFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 3 fuses are not programmed.");		
		print (0,SavedRedundantFuse);						
	}
	ELSE
	{
		print (0,"The Row 3 fuses are programmed.");
		print (1,SavedRedundantFuse);
	}
	
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	
	IF (SavedTestFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 1 fuses are not programmed.");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		print (0,"The Row 1 fuses are programmed.");
		print (1,SavedTestFuse);
	}
	
	! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedPESFuse[1]);
	
	IF (SavedPESFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The PES fuses are not programmed.");
		print (0,SavedPESFuse);
	}
	ELSE
	{
		print (0,"The PES fuses are programmed.");
		print (1,SavedPESFuse);
	}							
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	128	TDI(#0^128)
			TDO(SavedKeyLock[1]);
    print (0,"The Key Lock is:");
	print (0,SavedKeyLock);
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;												
}
function PROGRAM_PES_FUSES
{
	datastream SavedPESFuse[1][128];
	SecurityKey.row = 1;
	! Shift in PROGRAM_PES(0x0F) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_PES);
    SDR	 128	TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 1000 DELAY 2000;
    ! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedPESFuse[1]);
	
	IF (SecurityKey[1] == SavedPESFuse[1])
	{
		print (0,"The PES fuses programmed successful.");	
		print (0,SavedPESFuse);
	}
	ELSE
	{
		print (0,"Failed to program the PES fuses.");
		print (1,SavedPESFuse);	
	}	
}
function READ_PES_FUSES
{
	datastream SavedPESFuse[1][128];
	! Shift in READ_PES(0x11) instruction;
    SIR Instruction_Length	TDI (LSCC_READ_PES);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedPESFuse[1]);
	
	IF (SavedPESFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The PES fuses are not programmed.");
		print (0,SavedPESFuse);
	}
	ELSE
	{
		print (0,"The PES fuses are programmed.");
		print (0,SavedPESFuse);
	}	
}
function MAJORITY_DECODING_CHECK
{
	datastream SavedTestFuse[1][128];
	datastream SavedKeyFuse[1][128];
	datastream SavedRedundantFuse[1][128];
	datastream SavedPESFuse[1][128];
	datastream SavedKeyLock[1][128];
	
	print (0,"----Testing the Majority Decoding---");
	
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x0000064D);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	
	IF (SavedKeyFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 2 fuses are not programmed.");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		print (0,"The Row 2 fuses are programmed.");
		print (1,SavedKeyFuse);
	}
						
    ! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	
	IF (SavedRedundantFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 3 fuses are not programmed.");		
		print (0,SavedRedundantFuse);						
	}
	ELSE
	{
		print (0,"The Row 3 fuses are programmed.");
		print (1,SavedRedundantFuse);
	}
	
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	
	IF (SavedTestFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 1 fuses are not programmed.");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		print (0,"The Row 1 fuses are programmed.");
		print (1,SavedTestFuse);
	}
												
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	128	TDI(#0^128)
			TDO(SavedKeyLock[1]);
    print (0,"The Key Lock is:");
	print (0,SavedKeyLock);
		
					
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 32 TDI(0x00000000);
    RUN_TEST IDLE TCK 5 DELAY PWP;
    
    ! Shift in KEY_READ(0xC4) instruction;
    SIR Instruction_Length	TDI (KEY_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedKeyFuse[1]);
	
	IF (SavedKeyFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 2 fuses are not programmed.");
		print (0,SavedKeyFuse);
	}
	ELSE
	{
		print (0,"The Row 2 fuses are programmed.");
		print (1,SavedKeyFuse);
	}
						
    ! Shift in REDUNDANT_READ(0xC7) instruction;
    SIR Instruction_Length	TDI (REDUNDANT_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedRedundantFuse[1]);
	
	IF (SavedRedundantFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 3 fuses are not programmed.");		
		print (0,SavedRedundantFuse);						
	}
	ELSE
	{
		print (0,"The Row 3 fuses are programmed.");
		print (1,SavedRedundantFuse);
	}
	
	! Shift in TEST_READ(0xC6) instruction;
    SIR Instruction_Length	TDI (TEST_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	 128	TDI(#0^128)
				TDO(SavedTestFuse[1]);
	
	IF (SavedTestFuse[1] == 0x00000000000000000000000000000000)
	{
		print (0,"The Row 1 fuses are not programmed.");
		print (0,SavedTestFuse);
	}
	ELSE
	{
		print (0,"The Row 1 fuses are programmed.");
		print (1,SavedTestFuse);
	}
	! Shift in LOCK_READ(0xC5) instruction;
    SIR Instruction_Length	TDI (LOCK_READ);
    SDR	 1	TDI(0x00);
    RUN_TEST IDLE TCK 5 DELAY PWV;
    SDR	128	TDI(#0^128)
			TDO(SavedKeyLock[1]);
    print (0,"The Key Lock is:");
	print (0,SavedKeyLock);
		
}						
]]>
</Script>
</SVF_Plus>
    