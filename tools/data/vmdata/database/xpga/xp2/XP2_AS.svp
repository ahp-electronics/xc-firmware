<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<!-- 08/12/03 Spinti Created from a copy of MAGMA.svp and ECP2.svp
	10/04/06 Spinti: Correct typo; changed "Veirfy" to "Verify".
	Spinti: 12/15/06 Added Security Flash Protect Key Compare operation and function SAVE_COMPARE_STATUS for internal testing.
	01/10/07 Nguyen took out the discharge instruction (howard requested)
	07/03/07 Nguyen modified to support rev B silicon
	07/20/07 Nguyen modified to support "SRAM Program,Verify" Operation
	07/24/07 Nguyen modified to change 5 TCK to 10 TCK
	08/08/07 Nguyen modified to support "XFLASH Calculate Checksum"
    08/09/07 Ong   : Updated file to support the XFLASH TransFR Delay Option.
    09/12/07 Nguyen changed the LSDR keyword to the loop keyword to be consistent with XP2 (Howard requested)
	01/13/08 Nguyen added the VERIFY_SRAM_DONE_BIT function	
	01/18/08 Nguyen changed the maximum loop count to get it from the PWE .
	04/24/08 Nguyen Modified function DIRECT_FLASH_ERASE to fix the problem of security latch not clear
	04/24/08 Nguyen added XFLASH Erase,Program,Verify,Refresh operation
	04/24/08 NguyenAdded CHECK_PROTECT_KEY one more time in the DIRECT_FLASH_ERASE operation flow 
					 because after the DIRECT_FLASH_ERASE function the flag is clear by the DISBALE and ENABLE again.
	05/16/08 Nguyen added "XSRAM Read Status Register" operation
	05/16/08 Nguyen change dthe VERIFY_DONE_BIT function to not using the status register.					 
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<Arch_Length         value="ARCHITECH_LENGTH"/>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<SkipRow value="1"/>
	<MDRDelay value="MDR_DELAY"/>
	<MDRIspEN value="MDR_ISPEN"/>
	<MDRTRST value="MDR_TRST"/> 
	<KeyLock value="SECURITY_KEYLOCK"/>
	<Instruction>
		EXTEST	 			= 0x00;
		INTEST	 			= 0x2C;
		CLAMP	 			= 0x20;
		HIGH_Z	 			= 0x18;
		BPRELOAD 			= 0x1C;
		ISC_ENABLE 			= 0x15;
		ISC_XPROGRAM_ENABLE = 0x35;
		ISC_SRAM_ENABLE 	= 0x55;
		ISC_DISABLE			= 0x1E;
		ISC_ADDRESS_SHIFT 	= 0x01;
		ISC_DATA_SHIFT 		= 0x02;
		ISC_ERASE 			= 0x03;
		ISC_PROGRAM			= 0x07;
		ISC_READ			= 0x0A;
		ISC_PROGRAM_ASIC	= 0xA6;
		ISC_READ_ASIC		= 0xAB;
		ISC_PROGRAM_USERCODE		= 0x1A;
		ISC_PROGRAM_PES = 0x0F;
		ISC_READ_PES = 0x11;
		USERCODE 			= 0x17;
		ISC_PROGRAM_SECURITY	= 0x09;
		ISC_PROGRAM_DONE 		= 0x2F;
		ISC_ERASE_DONE			= 0x24;
		ISC_DISCHARGE			= 0x14;
		IDCODE 				= 0x16;
		BYPASS				= 0xFF;
		ISC_NOOP			= 0x30;
		<!-- Alternate Instructions -->
		LSCC_PROGRAM_INCR_RTI	= 0x67;
		LSCC_READ_INCR_RTI 		= 0x6A;
		<!-- Proprietary Mode Instructions -->
      	LSCC_TRANSPARENT_ENABLE	= 0x75;
		LSCC_BITSTREAM_BURST	= 0x04;
		LSCC_RESET_ADDRESS		= 0x21;
		LSCC_REFRESH			= 0x23;
		LSCC_ERASE_ROW			= 0x05;
		LSCC_PROGRAM_CTRL0		= 0x47;
		LSCC_READ_CTRL0			= 0x4A;
		LSCC_PROGRAM_ERR_MASK	= 0x68;
		LSCC_READ_ERR_MASK		= 0x6B;
		LSCC_RESET_CRC			= 0x12;
		LSCC_READ_CRC			= 0x73;
		LSCC_READ_STATUS		= 0x53;
		<!-- IP instructions -->
		LSCC_IPA			= 0x32;
		LSCC_IPTESTA		= 0x33;
		LSCC_IPB			= 0x38;
		LSCC_IPTESTB		= 0x39;	
		<!-- Manufacturing instructions -->
		LSCC_MANUFACTURING_SHIFT = 0x80;
		LSCC_ERASE_ALL			 = 0x10;
		LSCC_PROGRAM_PES		 = 0x0F;
		LSCC_READ_PES			 = 0x11;
		LSCC_USER_LOGIC_RESET	 = 0x22;
		READ_STATUS			= 0xB2;
		PGM_STATUS			= 0x52;
		
		<!-- TAG Memory instruction -->
		LSCC_TAG_ENABLE		= 0x73;
		LSCC_READ_TAG   	= 0x0B;
		LSCC_ERASE_TAG		= 0x70;
		LSCC_PROGRAM_TAG	= 0x71;
		LSCC_VERIFY_TAG		= 0x72;
		<!-- FEATURE ROW instruction -->
		PROGRAM_FEATURE = 0xC0;
		ERASE_FEATURE = 0xC3;
		READ_FEATURE = 0xC4;
		<!-- Security instruction -->
		X_PROGRAM_ENABLE		= 0x35;
		PROTECT_SHIFT			= 0x41;
		RESET_16_CRC			= 0xC6;
		READ_16_CRC				= 0xC5;
		ENCRYPT_PROG_INC		= 0x40;
		READ_SED_CRC			= 0x44;
		PROG_SED_CRC			= 0x45;
		WAKEUP					= 0x77;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANTDO">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000200000000000000000000000000000800000000000
			  000000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000200000000000000000000000000000800000000000
			  000000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAM">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			MDR_BSCANPROGRAM
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAMMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			MDR_BSCANPROGRAMMASK
		</FieldBlock>
	</DataField>
</Data>
<Operation_List>				
						   
	"Manufacturing Read PES Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PES_FUSES ! Read the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
	"Security Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";		  
	"Security Erase Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 	
										CHECK_FEATURE_ROW_ERASE ! Check the Portect Keys, 									
										FEATURE_ROW_ERASE	! Erase the feature row, 
										CHECK_STATUS ! Read the status bit,
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										DISABLE,
										FLASH_ENABLE,
										FEATURE_ROW_READ	! Read the feature row, 
					 			 		DISABLE ! Exit the programming mode"	;
	"Security Read Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										FEATURE_ROW_READ	! Read the feature row, 
										CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode"	;
	"Security Check Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Portect Keys,
										DISABLE ! Exit the programming mode"	;
	"Security Program my_ASSP" =  "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  PROGRAM_ASSP ! Program my_ASSP,
							  DISABLE ! Exit the programming mode" ;
							  					 			 							 			 							             
	"Security Read Key Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_SECURITY_KEY_FUSES ! Read the Key Fuses,
						   DISABLE ! Exit the programming mode" ;
					   						  					   						  					  
	"Security Program Encryption Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  PROGRAM_PROTECT_KEY !Program the Protection Key,
							  PROGRAM_SECURITY_KEY ! Program the Key Fuses,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Key Fuses" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  PROGRAM_SECURITY_KEY ! Program the Key Fuses,
							  DISABLE ! Exit the programming mode" ;
							  						  
	"Security Program Protect Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  PROGRAM_PROTECT_KEY !Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  							  
	"Security Read Protect Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Check Protect Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"Security Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
				 			 											
	"Security Background Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background  Program and TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;			 			 									  					   							  						 
					             						  
	"FLASH Bypass"	=	"INIT 	! Initialize";
	"FLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"Verify ID" = 		"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"FLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable the programming mode, 
									SAVE_USERCODE,
									DISABLE ! Exit the programming mode";
	"FLASH Program USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable the programming mode, 
									PROGRAM_USERCODE	! Program USERCODE,
									DISABLE ! Exit the programming mode";									
	"FLASH Display SED_CRC"	=	"INIT, 
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
								FLASH_ENABLE	! Enable the programming mode, 
								SAVE_SED,
								DISABLE ! Exit the programming mode";									
	"FLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_ENABLE	! Enable the programming mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 DIRECT_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,								
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Erase,Program,Verify,Refresh" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,								
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	"FLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security Erase,Program,Verify with OTP" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;			 			 		
			 			 		
	"Security Flash Protect Key Compare" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_COMPARE_STATUS !Flash Protect Key Compare and Display Status Register,
					             DISABLE";	

	"FLASH Program"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM_VERIFY,	
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"FLASH Verify Only" =	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							CHECK_STATUS ! Read the status bit, 
		 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode"	;
	"FLASH Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"FLASH Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";
	
	"FLASH Display EBR"	=	"INIT, 
							 READ_ID, 
							 SAVE_ID, 
							 IO_STATE ! Program Bscan register,
							 FLASH_ENABLE, 
							 SAVE_ARRAY, 
							 SAVE_USERCODE, 
							 SAVE_SED_CRC,
							 DISABLE";
								 
	"FLASH Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";	
	"FLASH Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";
	"FLASH Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 							 
	"FLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					FLASH_MDR ! Transparent Field Reconfiguration"	;
 			 								
	"XFLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"XFLASH Bypass"	=	"INIT 	! Initialize";
	"XFLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"XFLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"INIT, 
								 READ_ID,
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SAVE_STATUS !Read Status Register,
					             DISABLE";	
					             
	"XFLASH Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
					 			 
	"XFLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 DIRECT_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
			 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program USF with Static EBR" =	"	INIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
											CHECK_KEYLOCK ! Check the Key Protection fuses, 
											DIRECT_FLASH_ERASE	! Erase the device, 
											CHECK_STATUS ! Read the status bit,
						 			 		PROGRAM_STATUS	! Program Fuse Map,
						 			 		PROGRAM_USERCODE	! Program USERCODE,
											CHECK_STATUS ! Read the status bit,
											FLASH_VERIFY	! Verify Fuse Map, 
											VERIFY_USERCODE		! Verify USERCODE,
											PROGRAM_SED_CRC,
											FLASH_TAG_ERASE_PROGRAM_VERIFY,
						 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											CHECK_STATUS ! Read the status bit,
											XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
						 			 		DISABLE ! Exit the programming mode"	;								
	
	"XFLASH Program USF from PROM file" =	"	INIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
											CHECK_KEYLOCK ! Check the Key Protection fuses,  
											DIRECT_FLASH_ERASE	! Erase the device, 
											CHECK_STATUS ! Read the status bit,
						 			 		PROGRAM_STATUS	! Program Fuse Map,
						 			 		PROGRAM_USERCODE	! Program USERCODE,
											CHECK_STATUS ! Read the status bit,
											FLASH_VERIFY	! Verify Fuse Map, 
											VERIFY_USERCODE		! Verify USERCODE,
											PROGRAM_SED_CRC,
											FLASH_TAG_ERASE_PROGRAM_VERIFY,
						 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											CHECK_STATUS ! Read the status bit,
											XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
						 			 		DISABLE ! Exit the programming mode"	;
			 			 				 			 		
	"XFLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"XFLASH Erase,Program,Verify,Refresh" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
			 			 			
	"XFLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
				 			 		
	
	"XFLASH Program"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;		
	"XFLASH Verify Only" =	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							CHECK_STATUS ! Read the status bit, 
							DISABLE ! Exit the programming mode"	;										
	"XFLASH Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses,  
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"XFLASH Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";
	"XFLASH Display EBR"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";								 
								 
	"SRAM Bypass"	=	"INIT 	! Initialize";
	"SRAM Verify ID" = 	"INIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "INIT, READ_ID, SAVE_ID";
	
	"SRAM Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"INIT, READ_ID, SAVE_ID,SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"INIT, 
								 READ_ID,
								 SAVE_ID,
								 SRAM_ENABLE	! Enable SRAM programming mode, 
								 SAVE_SED,
								 DISABLE ! Exit the programming mode";
	
	"SRAM Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						IO_STATE ! Program Bscan register,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	INIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable SRAM programming mode,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register, 
							SRAM_ENABLE	! Enable SRAM programming mode,
							ERASE	! Erase the device, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map, 
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;					
	"SRAM Program,Verify,Secure"	=	"INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	
	"SRAM Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = " INIT 	! Initialize,
						SRAM_ENABLE	! Enable SRAM programming mode, 
						ERASE	! Erase the device, 
	 			 		DISABLE ! Exit the programming mode"	;
	
	"SRAM Re-Initialize" = " INIT 	! Initialize,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"SRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"SRAM Read DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SAVE_ID,
					 READ_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_ARRAY,
					             SAVE_USERCODE,
					             SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"INIT, 
						 READ_ID, 
						 SAVE_ID, 
						 IO_STATE ! Program Bscan register,
						 SRAM_ENABLE, 
						 SAVE_ARRAY, 
						 SAVE_USERCODE, 
						 SAVE_SED_CRC,
						 DISABLE";
	"SRAM Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	"SRAM Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";						             							
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "INIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE, 
		 			 			VERIFY_SED_CRC,
		 			 			VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
									VERIFY_USERCODE		! Verify USERCODE,
			 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SAVE_ID,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			READ_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             SAVE_STATUS !Read Status Register,
					             DISABLE";					 			 
	"XSRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	

	"FLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = 	"INIT, 
									 READ_ID, 
									 SAVE_ID, 
									 FLASH_ENABLE, 
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 FLASH_TAG_SAVE,												  
									 DISABLE";		 			 		
	"FLASH Verify TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SAVE_ID, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"INIT, 
									 READ_ID, 
									 SAVE_ID, 
									 FLASH_TRANSPARENT_ENABLE, 
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 FLASH_TAG_SAVE,												  
									 DISABLE";			 			 		
	"XFLASH Verify TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SAVE_ID, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;				             			 			 			
																	 			 
</Operation_List>
<Operation_List label="SingleSVFOperation">
	
	"Security Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	"Security Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
				 			 											
	"Security Background Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background  Program and TransFR" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;	 
			 			 		
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_USERCODE,
									 DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_SED_CRC,
									 DISABLE ! Exit the programming mode";									 
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode,
									 CHECK_KEYLOCK ! Check the Key Protection fuses,  
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"FLASH Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Erase,Program,Verify,Refresh" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY, 
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Program Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
									
	"FLASH Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security Erase,Program,Verify with OTP" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;					 			 		
			 			 		
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
		
	"FLASH Program"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM,
							CHECK_STATUS ! Read the status bit, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"FLASH Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY, 
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode"	;	
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	
	"FLASH Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;	

	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"FLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"FLASH Display EBR"	=	"SVFINIT, 
							 READ_ID, 
							 IO_STATE ! Program Bscan register,
							 FLASH_ENABLE, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC,
							 DISABLE";
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_ENABLE	! Enable PROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
					             
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";				 			 							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Re-Initialize" = "SVF_INIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	"XFLASH Program and TransFR" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;	 			 		 			 						 			 		
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"XFLASH Erase,Program,Verify,Refresh" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
			
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	
	"XFLASH Program"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							DISABLE ! Exit the programming mode"	;	
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";				 						 
	"XFLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_ENABLE	! Enable the programming mode,
								 SVF_SAVE_SED_CRC,
								 DISABLE ! Exit the programming mode";
	"SRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  IO_STATE ! Program Bscan register,
						  SRAM_ENABLE	! Enable SRAM programming mode"	;
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map, 
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;	
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,  
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "SVFINIT 	! Initialize,
					   SRAM_ENABLE	! Enable SRAM programming mode, 
					   ERASE	! Erase the device,
					   DISABLE ! Exit the programming mode"	;
	"SRAM Re-Initialize" = "SVFINIT 	! Initialize,
						   SRAM_ENABLE	! Enable SRAM programming mode, 
						   ERASE	! Erase the device,
						   DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
					             SVF_SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"SVFINIT, 
						 		 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"SRAM Refresh" = " SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";	
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";							
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE, 
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 	READ_ID	! Check the IDCODE,
					 			 	SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             	SVF_SAVE_CONTROL0 !Read Control Register 0,
					             	DISABLE";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Capture Only" = "SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;		
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	

	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = "SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 TAG_ENABLE	! Enable the TAG Memory mode, 
								 SVF_FLASH_TAG_SAVE,												  
								 DISABLE";				 			 		
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";				 			 		
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;		 			 																																 			 
</Operation_List>
<Operation_List label="TurboOperation">
	"Security Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;		
	"Security Erase Only"	=	"	INIT 	! Initialize, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
	
	"Security Background Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
				 			 											
	"Security Background Erase Only"	=	"	INIT 	! Initialize, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;		 			 															  
	
	"Security Background  Program and TransFR" = "	INIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	"FLASH Bypass"	=	"INIT 	! Initialize";
	"FLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"Verify ID" = 		"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"FLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_ENABLE	! Enable the PROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE,  
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
		
	"FLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"Security Erase,Program,Verify with OTP" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit"	;		 			 		
	"FLASH Program"	=	"	INIT 	! Initialize, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,  
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"FLASH Verify Only" =	"	INIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"FLASH Erase Only"	=	"	INIT 	! Initialize, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"FLASH Calculate Checksum"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";						             
	"FLASH Read and Save"	=	"INIT, 
								 SAVE_ID,
								 FLASH_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"FLASH Display EBR"	=	"INIT, 
							 SAVE_ID,
							 FLASH_ENABLE, 
							 SAVE_ARRAY, 
							 SAVE_USERCODE, 
							 SAVE_SED_CRC";								 
	
	"FLASH Read Status Register" = "INIT ! Initialize,
								 SAVE_ID, 					
								 SAVE_STATUS !Read Status Register";
					             
	"FLASH Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"FLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";												 			 							 
	"XFLASH Bypass"	=	"INIT 	! Initialize";
	"XFLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"XFLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;								
	"XFLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
			 			FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program USF with Static EBR" = "	INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Program USF from PROM file"	= "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;								
																
	"XFLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Erase,Program,Verify,Refresh" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	
	"XFLASH Program"	=	"	INIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"	INIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map,
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"	INIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";						             
	"XFLASH Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"INIT, 
								 SAVE_ID,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "INIT ! Initialize,
								 SAVE_ID, 	
								 SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 
	"SRAM Bypass"	=	"INIT 	! Initialize";
	"SRAM Verify ID" = 	"INIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "INIT, READ_ID, SAVE_ID";
	
	"SRAM Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"INIT, READ_ID, SAVE_ID,SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"INIT, 
								READ_ID, 
								SAVE_ID,
								SAVE_SED";
	
	"SRAM Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	INIT 	! Initialize,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "INIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "	INIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"INIT 	! Initialize, 
										ERASE	! Erase the device, 
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"	INIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"INIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"INIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " INIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " INIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"INIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"INIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"INIT 	! Initialize, 
								 SAVE_ID,
								 READ_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"SRAM Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_CONTROL0,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"SRAM Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Read Control Register0" = "INIT ! Initialize,
									 SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "INIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"SRAM Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "INIT, READ_ID, SAVE_ID";								
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_CONTROL0,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE,
		 			 			VERIFY_SED_CRC,
		 			 			VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								SAVE_ID,
								READ_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
									 SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";										 
	"XSRAM Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;	
						
	"FLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"INIT, 
									 SAVE_ID,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	INIT 	! Initialize, 
								SAVE_ID, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"INIT, 
									 SAVE_ID,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 FLASH_TAG_SAVE";									
	"XFLASH Verify TAG" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	INIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	INIT 	! Initialize, 
								SAVE_ID, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_SAVE	! Verify TAG Fuses"	;																		 			 
</Operation_List>
<Operation_List label="ChainSVFOperation">
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
								
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable PROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	
	"FLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit"	;
	"Security Erase,Program,Verify with OTP" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit"	;			 			 		
	"FLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"FLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	
	"FLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";						             
	"FLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"FLASH Display EBR"	=	"SVFINIT, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								SVF_SAVE_STATUS !Read Status Register";								 
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 	
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 																 
	"XFLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									 CHECK_KEYLOCK ! Check the Key Protection fuses,
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";						             
	"XFLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								SVF_SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 								 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, READ_ID, SVF_SAVE_SED_CRC";
	"SRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 		   DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,
								INIT	! Initialize the device,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize,
										ERASE	! Erase the device,  
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"SVFINIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " SVFINIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"SRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"SRAM Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
							IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE,
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";										
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;
							
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE";									
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses"	;																		 			 
</Operation_List>
<Operation_List label="SingleSVFOperationRevC">
	"Security Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
				 			 											
	"Security Background Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background  Program and TransFR" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		FLASH_MDR ! Transparent Field Reconfiguration"	; 
			 			 		
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
 	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_USERCODE,
									 DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_SED_CRC,
									 DISABLE ! Exit the programming mode";									 
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 SVF_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"FLASH Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"FLASH Erase,Program,Verify,Refresh" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;								
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	"Program Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;			 			 		
	"FLASH Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security Erase,Program,Verify with OTP" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;			 			 		
	"Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"FLASH Program"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"FLASH Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
		 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	"FLASH Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"FLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"FLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_ENABLE	! Enable PROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;										 			 							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									  FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Re-Initialize" = "SVF_INIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 SVF_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;				 			 				 			 		
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	
	"XFLASH Program"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
		 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"XFLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC, 
								 DISABLE";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_ENABLE	! Enable the programming mode,
								 SVF_SAVE_SED_CRC,
								 DISABLE ! Exit the programming mode";
	"SRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  IO_STATE ! Program Bscan register,
						  SRAM_ENABLE	! Enable SRAM programming mode"	;
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map, 
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,  
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "SVFINIT 	! Initialize,
					   SRAM_ENABLE	! Enable SRAM programming mode, 
					   ERASE	! Erase the device,
					   DISABLE ! Exit the programming mode"	;
	"SRAM Re-Initialize" = "SVFINIT 	! Initialize,
						   SRAM_ENABLE	! Enable SRAM programming mode, 
						   ERASE	! Erase the device,
						   DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
					             SVF_SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"SVFINIT, 
						 		 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"SRAM Refresh" = " SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";	
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";							
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE, 
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 	READ_ID	! Check the IDCODE,
					 			 	SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             	SVF_SAVE_CONTROL0 !Read Control Register 0,
					             	DISABLE";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Capture Only" = "SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;		
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;		
						
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_ENABLE, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";				 			 		
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,  
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_TRANSPARENT_ENABLE, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";			 			 		
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;						             		 			 																														 			 
</Operation_List>
<Operation_List label="ChainSVFOperationRevC">
	"Security Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	"Security Erase Only"	=	"	SVFINIT 	! Initialize, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
	
	"Security Background Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
				 			 											
	"Security Background Erase Only"	=	"	SVFINIT 	! Initialize, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;		 			 															  
	
	"Security Background  Program and TransFR" = "SVFINIT 	! Initialize, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
								
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable PROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 SVF_FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	"Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	"Program Only" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM,
								SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;									
	"FLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	"Security Erase,Program,Verify with my_ASSP" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_ASSP ! Program my_ASSP,
			 			 		CHECK_STATUS ! Read the status bit"	;	
	"Security Erase,Program,Verify with OTP" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_OTP ! Program OTP,
			 			 		CHECK_STATUS ! Read the status bit"	;			 			 				 			 		
	"Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	"FLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM,
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							CHECK_STATUS ! Read the status bit"	;		
	"FLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;
	"Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;							
	"FLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	"Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";						             
	"FLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"FLASH Display EBR"	=	"SVFINIT, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 SVF_SAVE_STATUS !Read Status Register";								 
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 																 
	"XFLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 SVF_FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								FLASH_MDR ! Transparent Field Reconfiguration"	;											
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		PROGRAM_SECURITY ! Secure device,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	
			 			 		
	"XFLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit, 
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM,
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";							             
	"XFLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,								 
								 SVF_SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 								 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, READ_ID, SVF_SAVE_SED_CRC";
	
	"SRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 		   DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,
								INIT	! Initialize the device,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize,
										ERASE	! Erase the device,  
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"SVFINIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " SVFINIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"SRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"SRAM Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
							IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE,
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";										
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;		
	
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,  
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 TAG_ENABLE	! Enable the TAG Memory mode, 
									 SVF_FLASH_TAG_SAVE";	
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								TAG_ENABLE	! Enable the TAG Memory mode,   
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses"	;																	 			 
</Operation_List>
<Script>
<![CDATA[
function INIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}
function SVFINIT {
	! Row_Width	  : DEVICE_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}
function PRELOAD {
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}

function INI_PRELOAD {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length);
}
function SAMPLE {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}

function INI_SAMPLE {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}
function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   Bscan[1] = SavedBScanTDO[1];	
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, Bscan);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}


function FLASH_ENABLE {
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY 20;
}
function FLASH_TRANSPARENT_ENABLE {
	! Shift in XPROGRAM ENABLE(0x35) instruction;
    SIR Instruction_Length TDI (ISC_XPROGRAM_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY 20;
}
function SRAM_ENABLE {
	! Shift in ISC SRAM ENABLE(0x55) instruction;
    SIR Instruction_Length TDI (ISC_SRAM_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY 20;
}
function SRAM_TRANSPARENT_READ_ENABLE {
	! Shift in LSCC_SRAM_TRANSPARENT_ENABLE(0x75) instruction;
    SIR Instruction_Length TDI (LSCC_TRANSPARENT_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY 20;
}
function TAG_ENABLE {
	! Shift in TAG ENABLE(0x73) instruction;
    SIR Instruction_Length TDI (LSCC_TAG_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY 20;
}

function DISABLE {
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 10 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 10 DELAY PWV;
}
function READ_ID {
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);								        			        
}
function ERASE {
	! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 10 DELAY PWV;
}
function DIRECT_FLASH_ERASE {
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;			  		
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 10 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWE {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}		
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK  10 DELAY PWV;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK  10 DELAY PWV;
	IF (ISENCRYPTED == 1)
	{
		IF (ISPROTECTED == 1)
		{
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK  10 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK  10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY 10;
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
	}	   
}
function FLASH_ERASE {	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 10 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWE {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}	   		   
}
function SVF_FLASH_ERASE {	
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 10 DELAY Erase_pulse;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);		
}
function FLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		
		! Shift in TAG ENABLE(0x73) instruction;
	    SIR Instruction_Length TDI (LSCC_TAG_ENABLE);
		RUN_TEST	IDLE	TCK 10 DELAY 20;
	
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 10 DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	   
	    
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}

function SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		! Shift in TAG ENABLE(0x73) instruction;
	    SIR Instruction_Length TDI (LSCC_TAG_ENABLE);
		RUN_TEST	IDLE	TCK 10 DELAY 20;
	
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 10 DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}
function FLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		! Shift in TAG ENABLE(0x73) instruction;
	    SIR Instruction_Length TDI (LSCC_TAG_ENABLE);
		RUN_TEST	IDLE	TCK 10 DELAY 20;
	
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 10 DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	   
	    
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop PWP {
			RUN_TEST DRPAUSE  TCK 10 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
	}
}

function SVF_FLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		! Shift in TAG ENABLE(0x73) instruction;
	    SIR Instruction_Length TDI (LSCC_TAG_ENABLE);
		RUN_TEST	IDLE	TCK 10 DELAY 20;
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 10 DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
	}
}
function FLASH_TAG_ERASE {	

	! Shift in TAG ERASE(0x70) instruction;
	SIR Instruction_Length TDI (LSCC_ERASE_TAG);
	RUN_TEST 	IDLE  TCK 10 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}	   			   
}

function SVF_FLASH_TAG_ERASE {	
	! Shift in TAG ERASE(0x70) instruction;
	SIR Instruction_Length TDI (LSCC_ERASE_TAG);
	RUN_TEST 	IDLE  TCK 10 DELAY 10000;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);		   
}

function CHECK_STATUS {
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	
}
function PROGRAM_SED_CRC {
	IF (SEDArray_TDI.row = 1)
	{
		! Program and Verify 32 bits SED_CRC;
		
		! Shift in PROGRAM_SED_CRC(0x45) instruction;
		SIR Instruction_Length TDI (PROG_SED_CRC);
		! Shift in SED_CRC Data; 
		SDR	32	TDI	(SEDArray_TDI[1]);
		RUN_TEST IDLE TCK 10 DELAY PWP; 
		! Shift in READ_SED_CRC(0x44) instruction;
		SIR Instruction_Length TDI (READ_SED_CRC);
		RUN_TEST IDLE TCK 10 DELAY PWV;
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x01);							
	} 
}
function PROGRAM_ASSP {
	datastream TDIFeatureRow[1][Row_Width];
	datastream MaskFeatureRow[1][Row_Width];
	IF (Row_Width == 2188)
    {
    	//Bits 1910
    	TDIFeatureRow[1] = ((#1^279)@ #0)@(#1^1909);
		MaskFeatureRow[1] = ((#0^279)@ #1)@(#0^1909);
	}
	ELSEIF (Row_Width == 772)
    {
    	//Bits 655
    	TDIFeatureRow[1] = ((#1^118)@ #0)@(#1^654);
		MaskFeatureRow[1] = ((#0^118)@ #1)@(#0^654);
	}
	print (0 ,"Programming my_ASSP");
	IF (ISENCRYPTED == 1)
	{
		IF (SecurityKey.row = 1)
		{
			print (0,"Checking the Flash Protect key...");
		}
		ELSE
		{
			print (1,"The Advanced Feature Row Protection key is required. Please enter the original Encryption key.");
		}
		// Check the Flash Protect Password	
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;	
				  
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(SecurityKey[1]);
		RUN_TEST IDLE TCK  10 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV;
			SDR_VERIFY	8	TDI(#1^8)
							TDO(0x00)
							MASK(0x08);
		}
		ELSE
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY PWV;
			print (1,"The Feature Row Protection Key does not match. Please re-enter the original Encryption Key.");
		}	
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;	
			  
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK  10 DELAY PWP; 
		IF (myASSP_Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK  10 DELAY 20;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(myASSP_Usercode_TDI);
							        	
		}
		ELSE
		{
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
						  		  TDO(TDIFeatureRow[1])
						  		  MASK(MaskFeatureRow[1]);
		}
	}
	ELSE
	{
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;	
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 10 DELAY PWP; 
		IF (myASSP_Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK  10 DELAY 20;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(myASSP_Usercode_TDI);
							        	
		}
		ELSE
		{
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
						  		  TDO(TDIFeatureRow[1])
						  		  MASK(MaskFeatureRow[1]);
		}				  	
	}
}
function PROGRAM_OTP {
	datastream TDIFeatureRow[1][Row_Width];
	datastream MaskFeatureRow[1][Row_Width];
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 10  DELAY PWV;
	IF (ISENCRYPTED == 1)
	{
		IF (SecurityKey.row = 1)
		{
			print (0,"Checking the Flash Protect Password...");
		}
		ELSE
		{
			print (1,"The Feature Row Protection Key is required. Please enter the original Encryption Key.");
		}
		// Check the Flash Protect Password			  
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(SecurityKey[1]);
		RUN_TEST IDLE TCK  10 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV;
			SDR_VERIFY	8	TDI(#1^8)
							TDO(0x00)
							MASK(0x08);
		}
		ELSE
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY PWV;
			print (1,"The Feature Row Protection Key does not match. Please re-enter the original Encryption Key.");
		}		  
	}
	IF (ISSECURED == 1)
	{
		print (0 ,"Secured the Device");
		! Secured the Device;
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		! Shift in ISC PROGRAM SECURITY(0x09) instruction;
	    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
		RUN_TEST	IDLE TCK 	10 DELAY PWP;
	}	
	IF (ISMYASSP == 1)
	{
		print (0 ,"Program my_ASSP");
		! Program my_ASSP;
		
		IF (Row_Width == 2188)
	    {
	    	//Bits 1910
    		TDIFeatureRow[1] = ((#1^279)@ #0)@(#1^1909);
			MaskFeatureRow[1] = ((#0^279)@ #1)@(#0^1909);
		}
		ELSEIF (Row_Width == 772)
	    {
	    	//Bits 655
    		TDIFeatureRow[1] = ((#1^118)@ #0)@(#1^654);
			MaskFeatureRow[1] = ((#0^118)@ #1)@(#0^654);
		}
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 10 DELAY PWP; 
		IF (myASSP_Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK  10 DELAY 20;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(myASSP_Usercode_TDI);
							        	
		}
	}
	print (0 ,"Program OTP");
	IF (Row_Width == 2188)
    {
    	//Bits 1911 to 1918
		TDIFeatureRow[1] = ((#1^272)@#00001101)@(#1^1910);
		MaskFeatureRow[1] = ((#0^272)@#11111111)@(#0^1910);
	}
	ELSEIF (Row_Width == 772)
    {
    	//Bits 656 to 663
		TDIFeatureRow[1] = ((#1^111)@#00001101)@(#1^655);
		MaskFeatureRow[1] = ((#0^111)@#11111111)@(#0^655);
	}
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 10  DELAY PWV;
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 10 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK  10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	} 
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK  10 DELAY 200;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK  10 DELAY 20;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK  10 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x10)
				  MASK(0x10);				  	
}
function PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	datastream ArrayTDI[1][Row_Width];
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	ArrayTDI[1] = FuseArray_TDI[1];
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 10  DELAY PWV;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
		SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
		! Shift in Data Row = RowCount; 
		SDR	Row_Width	TDI	(ArrayTDI[1]);
		RUN_TEST IDLE TCK  10  DELAY PWP;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop PWP {
			RUN_TEST IDLE  TCK  10 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		IF (Usercode_TDI.row = 1)
		{
			print (0, "Verify First Frame 16 Bits CRC");
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK  10  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	SDR_VERIFY 16 TDI(#0^16)
	    				  TDO(ArrayCRC16[1])
	    				  MASK(#1^16);
		}
		RowCount = RowCount +1;
    	repeat Address_Length -1 {			
			! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
			RUN_TEST IDLE TCK 10  DELAY PWP;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST DRPAUSE  TCK 10 DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		IF (Usercode_TDI.row = 1)
		{
			print (0, "Verify Frames 16 Bits CRC");
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 10  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	SDR_VERIFY 16 TDI(#0^16) TDO(ArrayCRC16[1]) MASK(#1^16);
		}
	}
	ELSE
	{
		repeat Address_Length {				
			! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    		SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
    		! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
			RUN_TEST IDLE TCK 10  DELAY PWP;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST DRPAUSE  TCK 10 DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 10  DELAY PWV;
	}
}
function SVF_PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 10  DELAY PWV;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in RESET_16_CRC (0xC6) instruction;
    	SIR Instruction_Length	TDI (RESET_16_CRC);
    	RUN_TEST IDLE TCK 10  DELAY PWP;
    	! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
		SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
		! Shift in Data Row = RowCount; 
		SDR	Row_Width	TDI	(FuseArray_TDI);
		RUN_TEST IDLE TCK 10  DELAY PWP;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		IF (Usercode_TDI.row = 1)
		{
			// Verify First Frame 16 Bits CRC;
			
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 10  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	SDR_VERIFY 16 TDI(#0^16)
	    				  TDO(ArrayCRC16[1])
	    				  MASK(#1^16);
		}
		RowCount = RowCount +1;
    	repeat Address_Length-1 {			
			! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
    		SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI);
			RUN_TEST IDLE TCK 10  DELAY PWP;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			RowCount = RowCount +1;
		} // repeat
		IF (Usercode_TDI.row = 1)
		{
			// Verify Frames 16 Bits CRC;
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 10  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	SDR_VERIFY 16 TDI(#0^16) TDO(ArrayCRC16[1]) MASK(#1^16);
		}
	}
	ELSE
	{
		repeat Address_Length {					
			! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    		SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI);
			RUN_TEST IDLE TCK 10  DELAY PWP;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			RowCount = RowCount +1;
		} // repeat
	}
}
function PROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;	
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	
	}
}

function SVF_PROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 10  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
}
function PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
	// Program the rest of the device
	repeat Address_Length {
		! Shift in Data Row = RowCount;
	    SDR	Row_Width	TDI	(FuseArray_TDI);
		RUN_TEST	IDLE TCK 10 DELAY 	PWP;
		RowCount = RowCount +1;
	} // repeat
}

function PROGRAM_USERCODE {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				! Shift in LSCC RESET ADDRESS(0x21) instruction;
			    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
				RUN_TEST	IDLE TCK 10 DELAY 	PWV;	
			    ! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(myASSP_Usercode_TDI[1]);
				RUN_TEST	TCK  10 DELAY PWP;
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				! Shift in LSCC RESET ADDRESS(0x21) instruction;
			    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
				RUN_TEST	IDLE TCK 10 DELAY 	PWV;	
			    ! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(Usercode_TDI[1]);
				RUN_TEST	TCK  10 DELAY PWP;
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;	
		    ! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
		    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			RUN_TEST	TCK  10 DELAY PWP;
		}
	}
}
function PROGRAM_DONE_BIT {
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 10 DELAY 50;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);	
}
function FLASH_PROGRAM_DONE_BIT {	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	IF (ISENCRYPTED == 1)
	{
		! Shift in ISC PROGRAM SECURITY(0x09) instruction;
	    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
		RUN_TEST	IDLE TCK 	10 DELAY PWP;
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in ISC PROGRAM DONE(0x2F) instruction;
	    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 10 DELAY 50;
	}
	ELSE
	{
		! Shift in ISC PROGRAM DONE(0x2F) instruction;
	    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 10 DELAY 50;	
	}
}
function SVF_FLASH_PROGRAM_DONE_BIT {
	IF (ISENCRYPTED == 1)
	{
		! Shift in ISC PROGRAM SECURITY(0x09) instruction;
	    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
		RUN_TEST	IDLE TCK 	10 DELAY PWP;
		! Shift in ISC PROGRAM DONE(0x2F) instruction;
	    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 10 DELAY 50;
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x82)
					  MASK(0x83);	
	}
	ELSE
	{
		! Shift in ISC PROGRAM DONE(0x2F) instruction;
	    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
		RUN_TEST	IDLE TCK 10 DELAY 50;
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x02)
					  MASK(0x03);	
	}
}
function ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 10 DELAY 200;
}
function FLASH_ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	RUN_TEST	TCK 10 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
}
function VERIFY_DONE_BIT {
	! Shift in READ STATUS(0xB2) instruction;
	SIR_VERIFY Instruction_Length TDI (READ_STATUS)
								  TDO(0xFF)
					   	      	  MASK(0x04);
}
function VERIFY_SRAM_DONE_BIT {

	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK  10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x02)
					  MASK(0x03);
	}
	ELSE
	{
		print (0,"Force the Refresh instruction due to the CFG[1:0] setting."); 
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		RUN_TEST IDLE TCK  10 DELAY PWV; 
	
		! Shift in BYPASS(0xFF) instruction;
	  	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK  10 DELAY 2000;
	
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK  10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x02)
					  MASK(0x03);	
	}	
	STATE IDLE;
}
function XFLASH_VERIFY_DONE_BIT {
	! Shift in READ STATUS(0xB2) instruction;
	SIR_VERIFY Instruction_Length TDI (READ_STATUS)
								  TDO(0xFF)
					   	      	  MASK(0x04);	
}
// Verify Functions _____________________________________________
function VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	
	TRY 1 {
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in LSCC READ INCR RTI(0x6A) instruction;
	    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
		repeat Address_Length {
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift Out Data Row = RowCount;
		    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
									TDO	(FuseArray_TDI)
									MASK(FuseArray_MASK);
			RowCount = RowCount +1;
		}
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 10 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 10 DELAY PWP;
		print (1, "Failed in Function VERIFY /see log file for more details/ ");
	}
}
function FLASH_VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	IF (ISENCRYPTED == 1)
	{
	}
	ELSE
	{
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in LSCC READ INCR RTI(0x6A) instruction;
	    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
		repeat Address_Length {
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift Out Data Row = RowCount;
		    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
									TDO	(FuseArray_TDI);
			RowCount = RowCount +1;
		}
	}
}
function FLASH_TAG_VERIFY {
	IF (ArchArray_TDI.row = 1)
	{
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}
function VERIFY_SED_CRC {
	IF (SEDArray_TDI.row = 1)
	{
		! Verify 32 bits SED_CRC;
		
		! Shift in READ_SED_CRC(0x44) instruction;
		SIR Instruction_Length TDI (READ_SED_CRC);
		RUN_TEST IDLE TCK 10 DELAY PWV;
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);						
	} 
}
function VERIFY_USERCODE {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				! Shift in INIT ADDRESS(0x21) instruction;
				SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
				RUN_TEST IDLE TCK 10  DELAY PWV;	
				! Shift in READ USERCODE(0x17) instruction;
			    SIR Instruction_Length TDI (USERCODE);
			    RUN_TEST	TCK  10 DELAY 	PWV;
				SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
											TDO	(myASSP_Usercode_TDI);
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				! Shift in INIT ADDRESS(0x21) instruction;
				SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
				RUN_TEST IDLE TCK 10  DELAY PWV;	
				! Shift in READ USERCODE(0x17) instruction;
			    SIR Instruction_Length TDI (USERCODE);
			    RUN_TEST	TCK  10 DELAY 	PWV;
				SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
											TDO	(Usercode_TDI);
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			! Shift in INIT ADDRESS(0x21) instruction;
			SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST IDLE TCK 10  DELAY PWV;	
			! Shift in READ USERCODE(0x17) instruction;
		    SIR Instruction_Length TDI (USERCODE);
		    RUN_TEST	TCK  10 DELAY 	PWV;
			SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
										TDO	(Usercode_TDI);
		}
	}
}
function VERIFY_DONE_INIT {
	BSCANTDO.row = 1;
	BSCANMASK.row = 1;
	! Shift in SAMPLE(0x1C) instruction;
    SIR Instruction_Length TDI (BPRELOAD);
	SDR_VERIFY BSCAN_Length TDI (#0^BSCAN_Length)
					        TDO	(BSCANTDO)
					        MASK (BSCANMASK);
}
function PROGRAM_SECURITY {
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 10  DELAY PWV;	
	! Shift in ISC PROGRAM SECURITY(0x09) instruction;
    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
	RUN_TEST	IDLE TCK 	10 DELAY 	50;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x80)
				  MASK(0x80);	
}
function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length	TDI	(IDCODE);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SVF_SAVE_ID	{
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}
function SAVE_ARRAY {
	int32	RowCount = 1;
	datastream SavedFuseMap[Address_Length][Row_Width];
	file NewFile = "FILE_SAVE";

	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	STATE IDLE;
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	// Program the rest of the device 
	repeat Address_Length {
		// Goto Run Test Idle
		RUN_TEST	TCK  10 DELAY 	PWV;						
		! Shift Out Data Row = RowCount;
	    SDR Row_Width 	TDI (#0^Row_Width)
						TDO (SavedFuseMap);
		RowCount = RowCount +1;
	}
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SVF_SAVE_ARRAY {
	int32	RowCount = 1;
	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	STATE IDLE;
	
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	repeat Address_Length {
		RUN_TEST	TCK  10 DELAY 	PWV;
		! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(#1^Row_Width)
								MASK (#0^Row_Width);
		RowCount = RowCount +1;
	}
}

function FLASH_TAG_SAVE {
	datastream SavedTAGMap[1][Arch_Length];
	file NewFile = "FILE_SAVE";
	
	! Shift in VERIFY TAG(0x72) instruction;
    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
	RUN_TEST	TCK  10 DELAY 	PWV;
	! Shift Out TAG Memory Data;
    SDR	Arch_Length	TDI	(#0^Arch_Length)
					TDO	(SavedTAGMap);
	
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (ArchArray_TDI,SavedTAGMap);
	fclose 	NewFile;
}	
function SVF_FLASH_TAG_SAVE {
	! Shift in VERIFY TAG(0x72) instruction;
    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
	RUN_TEST	TCK  10 DELAY 	PWV;
	! Shift Out TAG Memory Data;
    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
							TDO	(#1^Arch_Length)
							MASK (#0^Arch_Length);
}
function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length	TDI (USERCODE);
    RUN_TEST	TCK  10 DELAY 	PWV;
	SDR	Usercode_Length	TDI(#1^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SVF_SAVE_USERCODE {
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
    RUN_TEST	TCK  10 DELAY 	PWV;
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
}
function SAVE_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR	8	TDI(#1^8)
			TDO(SavedSTATUS);
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}
function SVF_SAVE_STATUS {
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	SDR_VERIFY 	8 TDI (#1^8)
				   TDO	(#1^8)
				   MASK(#0^8);
}
function SERIAL_READ_DONE_BIT {
	datastream SavedDONE_BIT[1][1];
	file	NewFile = "FILE_SAVE"; 
	
	SDR 1	TDI	(0x00)
			TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function READ_DONE_BIT {
	datastream SavedDONE_BIT[1][Instruction_Length];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI	(BYPASS)
							TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}

function SAVE_SED_CRC {
	datastream SavedSEDMap[1][32];
	file NewFile = "FILE_SAVE";
	
	! Shift in READ_SED_CRC(0x44) instruction;
	SIR Instruction_Length TDI (READ_SED_CRC);
	RUN_TEST IDLE TCK 10 DELAY PWV;
	! Shift out SED_CRC Data; 
	SDR	32	TDI	(#0^32) TDO (SavedSEDMap);
	// Write To file 
	fopen NewFile att "wa" format "SVF_Plus";	
	fwrite NewFile (SEDArray_TDI,SavedSEDMap);
	fclose 	NewFile;
}	
function SAVE_SED {
	datastream SavedSED[1][32];
	file NewFile = "FILE_SAVE";	
						
	! Shift in READ_SED_CRC(0x44) instruction;
    SIR Instruction_Length	TDI (READ_SED_CRC);
    RUN_TEST	TCK  10 DELAY 	PWV;
	SDR	32	TDI(#1^32)
			TDO(SavedSED);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedSED);
	fclose 	NewFile;
}
function SVF_SAVE_SED_CRC {
	! Shift in READ_SED_CRC(0x44) instruction;
	SIR Instruction_Length TDI (READ_SED_CRC);
	RUN_TEST IDLE TCK 10 DELAY PWV;
	! Shift out SED_CRC Data; 
	SDR_VERIFY	32	TDI	(#0^32)
					TDO (#1^32)
					MASK(#0^32);
}
function SVF_SAVE_DONE_BIT {
	! Shift in BYPASS(0xFF) instruction;
    SIR_VERIFY Instruction_Length	TDI	(BYPASS)
				TDO (#1^Instruction_Length)
				MASK(#0^Instruction_Length);
}
function REFRESH_FUNCTION {
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 10 DELAY PWP; 

	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 10 DELAY 2000;
}	
function UPLOAD_FUNCTION {
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY PWP;

	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 10 DELAY 200;

	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 10 DELAY PWV;
}

function BURST_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	! Shift in LSCC BITSTREAM BURST(0x04) instruction;
    SIR Instruction_Length	TDI (LSCC_BITSTREAM_BURST);
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 10 DELAY PWP;
}
function FLASH_MDR{
	! Shift in ISC SRAM ENABLE(0x55) instruction;
    SIR Instruction_Length TDI (ISC_SRAM_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY PWP;
	
    ! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 10 DELAY PWV;
	
	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 10 DELAY MDRDelay;
	
    ! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 10 DELAY PWP;

	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 10 DELAY PWP;

	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 10 DELAY PWV;
}

function CHECK_KEYLOCK 
{
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			print (1,"The device OTP Fuses are programmed. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			print (1,"The device Security Fuses are not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x24)
							  MASK(0x24);
							  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				print (1,"The device Flash Protection Fuses are not programmed. Cannot continue.");
			}	
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 10 DELAY PWP; 
			
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The Flash Protection Key does not match. Please re-enter the Flash Protect Key.");
			}	
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x24);			  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The device Flash Protection Fuses are already programmed. Please enter the Flash Protect Key.");
			}	
		}
	}
	ELSE
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY PWP;
			print (1,"The device OTP Fuses are programmed. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK  10 DELAY PWP;
			print (1,"The device Security Key Fuses are programmed, an encrypted JED file is required. Cannot continue.");
		}
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x24);			  
		}
		ELSE
		{	
			IF (ProtectKey.row = 1)
			{			  
				! Shift in LSCC RESET ADDRESS(0x21) instruction;
			    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
				RUN_TEST	IDLE TCK 10 DELAY 	PWV;
				! Shift in PROTECT_SHIFT(0x41) instruction;
				SIR Instruction_Length TDI (PROTECT_SHIFT);
				SDR  64  TDI(ProtectKey[1]);
				RUN_TEST IDLE TCK  10 DELAY PWP; 
				
				TRY 1 {
					! Shift in READ STATUS(0xB2) instruction;
					SIR Instruction_Length TDI (READ_STATUS);
					RUN_TEST IDLE TCK  10 DELAY PWV; 
					SDR_VERIFY  8 TDI(0x00)
								  TDO(0x00)
								  MASK(0x04);						  
				}
				ELSE
				{				  
					! Shift in ISC DISABLE(0x1E) instruction;
				    SIR	Instruction_Length 	TDI (ISC_DISABLE);
					RUN_TEST	IDLE  TCK  10 DELAY PWP;
					print (1,"The Flash Protection Key does not match. Cannot continue.");
				}
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK  10 DELAY PWP;
				set_return_code (-93);
				print (1,"The device Flash Protection Fuses are already programmed. Please enter the Flash Protect Key.");
			}
		}	
	}	
}
function CHECK_PROTECT_KEY
{
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			print (1,"The device OTP Fuses are programmed. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			print (1,"The device Security Fuses are not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x20)
							  MASK(0x20);
							  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				print (1,"The device Flash Protection Fuses are not programmed. Cannot continue.");
			}	
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 10 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The Flash Protection Key does not match. Please re-enter the Flash Protect Key.");
			}	
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x20);
							  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The device Flash Protection Fuses are already programmed. Please enter the Flash Protect Key.");
			}	
		}
	}
	ELSE
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x50);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			print (1,"The device Security Key Fuses are programmed, an encrypted JED file is required. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x20)
							  MASK(0x20);
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				print (1,"The device Flash Protection Fuses are not programmed.");
			}
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 10 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The Flash Protection Key does not match. Please re-enter the Flash Protect Key.");
			}	
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x20);
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The device Flash Protection Fuses are already programmed. Please enter the Flash Protect Key.");
			}
		}
	}
}
function CHECK_SECURITY_PROTECT_KEY
{
	datastream SavedSTATUS[1][8];
	TRY 1{
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 10 DELAY PWV;
		print (1,"The device OTP Fuses are programmed. Cannot continue.");
	}
	IF (ISPROTECTED == 1)
	{
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK  10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x20);				  
		}
		ELSE
		{				  
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK  10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x20)
							  MASK(0x20);
							  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK  10 DELAY PWP;
				//set_return_code (-92);
				print (1,"The device Flash Protection Fuses are not programmed. Cannot continue.");
			}
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 10 DELAY 	PWV;
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 10 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 10 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);			  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 10 DELAY PWV;
				set_return_code (-93);
				print (1,"The Flash Protection Key does not match. Please re-enter the Flash Protect Key.");
			}
		}	
	}
	ELSE
	{
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x20);
						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			set_return_code (-93);
			print (1,"The device Flash Protection Fuses are already programmed. Please enter the Flash Protect Key.");
		}
	}	
}
function PROGRAM_SECURITY_KEY 
{	   
	datastream TDIFeatureRow[1][Row_Width];
	datastream MaskFeatureRow[1][Row_Width];
	SecurityKey.row = 1;
	print (0,SecurityKey);
	IF (Row_Width == 2188)
    {
    	//Bits 1714 to 1841
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Row_Width == 772)
    {
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR_VERIFY  Row_Width TDI(#1^Row_Width)
				  		  TDO(TDIFeatureRow[1])
				  		  MASK(MaskFeatureRow[1]);
	
	IF (KeyLock == 0x01)
	{
		print (0, "Program the Key Lock.");
		IF (Row_Width == 2188)
	    {
	    	//Bits 1918
			TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
			MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
		}
		ELSEIF (Row_Width == 772)
	    {
	    	//Bits 663
			TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
			MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
		}
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
	
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  Row_Width TDI(#1^Row_Width)
				  		  TDO(TDIFeatureRow[1])
				  		  MASK(MaskFeatureRow[1]);
	}			  		  
					  		  
}
function READ_SECURITY_KEY_FUSES
{
	datastream TDOFeatureRow[1][Row_Width];
	datastream SecurityRow[1][128];
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x40)
					  MASK(0x40);
		print (1,"The encryption enable fuse is on. Cannot read the key fuses.");			  
	}
	ELSE {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR  Row_Width TDI(#1^Row_Width)
					   TDO(TDOFeatureRow[1]);
		
		IF (Row_Width == 2188)
	    {
	    	//Bits 1713 to 1840
	    	SecurityRow[1] = TDOFeatureRow[1] << 351;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
			
		}
		ELSEIF (Row_Width == 772)
	    {
	    	//Bits 458 to 585
	    	SecurityRow[1] = TDOFeatureRow[1] << 190;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
		}	
	}		  		  
	
}
function READ_PES_FUSES
{
	datastream SavedPESFuse[1][Row_Width];
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x00000000000000000004000000000000000000000000004D);
    RUN_TEST	TCK  10 DELAY 	PWP;
    ! Shift in LSCC_READ_PES (0x11) instruction;
	SIR Instruction_Length TDI (LSCC_READ_PES);
	RUN_TEST 	IDLE  TCK 10 DELAY PWV;
	SDR Row_Width TDI (#1^40)
			 	  TDO (SavedPESFuse);					  
	print (0,SavedPESFuse);
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x000000000000000000000000000000000000000000000000);	
}
function PROGRAM_PROTECT_KEY 
{	   
	datastream TDIFeatureRow[1][Row_Width];
	datastream MaskFeatureRow[1][Row_Width];
	ProtectKey.row = 1;
	IF (ISPROTECTED == 1)
	{
		IF (Row_Width == 2188)
	    {
	    	//64 bits protect fuses : Bits 1842 to 1905
			TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
			MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
		}
		ELSEIF (Row_Width == 772)
		{
			//64 bits protect fuses : Bits 587 to 650
			TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
			MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
		}
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  Row_Width TDI(#1^Row_Width)
					  		  TDO(TDIFeatureRow[1])
					  		  MASK(MaskFeatureRow[1]);
	    
	    IF (Row_Width == 2188)
	    {
	    	//4 bits lock fuse: Bits 1906 to 1909
			TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
			MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
		}
		ELSEIF (Row_Width == 772)
		{
			//4 bits lock fuse: Bits 651 to 654
			TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
			MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
		}
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;	
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST DRPAUSE  TCK 10 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  Row_Width TDI(#1^Row_Width)
					  		  TDO(TDIFeatureRow[1])
					  		  MASK(MaskFeatureRow[1]);
	}					  				  		  		  
}
function READ_PROTECT_KEY_FUSES
{
	datastream TDOFeatureRow[1][Row_Width];
	datastream ProtectionRow[1][64];
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x20)
					  MASK(0x20);
		print (1,"The Flash Protect lock is enabled. Cannot read the protection key fuses.");			  
	}
	ELSE {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR  Row_Width TDI(#1^Row_Width)
					   TDO(TDOFeatureRow[1]);
		
		IF (Row_Width == 2188)
	    {
	    	//Bits 1842 to 1905
	    	ProtectionRow[1] = TDOFeatureRow[1] << 288;
			print (0,"The Protection Key fuses are:");
			print (0,ProtectionRow);
			
		}	
		ELSEIF (Row_Width == 772)
		{
			//Bits 587 to 650
	    	ProtectionRow[1] = TDOFeatureRow[1] << 127;
			print (0,"The Protection Key fuses are:");
			print (0,ProtectionRow);
		}
	}		  		  
}
function CHECK_FEATURE_ROW_ERASE
{
	datastream TDOFeatureRow[1][Row_Width];
	datastream FeatureRow[1][205];
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 10 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x20)
					  MASK(0x20);
	}
	ELSE
	{
		// Check the Flash Protect Password	
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 10 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 10 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);
						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 10 DELAY PWV;
			set_return_code (-93);
			print (1,"The Flash Protection Key does not match. Please re-enter the Flash Protect Key.");
		}	
	}					   		   
}
function FEATURE_ROW_ERASE
{
	print (0,"Feature Row Erasing...");
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
	
	! Shift in ERASE_FEATURE(0xC3) instruction;
	SIR Instruction_Length TDI (ERASE_FEATURE);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST DRPAUSE  TCK 10 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}					   		   
}
function FEATURE_ROW_READ
{
	datastream TDOFeatureRow[1][Row_Width];
	datastream FeatureRow[1][205];
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR  Row_Width TDI(#1^Row_Width)
				   TDO(TDOFeatureRow[1]);
	IF (Row_Width == 2188)
    {
    	//Bits 1713 to 1919
    	FeatureRow[1] = TDOFeatureRow[1] << 272;
		print (0,"The Feature Row Fuses are:");
		print (0,FeatureRow);
	}	
	ELSEIF (Row_Width == 772)
	{
		//Bits 458 to 664
    	FeatureRow[1] = TDOFeatureRow[1] << 111;
		print (0,"The Feature Row Fuses are:");
		print (0,FeatureRow);
	}				   		   
}					 			 		

function SAVE_COMPARE_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";

	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 10 DELAY 	PWV;
		
	! Shift in PROTECT_SHIFT(0x41) instruction;
	SIR Instruction_Length TDI (PROTECT_SHIFT);
	SDR  64  TDI(ProtectKey[1]);
	RUN_TEST IDLE TCK 10 DELAY PWP; 
		
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 10 DELAY PWV; 
	SDR	8	TDI(#1^8)
			TDO(SavedSTATUS);
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}


]]>
</Script>
</SVF_Plus>

Plus";	
	fwrite