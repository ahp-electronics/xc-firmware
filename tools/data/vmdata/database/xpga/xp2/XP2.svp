<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE		SVF_Plus	SYSTEM	"SVF_Plus.dtd" >
<!-- 08/12/03 Spinti Created from a copy of MAGMA.svp and ECP2.svp
	10/04/06 Spinti: Correct typo; changed "Veirfy" to "Verify".
	Spinti: 12/15/06 Added Security Flash Protect Key Compare operation and function SAVE_COMPARE_STATUS for internal testing.
	01/10/07 Nguyen took out the discharge instruction (howard requested)
	03/19/07 Nguyen added MDRDelay to support TransFR
	07/03/07 Nguyen modified to support rev B silicon
	07/18/07 Nguyen modified to support LFXP2-5E, LFXP2-30E, LFXP2-40E 
	07/20/07 Nguyen modified to support "SRAM Program,Verify" Operation
	07/24/07 Nguyen modified to change 5 TCK to 10 TCK
	08/08/07 Nguyen modified to support "XFLASH Calculate Checksum"
	09/12/07 Nguyen changed the LSDR keyword to the loop keyword to be consistent with XP2 (Howard requested)
	10/04/07 Nguyen modified to support XP2-40 encryption
	10/19/07 Nguyen removed the TAG ENABLE instruction
	12/06/07 Nguyen added Real_Row_Width field
	12/13/07 Nguyen modified to change 10 TCK to 3 TCK
	01/13/08 Nguyen added the VERIFY_SRAM_DONE_BIT function
	01/18/08 Nguyen changed the maximum loop count to get it from the PWE .
	01/23/08 Chuo add Slave SPI Erase,Program,Verify,Refresh.
	02/25/08 Nguyen Modified function DIRECT_FLASH_ERASE to fix the problem of security latch not clear
	02/25/08 Nguyen added XFLASH Erase,Program,Verify,Refresh operation
	04/14/08 Nguyen Added CHECK_PROTECT_KEY one more time in the DIRECT_FLASH_ERASE operation flow 
					 because after the DIRECT_FLASH_ERASE function the flag is clear by the DISBALE and ENABLE again.
	05/01/08 Chuo add 1ms wait after Slave SPI program usercode
	05/16/08 Nguyen added "XSRAM Read Status Register" operation
	05/19/08 Nguyen change to program the feature lock fuses after programming the Flash protect fuses using 
			 the FLASH protect as the last 64 bits key
			 also using the last 64 bits flash protect key to verify before erasing the feature row 
	05/20/08 Nguyen change the function Program_OTP to support secure device option 
	05/28/08 Nguyen added RUN_TEST TCK 3 ; for the Slave SPI read and save functions
	07/18/08 Chuo change to 25ms wait after Slave SPI program usercode
	08/05/08 Spinti change the wait after Slave SPI program usercode back to 10ms from 25ms.
	08/26/08 Nguyen added "FLASH Verify DONE bit" and "XFLASH Verify DONE bit" operations
	08/26/08 Nguyen added a special flow for "FLASH Verify DONE bit" which will do the disable and clamp before
			 checking the status.
	08/15/08 Nguyen added "Calculate Checksum" flow	for VME		 
	09/09/08 Nguyen changed the encryption messages
	09/10/08 Nguyen Added "Security Program with Flash Protect Only", 
			"Security Background Program with Flash Protect Only" and 
			"Slave SPI Program with Flash Protect Only"
	09/11/08 Spinti: Updated the print statement messages.
	09/12/08 Spinti: Changed the BYPASS intruction to WAKEUP in function FLASH_MDR.
	09/17/08 Spinti: Created "Security Program Flash Protect Key", "Security Read Flash Protect Key", "Security Erase,Program,Verify with Encryption", "Security Erase,Program,Verify with Flash Protect", "Security Background Program with Encryption", and "Security Background Program with Flash Protect" operations.
	10/09/07 Spinti: Changed "Re-Initialize" to match Flash Erase Only.
	10/10/07 Spinti: Updated the print messages in function PROGRAM_STATUS when testing the first frame and device 16-bit CRC during encryption programming.
	11/13/08 Nguyen changed not to program the feature lock fuses after programming the Flash protect fuses by default
	11/18/08 Nguyen changed the Security operations: 
	I. "Advanced Security Encryption File Programming" contains all the operations relate to the jedec file (the key word will be Security):
 
     1. Security Flash Erase with Flash Protect        
     2. Security Flash Erase Only 
     3. Security EPV with Encryption  
     4. Security EPVS with Encryption 
     5. Security EPV with Encryption and Flash Protect
     6. Security EPVS with Encryption and Flash Protect   
     7. Security EPV with Flash Protect
     8. Security EPVS with Flash Protect 
     9. Security Verify Only 
    10. Security Read and Save 
    11. Security Background EPV with Encryption
    12. Security Background EPVS with Encryption
    13. Security Background EPV with Encryption and Flash Protect 
    14. Security Background EPVS with Encryption and Flash Protect 
    15. Security Background EPV with Flash Protect
    16. Security Background EPVS with Flash Protect 
    17.  Security Background Erase with Flash Protect 
    18.  Security Background Erase Only 
    19. Security Read Status Register  
    
	II. "Advanced Security Keys Programming" contains all the operations relate to the key and feature row (the key words will be Key, Feature, Manufacturing):
    
    1. Security Program Encryption Key and Flash Protect
    2. Security Program Encryption Key and Flash Protect with Lock
    3. Security Program Encryption Key Only
    4. Security Program Encryption Key with Lock 
    5. Security Program Flash Protect Key Only
    6. Security Program Flash Protect Key with Lock
    7. Security Erase Feature Row
    8. Security Read Feature Row
    9. Security Read Status Register  
        
	III. "Advanced Security Production Programming" contains all the operations to perform the 1 shot programming the key and jedec file (the key word will be Option):
 
     1. Security Program Option 1: Security EPVS with full feature Option 
     2. Security Program Option 2: Security EPV with Encrypt Only Option
     3. Security Program Option 3: Security EPVS with Encrypt Only Option
     4. Security Program Option 4: Security EPV with Encrypt and Lock Option
     5. Security Program Option 5: Security EPVS with Encrypt and Lock Option
     6. Security Program Option 6: Security EPV with Protect Only Option
     7. Security Program Option 7: Security EPVS with Protect Only Option
     8. Security Program Option 8: Security EPV with Protect and Lock Option
     9. Security Program Option 9: Security EPVS with Protect and Lock Option
    10. Security Program Option 10 - Security EPV with OTP Option
    11. Security Program Option 11 - Security EPVS with OTP Option 
    12. Security Program Option 12: Security EPV with my_ASSP Option
    13. Security Program Option 13: Security EPVS with my_ASSP Option 
    14. Security Program Option 14: Security EPV with OTP and my_ASSP Option 
    15. Security Program Option 15: Security EPVS with OTP and my_ASSP Option 
    
    12/15/08 Nguyen supported "SRAM Display Control Register0" and "SRAM Progarm Control Register0" operations
    01/08/09 Nguyen Added "FLASH Refresh" and "XFLASH Refresh" operations
    01/28/2009 Nguyen Added 
    "PROGRAM_USERCODE_STATUS" function for FLASH Program USERCODE operation to check the complete status.
    "PROGRAM_SED_CRC_STATUS" function for FLASH Program SED_CRC operation to check the complete status.
    "SPIPROGRAM_USERCODE_STATUS" function for Slave SPI Program USERCODE operation to check the complete status.
    "SPIPROGRAM_SED_CRC_STATUS" function for Slave SPI Program SED_CRC operation to check the complete status.

    03/03/09 Spinti Corrected the function call from PROGRAM_USERCODE_STATUS_STATUS to PROGRAM_USERCODE_STATUS.
    04/22/09 Nguyen Added the ISC_ERASE_DONE in the DIRECT_FLASH_ERASE function per Howard requested (case C102362-030309)
    04/24/09 Nguyen Added SAVE_STATUS to "Read and Save" operations to get the correct G field
    07/13/09 Nguyen changed the erasing time of ISC_ERASE_DONE in the DIRECT_FLASH_ERASE function from 1 ms to 10 ms
    10/21/09 Nguyen added the work around method ( changing the HDR) to support programming the encrypted JEDEC file
    		 with a chain of devices both for JTAG and SSPI
    		 1. When generate the encrypted JEDEC, regardless of daisy chain or not, for the beginning of each 
    		 frame, decrypt 128 bits of zero then accumulate into CRC. The 128 bits of 0 is not written 
    		 into the JEDEC file. Therefore the encrypted JEDEC file will look exactly the same as before. 
    		 The only change will be on the method to calculate the CRC. 
			 2. When processing the encrypted JEDEC, if the XP2 device is at position X = 0, 1, 2..., 
			 with the 1st position = 0, then flush in (128-X) number of 0s first, then shift in the real 
			 data to complete a frame
	10/21/09 Nguyen added support
	Slave SPI EPVS with Encryption	
    Slave SPI EPVS with Encryption,Refresh	
	Slave SPI EPV with Flash Protect
	Slave SPI EP with Flash Protect
	Slave SPI EPV with Flash Protect,Refresh
	Slave SPI EP with Flash Protect,Refresh
	Slave SPI EPVS with Flash Protect
	Slave SPI EPS with Flash Protect
	Slave SPI EPVS with Flash Protect,Refresh	
	Slave SPI EPS with Flash Protect,Refresh	
	Slave SPI EPVS with Encryption and Flash Protect
	Slave SPI EPVS with Encryption and Flash Protect,Refresh												 
	Slave SPI Erase with Flash Protect
	12/05/09 Nguyen Added "FLASH Program,Verify,skip Erase" and "XFLASH Program,Verify,skip Erase" operations
	12/15/09 Nguyen added "Security Verify Encryption Key" operation
	03/08/10 Nguyen changed FLASH Verify DONE bit function to verify the FLASH DONE bit
-->
<SVF_Plus version="1.0">
<Header>
	<Device name="DEVICE_NAME"/>
</Header>
<Setup> <!-- use default Header, Trailer and Frequency value -->
	<Interface protocol="JTAG_1149.1"/>
</Setup>
<Parameter>
	<!-- Length fields are in number if bits -->
	<Instruction_Length value="INSTRUCTION_REGISTER_LENGTH"/> 
	<Real_Row_Width     value="DEVICE_REAL_ROW_WIDTH"/> 
	<Row_Width			value="DEVICE_ROW_WIDTH"/> 
	<Address_Length		value="ADDRESS_REGISTER_LENGTH"/> 
	<Address length="ADDRESS_LENGTH">
		INI_ADDRESS			
	</Address>
	<ID_Length 			value="DEVICE_ID_LENGTH"/>
	<Usercode_Length 	value="DEVICE_USERCODE_LENGTH"/>
	<BSCAN_Length value="BSCAN_REGISTER_LENGTH"/> 
	<Bscan length="BSCAN_LENGTH">
		BSCAN_DATA
	</Bscan>
	<BscanMask length="BSCAN_LENGTH">
		BSCAN_MASK
	</BscanMask>
	<Arch_Length         value="ARCHITECH_LENGTH"/>
	<TotalFuse value="TOTAL_FUSE_MAP"/>
	<PWP	value="PROGRAMING_PULSE_WIDTH"/>
	<PWV	value="VERIFY_PULSE_WIDTH"/>
	<PWE	value="ERASE_PULSE_WIDTH"/>
	<SkipRow value="1"/>
	<MDRDelay value="MDR_DELAY"/>
	<MDRIspEN value="MDR_ISPEN"/>
	<MDRTRST value="MDR_TRST"/> 
	<KeyLock value="SECURITY_KEYLOCK"/>
	<Instruction>
		EXTEST	 			= 0x00;
		INTEST	 			= 0x2C;
		CLAMP	 			= 0x20;
		HIGH_Z	 			= 0x18;
		BPRELOAD 			= 0x1C;
		ISC_ENABLE 			= 0x15;
		ISC_XPROGRAM_ENABLE = 0x35;
		ISC_SRAM_ENABLE 	= 0x55;
		ISC_DISABLE			= 0x1E;
		ISC_ADDRESS_SHIFT 	= 0x01;
		ISC_DATA_SHIFT 		= 0x02;
		ISC_ERASE 			= 0x03;
		ISC_PROGRAM			= 0x07;
		ISC_READ			= 0x0A;
		ISC_PROGRAM_ASIC	= 0xA6;
		ISC_READ_ASIC		= 0xAB;
		ISC_PROGRAM_USERCODE		= 0x1A;
		ISC_PROGRAM_PES = 0x0F;
		ISC_READ_PES = 0x11;
		USERCODE 			= 0x17;
		ISC_PROGRAM_SECURITY	= 0x09;
		ISC_PROGRAM_DONE 		= 0x2F;
		ISC_ERASE_DONE			= 0x24;
		ISC_DISCHARGE			= 0x14;
		IDCODE 				= 0x16;
		BYPASS				= 0xFF;
		ISC_NOOP			= 0x30;
		<!-- Alternate Instructions -->
		LSCC_PROGRAM_INCR_RTI	= 0x67;
		LSCC_READ_INCR_RTI 		= 0x6A;
		<!-- Proprietary Mode Instructions -->
      	LSCC_TRANSPARENT_ENABLE	= 0x75;
		LSCC_BITSTREAM_BURST	= 0x04;
		LSCC_RESET_ADDRESS		= 0x21;
		LSCC_REFRESH			= 0x23;
		LSCC_ERASE_ROW			= 0x05;
		LSCC_PROGRAM_CTRL0		= 0x47;
		LSCC_READ_CTRL0			= 0x4A;
		LSCC_PROGRAM_ERR_MASK	= 0x68;
		LSCC_READ_ERR_MASK		= 0x6B;
		LSCC_RESET_CRC			= 0x12;
		LSCC_READ_CRC			= 0x73;
		LSCC_READ_STATUS		= 0x53;
		<!-- IP instructions -->
		LSCC_IPA			= 0x32;
		LSCC_IPTESTA		= 0x33;
		LSCC_IPB			= 0x38;
		LSCC_IPTESTB		= 0x39;	
		<!-- Manufacturing instructions -->
		LSCC_MANUFACTURING_SHIFT = 0x80;
		LSCC_ERASE_ALL			 = 0x10;
		LSCC_PROGRAM_PES		 = 0x0F;
		LSCC_READ_PES			 = 0x11;
		LSCC_USER_LOGIC_RESET	 = 0x22;
		READ_STATUS			= 0xB2;
		PGM_STATUS			= 0x52;
		
		<!-- TAG Memory instruction -->
		LSCC_TAG_ENABLE		= 0x73;
		LSCC_READ_TAG   	= 0x0B;
		LSCC_ERASE_TAG		= 0x70;
		LSCC_PROGRAM_TAG	= 0x71;
		LSCC_VERIFY_TAG		= 0x72;
		<!-- FEATURE ROW instruction -->
		PROGRAM_FEATURE = 0xC0;
		ERASE_FEATURE = 0xC3;
		READ_FEATURE = 0xC4;
		<!-- Security instruction -->
		X_PROGRAM_ENABLE		= 0x35;
		PROTECT_SHIFT			= 0x41;
		RESET_16_CRC			= 0xC6;
		READ_16_CRC				= 0xC5;
		ENCRYPT_PROG_INC		= 0x40;
		READ_SED_CRC			= 0x44;
		PROG_SED_CRC			= 0x45;
		WAKEUP					= 0x77;
	</Instruction>
</Parameter>
<Data>
	<DataField	name="IDTDI">
		<FieldBlock	row_width="DEVICE_ID_LENGTH">
			ID_DATA
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANTDO">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
		    0x00000000000000000000000000000000000000000000000000000000000
		    000000000000000000000000000000000000000000000000000000000000
		    0000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			0x00000000000000000000000000000000000000000000000000000000000
		    000000000000000000000000000000002000002000000000000000000000
		    0000000000000000000000000000000000000000000000000000000000000000
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAM">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			MDR_BSCANPROGRAM
		</FieldBlock>
	</DataField>
	<DataField	name="BSCANPROGRAMMASK">
		<FieldBlock	row_width="BSCAN_REGISTER_LENGTH">
			MDR_BSCANPROGRAMMASK
		</FieldBlock>
	</DataField>
</Data>
<Operation_List>				
	"Security Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";
	
	"Security Verify Only" =	"	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									FLASH_ENABLE	! Enable the programming mode, 
									FLASH_VERIFY	! Verify Fuse Map, 
									VERIFY_USERCODE		! Verify USERCODE,
									VERIFY_SED_CRC,
									FLASH_TAG_VERIFY,
									CHECK_STATUS ! Read the status bit, 
									VERIFY_DONE_BIT ! Verify Flash DONE bit,
				 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Erase Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 	
										CHECK_FEATURE_ROW ! Check the Feature row, 									
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										DISABLE ! Exit the programming mode"	;
										
	"Security Read Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										FEATURE_ROW_READ	! Read the Feature row, 
										CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode"	;
					 			 		
	"Security Check Feature Row"	=	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW ! Check the Feature row,
										DISABLE ! Exit the programming mode"	;
							  					 			 							 			 							             
	"Security Read Key Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_SECURITY_KEY_FUSES ! Read the Key Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
	"Security Program Encryption Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect with Lock" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Encryption Key Only" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Verify Encryption Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode, 
							  CHECK_KEYLOCK ! Check the Key Lock,
							  VERIFY_SECURITY_KEY ! Verify the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Encryption Key with Lock" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Flash Protect Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect Key Only" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Flash Protect Key with Lock" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect with Feature Lock" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
							  						  							  
	"Security Read Flash Protect Key" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Protect Key" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  							  
	"Security Read Protect Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Check Protect Fuses" =  "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security EPVS with full feature and OTP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY_NO_VERIFY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
															   
	"Security EPV with OTP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
 	
 	"Security EPVS with OTP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,	
					 			 		CHECK_STATUS ! Read the status bit,				 			 		
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
	"Security EPVS with full feature and my_ASSP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
										DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
							  			CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
					 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,										
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,																				
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP_NO_VERIFY ! Program my_ASSP,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																				
																				
	"Security EPV with my_ASSP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
										
	"Security EPVS with my_ASSP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	
	
	"Security EPVS with full feature,my_ASSP and OTP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,							  			
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
	"Security EPV with OTP and my_ASSP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	

	"Security EPVS with OTP and my_ASSP Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																														
	
	"Security EPVS with full feature Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with full feature and Lock Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;									
											
	"Security EPV with Protect Only Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_SECURITY_PROTECT_KEY ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	"Security EPVS with Protect Only Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_SECURITY_PROTECT_KEY ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;												
										
	"Security EPV with Protect and Lock Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_SECURITY_PROTECT_KEY ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																		
	
	"Security EPVS with Protect and Lock Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_SECURITY_PROTECT_KEY ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											
	"Security EPV with Encrypt Only Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt Only Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
										
	"Security EPV with Encrypt and Lock Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt and Lock Option" = 	"	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																								
																																												 				   
	"Manufacturing Read PES Fuses" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PES_FUSES ! Read the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
	"Security Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";		  		   						  					   						  					
						   
	"Security EPV with Encryption and Flash Protect" = "INIT 	! Initialize, 
														READ_ID	! Check the IDCODE, 
														IO_STATE ! Program Bscan register,
														FLASH_ENABLE	! Enable the programming mode,
														CHECK_PROTECT_KEY ! Verify the Protection Key, 
														DIRECT_FLASH_ERASE	! Erase the device, 
														CHECK_STATUS ! Read the status bit,
														VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
									 			 		PROGRAM_STATUS	! Program Fuse Map,
														PROGRAM_USERCODE_STATUS	! Program USERCODE,
														CHECK_STATUS ! Read the status bit,
														FLASH_VERIFY	! Verify Fuse Map, 
														VERIFY_USERCODE		! Verify USERCODE,
														PROGRAM_SED_CRC_STATUS,
														FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
									 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
														VERIFY_DONE_BIT ! Verify DONE bit,
														DISABLE ! Exit the programming mode,
														VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption and Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								PROGRAM_SECURITY ! Secure device,											 			 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
									
	"Security Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
								
	
	"Security EPV with Encryption" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								PROGRAM_SECURITY ! Secure device,										 			 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
	"Security Erase,Program,Verify with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security Program with Flash Protect Only" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security EPV with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"Security EPVS with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								PROGRAM_SECURITY ! Secure device,										 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																
																	
	"Security Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Flash Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Flash Erase with Flash Protect"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
	"Security Erase,Program,Verify with OTP" = "	INIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;			 			 		
			 			 		
	"Security Flash Protect Key Compare" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_COMPARE_STATUS !Flash Protect Key Compare and Display Status Register,
					             DISABLE";	

	"Security Feature Row Protect Key Compare" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_FEATURE_ROW_STATUS !Feature Row Protect Key Compare and Display Status Register,
					             DISABLE";	
					             	 			 				 			 		
	"Security Background Program with Encryption" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption and Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"Security Background EPVS with Encryption and Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
	
	
			 			 		
	"Security Background Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Security Background EPVS with Encryption" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
			 			 		
	"Security Background Program with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 					 			 											
	
	"Security Background Program with Flash Protect Only" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPVS with Flash Protect" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 				 			 				 			 					 			 											
	"Security Background Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background Erase with Flash Protect"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background Flash Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background  Program and TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;			 			 									  					   							  						 
					             				             						  
	"FLASH Bypass"	=	"INIT 	! Initialize";
	"FLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"Verify ID" = 		"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"FLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable the programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
														
	"FLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable the programming mode, 
									SAVE_USERCODE,
									DISABLE ! Exit the programming mode";
	"FLASH Program USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable the programming mode, 
									PROGRAM_USERCODE_STATUS	! Program USERCODE,
									DISABLE ! Exit the programming mode";									
	"FLASH Display SED_CRC"	=	"INIT, 
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
								FLASH_ENABLE	! Enable the programming mode, 
								SAVE_SED,
								DISABLE ! Exit the programming mode";									
	"FLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_ENABLE	! Enable the programming mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"INIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 DIRECT_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,								
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Program,Verify,skip Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,								
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Erase,Program,Verify,Refresh" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,								
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
								DISABLE ! Exit the programming mode,
								REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
								
	"FLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
		
	"FLASH Program"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE_STATUS	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM_VERIFY,	
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"FLASH Verify Only" =	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							CHECK_STATUS ! Read the status bit, 
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";			 						 
	"FLASH Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";
	
	"FLASH Display EBR"	=	"INIT, 
							 READ_ID, 
							 SAVE_ID, 
							 IO_STATE ! Program Bscan register,
							 FLASH_ENABLE, 
							 SAVE_ARRAY, 
							 SAVE_USERCODE, 
							 SAVE_SED_CRC,
							 DISABLE";
								 
	"FLASH Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";	
	"FLASH Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";
	"FLASH Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 							 
	"FLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
					FLASH_MDR ! Transparent Field Reconfiguration"	;
 			 								
	"XFLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"XFLASH Bypass"	=	"INIT 	! Initialize";
	"XFLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"XFLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"XFLASH Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"INIT, 
								 READ_ID,
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"INIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SAVE_STATUS !Read Status Register,
					             DISABLE";	
					             
	"XFLASH Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	
	"XFLASH Program Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	
	"XFLASH Display Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
					             				             				             				 			 
	"XFLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
			 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program USF with Static EBR" =	"	INIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
											CHECK_KEYLOCK ! Check the Key Protection fuses, 
											FLASH_ERASE	! Erase the device, 
											CHECK_STATUS ! Read the status bit,
						 			 		PROGRAM_STATUS	! Program Fuse Map,
						 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
											CHECK_STATUS ! Read the status bit,
											FLASH_VERIFY	! Verify Fuse Map, 
											VERIFY_USERCODE		! Verify USERCODE,
											PROGRAM_SED_CRC_STATUS,
											FLASH_TAG_ERASE_PROGRAM_VERIFY,
						 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											CHECK_STATUS ! Read the status bit,
											XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
						 			 		DISABLE ! Exit the programming mode"	;								
	
	"XFLASH Program USF from PROM file" =	"	INIT 	! Initialize, 
											READ_ID	! Check the IDCODE, 
											FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
											CHECK_KEYLOCK ! Check the Key Protection fuses,  
											FLASH_ERASE	! Erase the device, 
											CHECK_STATUS ! Read the status bit,
						 			 		PROGRAM_STATUS	! Program Fuse Map,
						 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
											CHECK_STATUS ! Read the status bit,
											FLASH_VERIFY	! Verify Fuse Map, 
											VERIFY_USERCODE		! Verify USERCODE,
											PROGRAM_SED_CRC_STATUS,
											FLASH_TAG_ERASE_PROGRAM_VERIFY,
						 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											CHECK_STATUS ! Read the status bit,
											XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
						 			 		DISABLE ! Exit the programming mode"	;
			 			 				 			 		
	"XFLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Program,Verify,skip Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 								 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
											 			 		
	
	"XFLASH Erase,Program,Verify,Refresh" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
			 			 			
	"XFLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"XFLASH Erase,Program,Secure" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
	
	"XFLASH Program"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE_STATUS	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;		
	"XFLASH Verify Only" =	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							CHECK_STATUS ! Read the status bit, 
							DISABLE ! Exit the programming mode"	;										
	"XFLASH Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses,  
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";				 						 
	"XFLASH Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";
	"XFLASH Display EBR"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";								 
					             							 
	"SRAM Bypass"	=	"INIT 	! Initialize";
	"SRAM Verify ID" = 	"INIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "INIT, READ_ID, SAVE_ID";
	
	"SRAM Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"INIT, READ_ID, SAVE_ID,SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"INIT, 
								 READ_ID,
								 SAVE_ID,
								 SRAM_ENABLE	! Enable SRAM programming mode, 
								 SAVE_SED,
								 DISABLE ! Exit the programming mode";
	
	"SRAM Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						IO_STATE ! Program Bscan register,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	INIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable SRAM programming mode,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "INIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register, 
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device,
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,								 
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;					
	"SRAM Program,Verify,Secure"	=	"INIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
									PROGRAM_USERCODE	! Program USERCODE,									
				 			 		VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	
	"Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"SRAM Erase Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = " INIT 	! Initialize,
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"SRAM Re-Initialize" = " INIT 	! Initialize,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"SRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"SRAM Read DONE bit"	=	"INIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SAVE_ID,
					 READ_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_ARRAY,
					             SAVE_USERCODE,
					             SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"INIT, 
						 READ_ID, 
						 SAVE_ID, 
						 IO_STATE ! Program Bscan register,
						 SRAM_ENABLE, 
						 SAVE_STATUS,
						 SAVE_ARRAY, 
						 SAVE_USERCODE, 
						 SAVE_SED_CRC,
						 DISABLE";
	"SRAM Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Display Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";
	"Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";			             
	"SRAM Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SAVE_STATUS !Read Status Register,
					             DISABLE";						             							
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "INIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 READ_ID, 
								 SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE, 
		 			 			VERIFY_SED_CRC,
		 			 			VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									READ_ID	! Check the IDCODE,
									SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
									VERIFY_USERCODE		! Verify USERCODE,
			 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SAVE_ID,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			READ_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
					 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Read Status Register" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,
					             SAVE_STATUS !Read Status Register,
					             DISABLE";	
	"XSRAM Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	

	"FLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = 	"INIT, 
									 READ_ID, 
									 SAVE_ID, 
									 FLASH_ENABLE, 
									 SAVE_STATUS,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 FLASH_TAG_SAVE,												  
									 DISABLE";		 			 		
	"FLASH Verify TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SAVE_ID, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"INIT, 
									 READ_ID, 
									 SAVE_ID, 
									 FLASH_TRANSPARENT_ENABLE, 
									 SAVE_STATUS,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 FLASH_TAG_SAVE,												  
									 DISABLE";			 			 		
	"XFLASH Verify TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								SAVE_ID, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;

	"Slave SPI Disable Only" = "SPIINIT 	! Initialize, 
	 			 				SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Enable Only" = "SPIINIT 	! Initialize, 
						   	   SPIREAD_ID	! Check the IDCODE,
						  	   SPIXFLASH_ENABLE	! Enable XPROGRAM mode"	;
						   
	"Slave SPI Re-Initialize" = "SPIINIT 	! Initialize,  
							 SPIREAD_ID	! Check the IDCODE,
						  	 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							 SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
							 SPIDIRECT_FLASH_ERASE	! Erase the device, 
							 SPICHECK_STATUS ! Read the status bit,
	 			 		  	 SPIDISABLE ! Exit the programming mode"	;
	 
	 "Slave SPI Check Protect Fuses" =  "SPIINIT 	! Initialize, 
						   SPIREAD_ID	! Check the IDCODE,
						   SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
						   SPICHECK_PROTECT_KEY ! Verify the Protection Key,
						   SPIDISABLE ! Exit the programming mode" ;
						   
	"Slave SPI Encryption Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device,
								SPICHECK_STATUS ! Read the status bit, 
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Encryption Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;									
	
	"Slave SPI EPVS with Encryption" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI EPVS with Encryption,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
	"Slave SPI EPVS with Encryption and Flash Protect" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE, 
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_PROTECT_KEY ! Verify the Protection Key,
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
															SPIPROGRAM_STATUS	! Program Fuse Map,
															SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map, 
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
															SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
															SPICHECK_STATUS ! Read the status bit,
															SPIDISABLE ! Exit the programming mode"	;													 
	
	"Slave SPI EPVS with Encryption and Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE, 
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_PROTECT_KEY ! Verify the Protection Key,
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
															SPIPROGRAM_STATUS	! Program Fuse Map,
															SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map, 
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
															SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
															SPICHECK_STATUS ! Read the status bit,
															SPIDISABLE ! Exit the programming mode,
															SPIREFRESH ! Refresh"	;
															
	"Slave SPI EPV with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;	
	"Slave SPI EP with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI EPV with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;	
											
	"Slave SPI EP with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;																		
	"Slave SPI EPVS with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;
	
	"Slave SPI EPS with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,   
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;
											
	"Slave SPI EPVS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;
	
	"Slave SPI EPS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;
	
	"Slave SPI Refresh" = "	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIREFRESH ! Refresh"	;
																																																				
	"Slave SPI Erase with Flash Protect" = "SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIDISABLE ! Exit the programming mode"	;
	
								
	"Slave SPI Program with Flash Protect Only" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
																
	"Slave SPI Program USERCODE" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Display USERCODE" =	"SPIINIT, 
								 SPIREAD_ID, 
								 SPISAVE_ID, 
								 SPIXFLASH_ENABLE, 
								 SPISAVE_USERCODE,
								 SPIDISABLE";								
											 		  	 								
	"Slave SPI Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
								
	"Slave SPI Background Erase,Program" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
																		
	"Slave SPI Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;	
			 			 		
	
	"Slave SPI Erase,Program,Verify,Secure,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode,
			 			 		SPIREFRESH ! Refresh"	;	
			 			 				 			 		
	"Slave SPI Background Erase,Program,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI Background Erase,Program,Secure,Refresh" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE,
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
										 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
										 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map,
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,			 			 		
										 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
										 			 		SPICHECK_STATUS ! Read the status bit,
										 			 		SPIDISABLE ! Exit the programming mode,
										 			 		SPIREFRESH ! Refresh"	;	
			 			 		
			 			 				 			 					 			 					 			 			
	"Slave SPI Erase,Program,Verify,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
	"Slave SPI Background Erase,Program,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;								
	"Slave SPI Verify Only" =	"	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							SPIFLASH_VERIFY	! Verify Fuse Map, 
							SPIVERIFY_USERCODE		! Verify USERCODE,
							SPIVERIFY_SED_CRC,
							SPIFLASH_TAG_VERIFY,
							SPICHECK_STATUS ! Read the status bit, 
							SPIDISABLE ! Exit the programming mode"	;										
	"Slave SPI Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPIDIRECT_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Background Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;		 			 			
	"Slave SPI Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID, 
								 SPISAVE_ID, 
								 SPIXFLASH_ENABLE, 								 
								 SPISAVE_ARRAY, 
								 SPISAVE_USERCODE,
								 SPISAVE_SED_CRC, 
								 SPIDISABLE";												 
	"Slave SPI TAG Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_TAG_STATUS	! Program TAG Fuses,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Save JEDEC with TAG" = 	"SPIINIT, 
									 SPIREAD_ID, 
									 SPISAVE_ID, 
									 SPIXFLASH_ENABLE,								
									 SPISAVE_ARRAY, 
									 SPISAVE_USERCODE,
									 SPISAVE_SED_CRC,
									 SPIFLASH_TAG_SAVE,												  
									 SPIDISABLE";			 			 		
	"Slave SPI TAG Verify" = "SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI TAG Erase" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
			 			 		
	"Slave SPI Display TAG" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISAVE_ID, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_SAVE	! Verify TAG Fuses, 
								SPIDISABLE ! Exit the programming mode"	;								 																															
	
	"Slave SPI Verify ID" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE";
	"Slave SPI Display ID" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPISAVE_ID";								
	
	"Slave SPI RAM Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID,
								 SPISAVE_ID, 
								 SPISRAM_TRANSPARENT_READ_ENABLE, 							
								 SPISAVE_ARRAY, 
								 SPISAVE_USERCODE, 
								 SPISAVE_SED_CRC,
								 SPIDISABLE";					 
		 			 		
	"Slave SPI RAM Verify Only"	=	"SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT read mode, 
								SPIRAM_VERIFY	! Verify Fuse Map, 
		 			 			SPIVERIFY_USERCODE		! Verify USERCODE, 
		 			 			SPIVERIFY_SED_CRC,
		 			 			SPIDISABLE ! Exit the programming mode"	;					 			 									
	"Slave SPI Read Status Register" = "SPIINIT ! Initialize,
								 SPIREAD_ID, 
								 SPISAVE_ID,
								 SPIXFLASH_ENABLE,  
					             SPI_SAVE_STATUS !Read Status Register,
					             SPIDISABLE";		 
	"Slave SPI Upload to Static RAM" = "SPIINIT !Initialize,
										SPIREAD_ID !Check the IDCODE,
										SPIREFRESH ! Refresh";			
	"Slave SPI Display SED_CRC"	=	"SPIINIT, 
								 	 SPIREAD_ID	! Check the IDCODE,
								 	 SPISAVE_ID,
									SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
									SPISAVE_SED,
									SPIDISABLE ! Exit the programming mode";												             			 			 			
	
	"Slave SPI Display Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 	 		 SAVE_ID,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPISAVE_CONTROL0 !Read Control Register 0,
								             SPIDISABLE ! Exit the programming mode";
								             
	"Slave SPI Program Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPIPROGRAM_CONTROL0 ! Program Control Register 0,
								             SPIDISABLE ! Exit the programming mode";
								             																 			 
</Operation_List>
<Operation_List label="SingleSVFOperation">		 		

	"Security Read and Save" =	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	
	"Security Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY, 
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode"	;
				 			 		
	"Security Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";		  		   						  					   						  					
	
	"Security Erase Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 	
										SVF_CHECK_FEATURE_ROW ! Check the Feature row, 									
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										DISABLE ! Exit the programming mode"	;
										
	"Security Read Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										SVF_FEATURE_ROW_READ	! Read the Feature row, 
										CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode"	;
					 			 		
	"Security Check Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Feature row,
										DISABLE ! Exit the programming mode"	;
							  					 			 							 			 							             
	"Security Read Key Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_SECURITY_KEY_FUSES ! Read the Key Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
	"Security Program Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Encryption Key Only" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Verify Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  VERIFY_SECURITY_KEY ! Verify the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Encryption Key with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Flash Protect Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect Key Only" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Flash Protect Key with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect with Feature Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  						  						  							  
	"Security Read Flash Protect Key" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Protect Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  							  
	"Security Read Protect Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Check Protect Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security EPVS with full feature and OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY_NO_VERIFY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
															   
	"Security EPV with OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
 	
 	"Security EPVS with OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,	
					 			 		CHECK_STATUS ! Read the status bit,				 			 		
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with full feature and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
										DISABLE ! Exit the programming mode,
										FLASH_ENABLE	! Enable the programming mode, 										
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
					 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,										
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map,
										VERIFY_USERCODE		! Verify USERCODE,																				 
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP_NO_VERIFY ! Program my_ASSP,						 			 		
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 								  			
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																													
	"Security EPV with my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
					 			 						 			 			

	"Security EPVS with my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	
	
	"Security EPVS with full feature,my_ASSP and OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,							  			
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
														 			 		
	"Security EPV with OTP and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	

	"Security EPVS with OTP and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																														
	
	"Security EPVS with full feature Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,							  			
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with full feature and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;									
											
	"Security EPV with Protect Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											
	"Security EPVS with Protect Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;												
										
	"Security EPV with Protect and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																		
	
	"Security EPVS with Protect and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											
	"Security EPV with Encrypt Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
										
	"Security EPV with Encrypt and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
										FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																								
																																												 				   
	"Manufacturing Read PES Fuses" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_PES_FUSES ! Read the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
						   
	"Security EPV with Encryption and Flash Protect" = "SVFINIT 	! Initialize, 
														READ_ID	! Check the IDCODE, 
														IO_STATE ! Program Bscan register,
														FLASH_ENABLE	! Enable the programming mode,
														CHECK_PROTECT_KEY ! Verify the Protection Key, 
														DIRECT_FLASH_ERASE	! Erase the device, 
														CHECK_STATUS ! Read the status bit,
														VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
									 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
														PROGRAM_USERCODE_STATUS	! Program USERCODE,
														CHECK_STATUS ! Read the status bit,
														FLASH_VERIFY	! Verify Fuse Map, 
														VERIFY_USERCODE		! Verify USERCODE,
														PROGRAM_SED_CRC_STATUS,
														FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
									 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
														VERIFY_DONE_BIT ! Verify DONE bit,
														DISABLE ! Exit the programming mode,
														VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,											 			 					 			 		
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
									
	"Security Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
								
	
	"Security EPV with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								PROGRAM_SECURITY ! Secure device,										 			 					 			 		
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
	"Security Erase,Program,Verify with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security Program with Flash Protect Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security EPV with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security EPVS with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								PROGRAM_SECURITY ! Secure device,										 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																
																	
	"Security Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Flash Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Flash Erase with Flash Protect"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
					 			 		
	"Security Erase,Program,Verify with OTP" = "	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE_STATUS	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC_STATUS,
										FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											 			 				 			 		
	"Security Background Program with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Security Background EPVS with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
	
	
			 			 		
	"Security Background Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Security Background EPVS with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
			 			 		
	"Security Background Program with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 					 			 											
	
	"Security Background Program with Flash Protect Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPVS with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 				 			 				 			 					 			 											
	"Security Background Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background Erase with Flash Protect"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background Flash Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background  Program and TransFR" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_DIRECT_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;			 			 									  					   							  						 			 			 		
			 			 		
	"Security Feature Row Protect Key Compare" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_FEATURE_ROW_STATUS !Feature Row Protect Key Compare and Display Status Register,
					             DISABLE";
					             	 		
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_USERCODE,
									 DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_SED_CRC,
									 DISABLE ! Exit the programming mode";									 
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode,
									 CHECK_KEYLOCK ! Check the Key Protection fuses,  
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 DIRECT_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"FLASH Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Program,Verify,skip Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 					 			 		
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
			 			 		
	"FLASH Erase,Program,Verify,Refresh" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY, 
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Program Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM,
								FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
									
	"FLASH Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;					 			 		
			 			 		
	"Erase,Program,Verify,Secure"	=	"	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
		
	"FLASH Program"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE_STATUS	! Program USERCODE,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM,
							CHECK_STATUS ! Read the status bit, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
							
	"FLASH Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY, 
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode"	;
								
	"Verify Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	
	"FLASH Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;	

	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,			 						 
						             SVF_SAVE_USERCODE,
						             DISABLE";			 						 
	"FLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"FLASH Display EBR"	=	"SVFINIT, 
							 READ_ID, 
							 IO_STATE ! Program Bscan register,
							 FLASH_ENABLE, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC,
							 DISABLE";
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_ENABLE	! Enable PROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
					             
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
					FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";				 			 							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"XFLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	"XFLASH Program and TransFR" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
									 			 		 			 						 			 		
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
											 			 		
			 			 		
	"XFLASH Erase,Program,Verify,Refresh" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	
	"XFLASH Erase,Program,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Program"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE_STATUS	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;	
								
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
							DISABLE ! Exit the programming mode"	;
								
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
						             SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,			 						 
						             SVF_SAVE_USERCODE,
						             DISABLE";				 						 
	"XFLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;		
	"XFLASH Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";						             								 			 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_ENABLE	! Enable the programming mode,
								 SVF_SAVE_SED_CRC,
								 DISABLE ! Exit the programming mode";
	"SRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  IO_STATE ! Program Bscan register,
						  SRAM_ENABLE	! Enable SRAM programming mode"	;
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map, 
								PROGRAM_USERCODE	! Program USERCODE,								
			 			 		VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;	
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,  
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "SVFINIT 	! Initialize,
					   SRAM_ENABLE	! Enable SRAM programming mode, 
					   ERASE	! Erase the device,
					   DISABLE ! Exit the programming mode"	;
	"SRAM Re-Initialize" = "SVFINIT 	! Initialize,
						   SRAM_ENABLE	! Enable SRAM programming mode, 
						   ERASE	! Erase the device,
						   DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
					             SVF_SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"SVFINIT, 
						 		 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"SRAM Refresh" = " SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";	
	"Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";						             
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";							
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE, 
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 	READ_ID	! Check the IDCODE,
					 			 	SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             	SVF_SAVE_CONTROL0 !Read Control Register 0,
					             	DISABLE";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Capture Only" = "SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;		
	"Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;	

	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = "SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 SVF_FLASH_TAG_SAVE,												  
								 DISABLE";				 			 		
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";				 			 		
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";								
	"Slave SPI Disable Only" = "SPIINIT 	! Initialize, 
	 			 				SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Enable Only" = "SPIINIT 	! Initialize, 
						   	   SPIREAD_ID	! Check the IDCODE,
						  	   SPIXFLASH_ENABLE	! Enable XPROGRAM mode"	;
						   
	"Slave SPI Re-Initialize" = "SPIINIT 	! Initialize,  
							 SPIREAD_ID	! Check the IDCODE,
						  	 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							 SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
							 SPIDIRECT_FLASH_ERASE	! Erase the device, 
							 SPICHECK_STATUS ! Read the status bit,
	 			 		  	 SPIDISABLE ! Exit the programming mode"	;
	 			 		  	 	
	"Slave SPI Encryption Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Encryption Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
								SPIPROGRAM_SECURITY ! Secure device,		 			 					 			 										
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI EPVS with Encryption" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	
	"Slave SPI EPVS with Encryption,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
								SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
								SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
								
	"Slave SPI EPVS with Encryption and Flash Protect" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE, 
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_PROTECT_KEY ! Verify the Protection Key,
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
															SPIPROGRAM_STATUS	! Program Fuse Map,
															SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map, 
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
															SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
															SPICHECK_STATUS ! Read the status bit,
															SPIDISABLE ! Exit the programming mode"	;													 
	
	"Slave SPI EPVS with Encryption and Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE, 
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_PROTECT_KEY ! Verify the Protection Key,
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
															SPIPROGRAM_STATUS	! Program Fuse Map,
															SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map, 
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,											 			 					 			 					 			 		
															SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
															SPICHECK_STATUS ! Read the status bit,
															SPIDISABLE ! Exit the programming mode,
															SPIREFRESH ! Refresh"	;
																					
	"Slave SPI EPV with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI EP with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;	
											
	"Slave SPI EPV with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;
	
	"Slave SPI EP with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;						
																												
	"Slave SPI EPVS with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;
	
	"Slave SPI EPS with Flash Protect" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode"	;
											
	"Slave SPI EPVS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIFLASH_VERIFY	! Verify Fuse Map, 
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;
	
	"Slave SPI EPS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
											SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
											SPICHECK_STATUS ! Read the status bit,
											SPIVERIFY_USERCODE		! Verify USERCODE,
											SPIPROGRAM_SED_CRC_STATUS,
											SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,	
											SPIPROGRAM_SECURITY ! Secure device,		 			 		
						 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
											SPICHECK_STATUS ! Read the status bit,
											SPIDISABLE ! Exit the programming mode,
											SPIREFRESH ! Refresh"	;
											
	"Slave SPI Refresh" = "	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIREFRESH ! Refresh"	;
																																																	
	"Slave SPI Erase with Flash Protect" = "SPIINIT 	! Initialize, 
											SPIREAD_ID	! Check the IDCODE, 
											SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
											SPICHECK_PROTECT_KEY ! Verify the Protection Key,
											SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
											SPICHECK_STATUS ! Read the status bit,
						 			 		SPIDISABLE ! Exit the programming mode"	;																				 			 		  	 							
	"Slave SPI Program with Flash Protect Only" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPIBACKGROUND_FLASH_ERASE	! Erase the device,  
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;								
									 			 		  	 							
	"Slave SPI Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
								
									 			 		  	 							
	"Slave SPI Background Erase,Program" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
																			
	"Slave SPI Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
			 			 		
	"Slave SPI Erase,Program,Verify,Secure,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode,
			 			 		SPIREFRESH ! Refresh"	;
			 			 					 			 		
	"Slave SPI Background Erase,Program,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;	
			 			 		
	"Slave SPI Background Erase,Program,Secure,Refresh" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE,
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
										 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
										 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map,
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,			 			 		
										 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
										 			 		SPICHECK_STATUS ! Read the status bit,
										 			 		SPIDISABLE ! Exit the programming mode,
										 			 		SPIREFRESH ! Refresh"	;	
										 			 					 			 				 			 						 			 			
	"Slave SPI Erase,Program,Verify,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
	"Slave SPI Background Erase,Program,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;								
	"Slave SPI Verify Only" =	"	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							SPIFLASH_VERIFY	! Verify Fuse Map, 
							SPIVERIFY_USERCODE		! Verify USERCODE,
							SPIVERIFY_SED_CRC,
							SPIFLASH_TAG_VERIFY,
							SPICHECK_STATUS ! Read the status bit, 
							SPIDISABLE ! Exit the programming mode"	;										
	"Slave SPI Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPIDIRECT_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Background Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;		 			 			
	"Slave SPI Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID, 
								 SPISAVE_ID, 
								 SPIXFLASH_ENABLE, 
								 SPISVF_SAVE_ARRAY, 
								 SPISVF_SAVE_USERCODE,
								 SPISAVE_SED_CRC, 
								 SPIDISABLE";												 
	"Slave SPI TAG Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_TAG_STATUS	! Program TAG Fuses,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Save JEDEC with TAG" = 	"SPIINIT, 
									 SPIREAD_ID, 
									 SPISAVE_ID, 
									 SPIXFLASH_ENABLE, 
									 SPISVF_SAVE_ARRAY, 
									 SPISVF_SAVE_USERCODE,
									 SPISVF_SAVE_SED_CRC,
									 SPISVF_FLASH_TAG_SAVE,												  
									 SPIDISABLE";			 			 		
	"Slave SPI TAG Verify" = "SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI TAG Erase" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
			 			 		
	"Slave SPI Display TAG" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISAVE_ID, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPISVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								SPIDISABLE ! Exit the programming mode"	;								 																															
	
	"Slave SPI Verify ID" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE"	;
	"Slave SPI Display ID" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPISVFSAVE_ID"	;								
	
	"Slave SPI Program USERCODE" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Display USERCODE" =	"SPIINIT, 
								 SPIREAD_ID, 
								 SPISAVE_ID, 
								 SPIXFLASH_ENABLE, 
								 SPISVF_SAVE_USERCODE, 
								 SPIDISABLE";	
								 									
	"Slave SPI RAM Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID,
								 SPISAVE_ID, 
								 SPISRAM_TRANSPARENT_READ_ENABLE, 
								 SPISVF_SAVE_ARRAY, 
								 SPISVF_SAVE_USERCODE, 
								 SPISAVE_SED_CRC,
								 SPIDISABLE";					 
		 			 		
	"Slave SPI RAM Verify Only"	=	"SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT read mode, 
								SPIRAM_VERIFY	! Verify Fuse Map, 
		 			 			SPIVERIFY_USERCODE		! Verify USERCODE, 
		 			 			SPIVERIFY_SED_CRC,
		 			 			SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Read Status Register" = "SPIINIT ! Initialize,
								 SPIREAD_ID, 
								 SPISAVE_ID,
								 SPIXFLASH_ENABLE,  
					             SPI_SAVE_STATUS !Read Status Register,
					             SPIDISABLE";		 			 				
	"Slave SPI Upload to Static RAM" = "SPIINIT !Initialize,
										SPIREAD_ID !Check the IDCODE,
										SPIREFRESH ! Refresh";		 
	"Slave SPI Display SED_CRC"	=	"SPIINIT, 
								 	 SPIREAD_ID	! Check the IDCODE,
								 	 SPISAVE_ID,
									SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
									SPISAVE_SED_CRC,
									SPIDISABLE ! Exit the programming mode";
	"Slave SPI Display Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 	 		 SAVE_ID,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPISAVE_CONTROL0 !Read Control Register 0,
								             SPIDISABLE ! Exit the programming mode";
								             										
	"Slave SPI Program Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPIPROGRAM_CONTROL0 ! Program Control Register 0,
								             SPIDISABLE ! Exit the programming mode";																					 																																 			 
</Operation_List>
<Operation_List label="TurboOperation">
	"FLASH Bypass"	=	"INIT 	! Initialize";
	"FLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"Verify ID" = 		"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"FLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"FLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_ENABLE	! Enable the PROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"INIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 DIRECT_FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE,  
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
	
	"FLASH Program,Verify,skip Erase" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE,  
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
			 			 			
	"FLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE, 
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
			 			 		
	"FLASH Program"	=	"	INIT 	! Initialize, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE_STATUS	! Program USERCODE,  
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit"	;		
	"FLASH Verify Only" =	"	INIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"FLASH Erase Only"	=	"	INIT 	! Initialize, 
							CHECK_KEYLOCK ! Check the Key Protection fuses, 
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"FLASH Calculate Checksum"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";						             
	"FLASH Read and Save"	=	"INIT, 
								 SAVE_ID,
								 FLASH_ENABLE, 
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"FLASH Display EBR"	=	"INIT, 
							 SAVE_ID,
							 FLASH_ENABLE, 
							 SAVE_ARRAY, 
							 SAVE_USERCODE, 
							 SAVE_SED_CRC";								 
	
	"FLASH Read Status Register" = "INIT ! Initialize,
								 SAVE_ID, 					
								 SAVE_STATUS !Read Status Register";
					             
	"FLASH Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"FLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	INIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";												 			 							 
	"XFLASH Bypass"	=	"INIT 	! Initialize";
	"XFLASH Verify ID" = 	"INIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "INIT, READ_ID, SAVE_ID";
	"XFLASH Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"XFLASH Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								 
	"Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;								
	"XFLASH Display USERCODE"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"INIT, 
									 READ_ID	! Check the IDCODE,
									 SAVE_ID,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SAVE_SED,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "INIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "INIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"INIT 	! Initialize, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"INIT, 
								 READ_ID, 
								 SAVE_ID,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 READ_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"INIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Re-Initialize" = "INIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	INIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
			 			FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program USF with Static EBR" = "	INIT 	! Initialize,
								CHECK_KEYLOCK ! Check the Key Protection fuses,  
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Program USF from PROM file"	= "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;								
																
	"XFLASH Erase,Program,Verify" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
			 			 			

	"XFLASH Program,Verify,skip Erase" = "	INIT 	! Initialize, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 								
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
											 			 			
	"XFLASH Erase,Program,Verify,Secure" = "	INIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Erase,Program,Secure" = "	INIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Program"	=	"	INIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE_STATUS	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"	INIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map,
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"	INIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";							             
	"XFLASH Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"INIT, 
								 SAVE_ID,
								 SAVE_ARRAY, 
								 SAVE_USERCODE, 
								 SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "INIT ! Initialize,
								 SAVE_ID, 	
								 SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;
	"XFLASH Program Control Register0" = "INIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";					 			 
	"SRAM Bypass"	=	"INIT 	! Initialize";
	"SRAM Verify ID" = 	"INIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "INIT, READ_ID, SAVE_ID";
	
	"SRAM Verify USERCODE"	=	"INIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"INIT, READ_ID, SAVE_ID,SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"INIT, 
								READ_ID, 
								SAVE_ID,
								SAVE_SED";
	
	"SRAM Disable Only" = "	INIT 	! Initialize, 
	 			 		DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "INIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	INIT 	! Initialize,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "INIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "	INIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"INIT 	! Initialize, 
										ERASE	! Erase the device, 
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"	INIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"INIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"INIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " INIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " INIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"INIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"INIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"INIT 	! Initialize, 
								 SAVE_ID,
								 READ_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"SRAM Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_CONTROL0,
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";
	"SRAM Refresh" = " 	INIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Display Control Register0" = "INIT ! Initialize,
									 SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "INIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"Read Control Register0" = "INIT ! Initialize,
									 SAVE_CONTROL0 !Read Control Register 0";								 		
	"SRAM Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"	INIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"	INIT 	! Initialize, 
								READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "INIT, READ_ID, SAVE_ID";								
	"XSRAM Disable Only" = "	INIT 	! Initialize, 
	 			 				DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "	INIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"INIT, 
								 SAVE_ID,
								 SAVE_CONTROL0,
								 SAVE_STATUS,
								 SAVE_ARRAY, 
								 SAVE_USERCODE,
								 SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"INIT ! Initialize,
									 SAVE_ID,
									 SAVE_CONTROL0,
						             SAVE_ARRAY,
						             SAVE_USERCODE,
						             SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"	INIT 	! Initialize, 
								VERIFY	! Verify Fuse Map, 
		 			 			VERIFY_USERCODE		! Verify USERCODE,
		 			 			VERIFY_SED_CRC,
		 			 			VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"	INIT 	! Initialize, 
									VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"INIT 	! Initialize, 
								SAVE_ID,
								READ_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "INIT ! Initialize,
									 SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "INIT ! Initialize,
					 			 CAPTURE";										 
	"XSRAM Capture Only" = "	INIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;	
						
	"FLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"INIT, 
									 SAVE_ID,
									 SAVE_STATUS,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	INIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	INIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	INIT 	! Initialize, 
								SAVE_ID, 
								FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	INIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"INIT, 
									 SAVE_ID,
									 SAVE_STATUS,
									 SAVE_ARRAY, 
									 SAVE_USERCODE,
									 SAVE_SED_CRC,
									 FLASH_TAG_SAVE";									
	"XFLASH Verify TAG" = "	INIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	INIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	INIT 	! Initialize, 
								SAVE_ID, 
								FLASH_TAG_SAVE	! Verify TAG Fuses"	;																		 			 
</Operation_List>
<Operation_List label="ChainSVFOperation">
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	
	"FLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
													
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable PROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 DIRECT_FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
	
	"FLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
								
	"FLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit"	;			 			 		
	"FLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE_STATUS	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit"	;		
	"FLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	
	"FLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit"	;
		 			 			
	
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,
						             SVF_SAVE_USERCODE";						             
	"FLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"FLASH Display EBR"	=	"SVFINIT, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								SVF_SAVE_STATUS !Read Status Register";								 
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"XFLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";									
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 																 
	"XFLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									 CHECK_KEYLOCK ! Check the Key Protection fuses,
									 FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
			
			
									
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Erase,Program,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE_STATUS	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC_STATUS,
								FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE_STATUS	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC_STATUS,
							FLASH_TAG_ERASE_PROGRAM, 
							FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,
						             SVF_SAVE_USERCODE";							             
	"XFLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								SVF_SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"XFLASH Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";				 			 								 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, READ_ID, SVF_SAVE_SED_CRC";
	"SRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 		   DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,
								INIT	! Initialize the device,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize,
										ERASE	! Erase the device,  
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"SVFINIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " SVFINIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"SRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"SRAM Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Display Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";								 		
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
							IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE,
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";										
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;
							
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE";									
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses"	;																		 			 
</Operation_List>
<Operation_List label="SingleSVFOperationRevC">		

	"Security Read and Save" =	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	
	"Security Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY, 
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode"	;
				 			 		
	"Security Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";		  		   						  					   						  					
	
	"Security Erase Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 	
										SVF_CHECK_FEATURE_ROW ! Check the Feature row, 									
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
										DISABLE ! Exit the programming mode"	;
										
	"Security Read Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										SVF_FEATURE_ROW_READ	! Read the Feature row, 
										CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode"	;
					 			 		
	"Security Check Feature Row"	=	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE,
										FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Feature row,
										DISABLE ! Exit the programming mode"	;
							  					 			 							 			 							             
	"Security Read Key Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_SECURITY_KEY_FUSES ! Read the Key Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
	"Security Program Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Encryption Key and Flash Protect with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Encryption Key Only" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Verify Encryption Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_KEYLOCK ! Check the Key Lock,
							  VERIFY_SECURITY_KEY ! Verify the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Encryption Key with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  DISABLE ! Exit the programming mode" ;							  
							  
	"Security Program Flash Protect Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect Key Only" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  
	"Security Program Flash Protect Key with Lock" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
	
	"Security Program Flash Protect with Feature Lock" = "INIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  						  						  							  
	"Security Read Flash Protect Key" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Program Protect Key" = "SVFINIT 	! Initialize, 
							  READ_ID	! Check the IDCODE,
							  FLASH_ENABLE	! Enable the programming mode,
							  CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
							  SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
							  CHECK_STATUS ! Read the status bit,
							  VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							  SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK ! Program the Protection Key,
							  DISABLE ! Exit the programming mode" ;
							  							  
	"Security Read Protect Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_PROTECT_KEY_FUSES ! Read the Protection Fuses,
						   DISABLE ! Exit the programming mode" ;
	
	"Security Check Protect Fuses" =  "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
						   DISABLE ! Exit the programming mode" ;
	
	"Security EPVS with full feature and OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY_NO_VERIFY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
															   
	"Security EPV with OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
										
 	
 	"Security EPVS with OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,	
					 			 		CHECK_STATUS ! Read the status bit,				 			 		
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with full feature and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,
										DISABLE ! Exit the programming mode,
										FLASH_ENABLE	! Enable the programming mode, 										
										CHECK_KEYLOCK ! Check the Key Lock, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
					 			 		PROGRAM_USERCODE	! Program USERCODE,										
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map,
										VERIFY_USERCODE		! Verify USERCODE,																				 
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_ASSP_NO_VERIFY ! Program my_ASSP,						 			 		
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 								  			
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																													
	"Security EPV with my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
					 			 						 			 			

	"Security EPVS with my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	
	
	"Security EPVS with full feature,my_ASSP and OTP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,							  			
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
														 			 		
	"Security EPV with OTP and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	

	"Security EPVS with OTP and my_ASSP Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP,
					 			 		PROGRAM_OTP_WITH_SECURITY ! Program the OTP,	
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																														
	
	"Security EPVS with full feature Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Security Keys,							  			
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with full feature and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_SECURITY_KEY ! Program the Security Keys,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										CHECK_KEYLOCK ! Check the Key Lock, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;									
											
	"Security EPV with Protect Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											
	"Security EPVS with Protect Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;												
										
	"Security EPV with Protect and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																		
	
	"Security EPVS with Protect and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK !Program the Protection Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_CHECK_FEATURE_ROW ! Check the Key Protection fuses, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										PROGRAM_SECURITY ! Secure device,					 			 		
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											
	"Security EPV with Encrypt Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt Only Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
										
	"Security EPV with Encrypt and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;										
	
	
	"Security EPVS with Encrypt and Lock Option" = 	"	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_SECURITY_KEY ! Program the Encryption Key,
							  			DISABLE ! Exit the programming mode,
							  			FLASH_ENABLE	! Enable the programming mode, 
										SVF_DIRECT_FLASH_ERASE	! Erase the device, 
										CHECK_STATUS ! Read the status bit,
										PROGRAM_SECURITY ! Secure device,					 			 							 			 		
					 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
										SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																																								
																																												 				   
	"Manufacturing Read PES Fuses" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode,
						   SVF_READ_PES_FUSES ! Read the PES Fuses,
						   DISABLE ! Exit the programming mode" ;
						   
						   
	"Security EPV with Encryption and Flash Protect" = "SVFINIT 	! Initialize, 
														READ_ID	! Check the IDCODE, 
														IO_STATE ! Program Bscan register,
														FLASH_ENABLE	! Enable the programming mode,
														CHECK_PROTECT_KEY ! Verify the Protection Key, 
														SVF_DIRECT_FLASH_ERASE	! Erase the device, 
														CHECK_STATUS ! Read the status bit,
														VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
									 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
														PROGRAM_USERCODE	! Program USERCODE,
														CHECK_STATUS ! Read the status bit,
														FLASH_VERIFY	! Verify Fuse Map, 
														VERIFY_USERCODE		! Verify USERCODE,
														PROGRAM_SED_CRC,
														SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
									 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
														VERIFY_DONE_BIT ! Verify DONE bit,
														DISABLE ! Exit the programming mode,
														VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,											 			 					 			 		
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
									
	"Security Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
								
	
	"Security EPV with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Security EPVS with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								PROGRAM_SECURITY ! Secure device,										 			 					 			 		
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
																						
	"Security Erase,Program,Verify with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security Program with Flash Protect Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security EPV with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
								VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"Security EPVS with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
								PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,	
								PROGRAM_SECURITY ! Secure device,										 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program Flash DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify DONE bit,
								DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;																
																	
	"Security Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Flash Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Flash Erase with Flash Protect"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Erase,Program,Verify with my_ASSP" = "	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		FLASH_ENABLE	! Enable the programming mode, 
					 			 		PROGRAM_ASSP ! Program my_ASSP, 
					 			 		CHECK_STATUS ! Read the status bit,
					 			 		DISABLE ! Exit the programming mode,
					 			 		VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
					 			 		
	"Security Erase,Program,Verify with OTP" = "	SVFINIT 	! Initialize, 
										READ_ID	! Check the IDCODE, 
										IO_STATE ! Program Bscan register,
										FLASH_ENABLE	! Enable the programming mode, 
										CHECK_FEATURE_ROW_ERASE ! Check the Feature row,
										SVF_FEATURE_ROW_ERASE	! Erase the Feature row, 
										CHECK_STATUS ! Read the status bit,
										VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit, 
										SVF_PROGRAM_STATUS	! Program Fuse Map,
										PROGRAM_USERCODE	! Program USERCODE,
										CHECK_STATUS ! Read the status bit,
										FLASH_VERIFY	! Verify Fuse Map, 
										VERIFY_USERCODE		! Verify USERCODE,
										PROGRAM_SED_CRC,
										SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
					 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
					 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
					 			 		PROGRAM_OTP ! Program the OTP,					 			 		
					 			 		DISABLE ! Exit the programming mode,
										VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
											 			 				 			 		
	"Security Background Program with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Security Background EPVS with Encryption and Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
	
	
			 			 		
	"Security Background Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"Security Background EPVS with Encryption" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SECURITY ! Secure device,			 			 					 			 		
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;			 			 		
			 			 		
	"Security Background Program with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 					 			 											
	
	"Security Background Program with Flash Protect Only" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPV with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"Security Background EPVS with Flash Protect" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 				 			 				 			 					 			 											
	"Security Background Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;		 			 															  
	
	"Security Background Erase with Flash Protect"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background Flash Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							SVFCHECK_SECURITY_PROTECT_KEY ! Verify the Protection Key,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 		
	"Security Background  Program and TransFR" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_PROTECT_KEY ! Verify the Protection Key, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE		! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;			 			 									  					   							  						 			 			 		
			 			 		
	"Security Feature Row Protect Key Compare" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 SAVE_ID, 
					 			 FLASH_ENABLE	! Enable PROGRAM mode, 
					             SAVE_FEATURE_ROW_STATUS !Feature Row Protect Key Compare and Display Status Register,
					             DISABLE";
					              			 		
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
 	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"FLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_USERCODE,
									 DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									 FLASH_ENABLE	! Enable PROGRAM mode, 
									 SVF_SAVE_SED_CRC,
									 DISABLE ! Exit the programming mode";									 
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   IO_STATE ! Program Bscan register,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
									 FLASH_ENABLE	! Enable the programming mode, 
									 CHECK_KEYLOCK ! Check the Key Protection fuses, 
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_ENABLE	! Enable programming mode, 
						  	 SVF_DIRECT_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"FLASH Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"FLASH Program,Verify,skip Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
								
	"FLASH Erase,Program,Verify,Refresh" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
	"Erase,Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map,
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;	
	"Program Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;			 			 		
	"FLASH Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	
				 			 		
	"Erase,Program,Verify,Secure" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								FLASH_ENABLE	! Enable the programming mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE, 
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit,
			 			 		DISABLE ! Exit the programming mode,
								VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;
	"FLASH Program"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit,
							DISABLE ! Exit the programming mode,
							VERIFY_SRAM_DONE_BIT ! Verify Sram DONE bit"	;		
	"FLASH Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
		 			 		DISABLE ! Exit the programming mode"	;
	"Verify Only" =	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
		 			 		DISABLE ! Exit the programming mode"	;		 			 		
	"FLASH Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	"Erase Only"	=	"	SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							FLASH_ENABLE	! Enable the programming mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 IO_STATE ! Program Bscan register,
						 			 FLASH_ENABLE	! Enable programming mode, 
						             SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,			 						 
						             SVF_SAVE_USERCODE,
						             DISABLE";			 						 
	"FLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SVF_SAVE_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"FLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 FLASH_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_ENABLE	! Enable PROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;										 			 							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"XFLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 								
	"XFLASH Display USERCODE"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
								     READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit, 
		 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize, 
									 READ_ID	! Check the IDCODE,
									  FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit,
		 			 				 DISABLE ! Exit the programming mode"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						  	 SVF_FLASH_ERASE	! Erase the device, 
	 			 		  	 DISABLE ! Exit the programming mode"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;				 			 				 			 		
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 	
			 			 	
			 			 		
	"XFLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
											 			 		
	"XFLASH Erase,Program,Verify,Refresh" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								CHECK_KEYLOCK ! Check the Key Protection fuses, 
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode,
			 			 		REFRESH_FUNCTION ! Refresh"	;
		
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	
	"XFLASH Erase,Program,Secure" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Program"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit,
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM, 
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
							DISABLE ! Exit the programming mode"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit, 
							VERIFY_SED_CRC,
							FLASH_TAG_VERIFY,
		 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
		 			 		DISABLE ! Exit the programming mode"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
									 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
						             SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,
						             SVF_SAVE_USERCODE,						             
			 						 DISABLE";				 						 
	"XFLASH Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC, 
								 DISABLE";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
					             SVF_SAVE_STATUS !Read Status Register,
					             DISABLE";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;
	"XFLASH Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";					 			 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_ENABLE	! Enable the programming mode,
								 SVF_SAVE_SED_CRC,
								 DISABLE ! Exit the programming mode";
	"SRAM Disable Only" = "	SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						  READ_ID	! Check the IDCODE,
						  IO_STATE ! Program Bscan register,
						  SRAM_ENABLE	! Enable SRAM programming mode"	;
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,   
								READ_ID	! Check the IDCODE,
								IO_STATE ! Program Bscan register,
						 		SRAM_ENABLE	! Enable the programming mode, 
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,  
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit,
				 			DISABLE ! Exit the programming mode"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								IO_STATE ! Program Bscan register,
								SRAM_ENABLE	! Enable SRAM programming mode, 
								ERASE	! Erase the device, 
								PROGRAM	! Program Fuse Map,
								VERIFY	! Verify Fuse Map, 
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								VERIFY_USERCODE		! Verify USERCODE, 
			 			 		PROGRAM_SED_CRC,
			 			 		PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		DISABLE ! Exit the programming mode"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize, 
									READ_ID	! Check the IDCODE, 
									IO_STATE ! Program Bscan register,
									SRAM_ENABLE	! Enable SRAM programming mode, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map, 
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_SECURITY ! Secure device,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit, 
				 			 		DISABLE ! Exit the programming mode"	;
	
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE	! Erase the device, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program Only" = "SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE,  
					IO_STATE ! Program Bscan register,
					SRAM_ENABLE	! Enable SRAM programming mode, 
					ERASE	! Erase the device, 
					PROGRAM	! Program Fuse Map,
					PROGRAM_USERCODE	! Program USERCODE,
					PROGRAM_SED_CRC,
					PROGRAM_DONE_BIT	! Program DONE bit,
		 			DISABLE ! Exit the programming mode"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,  
							SRAM_ENABLE	! Enable SRAM programming mode, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE, 
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"Re-Initialize" = "SVFINIT 	! Initialize,
					   SRAM_ENABLE	! Enable SRAM programming mode, 
					   ERASE	! Erase the device,
					   DISABLE ! Exit the programming mode"	;
	"SRAM Re-Initialize" = "SVFINIT 	! Initialize,
						   SRAM_ENABLE	! Enable SRAM programming mode, 
						   ERASE	! Erase the device,
						   DISABLE ! Exit the programming mode"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase the done bit, 
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
							IO_STATE ! Program Bscan register,
							SRAM_ENABLE	! Enable SRAM programming mode, 
							ERASE_DONE_BIT	! Erase DONE bit,
							PROGRAM_DONE_BIT	! Program DONE bit,
		 			 		DISABLE ! Exit the programming mode"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
					 READ_ID	! Check the IDCODE,
					 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0,
					             SVF_SAVE_ARRAY,
					             SVF_SAVE_USERCODE,
					             SVF_SAVE_SED_CRC,
		 						 DISABLE";
	"SRAM Read and Save"	=	"SVFINIT, 
						 		 READ_ID, 
								 IO_STATE ! Program Bscan register,
								 SRAM_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";
	"SRAM Refresh" = " SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
					             
	"SRAM Display Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";	
	"Read Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 SRAM_ENABLE	! Enable SRAM programming mode, 
					             SVF_SAVE_CONTROL0 !Read Control Register 0,
					             DISABLE";					             
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";							
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 READ_ID, 
								 SRAM_TRANSPARENT_READ_ENABLE, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC,
								 DISABLE";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 READ_ID	! Check the IDCODE,
						 			 SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
						             SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,
			 						 DISABLE";
		 			 		
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE, 
							SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE, 
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse,
		 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode, 
								VERIFY_USERCODE		! Verify USERCODE,
			 			 		DISABLE ! Exit the programming mode"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
					 			SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					 			SVF_SAVE_DONE_BIT	! Read the done bit,
					 			DISABLE ! Exit the programming mode"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
								 	READ_ID	! Check the IDCODE,
					 			 	SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT programming mode,  
					             	SVF_SAVE_CONTROL0 !Read Control Register 0,
					             	DISABLE";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 READ_ID	! Check the IDCODE,
					 			 CAPTURE";	
	"XSRAM Capture Only" = "SVFINIT 	! Initialize,
						READ_ID	! Check the IDCODE,
						IO_STATE ! Capture Bscan register"	;		
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;		
						
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_ENABLE, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";				 			 		
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_ENABLE	! Enable the programming mode,
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 READ_ID, 
									 FLASH_TRANSPARENT_ENABLE, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE,												  
									 DISABLE";			 			 		
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		DISABLE ! Exit the programming mode"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE, 
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								DISABLE ! Exit the programming mode"	;
	"Slave SPI Disable Only" = "SPIINIT 	! Initialize, 
	 			 				SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Enable Only" = "SPIINIT 	! Initialize, 
						   	   SPIREAD_ID	! Check the IDCODE,
						  	   SPIXFLASH_ENABLE	! Enable XPROGRAM mode"	;
						   
	"Slave SPI Re-Initialize" = "SPIINIT 	! Initialize,  
							 SPIREAD_ID	! Check the IDCODE,
						  	 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							 SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
							 SPIDIRECT_FLASH_ERASE	! Erase the device, 
							 SPICHECK_STATUS ! Read the status bit,
	 			 		  	 SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Encryption Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
								
	"Slave SPI Encryption Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
								
	"Slave SPI EPVS with Encryption" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI EPVS with Encryption,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
								
	
	"Slave SPI EPVS with Encryption and Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;												 
	
	"Slave SPI EPVS with Encryption and Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,											 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
								
	"Slave SPI EPV with Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
	
	"Slave SPI EP with Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
	"Slave SPI EPV with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device,  
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;	
	
	"Slave SPI EP with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device,  
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;														
	"Slave SPI EPVS with Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	
	"Slave SPI EPS with Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI EPVS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
	
	"Slave SPI EPS with Flash Protect,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;			
								
	"Slave SPI Refresh" = "	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIREFRESH ! Refresh"	;
																																
	"Slave SPI Erase with Flash Protect" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
						 		SPIDISABLE ! Exit the programming mode"	;	
						 								
	"Slave SPI Program with Flash Protect Only" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_PROTECT_KEY ! Verify the Protection Key,
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;
																	 			 		  	 										
	"Slave SPI Erase,Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;		
	"Slave SPI Background Erase,Program" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode"	;	
																		
	"Slave SPI Erase,Program,Verify,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_FLASH_ERASE	! Erase the device,
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
			 			 		
	"Slave SPI Erase,Program,Verify,Secure,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPIDIRECT_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map, 
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC_STATUS,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode,
			 			 		SPIREFRESH ! Refresh"	;
			 			 					 			 		
	"Slave SPI Background Erase,Program,Secure" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE,
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device,
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								SPIPROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SPISVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;	
			 			 		
	"Slave SPI Background Erase,Program,Secure,Refresh" = "	SPIINIT 	! Initialize, 
															SPIREAD_ID	! Check the IDCODE,
															SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
															SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
															SPIBACKGROUND_FLASH_ERASE	! Erase the device, 
															SPICHECK_STATUS ! Read the status bit,
										 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
										 			 		SPIPROGRAM_USERCODE_STATUS	! Program USERCODE,
															SPICHECK_STATUS ! Read the status bit,
															SPIFLASH_VERIFY	! Verify Fuse Map,
															SPIVERIFY_USERCODE		! Verify USERCODE,
															SPIPROGRAM_SED_CRC_STATUS,
															SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,
															SPIPROGRAM_SECURITY ! Secure device,			 			 		
										 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
										 			 		SPICHECK_STATUS ! Read the status bit,
										 			 		SPIDISABLE ! Exit the programming mode,
										 			 		SPIREFRESH ! Refresh"	;	
										 			 					 			 				 			 						 			 			
	"Slave SPI Erase,Program,Verify,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_FLASH_ERASE	! Erase the device,
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_VERIFY	! Verify Fuse Map,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;
	"Slave SPI Background Erase,Program,Refresh" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								SPICHECK_KEYLOCK ! Check the Key Protection fuses, 
								SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIPROGRAM_STATUS	! Program Fuse Map,
								SPIPROGRAM_USERCODE	! Program USERCODE,
								SPICHECK_STATUS ! Read the status bit,
								SPIVERIFY_USERCODE		! Verify USERCODE,
								SPIPROGRAM_SED_CRC,
								SPIFLASH_TAG_ERASE_PROGRAM_VERIFY,			 			 		
			 			 		SPIFLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								SPICHECK_STATUS ! Read the status bit,
								SPIDISABLE ! Exit the programming mode,
								SPIREFRESH ! Refresh"	;								
	"Slave SPI Verify Only" =	"	SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE, 
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
							SPIFLASH_VERIFY	! Verify Fuse Map, 
							SPIVERIFY_USERCODE		! Verify USERCODE,
							SPIVERIFY_SED_CRC,
							SPIFLASH_TAG_VERIFY,
							SPICHECK_STATUS ! Read the status bit, 
							SPIDISABLE ! Exit the programming mode"	;										
	"Slave SPI Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPISVF_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;	
	"Slave SPI Background Erase Only"	=	"SPIINIT 	! Initialize, 
							SPIREAD_ID	! Check the IDCODE,
							SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
							SPICHECK_KEYLOCK ! Check the Key Protection fuses,  
							SPISVF_BACKGROUND_FLASH_ERASE	! Erase the device, 
							SPICHECK_STATUS ! Read the status bit,
		 			 		SPIDISABLE ! Exit the programming mode"	;			 			 		
	"Slave SPI Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID, 
								 SPISAVE_ID, 
								 SPIXFLASH_ENABLE, 
								 SPISVF_SAVE_ARRAY, 
								 SPISVF_SAVE_USERCODE, 
								 SPISVF_SAVE_SED_CRC,
								 SPIDISABLE";												 
	"Slave SPI TAG Program,Verify" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPISVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPISVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								SPICHECK_STATUS ! Read the status bit,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Save JEDEC with TAG" = 	"SPIINIT, 
									 SPIREAD_ID, 
									 SPISAVE_ID, 
									 SPIXFLASH_ENABLE, 
									 SPISVF_SAVE_ARRAY, 
									 SPISVF_SAVE_USERCODE,
									 SPISVF_SAVE_SED_CRC,
									 SPISVF_FLASH_TAG_SAVE,												  
									 SPIDISABLE";			 			 		
	"Slave SPI TAG Verify" = "SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPIFLASH_TAG_VERIFY	! Verify TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI TAG Erase" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPISVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								SPICHECK_STATUS ! Read the status bit,
			 			 		SPIDISABLE ! Exit the programming mode"	;
			 			 		
	"Slave SPI Display TAG" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISAVE_ID, 
								SPIXFLASH_ENABLE	! Enable XPROGRAM mode,
								SPISVF_FLASH_TAG_SAVE	! Verify TAG Fuses, 
								SPIDISABLE ! Exit the programming mode"	;								 																															
	
	"Slave SPI Verify ID" = "	SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE"	;	
	"Slave SPI RAM Read and Save"	=	"SPIINIT, 
								 SPIREAD_ID,
								 SPISAVE_ID, 
								 SPISRAM_TRANSPARENT_READ_ENABLE, 
								 SPISVF_SAVE_ARRAY, 
								 SPISVF_SAVE_USERCODE, 
								 SPISVF_SAVE_SED_CRC,
								 SPIDISABLE";					 
		 			 		
	"Slave SPI RAM Verify Only"	=	"SPIINIT 	! Initialize, 
								SPIREAD_ID	! Check the IDCODE, 
								SPISRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT read mode, 
								SPIRAM_VERIFY	! Verify Fuse Map, 
		 			 			SPIVERIFY_USERCODE		! Verify USERCODE, 
		 			 			SPIVERIFY_SED_CRC,
		 			 			SPIDISABLE ! Exit the programming mode"	;
	"Slave SPI Read Status Register" = "SPIINIT ! Initialize,
								 SPIREAD_ID, 
								 SPISAVE_ID,
								 SPIXFLASH_ENABLE,  
					             SPISVF_SAVE_STATUS !Read Status Register,
					             SPIDISABLE";
	"Slave SPI Upload to Static RAM" = "SPIINIT !Initialize,
										SPIREAD_ID !Check the IDCODE,
										SPIREFRESH ! Refresh";			
	"Slave SPI Display SED_CRC"	=	"SPIINIT, 
								 	 SPIREAD_ID	! Check the IDCODE,
								 	 SPISAVE_ID,
									SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
									SPISVF_SAVE_SED_CRC,
									SPIDISABLE ! Exit the programming mode";
									
	"Slave SPI Display Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 	 		 SAVE_ID,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPISAVE_CONTROL0 !Read Control Register 0,
								             SPIDISABLE ! Exit the programming mode";											
									
	"Slave SPI Program Control Register0" = "SPIINIT, 
								 	 		 SPIREAD_ID	! Check the IDCODE,
								 			 SPIXFLASH_ENABLE	! Enable XPROGRAM mode, 
								             SPIPROGRAM_CONTROL0 ! Program Control Register 0,
								             SPIDISABLE ! Exit the programming mode";																				             		 			 																														 			 
</Operation_List>
<Operation_List label="ChainSVFOperationRevC">
	"FLASH Bypass"	=	"SVFINIT 	! Initialize";
	"FLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";
	"Verify ID" = 		"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE";  
	"FLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"FLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_ENABLE	! Enable PROGRAM mode, 
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	
	"FLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
													
	"FLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"FLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_ENABLE	! Enable PROGRAM mode, 
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"FLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"FLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_ENABLE	! Enable the programming mode"	;
	"FLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit"	;
	"FLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"FLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable PROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"FLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_ENABLE	! Enable the programming mode, 
								 FLASH_VERIFY_DONE_BIT ! Verify DONE bit";
	
	"FLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 SVF_DIRECT_FLASH_ERASE	! Erase the device"	;
	
	"FLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
								
	"FLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
			 			 										
	"Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
	"Program Only" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM,
								SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								VERIFY_DONE_BIT ! Verify Flash DONE bit"	;									
	"FLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
				 			 				 			 		
	"Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_DIRECT_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit,
			 			 		VERIFY_DONE_BIT ! Verify Flash DONE bit"	;
	"FLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE, 
							CHECK_STATUS ! Read the status bit, 
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM,
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							VERIFY_DONE_BIT ! Verify Flash DONE bit"	;		
	"FLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;
	"Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;							
	"FLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit"	;
		 			 			
	"Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_DIRECT_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit"	;
	"FLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC,";
	"FLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_CHECKSUM_ARRAY,
									 SVF_CHECKSUM_SED_CRC,
						             SVF_SAVE_USERCODE";						             
	"FLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"FLASH Display EBR"	=	"SVFINIT, 
							 SVF_SAVE_ARRAY, 
							 SVF_SAVE_USERCODE, 
							 SVF_SAVE_SED_CRC";								 
	"FLASH Read Status Register" = "SVFINIT ! Initialize,
								 SVF_SAVE_STATUS !Read Status Register";								 
	"FLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 
	"FLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;					 			 
	"FLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";
	"FLASH TransFR" = "	SVFINIT 	! Initialize, 
					READ_ID	! Check the IDCODE, 
					IO_STATE ! Program Bscan register,
 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;						
	"XFLASH Upload to Static RAM" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						UPLOAD_FUNCTION ! Uploaded";							 
	"XFLASH Bypass"	=	"SVFINIT 	! Initialize";
	"XFLASH Verify ID" = 	"SVFINIT 	! Initialize, 
						 	READ_ID ! Check the IDCODE"; 
	"XFLASH Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"XFLASH Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 
	"XFLASH Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";								
	"Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								VERIFY_USERCODE		! Verify USERCODE,
								DISABLE ! Exit the programming mode"	; 																 
	"XFLASH Display USERCODE"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_USERCODE,
								 	DISABLE ! Exit the programming mode";
	"XFLASH Display SED_CRC"	=	"SVFINIT, 
									 READ_ID	! Check the IDCODE,
									FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,
								 	SVF_SAVE_SED_CRC,
								 	DISABLE ! Exit the programming mode";								 	
	"XFLASH Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XFLASH Enable Only" = "SVFINIT 	! Initialize, 
						   READ_ID	! Check the IDCODE,
						   FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode"	;
	"XFLASH Erase DONE bit"	=	"SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								ERASE_DONE_BIT	! Erase the done bit"	;
	"XFLASH Program DONE bit"	=	"SVFINIT 	! Initialize,  
									CHECK_KEYLOCK ! Check the Key Protection fuses,
									 SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
							   		 CHECK_STATUS ! Read the status bit"	;
	"XFLASH Read DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode, 
								 SVF_SAVE_DONE_BIT,
								 DISABLE ! Exit the programming mode";
	
	"XFLASH Verify DONE bit" = 	"SVFINIT, 
								 READ_ID, 
								 FLASH_TRANSPARENT_ENABLE	! Enable XPROGRAM mode,  
								 XFLASH_VERIFY_DONE_BIT ! Verify DONE bit,
								 DISABLE ! Exit the programming mode";
		
	"XFLASH Re-Initialize" = "SVFINIT 	! Initialize,  
						  	 SVF_FLASH_ERASE	! Erase the device"	;
	
	"XFLASH TransFR" = "	SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE, 
						IO_STATE ! Program Bscan register,
	 			 		FLASH_MDR ! Transparent Field Reconfiguration"	;
	
	"XFLASH Program and TransFR" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit,
								DISABLE ! Exit the programming mode,
								IO_STATE ! Program Bscan register,
								FLASH_MDR ! Transparent Field Reconfiguration"	;											
	"XFLASH Erase,Program,Verify" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
		
	"XFLASH Program,Verify,skip Erase" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								VERIFY_ERASE_DONE_BIT ! Verify Flash DONE bit,
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
								CHECK_STATUS ! Read the status bit"	;
								
	"XFLASH Erase,Program,Verify,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								FLASH_VERIFY	! Verify Fuse Map, 
								VERIFY_USERCODE	! Verify USERCODE,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
	
	"XFLASH Erase,Program,Secure" = "SVFINIT 	! Initialize,  
								CHECK_KEYLOCK ! Check the Key Protection fuses,
								SVF_FLASH_ERASE	! Erase the device, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_STATUS	! Program Fuse Map,
			 			 		PROGRAM_USERCODE	! Program USERCODE,
								CHECK_STATUS ! Read the status bit,
								PROGRAM_SED_CRC,
								SVF_FLASH_TAG_ERASE_PROGRAM,
								PROGRAM_SECURITY ! Secure device,			 			 		
			 			 		SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit,
			 			 		CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Program"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit,
							SVF_PROGRAM_STATUS	! Program Fuse Map, 
							PROGRAM_USERCODE	! Program USERCODE,
							CHECK_STATUS ! Read the status bit, 
							PROGRAM_SED_CRC,
							SVF_FLASH_TAG_ERASE_PROGRAM,
							SVF_FLASH_PROGRAM_DONE_BIT	! Program DONE bit"	;		
	"XFLASH Verify Only" =	"SVFINIT 	! Initialize, 
							FLASH_VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE	! Verify USERCODE,
							CHECK_STATUS ! Read the status bit,
							VERIFY_SED_CRC,
							SVF_FLASH_TAG_VERIFY"	;
	"XFLASH Erase Only"	=	"SVFINIT 	! Initialize,  
							CHECK_KEYLOCK ! Check the Key Protection fuses,
							SVF_FLASH_ERASE	! Erase the device, 
							CHECK_STATUS ! Read the status bit"	;
		 			 			
	
	"XFLASH Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XFLASH Calculate Checksum"	=	"SVFINIT ! Initialize,
									 SVF_CHECKSUM_ARRAY,
						             SVF_CHECKSUM_SED_CRC,
						             SVF_SAVE_USERCODE";							             
	"XFLASH Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"XFLASH Display EBR"	=	"SVFINIT, 
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE, 
								 SVF_SAVE_SED_CRC";								 
	"XFLASH Read Status Register" = "SVFINIT ! Initialize,								 
								 SVF_SAVE_STATUS !Read Status Register";								 
	"XFLASH Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";	
	"XFLASH Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"XFLASH Program Control Register0" = "SVFINIT ! Initialize,
								 READ_ID	! Check the IDCODE,
								 IO_STATE ! Program Bscan register,
					 			 FLASH_TRANSPARENT_ENABLE, 
					             PROGRAM_CONTROL0 ! Program Control Register 0,
					             DISABLE";												 			 								 
	"SRAM Bypass"	=	"SVFINIT 	! Initialize";
	"SRAM Verify ID" = 	"SVFINIT 	! Initialize, 
						 READ_ID ! Check the IDCODE"; 
	"SRAM Display ID" = "SVFINIT, READ_ID, SVF_SAVE_ID";
	"SRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								READ_ID	! Check the IDCODE,
								VERIFY_USERCODE		! Verify USERCODE"	; 
	"SRAM Display USERCODE"	=	"SVFINIT, READ_ID, SVF_SAVE_USERCODE";
	"SRAM Display SED_CRC"	=	"SVFINIT, READ_ID, SVF_SAVE_SED_CRC";
	
	"SRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 		   DISABLE ! Exit the programming mode"	;
	 			 		
	"SRAM Enable Only" = "SVFINIT 	! Initialize, 
						READ_ID	! Check the IDCODE,
						SRAM_ENABLE	! Enable SRAM programming mode"	;
						
	"SRAM Fast Program" = "	SVFINIT 	! Initialize,
								INIT	! Initialize the device,
								ERASE	! Erase the device, 
								BURST_PROGRAM	! Program Fuse Map,
								VERIFY_USERCODE		! Verify USERCODE"	;
	"SRAM Program,Verify" = "SVFINIT 	! Initialize,
							ERASE	! Erase the device,  
							PROGRAM	! Program Fuse Map,
							VERIFY	! Verify Fuse Map,
							PROGRAM_USERCODE	! Program USERCODE,
							VERIFY_USERCODE		! Verify USERCODE, 
							PROGRAM_SED_CRC,
							PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase,Program,Verify" = "SVFINIT 	! Initialize, 
									ERASE	! Erase the device, 
									PROGRAM	! Program Fuse Map,
									VERIFY	! Verify Fuse Map, 
				 			 		PROGRAM_USERCODE	! Program USERCODE,
									VERIFY_USERCODE		! Verify USERCODE, 
				 			 		PROGRAM_SED_CRC,
				 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;					
	"SRAM Program,Verify,Secure"	=	"SVFINIT 	! Initialize,
										ERASE	! Erase the device,  
										PROGRAM	! Program Fuse Map, 
										VERIFY	! Verify Fuse Map, 
					 			 		PROGRAM_USERCODE	! Program USERCODE,
										VERIFY_USERCODE		! Verify USERCODE, 
					 			 		PROGRAM_SED_CRC,
					 			 		PROGRAM_SECURITY ! Secure device,
					 			 		PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Erase Only"	=	"SVFINIT 	! Initialize, 
							ERASE	! Erase the device"	;
	"SRAM Program Only" = 	"SVFINIT 	! Initialize, 
						ERASE	! Erase the device, 
						PROGRAM	! Program Fuse Map,
						PROGRAM_USERCODE	! Program USERCODE,
						PROGRAM_SED_CRC,
						PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
							VERIFY_USERCODE		! Verify USERCODE,
							VERIFY_SED_CRC,
							VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"Re-Initialize" = " SVFINIT 	! Initialize,
						ERASE	! Erase the device"	;	
	"SRAM Re-Initialize" = " SVFINIT 	! Initialize,
							ERASE	! Erase the device"	;
	"SRAM Erase DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase the done bit"	;
	"SRAM Program DONE bit"	=	"SVFINIT 	! Initialize, 
								ERASE_DONE_BIT	! Erase DONE bit,
								PROGRAM_DONE_BIT	! Program DONE bit"	;
	"SRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								 SVF_SAVE_DONE_BIT	! Erase the done bit"	;
	"SRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"SRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";
	"SRAM Refresh" = " 	SVFINIT !Initialize,
						READ_ID !Check the IDCODE,
						REFRESH_FUNCTION ! Refresh";
	"SRAM Display Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"SRAM Program Control Register0" = "SVFINIT ! Initialize,
								 		PROGRAM_CONTROL0 ! Program Control Register 0";	
	"Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";								 		
	"SRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";									 								
	"SRAM Capture Only" = "	SVFINIT 	! Initialize,
							IO_STATE ! Capture Bscan register"	;					 			 
	"XSRAM Bypass"	=	"SVFINIT 	! Initialize"	;
	"XSRAM Verify ID" = 	"SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE"	; 
	"XSRAM Display ID" = "SVFINIT, READ_ID, SAVE_ID";							
	"XSRAM Disable Only" = "SVFINIT 	! Initialize, 
	 			 			DISABLE ! Exit the programming mode"	;
	"XSRAM Enable Only" = "SVFINIT 	! Initialize, 
							READ_ID	! Check the IDCODE,
					!		SRAM_TRANSPARENT_READ_ENABLE	! Enable SRAM TRANSPARENT mode"	;
	"XSRAM Read and Save"	=	"SVFINIT, 
								 SVF_SAVE_CONTROL0,
								 SVF_SAVE_ARRAY, 
								 SVF_SAVE_USERCODE,
								 SVF_SAVE_SED_CRC";					 
	"XSRAM Calculate Data CRC"	=	"SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0,
						             SVF_SAVE_ARRAY,
						             SVF_SAVE_USERCODE,
						             SVF_SAVE_SED_CRC";
	"XSRAM Verify Only"	=	"SVFINIT 	! Initialize, 
							VERIFY	! Verify Fuse Map, 
		 			 		VERIFY_USERCODE		! Verify USERCODE,
		 			 		VERIFY_SED_CRC,
		 			 		VERIFY_DONE_BIT   ! Verify the DONE fuse"	;
	"XSRAM Verify USERCODE"	=	"SVFINIT 	! Initialize, 
								VERIFY_USERCODE		! Verify USERCODE"	;
	"XSRAM Read DONE bit"	=	"SVFINIT 	! Initialize, 
								SVF_SAVE_DONE_BIT	! Read the done bit"	;				             
	"XSRAM Read Control Register0" = "SVFINIT ! Initialize,
									 SVF_SAVE_CONTROL0 !Read Control Register 0";
	"XSRAM Read Programming Status" = "SVFINIT ! Initialize,
					 			 CAPTURE";										
	"XSRAM Capture Only" = "	SVFINIT 	! Initialize,
								IO_STATE ! Capture Bscan register"	;	
	"Capture Only" = "	INIT 	! Initialize,
						IO_STATE ! Capture Bscan register"	;		
	
	"FLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses , 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE";									
	"FLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"FLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"FLASH Display TAG" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_SAVE	! Read TAG Fuses"	;
	"XFLASH TAG Program,Verify" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit,
			 			 		SVF_PROGRAM_TAG_STATUS	! Program TAG Fuses,
								CHECK_STATUS ! Read the status bit,
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH Save JEDEC with TAG" = 	"SVFINIT, 
									 SVF_SAVE_ARRAY, 
									 SVF_SAVE_USERCODE,
									 SVF_SAVE_SED_CRC,
									 SVF_FLASH_TAG_SAVE";	
	"XFLASH Verify TAG" = "	SVFINIT 	! Initialize, 
								FLASH_TAG_VERIFY	! Verify TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
	"XFLASH TAG Erase" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_ERASE	! Erase the TAG Fuses, 
								CHECK_STATUS ! Read the status bit"	;
			 			 		
	"XFLASH Display TAG" = "	SVFINIT 	! Initialize, 
								SVF_FLASH_TAG_SAVE	! Verify TAG Fuses"	;																	 			 
</Operation_List>
<Script>
<![CDATA[
int32	HDRFlag = HDR_LENGTH;
int32   Temp_Row_Width = DEVICE_ROW_WIDTH;
function INIT {
	! Row_Width	  : DEVICE_REAL_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR HDR_LENGTH TDI(HDR_PATTERN);
	HIR HIR_LENGTH TDI(HIR_PATTERN);
	TDR TDR_LENGTH TDI(TDR_PATTERN);
	TIR TIR_LENGTH TDI(TIR_PATTERN);
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}

function SVFINIT {
	! Row_Width	  : DEVICE_REAL_ROW_WIDTH; 
	! Address_Length : ADDRESS_REGISTER_LENGTH; 
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	ENDIR IRPAUSE;
	FREQUENCY 1E6 HZ;
	STATE IDLE;
}

function PRELOAD {
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
}

function INI_PRELOAD {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length);
}

function SAMPLE {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}

function INI_SAMPLE {				
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   STATE DRPAUSE;
   STATE IDLE;
}

function CAPTURE {	
	datastream SavedBScanTDO[1][BSCAN_Length];	
	file NewFile = "FILE_SAVE";		
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(#1^BSCAN_Length)
   					TDO(SavedBScanTDO[1]);
   Bscan[1] = SavedBScanTDO[1];	
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1]);
   // Write To file 
   fopen NewFile att "w"
					 format "SVF_Plus";	
   fwrite NewFile (BSCAN_TDO, Bscan);
   fclose 	NewFile;
   
}

function DYNAMIC {	
   ! Shift in Preload(0x1C) instruction;
   SIR Instruction_Length TDI(BPRELOAD);
   SDR BSCAN_Length TDI(Bscan[1])
   					DMASK(BscanMask[1]);
   STATE IDLE;
}

function FLASH_ENABLE {
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
}
function FLASH_TRANSPARENT_ENABLE {
	! Shift in XPROGRAM ENABLE(0x35) instruction;
    SIR Instruction_Length TDI (ISC_XPROGRAM_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
}
function SRAM_ENABLE {
	! Shift in ISC SRAM ENABLE(0x55) instruction;
    SIR Instruction_Length TDI (ISC_SRAM_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
}
function SRAM_TRANSPARENT_READ_ENABLE {
	! Shift in LSCC_SRAM_TRANSPARENT_ENABLE(0x75) instruction;
    SIR Instruction_Length TDI (LSCC_TRANSPARENT_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
}
function DISABLE {
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY PWP;
}
function READ_ID {		
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
					        TDO	(IDTDI[1])
					        MASK (DEVICE_ID_MASK);							        			        
}
function ERASE {
	! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 3 DELAY PWP;
}
function DIRECT_FLASH_ERASE {
	
	! Shift in ISC_ERASE_DONE(0x24) instruction;
	SIR Instruction_Length TDI (ISC_ERASE_DONE);
	RUN_TEST 	IDLE  TCK 3 DELAY 10;
				  
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWE {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}		     
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	IF (ISPROTECTED == 1)
	{
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
			print (1,"Please re-enter the Flash Protect key.");
		}
	}
}
function FLASH_ERASE {		
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWE {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}   		   
	
}
function SVF_DIRECT_FLASH_ERASE {	
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	
	! Shift in ISC_ERASE_DONE(0x24) instruction;
	SIR Instruction_Length TDI (ISC_ERASE_DONE);
	RUN_TEST 	IDLE  TCK 3 DELAY 10;
	
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY Erase_pulse;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);	
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	IF (ISENCRYPTED == 1)
	{	
		IF (ISPROTECTED == 1)
		{
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
	}
}
function SVF_FLASH_ERASE {	
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY Erase_pulse;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);		
}

function FLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 3 DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	   
	    
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 3 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}

function SVF_FLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 3 DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 3 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}
function FLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 3 DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	   
	    
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
					  
	}
}

function SVF_FLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		! Shift in TAG ERASE(0x70) instruction;
		SIR Instruction_Length TDI (LSCC_ERASE_TAG);
		RUN_TEST 	IDLE  TCK 3 DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	   
	}
}
function FLASH_TAG_ERASE {	

	! Shift in TAG ERASE(0x70) instruction;
	SIR Instruction_Length TDI (LSCC_ERASE_TAG);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}	   			   
}

function SVF_FLASH_TAG_ERASE {	
	! Shift in TAG ERASE(0x70) instruction;
	SIR Instruction_Length TDI (LSCC_ERASE_TAG);
	RUN_TEST 	IDLE  TCK 3 DELAY 10000;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);		   
}

function CHECK_STATUS {
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);	
}
function PROGRAM_SED_CRC 
{
	IF (SEDArray_TDI.row = 1)
	{
		! Program and Verify 32 bits SED_CRC;
		
		! Shift in PROGRAM_SED_CRC(0x45) instruction;
		SIR Instruction_Length TDI (PROG_SED_CRC);
		! Shift in SED_CRC Data; 
		SDR	32	TDI	(SEDArray_TDI[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		! Shift in READ_SED_CRC(0x44) instruction;
		SIR Instruction_Length TDI (READ_SED_CRC);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x01);							
	} 
}
function PROGRAM_SED_CRC_STATUS 
{
	IF (SEDArray_TDI.row = 1)
	{
		! Program and Verify 32 bits SED_CRC;
		
		! Shift in PROGRAM_SED_CRC(0x45) instruction;
		SIR Instruction_Length TDI (PROG_SED_CRC);
		! Shift in SED_CRC Data; 
		SDR	32	TDI	(SEDArray_TDI[1]);
		RUN_TEST IDLE TCK 3 ;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop PWP {
			RUN_TEST IDLE  TCK 3 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	 
		! Shift in READ_SED_CRC(0x44) instruction;
		SIR Instruction_Length TDI (READ_SED_CRC);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x01);							
	} 
}
function PROGRAM_ASSP {
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1910
    	TDIFeatureRow[1] = ((#1^279)@ #0)@(#1^1909);
		MaskFeatureRow[1] = ((#0^279)@ #1)@(#0^1909);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 655
    	TDIFeatureRow[1] = ((#1^118)@ #0)@(#1^654);
		MaskFeatureRow[1] = ((#0^118)@ #1)@(#0^654);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//Bits 588
    	TDIFeatureRow[1] = ((#1^51)@ #0)@(#1^587);
		MaskFeatureRow[1] = ((#0^51)@ #1)@(#0^587);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2252
    	TDIFeatureRow[1] = ((#1^393)@ #0)@(#1^2251);
		MaskFeatureRow[1] = ((#0^393)@ #1)@(#0^2251);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2735
    	TDIFeatureRow[1] = ((#1^649)@ #0)@(#1^2734);
		MaskFeatureRow[1] = ((#0^649)@ #1)@(#0^2734);
	}
		
	print (0 ,"Programming the my_ASSP");
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY PWP;
	TRY 1 { 
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  TDO(TDIFeatureRow[1])
					  		  MASK(MaskFeatureRow[1]);
	}
	ELSE
	{
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 1000;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the my_ASSP.");
	}				  		  
	IF (ISENCRYPTED == 1)
	{	
		print (0 ,"Verify the my_ASSP");
		! Verify the my_ASSP;	
		IF (myASSP_Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK 3 DELAY PWV;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(myASSP_Usercode_TDI[1]);
							        	
		}
	}
	ELSE
	{
		print (0 ,"Verify the my_ASSP");
		! Verify the my_ASSP;
		IF (Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK 3 DELAY PWV;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(Usercode_TDI[1]);
							        	
		}
	}
}
function PROGRAM_ASSP_NO_VERIFY {
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1910
    	TDIFeatureRow[1] = ((#1^279)@ #0)@(#1^1909);
		MaskFeatureRow[1] = ((#0^279)@ #1)@(#0^1909);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 655
    	TDIFeatureRow[1] = ((#1^118)@ #0)@(#1^654);
		MaskFeatureRow[1] = ((#0^118)@ #1)@(#0^654);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//Bits 588
    	TDIFeatureRow[1] = ((#1^51)@ #0)@(#1^587);
		MaskFeatureRow[1] = ((#0^51)@ #1)@(#0^587);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2252
    	TDIFeatureRow[1] = ((#1^393)@ #0)@(#1^2251);
		MaskFeatureRow[1] = ((#0^393)@ #1)@(#0^2251);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2735
    	TDIFeatureRow[1] = ((#1^649)@ #0)@(#1^2734);
		MaskFeatureRow[1] = ((#0^649)@ #1)@(#0^2734);
	}
		
	print (0 ,"Programming the my_ASSP");
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY PWP;			  		  
	IF (ISENCRYPTED == 1)
	{	
		print (0 ,"Verify the my_ASSP");
		! Verify the my_ASSP;	
		IF (myASSP_Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK 3 DELAY PWV;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(myASSP_Usercode_TDI[1]);
							        	
		}
	}
	ELSE
	{
		print (0 ,"Verify the my_ASSP");
		! Verify the my_ASSP;
		IF (Usercode_TDI.row = 1)
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY 200;
			! Shift in ISC ENABLE(0x15) instruction;
		    SIR Instruction_Length TDI (ISC_ENABLE);
			RUN_TEST	IDLE	TCK 3 DELAY PWV;
			
			! Shift in IDCODE(0x16) instruction;
		    SIR Instruction_Length 	TDI (IDCODE);
			SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							        TDO	(Usercode_TDI[1]);
							        	
		}
	}
}
function PROGRAM_OTP_WITH_SECURITY {
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	print (0 ,"Programming the OTP");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1911 to 1918
    	TDIFeatureRow[1] = ((#1^275)@(#0110))@(#1^1910);
		MaskFeatureRow[1] = ((#0^275)@(#1111))@(#0^1910);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 656 to 663
		TDIFeatureRow[1] = ((#1^113)@#0110)@(#1^655);
		MaskFeatureRow[1] = ((#0^113)@#1111)@(#0^655);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 589 to 596
    	TDIFeatureRow[1] = ((#1^46)@#0110)@(#1^588);
		MaskFeatureRow[1] = ((#0^46)@#1111)@(#0^588);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2253 to 2260
    	TDIFeatureRow[1] = ((#1^388)@#0110)@(#1^2252);
		MaskFeatureRow[1] = ((#0^388)@#1111)@(#0^2252);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2735 to 2742
    	TDIFeatureRow[1] = ((#1^645)@#0110)@(#1^2735);
		MaskFeatureRow[1] = ((#0^645)@#1111)@(#0^2735);
	}
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	} 
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		  	   MASK(MaskFeatureRow[1]);
	}
	ELSE
	{
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 1000;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the OTP.");
	}
	
	
	print (0 ,"Securing the Device...");
	! Shift in ISC PROGRAM SECURITY(0x09) instruction;
    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
	RUN_TEST	IDLE TCK 	10 DELAY 	50;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x80)
				  MASK(0x80);
				  
	print (0 ,"Verify the OTP");
	! Verify the OTP;			  		  
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x10)
				  MASK(0x10);
}
function PROGRAM_OTP_WITH_SECURITY_NO_VERIFY {
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	print (0 ,"Programming the OTP");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1911 to 1918
    	TDIFeatureRow[1] = ((#1^275)@(#0110))@(#1^1910);
		MaskFeatureRow[1] = ((#0^275)@(#1111))@(#0^1910);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 656 to 663
		TDIFeatureRow[1] = ((#1^113)@#0110)@(#1^655);
		MaskFeatureRow[1] = ((#0^113)@#1111)@(#0^655);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 589 to 596
    	TDIFeatureRow[1] = ((#1^46)@#0110)@(#1^588);
		MaskFeatureRow[1] = ((#0^46)@#1111)@(#0^588);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2253 to 2260
    	TDIFeatureRow[1] = ((#1^388)@#0110)@(#1^2252);
		MaskFeatureRow[1] = ((#0^388)@#1111)@(#0^2252);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2735 to 2742
    	TDIFeatureRow[1] = ((#1^645)@#0110)@(#1^2735);
		MaskFeatureRow[1] = ((#0^645)@#1111)@(#0^2735);
	}
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	} 
	print (0 ,"Securing the Device...");
	! Shift in ISC PROGRAM SECURITY(0x09) instruction;
    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
	RUN_TEST	IDLE TCK 	10 DELAY 	50;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x80)
				  MASK(0x80);
				  
	print (0 ,"Verify the OTP");
	! Verify the OTP;			  		  
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x10)
				  MASK(0x10);
}
function PROGRAM_OTP {
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	print (0 ,"Programming the OTP");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1911 to 1918
    	TDIFeatureRow[1] = ((#1^275)@(#0110))@(#1^1910);
		MaskFeatureRow[1] = ((#0^275)@(#1111))@(#0^1910);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 656 to 663
		TDIFeatureRow[1] = ((#1^113)@#0110)@(#1^655);
		MaskFeatureRow[1] = ((#0^113)@#1111)@(#0^655);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 589 to 596
    	TDIFeatureRow[1] = ((#1^46)@#0110)@(#1^588);
		MaskFeatureRow[1] = ((#0^46)@#1111)@(#0^588);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2253 to 2260
    	TDIFeatureRow[1] = ((#1^388)@#0110)@(#1^2252);
		MaskFeatureRow[1] = ((#0^388)@#1111)@(#0^2252);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2735 to 2742
    	TDIFeatureRow[1] = ((#1^645)@#0110)@(#1^2735);
		MaskFeatureRow[1] = ((#0^645)@#1111)@(#0^2735);
	}
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	TRY 1 { 
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		  	   MASK(MaskFeatureRow[1]);
	}
	ELSE
	{
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 1000;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the OTP.");
	}
	
	print (0 ,"Verify the OTP");
	! Verify the OTP;			  		  
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x10)
				  MASK(0x10);			  	
}
function VERIFY_SECURITY_KEY 
{	
	datastream ArrayCRC16[1][16];
	datastream ArrayTDI[1][Row_Width];
	int32	HeaderLength = 0;
	FuseArray_TDI.row = 1;
	ArrayTDI[1] = FuseArray_TDI[1];
	HeaderLength = 128 - TDR_LENGTH;
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 3  DELAY PWP;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in RESET_16_CRC (0xC6) instruction;
    	SIR Instruction_Length	TDI (RESET_16_CRC);
    	RUN_TEST IDLE TCK 3  DELAY PWP;
    	IF (ISUPDATEDCRC == 1)
    	{
	    	! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			HDR HeaderLength TDI(#0^HeaderLength);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			HDR HDR_LENGTH TDI(HDR_PATTERN);
		}
		ELSE
		{
			! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			IF (HDRFlag != 0)
			{
				HDR 0 TDI(#0);
			}
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			IF (HDRFlag != 0)
			{
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
		}
		IF (Usercode_TDI.row = 1)
		{
		    print (0,"Testing if encryption key in device matches the one used to encrypt the JEDEC file...");
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	TRY 1 {
	    		SDR_VERIFY 16 TDI(#0^16)
	    				  	  TDO(ArrayCRC16[1]);
				print (0,"First data frame 16-bit CRC passes...");
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
    			SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY 200;
				print (0,"First data frame 16-bit CRC comparison failed.");
				print (1,"The 128-bit encryption key does not match the one used to encrypt the JEDEC file.");
			}
		}
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 3  DELAY PWP;
	}
}

function PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	datastream ArrayTDI[1][Row_Width];
	int32	HeaderLength = 0;
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	ArrayTDI[1] = FuseArray_TDI[1];
	HeaderLength = 128 - TDR_LENGTH;
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 3  DELAY PWP;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in RESET_16_CRC (0xC6) instruction;
    	SIR Instruction_Length	TDI (RESET_16_CRC);
    	RUN_TEST IDLE TCK 3  DELAY PWP;
    	IF (ISUPDATEDCRC == 1)
    	{
	    	! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			HDR HeaderLength TDI(#0^HeaderLength);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			HDR HDR_LENGTH TDI(HDR_PATTERN);
		}
		ELSE
		{
			! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			IF (HDRFlag != 0)
			{
				HDR 0 TDI(#0);
			}
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			IF (HDRFlag != 0)
			{
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
		}
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop PWP {
			RUN_TEST IDLE  TCK 3 DELAY PWV;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		IF (Usercode_TDI.row = 1)
		{
		    print (0,"Testing if encryption key in device matches the one used to encrypt the JEDEC file...");
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	TRY 1 {
	    		SDR_VERIFY 16 TDI(#0^16)
	    				  	  TDO(ArrayCRC16[1]);
				print (0,"First data frame 16-bit CRC passes...");
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
    			SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY 200;
				print (0,"First data frame 16-bit CRC comparison failed.");
				print (1,"The 128-bit encryption key does not match the one used to encrypt the JEDEC file.");
			}
		}
		RowCount = RowCount +1;
    	repeat Address_Length -1 {			
    		IF (ISUPDATEDCRC == 1)
    		{
	    		! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
				SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
				HDR HeaderLength TDI(#0^HeaderLength);
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
				RUN_TEST IDLE TCK 3  DELAY PWV;
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
			ELSE
			{
				! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
				SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
				IF (HDRFlag != 0)
				{
					HDR 0 TDI(#0);
				}
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
				RUN_TEST IDLE TCK 3  DELAY PWV;
				IF (HDRFlag != 0)
				{
					HDR HDR_LENGTH TDI(HDR_PATTERN);
				}
			}
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST IDLE  TCK 3 DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 3  DELAY PWP;
		IF (Usercode_TDI.row = 1)
		{
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
			TRY 1 {
				SDR_VERIFY 16 TDI(#0^16) 
		    				  TDO(ArrayCRC16[1]);	   
				print (0,"Device 16-bit CRC passes...");
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
    			SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY 200;
				print (0,"Device 16-bit CRC comparison failed.");
				print (1,"The 128-bit encryption key does not match the one used to encrypt the JEDEC file.");
			}
		}
	}
	ELSE
	{
		repeat Address_Length {				
			! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    		SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
    		! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST IDLE  TCK 3 DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 3  DELAY PWP;
	}
}
function SVF_DIRECT_PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	datastream ArrayTDI[1][Row_Width];
	int32	RowCount = 1;
	int32	HeaderLength = 0;
	FuseArray_TDI.row = 1;
	ArrayTDI[1] = FuseArray_TDI[1];
	HeaderLength = 128 - TDR_LENGTH;
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 3  DELAY PWP;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in RESET_16_CRC (0xC6) instruction;
    	SIR Instruction_Length	TDI (RESET_16_CRC);
    	RUN_TEST IDLE TCK 3  DELAY PWP;
    	IF (ISUPDATEDCRC == 1)
    	{
	    	! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			UHDR HeaderLength TDI(#0^HeaderLength);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			HDR HDR_LENGTH TDI(HDR_PATTERN);
		}
		ELSE
		{
			! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
			SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
			IF (HDRFlag != 0)
			{
				UHDR 0 TDI(#0);
			}
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(ArrayTDI[1]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			IF (HDRFlag != 0)
			{
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
		}
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop PWP {
			RUN_TEST IDLE  TCK 3 DELAY 1;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		IF (Usercode_TDI.row = 1)
		{
			! Verify the First Data Frame 16-Bit CRC;
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	SDR_VERIFY 16 TDI(#0^16)
	    				  TDO(ArrayCRC16[1]);
		}
		RowCount = RowCount +1;
    	repeat Address_Length -1 {	
    		IF (ISUPDATEDCRC == 1)
    		{		
				! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
				SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
				UHDR HeaderLength TDI(#0^HeaderLength);
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
				RUN_TEST IDLE TCK 3  DELAY PWV;
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
			ELSE
			{
				! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
				SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
				IF (HDRFlag != 0)
				{
					UHDR 0 TDI(#0);
				}
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
				RUN_TEST IDLE TCK 3  DELAY PWV;
				IF (HDRFlag != 0)
				{
					HDR HDR_LENGTH TDI(HDR_PATTERN);
				}	
			}
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST IDLE  TCK 3 DELAY 1;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 3  DELAY PWP;
		IF (Usercode_TDI.row = 1)
		{
			! Verify Device 16-Bit CRC;
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	SDR_VERIFY 16 TDI(#0^16) TDO(ArrayCRC16[1]);
		}
	}
	ELSE
	{
		repeat Address_Length {				
			! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    		SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
    		! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
			RUN_TEST IDLE TCK 3  DELAY PWV;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST IDLE  TCK 3 DELAY 1;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			RowCount = RowCount +1;
		} // repeat
		! Shift in INIT ADDRESS(0x21) instruction;
		SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST IDLE TCK 3  DELAY PWP;
	}
}
function SVF_PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	int32	RowCount = 1;
	int32	HeaderLength = 0;
	FuseArray_TDI.row = 1;
	HeaderLength = 128 - TDR_LENGTH;
	! Shift in INIT ADDRESS(0x21) instruction;
	SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST IDLE TCK 3  DELAY PWP;	
	IF (ISENCRYPTED == 1)
	{
		! Shift in RESET_16_CRC (0xC6) instruction;
    	SIR Instruction_Length	TDI (RESET_16_CRC);
    	RUN_TEST IDLE TCK 3  DELAY PWP;
    	repeat Address_Length {	
    		IF (ISUPDATEDCRC == 1)
    		{		
				! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
	    		SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
	    		UHDR HeaderLength TDI(#0^HeaderLength);
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI);
				RUN_TEST IDLE TCK 3  DELAY PWP;
				HDR HDR_LENGTH TDI(HDR_PATTERN);
			}
			ELSE
			{
				! Shift in ENCRYPTED_PROGRAM INCR (0x40) instruction;
	    		SIR Instruction_Length	TDI (ENCRYPT_PROG_INC);
	    		IF (HDRFlag != 0)
				{
					UHDR 0 TDI(#0);
				}
	    		! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI);
				RUN_TEST IDLE TCK 3  DELAY PWP;
				IF (HDRFlag != 0)
				{
					HDR HDR_LENGTH TDI(HDR_PATTERN);
				}	
			}
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			IF (RowCount == 1)
			{
				IF (Usercode_TDI.row = 1)
				{
					! Verify First Frame 16 Bits CRC;					
					! Shift in READ_16_CRC (0xC5) instruction;
			    	SIR Instruction_Length	TDI (READ_16_CRC);
			    	RUN_TEST IDLE TCK 3  DELAY PWV;
			    	ArrayCRC16[1] = Usercode_TDI[1];
			    	SDR_VERIFY 16 TDI(#0^16)
			    				  TDO(ArrayCRC16[1]);			    				  
				}
			}
			RowCount = RowCount +1;
		} // repeat
		IF (Usercode_TDI.row = 1)
		{
			! Verify Device 16-Bit CRC;
			! Shift in READ_16_CRC (0xC5) instruction;
	    	SIR Instruction_Length	TDI (READ_16_CRC);
	    	RUN_TEST IDLE TCK 3  DELAY PWV;
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	SDR_VERIFY 16 TDI(#0^16) TDO(ArrayCRC16[1]);
		}
	}
	ELSE
	{
		repeat Address_Length {					
			! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    		SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI);
			RUN_TEST IDLE TCK 3  DELAY PWP;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			RowCount = RowCount +1;
		} // repeat
	}
}
function PROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY PWV;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 50 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}	
	}
}

function SVF_PROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		! Shift in PROGRAM TAG(0x71) instruction;
		SIR Instruction_Length	TDI (LSCC_PROGRAM_TAG);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		RUN_TEST IDLE TCK 3  DELAY 10000;
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
}
function PROGRAM {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 3 DELAY 	PWP;
	! Shift in LSCC PROGRAM INCR RTI(0x67) instruction;
    SIR Instruction_Length	TDI (LSCC_PROGRAM_INCR_RTI);
	// Program the rest of the device
	repeat Address_Length {
		! Shift in Data Row = RowCount;
	    SDR	Row_Width	TDI	(FuseArray_TDI);
		RUN_TEST	IDLE TCK 3 DELAY 	PWP;
		RowCount = RowCount +1;
	} // repeat
}

function PROGRAM_USERCODE {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(myASSP_Usercode_TDI[1]);
				RUN_TEST	TCK 3 DELAY PWP;
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(Usercode_TDI[1]);
				RUN_TEST	TCK 3 DELAY PWP;
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
		    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			RUN_TEST	TCK 3 DELAY PWP;
		}
	}
}
function PROGRAM_USERCODE_STATUS {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(myASSP_Usercode_TDI[1]);
				RUN_TEST	TCK 3 ;
				! Shift in ISC PROGRAM/STATUS(0x52) instruction;
				SIR Instruction_Length	TDI (PGM_STATUS);
				loop PWP {
					RUN_TEST IDLE  TCK 3 DELAY PWV;
					SDR_VERIFY 1 TDI(#0) TDO(#1);
				}
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
			    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
				SDR Usercode_Length	TDI	(Usercode_TDI[1]);
				RUN_TEST	TCK 3 ;
				! Shift in ISC PROGRAM/STATUS(0x52) instruction;
				SIR Instruction_Length	TDI (PGM_STATUS);
				loop PWP {
					RUN_TEST IDLE  TCK 3 DELAY PWV;
					SDR_VERIFY 1 TDI(#0) TDO(#1);
				}
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			! Shift in ISC PROGRAM USERCODE(0x1A) instruction;
		    SIR Instruction_Length	TDI (ISC_PROGRAM_USERCODE);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			RUN_TEST	TCK 3 ;
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop PWP {
				RUN_TEST IDLE  TCK 3 DELAY PWV;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
		}
	}
}
function PROGRAM_DONE_BIT {
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 3 DELAY PWP;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);	
}
function FLASH_PROGRAM_DONE_BIT {	
	
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 3 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWP {
		RUN_TEST IDLE  TCK 3 DELAY PWV;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
}
function SVF_FLASH_PROGRAM_DONE_BIT {
	! Shift in ISC PROGRAM DONE(0x2F) instruction;
    SIR	Instruction_Length 	TDI (ISC_PROGRAM_DONE);
	RUN_TEST	IDLE TCK 3 DELAY 200;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);	
}
function ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	// Goto Run Test Idle 
	RUN_TEST	TCK 3 DELAY 2000;
}
function FLASH_ERASE_DONE_BIT {
	! Shift in ISC ERASE DONE(0x24) instruction;
    SIR	Instruction_Length 	TDI (ISC_ERASE_DONE);
	RUN_TEST	TCK 3 DELAY 10;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 50 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
}
function VERIFY_DONE_BIT {
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);	
}
function VERIFY_ERASE_DONE_BIT {

	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x03);
	}	
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The Device is not blank. Cannot continue.");	
	}
}
function FLASH_VERIFY_DONE_BIT {

	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);	
				  
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	
	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	
}
function VERIFY_SRAM_DONE_BIT 
{
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x02)
					  MASK(0x03);
	}
	ELSE
	{
		print (0,"Issuing the Refresh instruction due to the CFG[1:0] setting."); 
		! Shift in LSCC REFRESH(0x23) instruction;
	    SIR Instruction_Length	TDI (LSCC_REFRESH);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
	
		! Shift in BYPASS(0xFF) instruction;
	  	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY 2000;
	
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x02)
					  MASK(0x03);	
	}
	STATE IDLE;
}
function XFLASH_VERIFY_DONE_BIT {
	! Shift in READ STATUS(0xB2) instruction;
	SIR_VERIFY Instruction_Length TDI (READ_STATUS)
								  TDO(0xFF)
					   	      	  MASK(0x04);	
}
function PROGRAM_CONTROL0 {
	IF (Control_Register_0_TDI.row = 1)
	{
		! Shift in LSCC PROGRAM CONTROL 0(0x47) instruction;
	    SIR Instruction_Length TDI (LSCC_PROGRAM_CTRL0);
		SDR 32 TDI(Control_Register_0_TDI[1]);
		RUN_TEST IDLE TCK 5 DELAY PWP; 
		! Shift in LSCC READ CONTROL 0(0x4A) instruction;
	    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
		RUN_TEST IDLE TCK 5 DELAY PWV; 
		SDR_VERIFY  32 TDI(0x00000000)
					   TDO(Control_Register_0_TDI[1])
					   MASK(0xFFFFFFFF);
	}
}
function SAVE_CONTROL0 {
	datastream SavedControl0[1][32];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in LSCC READ CONTROL 0(0x4A) instruction;
    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
	RUN_TEST IDLE TCK 5 DELAY PWV; 
	SDR  32 TDI(0x00000000)
				   TDO(SavedControl0);
				  
	// Write To File 
	fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (Control_Register_0_TDI, SavedControl0);
	fclose 	NewFile;
}

function SVF_SAVE_CONTROL0 
{
	! Shift in LSCC READ CONTROL 0(0x4A) instruction;
    SIR Instruction_Length TDI (LSCC_READ_CTRL0);
	RUN_TEST IDLE TCK 5 DELAY PWV; 
	SDR_VERIFY  32 TDI(0x00000000)
				   TDO(0x00000000)
				   MASK(0x00000000);
}
// Verify Functions _____________________________________________
function VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	TRY 1 {
		! Shift in LSCC RESET ADDRESS(0x21) instruction;
	    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
		RUN_TEST	IDLE TCK 3 DELAY 	PWV;
		! Shift in LSCC READ INCR RTI(0x6A) instruction;
	    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
		repeat Address_Length {
			RUN_TEST	IDLE TCK 3 DELAY 	PWV;
			! Shift Out Data Row = RowCount;
		    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
									TDO	(FuseArray_TDI)
									MASK(FuseArray_MASK);
			RowCount = RowCount +1;
		}
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY 200;
		! Shift in BYPASS(0xFF) instruction;
	    SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1, "Failed in Function VERIFY. See the log file for more details. ");
	}
}
function FLASH_VERIFY {
	int32	RowCount = 1;
	int32	ReturnCode = 0;
	FuseArray_TDI.row = 1;
	IF (ISENCRYPTED == 1)
	{
	}
	ELSE
	{
		TRY 1 {
			! Check the Security Fuse;
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x80);
		}
		ELSE
		{
			print (0,"The device Security Fuse is programmed. The Verification operation will be skipped.");
			ReturnCode = 1;
		}
		IF (ReturnCode == 0x00)
		{
			! Shift in LSCC RESET ADDRESS(0x21) instruction;
		    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
			RUN_TEST	IDLE TCK 3 DELAY 	PWV;
			! Shift in LSCC READ INCR RTI(0x6A) instruction;
		    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
			repeat Address_Length {
				RUN_TEST	IDLE TCK 3 DELAY 	PWV;
				! Shift Out Data Row = RowCount;
			    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
										TDO	(FuseArray_TDI);
				RowCount = RowCount +1;
			}
		}
	}
}
function FLASH_TAG_VERIFY {
	IF (ArchArray_TDI.row = 1)
	{
		! Shift in VERIFY TAG(0x72) instruction;
	    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
		RUN_TEST	IDLE TCK 3 DELAY 	PWV;
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
	}
}
function VERIFY_SED_CRC {
	IF (SEDArray_TDI.row = 1)
	{
		! Verify 32 bits SED_CRC;
		
		! Shift in READ_SED_CRC(0x44) instruction;
		SIR Instruction_Length TDI (READ_SED_CRC);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);						
	} 
}
function VERIFY_USERCODE {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				! Shift in READ USERCODE(0x17) instruction;
			    SIR Instruction_Length TDI (USERCODE);
			    RUN_TEST	TCK 3 DELAY 	PWV;
				SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
											TDO	(myASSP_Usercode_TDI);
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				! Shift in READ USERCODE(0x17) instruction;
			    SIR Instruction_Length TDI (USERCODE);
			    RUN_TEST	TCK 3 DELAY 	PWV;
				SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
											TDO	(Usercode_TDI);
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			! Shift in READ USERCODE(0x17) instruction;
		    SIR Instruction_Length TDI (USERCODE);
		    RUN_TEST	TCK 3 DELAY 	PWV;
			SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
										TDO	(Usercode_TDI);
		}
	}
}
function PROGRAM_SECURITY {
	print (0 ,"Securing the Device...");
	! Shift in ISC PROGRAM SECURITY(0x09) instruction;
    SIR Instruction_Length	TDI	(ISC_PROGRAM_SECURITY);
	RUN_TEST	IDLE TCK 	10 DELAY 	50;
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x80)
				  MASK(0x80);	
}
function SAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE"; 
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length	TDI	(IDCODE);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SVF_SAVE_ID	{
	! Shift in IDCODE(0x16) instruction;
    SIR Instruction_Length 	TDI (IDCODE);
	SDR_VERIFY	ID_Length	TDI (#1^ID_Length)
							TDO	(IDTDI[1])
							MASK (#0^ID_Length);
}
function SAVE_ARRAY {
	int32	RowCount = 1;
	datastream SavedFuseMap[Address_Length][Row_Width];
	file NewFile = "FILE_SAVE";

	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 3 DELAY 	PWV;
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	// Program the rest of the device 
	repeat Address_Length {
		// Goto Run Test Idle
		RUN_TEST	TCK 3 DELAY 	PWV;						
		! Shift Out Data Row = RowCount;
	    SDR Row_Width 	TDI (#0^Row_Width)
						TDO (SavedFuseMap);
		RowCount = RowCount +1;
	}
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SVF_SAVE_ARRAY {
	int32	RowCount = 1;
	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 3 DELAY 	PWV;
	
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	repeat Address_Length {
		RUN_TEST	TCK 3 DELAY 	PWV;
		! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(#1^Row_Width)
								MASK (#0^Row_Width);
		RowCount = RowCount +1;
	}
}

function SVF_CHECKSUM_ARRAY {
	int32	RowCount = 1;
	Address.row = 1;	
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 3 DELAY 	PWV;
	
	! Shift in LSCC READ INCR RTI(0x6A) instruction;
    SIR Instruction_Length	TDI	(LSCC_READ_INCR_RTI);
	
	repeat Address_Length {
		RUN_TEST	TCK 3 DELAY 	PWV;
		! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(#1^Row_Width)
								CMASK (#1^Row_Width);
		RowCount = RowCount +1;
	}
}

function FLASH_TAG_SAVE {
	datastream SavedTAGMap[1][Arch_Length];
	file NewFile = "FILE_SAVE";
	
	! Shift in VERIFY TAG(0x72) instruction;
    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
	RUN_TEST	TCK 3 DELAY 	PWV;
	! Shift Out TAG Memory Data;
    SDR	Arch_Length	TDI	(#0^Arch_Length)
					TDO	(SavedTAGMap);
	
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (ArchArray_TDI,SavedTAGMap);
	fclose 	NewFile;
}	
function SVF_FLASH_TAG_SAVE {
	! Shift in VERIFY TAG(0x72) instruction;
    SIR Instruction_Length	TDI	(LSCC_VERIFY_TAG);
	RUN_TEST	TCK 3 DELAY 	PWV;
	! Shift Out TAG Memory Data;
    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
							TDO	(#1^Arch_Length)
							MASK (#0^Arch_Length);
}
function SAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length	TDI (USERCODE);
    RUN_TEST	TCK 3 DELAY 	PWV;
	SDR	Usercode_Length	TDI(#1^Usercode_Length)
						TDO(SavedUsercode);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SVF_SAVE_USERCODE {
	
	! Shift in READ USERCODE(0x17) instruction;
    SIR Instruction_Length TDI (USERCODE);
    RUN_TEST	TCK 3 DELAY 	PWV;
	SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
								TDO	(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
}
function SAVE_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR	8	TDI(#1^8)
			TDO(SavedSTATUS[1]);
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}
function SVF_SAVE_STATUS {
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	SDR_VERIFY 	8 TDI (#1^8)
				   TDO	(#1^8)
				   MASK(#0^8);
}
function SERIAL_READ_DONE_BIT {
	datastream SavedDONE_BIT[1][1];
	file	NewFile = "FILE_SAVE"; 
	
	SDR 1	TDI	(0x00)
			TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}
function READ_DONE_BIT {
	datastream SavedDONE_BIT[1][Instruction_Length];
	file	NewFile = "FILE_SAVE"; 
	
	! Shift in BYPASS(0xFF) instruction;
    SIR Instruction_Length	TDI	(BYPASS)
							TDO (SavedDONE_BIT);
	// Write To File 
	fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (DONE_BIT, SavedDONE_BIT);
	fclose 	NewFile;
}

function SAVE_SED_CRC {
	datastream SavedSEDMap[1][32];
	file NewFile = "FILE_SAVE";
	
	! Shift in READ_SED_CRC(0x44) instruction;
	SIR Instruction_Length TDI (READ_SED_CRC);
	RUN_TEST IDLE TCK 3 DELAY PWV;
	! Shift out SED_CRC Data; 
	SDR	32	TDI	(#0^32) TDO (SavedSEDMap);
	// Write To file 
	fopen NewFile att "wa" format "SVF_Plus";	
	fwrite NewFile (SEDArray_TDI,SavedSEDMap);
	fclose 	NewFile;
}	
function SAVE_SED {
	datastream SavedSED[1][32];
	file NewFile = "FILE_SAVE";	
						
	! Shift in READ_SED_CRC(0x44) instruction;
    SIR Instruction_Length	TDI (READ_SED_CRC);
    RUN_TEST	TCK 3 DELAY 	PWV;
	SDR	32	TDI(#1^32)
			TDO(SavedSED);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedSED);
	fclose 	NewFile;
}
function SVF_SAVE_SED_CRC {
	! Shift in READ_SED_CRC(0x44) instruction;
	SIR Instruction_Length TDI (READ_SED_CRC);
	RUN_TEST IDLE TCK 3 DELAY PWV;
	! Shift out SED_CRC Data; 
	SDR_VERIFY	32	TDI	(#0^32)
					TDO (#1^32)
					MASK(#0^32);
}
function SVF_CHECKSUM_SED_CRC {
	! Shift in READ_SED_CRC(0x44) instruction;
	SIR Instruction_Length TDI (READ_SED_CRC);
	RUN_TEST IDLE TCK 3 DELAY PWV;
	! Shift out SED_CRC Data; 
	SDR_VERIFY	32	TDI	(#0^32)
					TDO (#1^32)
					CMASK(#1^32);
}
function SVF_SAVE_DONE_BIT {
	! Shift in BYPASS(0xFF) instruction;
    SIR_VERIFY Instruction_Length	TDI	(BYPASS)
				TDO (#1^Instruction_Length)
				MASK(#0^Instruction_Length);
}
function REFRESH_FUNCTION {
	! Shift in LSCC REFRESH(0x23) instruction;
    SIR Instruction_Length	TDI (LSCC_REFRESH);
	RUN_TEST IDLE TCK 3 DELAY PWV; 

	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY 2000;
}	
function UPLOAD_FUNCTION {
	! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;

	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;

	! Shift in BYPASS(0xFF) instruction;
  	SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
}

function BURST_PROGRAM {
	FuseArray_TDI.row = 1;
	! Shift in LSCC RESET ADDRESS(0x21) instruction;
    SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	RUN_TEST	IDLE TCK 3 DELAY 	PWP;
	! Shift in LSCC BITSTREAM BURST(0x04) instruction;
    SIR Instruction_Length	TDI (LSCC_BITSTREAM_BURST);
	! Shift in TOTAL_FUSE_MAP bits;
    SDR	TotalFuse		TDI	(FuseArray_TDI);
	RUN_TEST	IDLE TCK 3 DELAY PWP;
}
function FLASH_MDR{
	! Shift in ISC SRAM ENABLE(0x55) instruction;
    SIR Instruction_Length TDI (ISC_SRAM_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
    ! Shift in ISC ERASE(0x03) instruction;
    SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	TCK 3 DELAY PWV;
	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	! Phase 2 Boundary Scan Locks Outputs;
    ! Shift in ISC ENABLE(0x15) instruction;
	SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
	! Phase 3 Device Configuration;
	! Shift in ISC DISABLE(0x1E) instruction;
  	SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY MDRDelay;
	! Phase 4 Boundary Scan Released;
	! Shift in WAKEUP(0x77) instruction;
  	SIR	Instruction_Length 	TDI (WAKEUP);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
}

function CHECK_KEYLOCK 
{
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
		    SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"The Encryption key is not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x04)
							  MASK(0x04); 							  
			}
			ELSE
			{				  
				print (0,"Note: The device does not need a Flash Protect key.");
			}	
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWP; 
			
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
				
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);			  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}	
		}
	}
	ELSE
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
		    SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY 10;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (0,"The device Encryption Feature is on.");
			print (0,"Please erase the Feature Row or ");
			print (1,"use an Encrypted JEDEC file.");
		}
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);			  			  
		}
		ELSE
		{	
			IF (ProtectKey.row = 1)
			{			  
				! Shift in PROTECT_SHIFT(0x41) instruction;
				SIR Instruction_Length TDI (PROTECT_SHIFT);
				SDR  64  TDI(ProtectKey[1]);
				RUN_TEST IDLE TCK 3 DELAY PWP; 
				
				TRY 1 {
					! Shift in READ STATUS(0xB2) instruction;
					SIR Instruction_Length TDI (READ_STATUS);
					RUN_TEST IDLE TCK 3 DELAY PWV; 
					SDR_VERIFY  8 TDI(0x00)
								  TDO(0x00)
								  MASK(0x04);						  
				}
				ELSE
				{				  
					! Shift in ISC DISABLE(0x1E) instruction;
				    SIR	Instruction_Length 	TDI (ISC_DISABLE);
					RUN_TEST	IDLE  TCK 3 DELAY 10;
					! Shift in BYPASS(0xFF) instruction;
    				SIR	Instruction_Length 	TDI (BYPASS);
					RUN_TEST	IDLE  TCK 3 DELAY PWV;
					print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
					print (1,"Please re-enter the Flash Protect key.");
				}
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}
		}	
	}	
}
function CHECK_PROTECT_KEY
{
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
		    SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"The Encryption key is not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x04)
							  MASK(0x04); 			  
			}
			ELSE
			{				  
				print (0,"Note: The device does not need a Flash Protect key.");
			}	
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
							  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}	
		}
	}
	ELSE
	{
		TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x40);
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (0,"The device Encryption Feature is on.");
			print (0,"Please erase the Feature Row or ");
			print (1,"use an Encrypted JEDEC file.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x04)
							  MASK(0x04); 
			}
			ELSE
			{				  
				print (0,"Note: The device does not need a Flash Protect key.");
			}
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);						  
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
		ELSE
		{
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV; 
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
			}
			ELSE
			{				  
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}
		}
	}
}
function CHECK_SECURITY_PROTECT_KEY
{
	TRY 1{
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
		SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The OTP is set. Cannot continue.");
	}
	IF (ISPROTECTED == 1)
	{
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x04)
						  MASK(0x04); 
						  
		}
		ELSE
		{				  
			print (0,"Note: The device does not need a Flash Protect key.");
		}	
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-93);
			print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
			print (1,"Please re-enter the Flash Protect key.");
		}
	}
	ELSE
	{
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);
						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-93);
			print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
		}
	}
}
function SVFCHECK_SECURITY_PROTECT_KEY
{
	TRY 1{
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
		SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The OTP is set. Cannot continue.");
	}
	IF (ISPROTECTED == 1)
	{			
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-93);
			print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
			print (1,"Please re-enter the Flash Protect key.");
		}
	}
	ELSE
	{
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x04);
						  
		}
		ELSE
		{				  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-93);
			print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
		}
	}
}
function PROGRAM_PROTECT_SECURITY_KEY
{
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	ProtectKey.row  = 1;
	
	print (0,"Programming the Flash Protect Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//64 bits protect fuses : Bits 1842 to 1905
		TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
		MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//64 bits protect fuses : Bits 587 to 650
		TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
		MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//64 bits protect fuses : Bits 520 to 583
    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
		MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//64 bits protect fuses : Bits 2184 to 2247
    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
		MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//64 bits protect fuses : Bits 2666 to 2729
    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
	}
	ProtectFeatureRow[1] = TDIFeatureRow[1];
	MaskProtectFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  		
	print (0, "Programming the Flash Protect Lock...");
	! Program the Flash Protect Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits lock fuse: Bits 1906 to 1909
		TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
		MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits lock fuse: Bits 651 to 654
		TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
		MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits lock fuse: Bits 584 to 587
    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
		MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits lock fuse: Bits 2248 to 2251
    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
		MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits lock fuse: Bits 2730 to 2733
    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
		MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
	}
	ProtectLockRow[1] = TDIFeatureRow[1];
	MaskProtectLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
						  		TDO(TDIFeatureRow[1])
						  		MASK(MaskFeatureRow[1]);
						  										  								  			
	print (0,"Programming the Encryption Keys...");
	! Program the Encryption Keys;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));    	
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0, "Programming the Feature Row Lock using the encryption key...");
	! Program the Feature Row Lock using the encryption key;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits Feature lock fuse: Bits 1915 to 1918
		TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
		MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits Feature lock fuse: Bits 660 to 664
		TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
		MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits Feature lock fuse: Bits 593 to 596
    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
		MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits Feature lock fuse: Bits 2257 to 2260
    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
		MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits Feature lock fuse: Bits 2739 to 2742
    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
		MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
	}
	FeatureLockRow[1] = TDIFeatureRow[1];
	MaskFeatureLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  					  		  		
	print (0,"Verify the Flash Protect keys...");
	! Verify the Flash Protect keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectFeatureRow[1])
				  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}
	print (0,"Verify the Flash Protect Lock...");
	! Verify the Flash Protect Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectLockRow[1])
				  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect Lock.");
	}
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
	
	print (0,"Verify the Feature Row Lock...");
	! Verify the Feature Row Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(FeatureLockRow[1])
				  		  		   MASK(MaskFeatureLockRow[1]); 
	}
	ELSE {		  
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 1000;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}	
}
function SVF_PROGRAM_PROTECT_SECURITY_KEY
{
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	ProtectKey.row  = 1;
	
	print (0,"Programming the Flash Protect Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//64 bits protect fuses : Bits 1842 to 1905
		TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
		MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//64 bits protect fuses : Bits 587 to 650
		TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
		MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//64 bits protect fuses : Bits 520 to 583
    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
		MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//64 bits protect fuses : Bits 2184 to 2247
    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
		MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//64 bits protect fuses : Bits 2666 to 2729
    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
	}
	ProtectFeatureRow[1] = TDIFeatureRow[1];
	MaskProtectFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  		
	print (0, "Programming the Flash Protect Lock...");
	! Program the Flash Protect Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits lock fuse: Bits 1906 to 1909
		TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
		MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits lock fuse: Bits 651 to 654
		TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
		MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits lock fuse: Bits 584 to 587
    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
		MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits lock fuse: Bits 2248 to 2251
    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
		MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits lock fuse: Bits 2730 to 2733
    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
		MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
	}
	ProtectLockRow[1] = TDIFeatureRow[1];
	MaskProtectLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
						  		TDO(TDIFeatureRow[1])
						  		MASK(MaskFeatureRow[1]);
						  										  								  			
	print (0,"Programming the Encryption Keys...");
	! Program the Encryption Keys;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));       	
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0, "Programming the Feature Row Lock using the encryption key...");
	! Program the Feature Row Lock using the encryption key;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits Feature lock fuse: Bits 1915 to 1918
		TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
		MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits Feature lock fuse: Bits 660 to 664
		TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
		MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits Feature lock fuse: Bits 593 to 596
    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
		MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits Feature lock fuse: Bits 2257 to 2260
    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
		MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits Feature lock fuse: Bits 2739 to 2742
    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
		MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
	}
	FeatureLockRow[1] = TDIFeatureRow[1];
	MaskFeatureLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  					  		  		
	print (0,"Verify the Flash Protect keys...");
	! Verify the Flash Protect keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectFeatureRow[1])
				  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}
	print (0,"Verify the Flash Protect Lock...");
	! Verify the Flash Protect Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectLockRow[1])
				  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect Lock.");
	}
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
	
	print (0,"Verify the Feature Row Lock...");
	! Verify the Feature Row Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(FeatureLockRow[1])
				  		  		   MASK(MaskFeatureLockRow[1]); 
	}
	ELSE {		  
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}	
}
function PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK
{
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	ProtectKey.row  = 1;
	
	print (0,"Programming the Flash Protect Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//64 bits protect fuses : Bits 1842 to 1905
		TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
		MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//64 bits protect fuses : Bits 587 to 650
		TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
		MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//64 bits protect fuses : Bits 520 to 583
    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
		MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//64 bits protect fuses : Bits 2184 to 2247
    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
		MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//64 bits protect fuses : Bits 2666 to 2729
    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
	}
	ProtectFeatureRow[1] = TDIFeatureRow[1];
	MaskProtectFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  		
	print (0, "Programming the Flash Protect Lock...");
	! Program the Flash Protect Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits lock fuse: Bits 1906 to 1909
		TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
		MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits lock fuse: Bits 651 to 654
		TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
		MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits lock fuse: Bits 584 to 587
    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
		MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits lock fuse: Bits 2248 to 2251
    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
		MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits lock fuse: Bits 2730 to 2733
    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
		MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
	}
	ProtectLockRow[1] = TDIFeatureRow[1];
	MaskProtectLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
						  		TDO(TDIFeatureRow[1])
						  		MASK(MaskFeatureRow[1]);
						  										  								  			
	print (0,"Programming the Encryption Keys...");
	! Program the Encryption Keys;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));      	
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0,"Verify the Flash Protect keys...");
	! Verify the Flash Protect keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectFeatureRow[1])
				  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}
	print (0,"Verify the Flash Protect Lock...");
	! Verify the Flash Protect Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectLockRow[1])
				  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect Lock.");
	}
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}		
	
}
function SVF_PROGRAM_PROTECT_SECURITY_KEY_NO_FEATURE_LOCK
{
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	ProtectKey.row  = 1;
	
	print (0,"Programming the Flash Protect Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//64 bits protect fuses : Bits 1842 to 1905
		TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
		MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//64 bits protect fuses : Bits 587 to 650
		TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
		MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//64 bits protect fuses : Bits 520 to 583
    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
		MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//64 bits protect fuses : Bits 2184 to 2247
    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
		MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//64 bits protect fuses : Bits 2666 to 2729
    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
	}
	ProtectFeatureRow[1] = TDIFeatureRow[1];
	MaskProtectFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  		
	print (0, "Programming the Flash Protect Lock...");
	! Program the Flash Protect Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits lock fuse: Bits 1906 to 1909
		TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
		MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits lock fuse: Bits 651 to 654
		TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
		MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits lock fuse: Bits 584 to 587
    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
		MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits lock fuse: Bits 2248 to 2251
    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
		MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits lock fuse: Bits 2730 to 2733
    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
		MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
	}
	ProtectLockRow[1] = TDIFeatureRow[1];
	MaskProtectLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
						  		TDO(TDIFeatureRow[1])
						  		MASK(MaskFeatureRow[1]);
						  										  								  			
	print (0,"Programming the Encryption Keys...");
	! Program the Encryption Keys;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));   
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0,"Verify the Flash Protect keys...");
	! Verify the Flash Protect keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectFeatureRow[1])
				  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}
	print (0,"Verify the Flash Protect Lock...");
	! Verify the Flash Protect Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(ProtectLockRow[1])
				  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect Lock.");
	}
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}		
	
}
function PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	
	print (0,"Programming the Encryption Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
}
function SVF_PROGRAM_SECURITY_KEY_NO_FEATURE_LOCK
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	
	print (0,"Programming the Encryption Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);

	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}	
	
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
}
function PROGRAM_SECURITY_KEY 
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	
	print (0,"Programming the Encryption Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);
	
	print (0, "Programming the Feature Lock...");
	! Program the Feature Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits Feature lock fuse: Bits 1915 to 1918
		TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
		MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits Feature lock fuse: Bits 660 to 664
		TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
		MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits Feature lock fuse: Bits 593 to 596
    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
		MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits Feature lock fuse: Bits 2257 to 2260
    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
		MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits Feature lock fuse: Bits 2739 to 2742
    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
		MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
	}
	FeatureLockRow[1] = TDIFeatureRow[1];
	MaskFeatureLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
	print (0,"Verify the Feature Row Lock...");
	! Verify the Feature Row Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(FeatureLockRow[1])
				  		  		   MASK(MaskFeatureLockRow[1]); 
	}
	ELSE {		  
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 1000;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}				  					  		  
}
function SVF_PROGRAM_SECURITY_KEY 
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream SecureFeatureRow[1][Real_Row_Width];
	datastream MaskSecureFeatureRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	datastream EncryptionEnableRow[1][Real_Row_Width];
	datastream MaskEnableRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	SecurityKey.row = 1;
	
	print (0,"Programming the Encryption Keys...");
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1840
		TDIFeatureRow[1] = ((#1^347)@ (SecurityKey[1]))@(#1^1713);
		MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 458 to 585
		TDIFeatureRow[1] = ((#1^186)@ (SecurityKey[1]))@(#1^458);
		MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 391 to 518
    	TDIFeatureRow[1] = ((#1^119)@ (SecurityKey[1]))@(#1^391);
		MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2055 to 2182
    	TDIFeatureRow[1] = ((#1^459)@ (SecurityKey[1]))@(#1^2055);
		MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2539 to 2665
    	SecurityKeyRemainBits[1] = (SecurityKey[1] >> 1);
    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]);    	
    	// Bit 2394 
    	FirstKeyBit[1] = SecurityKey[1] << 127;
    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	
    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    	MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
	}
	SecureFeatureRow[1] = TDIFeatureRow[1];
	MaskSecureFeatureRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  			  		  
	print (0, "Programming the Encryption Enable...");
	! Program the Encryption Enable;
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1918
		TDIFeatureRow[1] = ((#1^269)@ #0)@(#1^1918);
		MaskFeatureRow[1] = ((#0^269)@ #1)@(#0^1918);
	}
	ELSEIF (Real_Row_Width == 772)
    {
    	// LFXP2-8E
    	//Bits 663
		TDIFeatureRow[1] = ((#1^108)@ #0)@(#1^663);
		MaskFeatureRow[1] = ((#0^108)@ #1)@(#0^663);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	// Bits 596
    	TDIFeatureRow[1] = ((#1^41)@ #0)@(#1^596);
		MaskFeatureRow[1] = ((#0^41)@ #1)@(#0^596);	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	// Bits 2260
    	TDIFeatureRow[1] = ((#1^383)@ #0)@(#1^2260);
		MaskFeatureRow[1] = ((#0^383)@ #1)@(#0^2260);	
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	// Bits 2743
    	TDIFeatureRow[1] = ((#1^640)@ #0)@(#1^2743);
		MaskFeatureRow[1] = ((#0^640)@ #1)@(#0^2743);
	}
	EncryptionEnableRow[1] = TDIFeatureRow[1];
	MaskEnableRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
			  		  			TDO(TDIFeatureRow[1])
			  		  			MASK(MaskFeatureRow[1]);
	
	print (0, "Programming the Feature Lock...");
	! Program the Feature Lock;
    IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//4 bits Feature lock fuse: Bits 1915 to 1918
		TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
		MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
	}
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//4 bits Feature lock fuse: Bits 660 to 664
		TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
		MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
	}
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//4 bits Feature lock fuse: Bits 593 to 596
    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
		MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//4 bits Feature lock fuse: Bits 2257 to 2260
    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
		MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//4 bits Feature lock fuse: Bits 2739 to 2742
    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
		MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
	}
	FeatureLockRow[1] = TDIFeatureRow[1];
	MaskFeatureLockRow[1] = MaskFeatureRow[1];
	
	! Shift in PROGRAM_FEATURE(0xC0) instruction;
	SIR Instruction_Length TDI (PROGRAM_FEATURE);
	! Shift in Data; 
	SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);

	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
				  		  		TDO(TDIFeatureRow[1])
				  		  		MASK(MaskFeatureRow[1]);
				  		  
	print (0,"Verify the Encryption Keys...");
	! Verify the Encryption Keys;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(SecureFeatureRow[1])
				  		  		   MASK(MaskSecureFeatureRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Keys.");
	}
	print (0,"Verify the Encryption Enable...");
	! Verify the Encryption Enable;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(EncryptionEnableRow[1])
				  		  		   MASK(MaskEnableRow[1]);					  		  		    
	}
	ELSE {		  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Encryption Enable.");
	}	
	print (0,"Verify the Feature Row Lock...");
	! Verify the Feature Row Lock;
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				  		  		   TDO(FeatureLockRow[1])
				  		  		   MASK(MaskFeatureLockRow[1]); 
	}
	ELSE {		  
		! Shift in ERASE_FEATURE(0xC3) instruction;
		SIR Instruction_Length TDI (ERASE_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);

		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Program the Flash Protect keys.");
	}				  					  		  
}
function READ_SECURITY_KEY_FUSES
{
	datastream TDOFeatureRow[1][Real_Row_Width];
	datastream SecurityRow[1][128];
	datastream SecurityBit[1][1];
	datastream SecurityRemainBits[1][127];
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x40)
					  MASK(0x40);
		print (1,"The Encryption Enable fuse is on. Cannot read the key fuses.");			  
	}
	ELSE {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR  Real_Row_Width TDI(#1^Real_Row_Width)
					   TDO(TDOFeatureRow[1]);
		
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//Bits 1713 to 1840
	    	SecurityRow[1] = TDOFeatureRow[1] << 351;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
			
		}
		ELSEIF (Real_Row_Width == 772)
	    {
	    	// LFXP2-8E
	    	//Bits 458 to 585
	    	SecurityRow[1] = TDOFeatureRow[1] << 190;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
		}	
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//Bits 391 to 518
	    	SecurityRow[1] = TDOFeatureRow[1] << 123;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//Bits 2055 to 2182
	    	SecurityRow[1] = TDOFeatureRow[1] << 465;
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//Bits 2539 to 2665
	    	SecurityRemainBits[1] = TDOFeatureRow[1] << 717;
	    	//Bits 2394 
	    	SecurityBit[1] = TDOFeatureRow[1] << 982;
	    	SecurityBit[1] = SecurityBit[1] & 0x01;
	    	SecurityRow[1] = (SecurityRemainBits[1] @ SecurityBit[1]);
			print (0,"The Key fuses are:");
			print (0,SecurityRow);
		}
	}		  		  
	
}
function READ_PES_FUSES
{
	datastream SavedPESFuse[1][Real_Row_Width];
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x00000000000000000008000000000000000000000000004D);
    RUN_TEST	TCK 3 DELAY 	PWP;
    ! Shift in LSCC_READ_PES (0x11) instruction;
	SIR Instruction_Length TDI (LSCC_READ_PES);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	SDR Real_Row_Width TDI (#1^40)
			 	  TDO (SavedPESFuse);					  
	print (0,SavedPESFuse);
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x000000000000000000000000000000000000000000000000);	
}
function SVF_READ_PES_FUSES
{
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x00000000000000000008000000000000000000000000004D);
    RUN_TEST	TCK 3 DELAY 	PWP;
    ! Shift in LSCC_READ_PES (0x11) instruction;
	SIR Instruction_Length TDI (LSCC_READ_PES);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	SDR_VERIFY Real_Row_Width  TDI (#1^Real_Row_Width)
			 	  	    TDO (#1^Real_Row_Width)
			 	  	    MASK (#0^Real_Row_Width);					  
	! Shift in LSCC_MANUFACTURING_SHIFT(0x80) instruction;
    SIR Instruction_Length	TDI (LSCC_MANUFACTURING_SHIFT);
    SDR 188	TDI	(0x000000000000000000000000000000000000000000000000);	
}
function PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK 
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
			  
	IF (ISPROTECTED == 1)
	{
		print (0,"Programming the Flash Protect Keys...");
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//64 bits protect fuses : Bits 1842 to 1905
			TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
			MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//64 bits protect fuses : Bits 587 to 650
			TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
			MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//64 bits protect fuses : Bits 520 to 583
	    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
			MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//64 bits protect fuses : Bits 2184 to 2247
	    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
			MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//64 bits protect fuses : Bits 2666 to 2729
	    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
	    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
		}
		ProtectFeatureRow[1] = TDIFeatureRow[1];
		MaskProtectFeatureRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
					  		  		TDO(TDIFeatureRow[1])
					  		  		MASK(MaskFeatureRow[1]);
					  		  		
		print (0, "Programming the Flash Protect Lock...");
		! Program the Flash Protect Lock;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits lock fuse: Bits 1906 to 1909
			TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
			MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits lock fuse: Bits 651 to 654
			TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
			MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits lock fuse: Bits 584 to 587
	    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
			MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits lock fuse: Bits 2248 to 2251
	    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
			MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits lock fuse: Bits 2730 to 2733
	    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
			MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
		}
		ProtectLockRow[1] = TDIFeatureRow[1];
	    MaskProtectLockRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
							  		TDO(TDIFeatureRow[1])
							  		MASK(MaskFeatureRow[1]);
		
		
		print (0,"Verify the Flash Protect keys...");
		! Verify the Flash Protect keys;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectFeatureRow[1])
					  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}	
		print (0,"Verify the Flash Protect Lock...");
		! Verify the Flash Protect Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectLockRow[1])
					  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect Lock.");
		}							  								  		
	}				  				  		  		  
}
function SVF_PROGRAM_PROTECT_KEY_NO_FEATURE_LOCK 
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
			  
	IF (ISPROTECTED == 1)
	{
		print (0,"Programming the Flash Protect Keys...");
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//64 bits protect fuses : Bits 1842 to 1905
			TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
			MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//64 bits protect fuses : Bits 587 to 650
			TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
			MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//64 bits protect fuses : Bits 520 to 583
	    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
			MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//64 bits protect fuses : Bits 2184 to 2247
	    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
			MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//64 bits protect fuses : Bits 2666 to 2729
	    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
	    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
		}
		ProtectFeatureRow[1] = TDIFeatureRow[1];
		MaskProtectFeatureRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);

		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
					  		  		TDO(TDIFeatureRow[1])
					  		  		MASK(MaskFeatureRow[1]);
					  		  		
		print (0, "Programming the Flash Protect Lock...");
		! Program the Flash Protect Lock;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits lock fuse: Bits 1906 to 1909
			TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
			MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits lock fuse: Bits 651 to 654
			TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
			MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits lock fuse: Bits 584 to 587
	    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
			MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits lock fuse: Bits 2248 to 2251
	    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
			MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits lock fuse: Bits 2730 to 2733
	    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
			MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
		}
		ProtectLockRow[1] = TDIFeatureRow[1];
	    MaskProtectLockRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);

		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width 	TDI(#1^Real_Row_Width)
							  		TDO(TDIFeatureRow[1])
							  		MASK(MaskFeatureRow[1]);
		
		
		print (0,"Verify the Flash Protect keys...");
		! Verify the Flash Protect keys;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectFeatureRow[1])
					  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}	
		print (0,"Verify the Flash Protect Lock...");
		! Verify the Flash Protect Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectLockRow[1])
					  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect Lock.");
		}							  								  		
	}				  				  		  		  
}
function PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];	
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	datastream EncryptionRow[1][128];
	
	IF (ISPROTECTED == 1)
	{
		print (0,"Programming the Flash Protect Key...");
		EncryptionRow[1] = ((#1^64) @ (ProtectKey[1]));
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//64 bits protect fuses : Bits 1842 to 1905
			TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
			MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//64 bits protect fuses : Bits 587 to 650
			TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
			MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//64 bits protect fuses : Bits 520 to 583
	    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
			MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//64 bits protect fuses : Bits 2184 to 2247
	    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
			MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//64 bits protect fuses : Bits 2666 to 2729
	    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
	    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
		}
		ProtectFeatureRow[1] = TDIFeatureRow[1];
		MaskProtectFeatureRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
					  		  		TDO(TDIFeatureRow[1])
					  		  		MASK(MaskFeatureRow[1]);
		
		print (0, "Programming the Flash Protect Lock...");
		! Program the Flash Protect Lock;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits lock fuse: Bits 1906 to 1909
			TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
			MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits lock fuse: Bits 651 to 654
			TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
			MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits lock fuse: Bits 584 to 587
	    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
			MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits lock fuse: Bits 2248 to 2251
	    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
			MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits lock fuse: Bits 2730 to 2733
	    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
			MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
		}
		ProtectLockRow[1] = TDIFeatureRow[1];
		MaskProtectLockRow[1] = MaskFeatureRow[1];
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		       MASK(MaskFeatureRow[1]);
					  		  			  		  
		
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//Bits 1713 to 1840
			TDIFeatureRow[1] = ((#1^347)@ (EncryptionRow[1]))@(#1^1713);
			MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
		}
		ELSEIF (Real_Row_Width == 772)
	    {
	    	// LFXP2-8E
	    	//Bits 458 to 585
			TDIFeatureRow[1] = ((#1^186)@ (EncryptionRow[1]))@(#1^458);
			MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	// Bits 391 to 518
	    	TDIFeatureRow[1] = ((#1^119)@ (EncryptionRow[1]))@(#1^391);
			MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	// Bits 2055 to 2182
	    	TDIFeatureRow[1] = ((#1^459)@ (EncryptionRow[1]))@(#1^2055);
			MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {	    	
	    	// LFXP2-40E
	    	//Bits 2539 to 2665
	    	SecurityKeyRemainBits[1] = (EncryptionRow[1] >> 1);
	    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]); 
	    	// Bit 2394 
	    	FirstKeyBit[1] = EncryptionRow[1] << 127;
	    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;  	    	
	    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    		MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
		}
		FeatureLockRow[1] = TDIFeatureRow[1];
		MaskFeatureLockRow[1] = MaskFeatureRow[1];

		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		  	   MASK(MaskFeatureRow[1]);
		
		print (0, "Programming the Feature Row Lock using the protection key...");
		! Program the Feature Row Lock using the protection key;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits Feature lock fuse: Bits 1915 to 1918
			TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
			MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits Feature lock fuse: Bits 660 to 664
			TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
			MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits Feature lock fuse: Bits 593 to 596
	    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
			MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits Feature lock fuse: Bits 2257 to 2260
	    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
			MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits Feature lock fuse: Bits 2739 to 2742
	    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
			MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
		}
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 1000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		loop 100 {
			RUN_TEST IDLE  TCK 3 DELAY 100;
			SDR_VERIFY 1 TDI(#0) TDO(#1);
		}
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		       TDO(TDIFeatureRow[1])
					  		       MASK(MaskFeatureRow[1]);
					  		       
		print (0,"Verify the Flash Protect keys...");
		! Verify the Flash Protect keys;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectFeatureRow[1])
					  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ERASE_FEATURE(0xC3) instruction;
			SIR Instruction_Length TDI (ERASE_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY 1000; 
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop 100 {
				RUN_TEST IDLE  TCK 3 DELAY 1000;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}	
		
		print (0,"Verify the Flash Protect Lock...");
		! Verify the Flash Protect Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectLockRow[1])
					  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect Lock.");
		}
	
		print (0,"Verify the Feature Row Lock...");	
		! Verify the Feature Row Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(FeatureLockRow[1])
					  		  		   MASK(MaskFeatureLockRow[1]); 
		}
		ELSE {		  
			! Shift in ERASE_FEATURE(0xC3) instruction;
			SIR Instruction_Length TDI (ERASE_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY 1000; 
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop 100 {
				RUN_TEST IDLE  TCK 3 DELAY 1000;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}
	}			  				  		  		  
}
function SVF_PROGRAM_PROTECT_KEY_WITH_FEATURE_LOCK
{	   
	datastream TDIFeatureRow[1][Real_Row_Width];
	datastream MaskFeatureRow[1][Real_Row_Width];	
	datastream ProtectFeatureRow[1][Real_Row_Width];
	datastream MaskProtectFeatureRow[1][Real_Row_Width];
	datastream ProtectLockRow[1][Real_Row_Width];
	datastream MaskProtectLockRow[1][Real_Row_Width];
	datastream FeatureLockRow[1][Real_Row_Width];
	datastream MaskFeatureLockRow[1][Real_Row_Width];
	datastream FirstKeyBit[1][1];
	datastream SecurityKeyRemainBits[1][127];
	datastream SKeyRemainBits[1][128];
	datastream EncryptionRow[1][128];
	
	IF (ISPROTECTED == 1)
	{
		print (0,"Programming the Flash Protect Key...");
		EncryptionRow[1] = ((#1^64) @ (ProtectKey[1]));
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//64 bits protect fuses : Bits 1842 to 1905
			TDIFeatureRow[1] = ((#1^283)@ (ProtectKey[1]))@(#1^1841);
			MaskFeatureRow[1] = ((#0^283)@ (#1^64))@(#0^1841);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//64 bits protect fuses : Bits 587 to 650
			TDIFeatureRow[1] = ((#1^122)@ (ProtectKey[1]))@(#1^586);
			MaskFeatureRow[1] = ((#0^122)@ (#1^64))@(#0^586);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//64 bits protect fuses : Bits 520 to 583
	    	TDIFeatureRow[1] = ((#1^55)@ (ProtectKey[1]))@(#1^519);
			MaskFeatureRow[1] = ((#0^55)@ (#1^64))@(#0^519);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//64 bits protect fuses : Bits 2184 to 2247
	    	TDIFeatureRow[1] = ((#1^397)@ (ProtectKey[1]))@(#1^2183);
			MaskFeatureRow[1] = ((#0^397)@ (#1^64))@(#0^2183);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//64 bits protect fuses : Bits 2666 to 2729
	    	TDIFeatureRow[1] = ((#1^654)@ (ProtectKey[1]))@(#1^2666);
	    	MaskFeatureRow[1] = ((#0^654)@ (#1^64))@(#0^2666);
		}
		ProtectFeatureRow[1] = TDIFeatureRow[1];
		MaskProtectFeatureRow[1] = MaskFeatureRow[1];
		
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width  TDI(#1^Real_Row_Width)
					  		  		TDO(TDIFeatureRow[1])
					  		  		MASK(MaskFeatureRow[1]);
		
		print (0, "Programming the Flash Protect Lock...");
		! Program the Flash Protect Lock;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits lock fuse: Bits 1906 to 1909
			TDIFeatureRow[1] = ((#1^281)@ (#0110))@(#1^1905);
			MaskFeatureRow[1] = ((#0^281)@ (#1^4))@(#0^1905);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits lock fuse: Bits 651 to 654
			TDIFeatureRow[1] = ((#1^120)@ (#0110))@(#1^650);
			MaskFeatureRow[1] = ((#0^120)@ (#1^4))@(#0^650);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits lock fuse: Bits 584 to 587
	    	TDIFeatureRow[1] = ((#1^53)@ (#0110))@(#1^583);
			MaskFeatureRow[1] = ((#0^53)@ (#1^4))@(#0^583);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits lock fuse: Bits 2248 to 2251
	    	TDIFeatureRow[1] = ((#1^395)@ (#0110))@(#1^2247);
			MaskFeatureRow[1] = ((#0^395)@ (#1^4))@(#0^2247);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits lock fuse: Bits 2730 to 2733
	    	TDIFeatureRow[1] = ((#1^650)@ (#0110))@(#1^2730);
			MaskFeatureRow[1] = ((#0^650)@ (#1^4))@(#0^2730);
		}
		ProtectLockRow[1] = TDIFeatureRow[1];
		MaskProtectLockRow[1] = MaskFeatureRow[1];
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		       MASK(MaskFeatureRow[1]);
					  		  			  		  
		
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//Bits 1713 to 1840
			TDIFeatureRow[1] = ((#1^347)@ (EncryptionRow[1]))@(#1^1713);
			MaskFeatureRow[1] = ((#0^347)@ (#1^128))@(#0^1713);
		}
		ELSEIF (Real_Row_Width == 772)
	    {
	    	// LFXP2-8E
	    	//Bits 458 to 585
			TDIFeatureRow[1] = ((#1^186)@ (EncryptionRow[1]))@(#1^458);
			MaskFeatureRow[1] = ((#0^186)@ (#1^128))@(#0^458);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	// Bits 391 to 518
	    	TDIFeatureRow[1] = ((#1^119)@ (EncryptionRow[1]))@(#1^391);
			MaskFeatureRow[1] = ((#0^119)@ (#1^128))@(#0^391);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	// Bits 2055 to 2182
	    	TDIFeatureRow[1] = ((#1^459)@ (EncryptionRow[1]))@(#1^2055);
			MaskFeatureRow[1] = ((#0^459)@ (#1^128))@(#0^2055);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	    	
	    	// LFXP2-40E
	    	//Bits 2539 to 2665
	    	SecurityKeyRemainBits[1] = (EncryptionRow[1] >> 1);
	    	SKeyRemainBits[1] = ((#1) @ SecurityKeyRemainBits[1]); 
	    	// Bit 2394 
	    	FirstKeyBit[1] = EncryptionRow[1] << 127;
	    	FirstKeyBit[1] = FirstKeyBit[1] >> 7;    	    	
	    	TDIFeatureRow[1] =  ((#1^717)@(SKeyRemainBits[1]) @(#1^144) )@( (FirstKeyBit[1]) @ (#1^2394));    	
    		MaskFeatureRow[1] = ((#0^718)@(#1^127))@(#0^144)@((#1^1)@(#0^2394));  
		}
		FeatureLockRow[1] = TDIFeatureRow[1];
		MaskFeatureLockRow[1] = MaskFeatureRow[1];

		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);

		
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  	   TDO(TDIFeatureRow[1])
					  		  	   MASK(MaskFeatureRow[1]);
		
		print (0, "Programming the Feature Row Lock using the protection key...");
		! Program the Feature Row Lock using the protection key;
	    IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//4 bits Feature lock fuse: Bits 1915 to 1918
			TDIFeatureRow[1] = ((#1^270)@ (#0110))@(#1^1914);
			MaskFeatureRow[1] = ((#0^270)@ (#1^4))@(#0^1914);
		}
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//4 bits Feature lock fuse: Bits 660 to 664
			TDIFeatureRow[1] = ((#1^109)@ (#0110))@(#1^659);
			MaskFeatureRow[1] = ((#0^109)@ (#1^4))@(#0^659);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//4 bits Feature lock fuse: Bits 593 to 596
	    	TDIFeatureRow[1] = ((#1^42)@ (#0110))@(#1^592);
			MaskFeatureRow[1] = ((#0^42)@ (#1^4))@(#0^592);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//4 bits Feature lock fuse: Bits 2257 to 2260
	    	TDIFeatureRow[1] = ((#1^384)@ (#0110))@(#1^2256);
			MaskFeatureRow[1] = ((#0^384)@ (#1^4))@(#0^2256);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//4 bits Feature lock fuse: Bits 2739 to 2742
	    	TDIFeatureRow[1] = ((#1^641)@ (#0110))@(#1^2739);
			MaskFeatureRow[1] = ((#0^641)@ (#1^4))@(#0^2739);
		}
		! Shift in PROGRAM_FEATURE(0xC0) instruction;
		SIR Instruction_Length TDI (PROGRAM_FEATURE);
		! Shift in Data; 
		SDR	Real_Row_Width	TDI	(TDIFeatureRow[1]);
		RUN_TEST IDLE TCK 3 DELAY 10000; 
		! Shift in ISC PROGRAM/STATUS(0x52) instruction;
		SIR Instruction_Length	TDI (PGM_STATUS);
		SDR_VERIFY 1 TDI(#0) TDO(#1);

		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		       TDO(TDIFeatureRow[1])
					  		       MASK(MaskFeatureRow[1]);
					  		       
		print (0,"Verify the Flash Protect keys...");
		! Verify the Flash Protect keys;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectFeatureRow[1])
					  		  		   MASK(MaskProtectFeatureRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ERASE_FEATURE(0xC3) instruction;
			SIR Instruction_Length TDI (ERASE_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY 10000; 
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			SDR_VERIFY 1 TDI(#0) TDO(#1);

			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}	
		
		print (0,"Verify the Flash Protect Lock...");
		! Verify the Flash Protect Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(ProtectLockRow[1])
					  		  		   MASK(MaskProtectLockRow[1]);					  		  		    
		}
		ELSE {		  
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect Lock.");
		}
	
		print (0,"Verify the Feature Row Lock...");	
		! Verify the Feature Row Lock;
		TRY 1 {
			! Shift in READ_FEATURE(0xC4) instruction;
			SIR Instruction_Length TDI (READ_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
					  		  		   TDO(FeatureLockRow[1])
					  		  		   MASK(MaskFeatureLockRow[1]); 
		}
		ELSE {		  
			! Shift in ERASE_FEATURE(0xC3) instruction;
			SIR Instruction_Length TDI (ERASE_FEATURE);
			RUN_TEST IDLE TCK 3 DELAY 1000; 
			! Shift in ISC PROGRAM/STATUS(0x52) instruction;
			SIR Instruction_Length	TDI (PGM_STATUS);
			loop 100 {
				RUN_TEST IDLE  TCK 3 DELAY 1000;
				SDR_VERIFY 1 TDI(#0) TDO(#1);
			}
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			print (1,"Failed to Program the Flash Protect keys.");
		}
	}			  				  		  		  
}
function READ_PROTECT_KEY_FUSES
{
	datastream TDOFeatureRow[1][Real_Row_Width];
	datastream ProtectionRow[1][64];
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x20)
					  MASK(0x20);
		print (1,"The Flash Protect lock is enabled. Cannot read the Flash Protect key fuses.");			  
	}
	ELSE {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR  Real_Row_Width TDI(#1^Real_Row_Width)
					   TDO(TDOFeatureRow[1]);
		
		IF (Real_Row_Width == 2188)
	    {
	    	// LFXP2-17E
	    	//Bits 1842 to 1905
	    	ProtectionRow[1] = TDOFeatureRow[1] << 288;
			print (0,"The Flash Protect key fuses are:");
			print (0,ProtectionRow);
			
		}	
		ELSEIF (Real_Row_Width == 772)
		{
			// LFXP2-8E
			//Bits 587 to 650
	    	ProtectionRow[1] = TDOFeatureRow[1] << 127;
			print (0,"The Flash Protect key fuses are:");
			print (0,ProtectionRow);
		}
		ELSEIF (Real_Row_Width == 638)
	    {
	    	// LFXP2-5E
	    	//Bits 520 to 583
	    	ProtectionRow[1] = TDOFeatureRow[1] << 60;
			print (0,"The Flash Protect key fuses are:");
			print (0,ProtectionRow);
		}
		ELSEIF (Real_Row_Width == 2644)
	    {
	    	// LFXP2-30E
	    	//Bits 2184 to 2247
	    	ProtectionRow[1] = TDOFeatureRow[1] << 402;
			print (0,"The Flash Protect key fuses are:");
			print (0,ProtectionRow);
		}
		ELSEIF (Real_Row_Width == 3384)
	    {
	    	// LFXP2-40E
	    	//Bits 2667 to 2730
	    	ProtectionRow[1] = TDOFeatureRow[1] << 654;
			print (0,"The Flash Protect key fuses are:");
			print (0,ProtectionRow);
		}
	}		  		  
}
function SVF_READ_PROTECT_KEY_FUSES
{
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x20)
				  MASK(0x20);
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				   		TDO(#1^Real_Row_Width)
				   		MASK(#0^Real_Row_Width);	  		  
}
function CHECK_FEATURE_ROW_ERASE
{
	
	TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
		SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The OTP is set. Cannot continue.");
	}
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x08);			  
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (0,"The Feature Row Lock is programmed.");
		print (1,"Please erase the Feature Row first.");
	}
}
function CHECK_FEATURE_ROW
{
	TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
		SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The OTP is set. Cannot continue.");
	}
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x08);			  
	}
	ELSE
	{
		IF (ProtectKey.row = 1)
		{
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(ProtectKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV;
				SDR_VERIFY	8	TDI(#1^8)
								TDO(0x00)
								MASK(0x08);								
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-94);
				print (1,"Incorrect Feature Row unlock key. Please re-enter.");
			}
		}		
		ELSEIF (SecurityKey.row = 1)
		{
			! Shift in PROTECT_SHIFT(0x41) instruction;
			SIR Instruction_Length TDI (PROTECT_SHIFT);
			SDR  64  TDI(SecurityKey[1]);
			RUN_TEST IDLE TCK 3 DELAY PWP; 
			TRY 1 {
				! Shift in READ STATUS(0xB2) instruction;
				SIR Instruction_Length TDI (READ_STATUS);
				RUN_TEST IDLE TCK 3 DELAY PWV;
				SDR_VERIFY	8	TDI(#1^8)
								TDO(0x00)
								MASK(0x08);
			}
			ELSE
			{
				! Shift in ISC DISABLE(0x1E) instruction;
			    SIR	Instruction_Length 	TDI (ISC_DISABLE);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				! Shift in BYPASS(0xFF) instruction;
    			SIR	Instruction_Length 	TDI (BYPASS);
				RUN_TEST	IDLE  TCK 3 DELAY PWV;
				set_return_code (-93);	
				print (1,"Incorrect Feature Row unlock key. Please re-enter.");
				
			}  
		}
		ELSE
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-91);
			print (1,"The Feature Row is locked. Please provide the key.");
		}
	}
}
function SVF_CHECK_FEATURE_ROW
{
	TRY 1{
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV; 
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
	}
	ELSE
	{				  
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
		SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"The OTP is set. Cannot continue.");
	}
	
	IF (SecurityKey.row = 1)
	{
		// Check the Flash Protect key			  
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(SecurityKey[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV;
			SDR_VERIFY	8	TDI(#1^8)
							TDO(0x00)
							MASK(0x08);
		}
		ELSE
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-94);
			print (1,"Incorrect Feature Row unlock key. Please re-enter.");
		}
	}
	IF (ProtectKey.row = 1)
	{
		// Check the Flash Protect key			  
		! Shift in PROTECT_SHIFT(0x41) instruction;
		SIR Instruction_Length TDI (PROTECT_SHIFT);
		SDR  64  TDI(ProtectKey[1]);
		RUN_TEST IDLE TCK 3 DELAY PWP; 
		TRY 1 {
			! Shift in READ STATUS(0xB2) instruction;
			SIR Instruction_Length TDI (READ_STATUS);
			RUN_TEST IDLE TCK 3 DELAY PWV;
			SDR_VERIFY	8	TDI(#1^8)
							TDO(0x00)
							MASK(0x08);
		}
		ELSE
		{
			! Shift in ISC DISABLE(0x1E) instruction;
		    SIR	Instruction_Length 	TDI (ISC_DISABLE);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			! Shift in BYPASS(0xFF) instruction;
    		SIR	Instruction_Length 	TDI (BYPASS);
			RUN_TEST	IDLE  TCK 3 DELAY PWV;
			set_return_code (-94);
			print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
			print (1,"Please re-enter the Flash Protect key.");
		}
	}
}
function FEATURE_ROW_ERASE
{				
	print (0,"Erasing the Feature Row...");
	! Shift in ERASE_FEATURE(0xC3) instruction;
	SIR Instruction_Length TDI (ERASE_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY 1000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop 100 {
		RUN_TEST IDLE  TCK 3 DELAY 1000;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
		
	print (0,"Erasing the Flash Configuration Array...");
	! Erase the Flash Configuration Array; 
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	loop PWE {
		RUN_TEST IDLE  TCK 3 DELAY 100;
		SDR_VERIFY 1 TDI(#0) TDO(#1);
	}		   
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;	
	
	print (0,"Verify the Feature Row..."); 
	! Verify the Feature Row;
	
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				   				   TDO(#1^Real_Row_Width);
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Erase the Feature row.");
	}	
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		SDR_VERIFY	8	TDI(#1^8)
						TDO(0x00)
						MASK(0x7D);
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Erase the Feature row.");
	}			   				   		   
}
function SVF_FEATURE_ROW_ERASE
{				
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	print (0,"Erasing the Feature Row...");
	! Shift in ERASE_FEATURE(0xC3) instruction;
	SIR Instruction_Length TDI (ERASE_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY 10000; 
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY 200;
	! Shift in BYPASS(0xFF) instruction;
    SIR	Instruction_Length 	TDI (BYPASS);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;
		
	print (0,"Erasing the Flash Configuration Array...");
	! Erase the Flash Configuration Array; 
	! Shift in ISC ERASE(0x03) instruction;
	SIR Instruction_Length TDI (ISC_ERASE);
	RUN_TEST 	IDLE  TCK 3 DELAY Erase_pulse;
	! Shift in ISC PROGRAM/STATUS(0x52) instruction;
	SIR Instruction_Length	TDI (PGM_STATUS);
	SDR_VERIFY 1 TDI(#0) TDO(#1);	
	
	! Shift in ISC DISABLE(0x1E) instruction;
    SIR	Instruction_Length 	TDI (ISC_DISABLE);
	RUN_TEST	IDLE  TCK 3 DELAY PWV;
	! Shift in ISC ENABLE(0x15) instruction;
    SIR Instruction_Length TDI (ISC_ENABLE);
	RUN_TEST	IDLE	TCK 3 DELAY PWV;	
	
	print (0,"Verify the Feature Row..."); 
	! Verify the Feature Row;
	
	TRY 1 {
		! Shift in READ_FEATURE(0xC4) instruction;
		SIR Instruction_Length TDI (READ_FEATURE);
		RUN_TEST IDLE TCK 3 DELAY PWV; 
		SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				   				   TDO(#1^Real_Row_Width);
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Erase the Feature row.");
	}	
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		SDR_VERIFY	8	TDI(#1^8)
						TDO(0x00)
						MASK(0x7D);
	}
	ELSE
	{
		! Shift in ISC DISABLE(0x1E) instruction;
	    SIR	Instruction_Length 	TDI (ISC_DISABLE);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		! Shift in BYPASS(0xFF) instruction;
    	SIR	Instruction_Length 	TDI (BYPASS);
		RUN_TEST	IDLE  TCK 3 DELAY PWV;
		print (1,"Failed to Erase the Feature row.");
	}			   				   		   
}
function FEATURE_ROW_READ
{
	datastream TDOFeatureRow[1][Real_Row_Width];
	datastream FeatureRow[1][205];
	datastream SecurityBit[1][1];
	datastream SecurityRemainBits[1][127];
	datastream FeatureRemainBits[1][73];
	
	TRY 1 {
		! Shift in READ STATUS(0xB2) instruction;
		SIR Instruction_Length TDI (READ_STATUS);
		RUN_TEST IDLE TCK 3 DELAY PWV;
		SDR_VERIFY	8	TDI(#1^8)
						TDO(0x00)
						MASK(0x60);
	}
	ELSE
	{
		print (0,"Note: The Feature row is secured.");
	}
	
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR  Real_Row_Width TDI(#1^Real_Row_Width)
				   TDO(TDOFeatureRow[1]);
	IF (Real_Row_Width == 2188)
    {
    	// LFXP2-17E
    	//Bits 1713 to 1919
    	FeatureRow[1] = TDOFeatureRow[1] << 272;
		print (0,"The Feature row fuses are:");
		print (0,FeatureRow);
	}	
	ELSEIF (Real_Row_Width == 772)
	{
		// LFXP2-8E
		//Bits 458 to 664
    	FeatureRow[1] = TDOFeatureRow[1] << 111;
		print (0,"The Feature row fuses are:");
		print (0,FeatureRow);
	}		
	ELSEIF (Real_Row_Width == 638)
    {
    	// LFXP2-5E
    	//Bits 391 to 597
    	FeatureRow[1] = TDOFeatureRow[1] << 44;
		print (0,"The Feature row fuses are:");
		print (0,FeatureRow);
    	
	}
	ELSEIF (Real_Row_Width == 2644)
    {
    	// LFXP2-30E
    	//Bits 2055 to 2261
    	FeatureRow[1] = TDOFeatureRow[1] << 386;
		print (0,"The Feature row fuses are:");
		print (0,FeatureRow);
	}
	ELSEIF (Real_Row_Width == 3384)
    {
    	// LFXP2-40E
    	//Bits 2666 to 2744
	    FeatureRemainBits[1] = TDOFeatureRow[1] << 638;
	    //Bits 2539 to 2665
    	SecurityRemainBits[1] = TDOFeatureRow[1] << 717;
    	//Bits 2394 
    	SecurityBit[1] = TDOFeatureRow[1] << 982;
    	SecurityBit[1] = SecurityBit[1] & 0x01;
    	//Bits 2539 to 2744
    	FeatureRow[1] = FeatureRemainBits[1] @ (SecurityRemainBits[1] @ SecurityBit[1]);
		print (0,"The Feature row fuses are:");
		print (0,FeatureRow);
	}	   		   
}				
function SVF_FEATURE_ROW_READ
{
	! Shift in READ_FEATURE(0xC4) instruction;
	SIR Instruction_Length TDI (READ_FEATURE);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR_VERIFY  Real_Row_Width TDI(#1^Real_Row_Width)
				   			   TDO(#1^Real_Row_Width)
				   			   MASK(#0^Real_Row_Width);	   
}				 			 		
function SPIINIT {
	HDR 0;
	HIR 0;
	TDR 0;
	TIR 0;
	ENDDR DRPAUSE;
	FREQUENCY 1E6 HZ;
	setpin ISPEN HIGH;
	setpin ISPEN LOW;
	setpin ISPEN HIGH;
	Temp_Row_Width = Temp_Row_Width + 128;
}
function SPIREAD_ID {
	setpin ISPEN LOW;
	! Shift in IDCODE(0x98) opcode;
	SDR	32	TDI (0xFFFFFF19);
    SDR_VERIFY	32	TDI (0x00000000)
					TDO	(IDTDI[1])
					MASK (0xFFFFFFFF);
					
	setpin ISPEN HIGH;				        
}
function SPIXFLASH_ENABLE {
	setpin ISPEN LOW;
	! Shift in XPROGRAM ENABLE(0xAC) opcode;
    SDR 32 TDI (0xFFFFFF35);
    setpin ISPEN HIGH;
}
function SPISRAM_TRANSPARENT_READ_ENABLE {
	setpin ISPEN LOW;
	! Shift in LSCC_SRAM_TRANSPARENT_ENABLE(0xAE) opcode;
    SDR 32 TDI (0xFFFFFF75);
	setpin ISPEN HIGH;
}
function SPIDISABLE {
	setpin ISPEN LOW;
	! Shift in ISC DISABLE(0x78) opcode;
    SDR	32 	TDI (0xFFFFFF1E);
	setpin ISPEN HIGH;
	RUN_TEST TCK 200 DELAY 200;
}
function SPICHECK_STATUS {
	setpin ISPEN LOW;
	! Shift in READ STATUS(0x4D) opcode;
	SDR 32 TDI (0xFFFFFFB2);
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
	setpin ISPEN HIGH;				  	
}
function SPI_SAVE_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";
	setpin ISPEN LOW;
	! Shift in READ STATUS(0x4D) opcode;
	SDR 32 TDI (0xFFFFFFB2);
	SDR  8 TDI(#0^8)
		   TDO(SavedSTATUS[1]);
	print (0,SavedSTATUS);
	setpin ISPEN HIGH;	
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;			  	
}
function SPISVF_SAVE_STATUS {
	setpin ISPEN LOW;
	! Shift in READ STATUS(0x4D) opcode;
	SDR 32 TDI (0xFFFFFFB2);
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x00);
	setpin ISPEN HIGH;				  	
}
function SPIDIRECT_FLASH_ERASE {
	
	setpin ISPEN LOW;	
	! Shift in ISC ERASE DONE(0x24) opcode;
	SDR 32 TDI (0xFFFFFF24);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWV;
	setpin ISPEN LOW;	
	! Shift in ISC ERASE(0xC0) opcode;
	SDR 32 TDI (0xFFFFFF03);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWV;
	loop PWE {
		RUN_TEST DELAY 100;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;					
	}//loop
	setpin ISPEN HIGH;		
	
	setpin ISPEN LOW;
	! Shift in ISC DISABLE(0x78) opcode;
    SDR	32 	TDI (0xFFFFFF1E);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 ;
	
	setpin ISPEN LOW;
	! Shift in LSCC REFRESH(0xC4) opcode;
    SDR 32	TDI (0xFFFFFF23);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 200; 
	
	setpin ISPEN LOW;
	! Shift in XPROGRAM ENABLE(0xAC) opcode;
    SDR 32 TDI (0xFFFFFF35);
    setpin ISPEN HIGH;
	 
}
function SPIBACKGROUND_FLASH_ERASE {
	setpin ISPEN LOW;	
	! Shift in ISC ERASE(0xC0) opcode;
	SDR 32 TDI (0xFFFFFF03);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWV;
	loop PWE {
		RUN_TEST DELAY 100;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;					
	}//loop
	setpin ISPEN HIGH;		
}
function SPISVF_FLASH_ERASE {
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	
	setpin ISPEN LOW;	
	! Shift in ISC ERASE DONE(0x24) opcode;
	SDR 32 TDI (0xFFFFFF24);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWV;
	
	setpin ISPEN LOW;	
	! Shift in ISC ERASE(0xC0) opcode;
	SDR 32 TDI (0xFFFFFF03);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY Erase_pulse;
	setpin ISPEN LOW;
	! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
	SDR 32	TDI (0xFFFFFF52);
	SDR_VERIFY 1 TDI(#0)TDO(#1);
	setpin ISPEN HIGH;	
	
	setpin ISPEN LOW;
	! Shift in ISC DISABLE(0x78) opcode;
    SDR	32 	TDI (0xFFFFFF1E);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 ;
	
	setpin ISPEN LOW;
	! Shift in LSCC REFRESH(0xC4) opcode;
    SDR 32	TDI (0xFFFFFF23);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 200; 
	
	setpin ISPEN LOW;
	! Shift in XPROGRAM ENABLE(0xAC) opcode;
    SDR 32 TDI (0xFFFFFF35);
    setpin ISPEN HIGH;
    		   
}
function SPISVF_BACKGROUND_FLASH_ERASE {
	int32	Erase_pulse = 0;
	Erase_pulse = (PWE * 100);
	
	setpin ISPEN LOW;	
	! Shift in ISC ERASE(0xC0) opcode;
	SDR 32 TDI (0xFFFFFF03);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY Erase_pulse;
	setpin ISPEN LOW;
	! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
	SDR 32	TDI (0xFFFFFF52);
	SDR_VERIFY 1 TDI(#0)TDO(#1);
	setpin ISPEN HIGH;	
}
function SPIFLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		
		setpin ISPEN LOW;
		! Shift in TAG ERASE(0x0E) opcode;
		SDR 32 TDI (0xFFFFFF70);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWV;
		loop 50 {
			RUN_TEST DELAY 100;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;						
		}
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;			
		}
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in VERIFY TAG(0x4E) opcode;
	    SDR 32	TDI	(0xFFFFFF72);
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;	
										
	}
}
function SPISVF_FLASH_TAG_ERASE_PROGRAM_VERIFY {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase,Program and Verify TAG Memory;
		setpin ISPEN LOW;
		! Shift in TAG ERASE(0x0E) opcode;
		SDR 32 TDI (0xFFFFFF70);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY 10000;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;				   	    
	    setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;					   		
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in VERIFY TAG(0x4E) opcode;
	    SDR 32	TDI	(0xFFFFFF72);
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;									
	}
}
function SPIFLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		setpin ISPEN LOW;
		! Shift in TAG ERASE(0x0E) opcode;
		SDR 32 TDI (0xFFFFFF70);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWV;
		loop 50 {
			RUN_TEST DELAY 100;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;			
		}
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;			
		}
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;		   
	}
}
function SPISVF_FLASH_TAG_ERASE_PROGRAM {	
	IF (ArchArray_TDI.row = 1)
	{		
		! Erase and Program TAG Memory;
		//setpin ISPEN LOW;
		//! Shift in TAG ENABLE(0xCE) opcode;
	    //SDR 32 TDI (0xFFFFFF73);
		//setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in TAG ERASE(0x0E) opcode;
		SDR 32 TDI (0xFFFFFF70);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY 10000;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;	    				   
	    setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;				
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;	 	  
	}
}
function SPIFLASH_TAG_ERASE {	
	setpin ISPEN LOW;
	! Shift in TAG ERASE(0x0E) opcode;
	SDR 32 TDI (0xFFFFFF70);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWV;
	loop 50 {
		RUN_TEST DELAY 100;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;				
	} 	
	setpin ISPEN HIGH;
}
function SPISVF_FLASH_TAG_ERASE {
	setpin ISPEN LOW;
	! Shift in TAG ERASE(0x0E) opcode;
	SDR 32 TDI (0xFFFFFF70);
	setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 10000;
	setpin ISPEN LOW;
	! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
	SDR 32	TDI (0xFFFFFF52);
	SDR_VERIFY 1 TDI(#0)TDO(#1);
	setpin ISPEN HIGH;			      
}
function SPIPROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	datastream TDIArray[1][Temp_Row_Width];
	datastream TmpTDIFuseArray[1][Row_Width];
	int32	RowCount = 1;
	int32	i = 1;
	int32	j = 0;
	int32	k = 0;
	int32	OldRowwidth = 0;
	FuseArray_TDI.row = 1;
	Address.row = 1;
	Address[1] = #1@(#0^(Address_Length-1));
	setpin ISPEN LOW;
	! Shift in LSCC RESET ADDRESS(0x84) opcode;
	SDR 32	TDI (0xFFFFFF21);
	setpin ISPEN HIGH;	
	IF (ISENCRYPTED == 1)
	{
		TmpTDIFuseArray[1] = FuseArray_TDI[1];
		setpin ISPEN LOW;
		! Shift in RESET_16_CRC (0x63) opcode;
    	SDR 32	TDI (0xFFFFFFC6);
    	setpin ISPEN HIGH;
    	RUN_TEST TCK 3 ;
    	IF (ISUPDATEDCRC == 1)
    	{
    		setpin ISPEN LOW;				
			! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
			SDR 32	TDI (0xFFFFFF40);
			TDIArray[1] = ((TmpTDIFuseArray[1])@ (#0^128));
			! Shift in Data Row = RowCount; 
			SDR	Temp_Row_Width	TDI	(TDIArray[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 ;
    	}
    	ELSE
    	{
	    	setpin ISPEN LOW;				
			! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
			SDR 32	TDI (0xFFFFFF40);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(TmpTDIFuseArray[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 ;
		}
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;
		}
		setpin ISPEN HIGH;
		IF (Usercode_TDI.row = 1)
		{
			print (0,"Testing if encryption key in device matches the one used to encrypt the JEDEC file...");			
			print (0, "Verify First Data Frame 16-Bit CRC");			
			setpin ISPEN LOW;
			! Shift in READ_16_CRC (0xA3) opcode;
	    	SDR 32	TDI (0xFFFFFFC5);
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	TRY 1 {
	    		SDR_VERIFY 16 TDI(#0^16)
	    				  	  TDO(ArrayCRC16[1])
	    				  	  MASK(#1^16);
			}
			ELSE
			{
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 DELAY 200;
				print (0,"First data frame 16-bit CRC comparison failed.");
				print (1,"The 128-bit encryption key does not match the one used to encrypt the JEDEC file.");
			}
	    	setpin ISPEN HIGH;
		}
		RowCount = RowCount +1;		
    	repeat Address_Length-1 {
    		IF (ISUPDATEDCRC == 1)
	    	{
	    		setpin ISPEN LOW;				
				! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
				SDR 32	TDI (0xFFFFFF40);
				TDIArray[1] = ((FuseArray_TDI[RowCount])@ (#0^128));
				! Shift in Data Row = RowCount; 
				SDR	Temp_Row_Width	TDI	(TDIArray[1]);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 ;
	    	}
	    	ELSE
	    	{
				setpin ISPEN LOW;				
				! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
				SDR 32	TDI (0xFFFFFF40);
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 ;
			}
			loop PWP {
				RUN_TEST DELAY PWV;
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
				SDR 32	TDI (0xFFFFFF52);
				SDR_VERIFY 1 TDI(#0) TDO(#1);
				setpin ISPEN HIGH;
			}
			setpin ISPEN HIGH;
			RowCount = RowCount +1;
		} // repeat
		IF (Usercode_TDI.row = 1)
		{
			print (0, "Verify Device 16-Bit CRC");
			setpin ISPEN LOW;
			! Shift in READ_16_CRC (0xA3) opcode;
	    	SDR 32	TDI (0xFFFFFFC5);
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	TRY 1 {
				SDR_VERIFY 16 TDI(#0^16) 
		    				  TDO(ArrayCRC16[1])
		    				  MASK(#1^16);	   
			}
			ELSE
			{
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 DELAY 200;
				print (0,"Device 16-bit CRC comparison failed.");
				print (1,"The 128-bit encryption key does not match the one used to encrypt the JEDEC file.");
			}
	    	setpin ISPEN HIGH;
		}
	}
	ELSE
	{	
		OldRowwidth = Row_Width;
		j = (Row_Width%8);
		k = 0;
		IF (j != 0)
		{
			k = (8-j);
    		Row_Width = Row_Width + k;  
    	}  		
    	repeat Address_Length {
    		FuseArray_TDI[RowCount] = FuseArray_TDI[RowCount] << k;
    		setpin ISPEN LOW;				
			! Shift in PROGRAM INCR (0xE6) opcode;
			SDR 32	TDI (0xFFFFFF67);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI[RowCount]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 ;		
			loop PWP {
				RUN_TEST DELAY PWV;
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
				SDR 32	TDI (0xFFFFFF52);				
				SDR_VERIFY 1 TDI(#0) TDO(#1);
				setpin ISPEN HIGH;
			}
			setpin ISPEN HIGH;
			FuseArray_TDI[RowCount] = FuseArray_TDI[RowCount] >> k;			
			RowCount = RowCount +1;
		} // repeat
		Row_Width = OldRowwidth;  
	}
}
function SPISVF_PROGRAM_STATUS {
	datastream ArrayCRC16[1][16];
	datastream TDIArray[1][Temp_Row_Width];
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	setpin ISPEN LOW;
	! Shift in LSCC RESET ADDRESS(0x84) opcode;
	SDR 32	TDI (0xFFFFFF21);
	setpin ISPEN HIGH;	
	IF (ISENCRYPTED == 1)
	{
		setpin ISPEN LOW;
		! Shift in RESET_16_CRC (0x63) opcode;
    	SDR 32	TDI (0xFFFFFFC6);
    	setpin ISPEN HIGH;
    	IF (ISUPDATEDCRC == 1)
    	{
    		setpin ISPEN LOW;				
			! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
			SDR 32	TDI (0xFFFFFF40);
			TDIArray[1] = ((FuseArray_TDI[1])@ (#0^128));
			! Shift in Data Row = RowCount; 
			SDR	Temp_Row_Width	TDI	(TDIArray[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWP;
    	}
    	ELSE
    	{
	    	setpin ISPEN LOW;				
			! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
			SDR 32	TDI (0xFFFFFF40);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWP;
		}
		RowCount = RowCount +1;
		IF (Usercode_TDI.row = 1)
		{
			! Verify First Data Frame 16-Bit CRC;
			setpin ISPEN LOW;
			! Shift in READ_16_CRC (0xA3) opcode;
	    	SDR 32	TDI (0xFFFFFFC5);
	    	ArrayCRC16[1] = Usercode_TDI[1];
	    	SDR_VERIFY 16 TDI(#0^16)
	    				  TDO(ArrayCRC16[1])
	    				  MASK(#1^16);
	    	setpin ISPEN HIGH;
		}
    	repeat Address_Length-1 {
    		IF (ISUPDATEDCRC == 1)
    		{
    			setpin ISPEN LOW;				
				! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
				SDR 32	TDI (0xFFFFFF40);
				TDIArray[1] = ((FuseArray_TDI[RowCount])@ (#0^128));
				! Shift in Data Row = RowCount; 
				SDR	Temp_Row_Width	TDI	(TDIArray[1]);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 DELAY PWP;
    		}
    		ELSE
    		{
				setpin ISPEN LOW;				
				! Shift in ENCRYPTED_PROGRAM INCR (0x02) opcode;
				SDR 32	TDI (0xFFFFFF40);
				! Shift in Data Row = RowCount; 
				SDR	Row_Width	TDI	(FuseArray_TDI);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 DELAY PWP;
			}
			RowCount = RowCount +1;
		} // repeat
		IF (Usercode_TDI.row = 1)
		{
			! Verify Device 16-Bit CRC;
			setpin ISPEN LOW;
			! Shift in READ_16_CRC (0xA3) opcode;
	    	SDR 32	TDI (0xFFFFFFC5);
	    	ArrayCRC16[1] = Usercode_TDI[1] << 16;
	    	SDR_VERIFY 16 TDI(#0^16)
	    				  TDO(ArrayCRC16[1])
	    				  MASK(#1^16);
	    	setpin ISPEN HIGH;
		}
	}
	ELSE
	{
		repeat Address_Length {	
			setpin ISPEN LOW;		
			! Shift in LSCC PROGRAM INCR RTI(0xE6) opcode;
	    	SDR 32	TDI (0xFFFFFF67);
			! Shift in Data Row = RowCount; 
			SDR	Row_Width	TDI	(FuseArray_TDI);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWP;
			RowCount = RowCount +1;
		} // repeat
	}
}
function SPIPROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;
		}
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;	   
	}
}

function SPISVF_PROGRAM_TAG_STATUS {
	IF (ArchArray_TDI.row = 1)
	{		
		setpin ISPEN LOW;
		! Shift in PROGRAM TAG(0x8E) opcode;
		SDR 32	TDI (0xFFFFFF71);
		! Shift in TAG Memory Data; 
		SDR	Arch_Length	TDI	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
		SDR 32	TDI (0xFFFFFF52);
		SDR_VERIFY 1 TDI(#0) TDO(#1);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
				  TDO(0x00)
				  MASK(0x01);
		setpin ISPEN HIGH;	   
	}
}
function SPIPROGRAM_USERCODE {
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				IF (Usercode_TDI.row = 1)
				{
					setpin ISPEN LOW;
					! Shift in ISC PROGRAM USERCODE(0x58) opcode;
				    SDR 32	TDI (0xFFFFFF1A);
					SDR Usercode_Length	TDI	(myASSP_Usercode_TDI[1]);
					setpin ISPEN HIGH;
					RUN_TEST TCK 3 DELAY PWP;
				}
			}
		}
		ELSE
		{
			IF (Usercode_TDI.row = 1)
			{
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM USERCODE(0x58) opcode;
			    SDR 32	TDI (0xFFFFFF1A);
				SDR Usercode_Length	TDI	(Usercode_TDI[1]);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 DELAY PWP;
			}
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM USERCODE(0x58) opcode;
		    SDR 32	TDI (0xFFFFFF1A);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWP;
		}
	}
}
function SPIPROGRAM_USERCODE_STATUS 
{
	IF (ISENCRYPTED == 1)
	{
		IF (ISMYASSP == 1)
		{
			IF (myASSP_Usercode_TDI.row = 1)
			{
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM USERCODE(0x58) opcode;
			    SDR 32	TDI (0xFFFFFF1A);
				SDR Usercode_Length	TDI	(myASSP_Usercode_TDI[1]);
				setpin ISPEN HIGH;
				RUN_TEST TCK 3 ;
				loop PWP {
					RUN_TEST DELAY PWV;
					setpin ISPEN LOW;
					! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
					SDR 32	TDI (0xFFFFFF52);
					SDR_VERIFY 1 TDI(#0) TDO(#1);
					setpin ISPEN HIGH;
				}
				setpin ISPEN HIGH;
			}
		}
		ELSE
		{
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM USERCODE(0x58) opcode;
		    SDR 32	TDI (0xFFFFFF1A);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 ;
			loop PWP {
				RUN_TEST DELAY PWV;
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
				SDR 32	TDI (0xFFFFFF52);
				SDR_VERIFY 1 TDI(#0) TDO(#1);
				setpin ISPEN HIGH;
			}
			setpin ISPEN HIGH;
		}
	}
	ELSE
	{
		IF (Usercode_TDI.row = 1)
		{
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM USERCODE(0x58) opcode;
		    SDR 32	TDI (0xFFFFFF1A);
			SDR Usercode_Length	TDI	(Usercode_TDI[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 ;
			loop PWP {
				RUN_TEST DELAY PWV;
				setpin ISPEN LOW;
				! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
				SDR 32	TDI (0xFFFFFF52);
				SDR_VERIFY 1 TDI(#0) TDO(#1);
				setpin ISPEN HIGH;
			}
			setpin ISPEN HIGH;
		}
	}

	
}
function SPIVERIFY_USERCODE {	
	IF (Usercode_TDI.row = 1)
	{
		setpin ISPEN LOW;
		! Shift in READ USERCODE(0xE8) opcode;
	    SDR 32 TDI (0xFFFFFF17);
	    SDR_VERIFY 	Usercode_Length TDI (#1^Usercode_Length)
									TDO	(Usercode_TDI);
		setpin ISPEN HIGH;									
	}
}
function SPIFLASH_PROGRAM_DONE_BIT {
	IF (ISENCRYPTED == 1)
	{
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM SECURITY(0x90) instruction;
	    SDR 32	TDI	(0xFFFFFF09);
	    setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM DONE(0xF4) opcode;
	    SDR	32 	TDI (0xFFFFFF2F);
	    setpin ISPEN HIGH;
	    RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;
		}
		setpin ISPEN HIGH;
	}
	ELSE
	{
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM DONE(0xF4) opcode;
	    SDR	32 	TDI (0xFFFFFF2F);
	    setpin ISPEN HIGH;
	    RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;
		}
		setpin ISPEN HIGH;
	}
}
function SPISVF_FLASH_PROGRAM_DONE_BIT {
	IF (ISENCRYPTED == 1)
	{
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM SECURITY(0x90) instruction;
	    SDR 32	TDI	(0xFFFFFF09);
	    setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM DONE(0xF4) opcode;
	    SDR	32 	TDI (0xFFFFFF2F);
	    setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;	
	}
	ELSE
	{
		setpin ISPEN LOW;
		! Shift in ISC PROGRAM DONE(0xF4) opcode;
	    SDR	32 	TDI (0xFFFFFF2F);
	    setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;	
	}
}
function SPIVERIFY_DONE_BIT {
	setpin ISPEN LOW;
	! Shift in READ STATUS(0x4D) opcode;
	SDR 32 TDI (0xFFFFFFB2);
	SDR_VERIFY  8 TDI(0x00)
				  TDO(0x02)
				  MASK(0x03);
	setpin ISPEN HIGH;
}
function SPIPROGRAM_SECURITY {
	setpin ISPEN LOW;
	! Shift in ISC PROGRAM SECURITY(0x90) opcode;
    SDR 32	TDI	(0xFFFFFF09);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY PWP;
}
function SPIFLASH_VERIFY {
	datastream FuseMapAddr[1][Row_Width];
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	IF (ISENCRYPTED == 1)
	{
	}
	ELSE
	{
		setpin ISPEN LOW;
		! Shift in LSCC RESET ADDRESS(0x84) opcode;
	    SDR 32	TDI (0xFFFFFF21);
		setpin ISPEN HIGH;
		repeat Address_Length {
			FuseMapAddr[1] = FuseArray_TDI[RowCount];
			setpin ISPEN LOW;
			! Shift in LSCC READ INCR RTI(0x56) opcode;
		    SDR 32	TDI	(0xFFFFFF6A);
		    ! Shift Out Data Row = RowCount;
		    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
									TDO	(FuseMapAddr[1]);									
			setpin ISPEN HIGH;		
			RUN_TEST TCK 3 ;		
			RowCount = RowCount +1;
		}
		setpin ISPEN HIGH;		
	}
}
function SPIRAM_VERIFY {
	int32	RowCount = 1;
	FuseArray_TDI.row = 1;
	FuseArray_MASK.row = 1;
	setpin ISPEN LOW;
	! Shift in LSCC RESET ADDRESS(0x84) opcode;
    SDR 32	TDI (0xFFFFFF21);
	setpin ISPEN HIGH;
	repeat Address_Length {
		setpin ISPEN LOW;
		! Shift in LSCC READ INCR RTI(0x56) opcode;
	    SDR 32	TDI	(0xFFFFFF6A);
	    ! Shift Out Data Row = RowCount;
	    SDR_VERIFY	Row_Width	TDI	(#0^Row_Width)
								TDO	(FuseArray_TDI)
								MASK(FuseArray_MASK);
		setpin ISPEN HIGH;	
		RUN_TEST TCK 3 ;							
		RowCount = RowCount +1;
	}
	setpin ISPEN HIGH;
}
function SPISAVE_ID	{
	datastream SavedID[1][ID_Length];
	file	NewFile = "FILE_SAVE";
	setpin ISPEN LOW; 
	! Shift in IDCODE(0x98) opcode;
    SDR 32 	TDI (0xFFFFFF19);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(SavedID);
	setpin ISPEN HIGH;					
	// Write To File 
	fopen	NewFile att "w" format "SVF_Plus";
	fwrite	NewFile (ID, SavedID);
	fclose 	NewFile;
}
function SPISVFSAVE_ID	{
	setpin ISPEN LOW; 
	! Shift in IDCODE(0x98) opcode;
    SDR 32 	TDI (0xFFFFFF19);
	SDR	ID_Length	TDI (#1^ID_Length)
					TDO	(#0^ID_Length)
					MASK(#0^ID_Length);
	setpin ISPEN HIGH;					
}
function SPISAVE_ARRAY {
	int32	RowCount = 1;
	datastream SavedFuseMap[Address_Length][Row_Width];
	file NewFile = "FILE_SAVE";
	setpin ISPEN LOW; 	
	! Shift in LSCC RESET ADDRESS(0x84) opcode;
    SDR 32	TDI (0xFFFFFF21);
	setpin ISPEN HIGH;
	repeat Address_Length {
		setpin ISPEN LOW;
		! Shift in LSCC READ INCR RTI(0x56) opcode;
	    SDR 32	TDI	(0xFFFFFF6A);						
	    ! Shift Out Data Row = RowCount;
	    SDR Row_Width 	TDI (#0^Row_Width)
						TDO (SavedFuseMap);
		RowCount = RowCount +1;
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
	}
	setpin ISPEN HIGH;
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (FuseArray_TDI, SavedFuseMap);
	fclose 	NewFile;
}
function SPISVF_SAVE_ARRAY {
	int32	RowCount = 1;
	setpin ISPEN LOW; 	
	! Shift in LSCC RESET ADDRESS(0x84) opcode;
    SDR 32	TDI (0xFFFFFF21);
	setpin ISPEN HIGH;
	repeat Address_Length {
		setpin ISPEN LOW;
		! Shift in LSCC READ INCR RTI(0x56) opcode;
	    SDR 32	TDI	(0xFFFFFF6A);						
	    ! Shift Out Data Row = RowCount;
	    SDR_VERIFY Row_Width 	TDI (#0^Row_Width)
								TDO (#1^Row_Width)
								MASK(#0^Row_Width);
		RowCount = RowCount +1;
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
	}
	setpin ISPEN HIGH;
}
function SPISAVE_USERCODE {
	datastream SavedUsercode[1][Usercode_Length];
	file NewFile = "FILE_SAVE";
	setpin ISPEN LOW;
	! Shift in READ USERCODE(0xE8) opcode;
	SDR 32 TDI (0xFFFFFF17);
	SDR	Usercode_Length	TDI(#1^Usercode_Length)
						TDO(SavedUsercode);
	setpin ISPEN HIGH;						
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI, SavedUsercode);
	fclose 	NewFile;
}
function SPISVF_SAVE_USERCODE {
	setpin ISPEN LOW;
	! Shift in READ USERCODE(0xE8) opcode;
	SDR 32 TDI (0xFFFFFF17);
	SDR_VERIFY	Usercode_Length	TDI(#1^Usercode_Length)
								TDO(#1^Usercode_Length)
								MASK(#0^Usercode_Length);
	setpin ISPEN HIGH;						
}
function SPIREFRESH_FUNCTION {
	setpin ISPEN LOW;
	! Shift in LSCC REFRESH(0xC4) opcode;
    SDR 32	TDI (0xFFFFFF23);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 200; 
}

function SPIPROGRAM_CONTROL0 {
	IF (Control_Register_0_TDI.row = 1)
	{
		setpin ISPEN LOW;
		! Shift in PROGRAM_CTRL_0(0xE2) instruction;
	    SDR 32 TDI (0xFFFFFF47);
	    ! Shift in Control_Register_0 Data; 
		SDR	32	TDI	(Control_Register_0_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP;
		setpin ISPEN LOW;
		! Shift in READ_CTRL_0(0x52) instruction;
	    SDR 32 TDI (0xFFFFFF4A);
	    ! Shift out Control_Register_0 Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (Control_Register_0_TDI[1]);
		setpin ISPEN HIGH;
	}
}
function SPISAVE_CONTROL0 {
	datastream SavedControl0[1][32];
	file	NewFile = "FILE_SAVE"; 
	
	setpin ISPEN LOW;
	! Shift in READ_CTRL_0(0x52) instruction;
    SDR 32 TDI (0xFFFFFF4A);
    ! Shift out Control_Register_0 Data; 
	SDR	32	TDI	(#0^32)
			TDO (SavedControl0[1]);
	setpin ISPEN HIGH;
				  
	// Write To File 
	fopen	NewFile att "wa" format "SVF_Plus";
	fwrite	NewFile (Control_Register_0_TDI, SavedControl0);
	fclose 	NewFile;
}
function SPIFLASH_TAG_VERIFY {
	IF (ArchArray_TDI.row = 1)
	{
		setpin ISPEN LOW;
		! Shift in VERIFY TAG(0x4E) opcode;
	    SDR 32	TDI	(0xFFFFFF72);
		! Shift Out TAG Memory Data;
	    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
								TDO	(ArchArray_TDI[1]);
		setpin ISPEN HIGH;								
	}
}
function SPIFLASH_TAG_SAVE {
	datastream SavedTAGMap[1][Arch_Length];
	file NewFile = "FILE_SAVE";
	
	setpin ISPEN LOW;
	! Shift in VERIFY TAG(0x4E) opcode;
    SDR 32	TDI	(0xFFFFFF72);
	! Shift Out TAG Memory Data;
    SDR	Arch_Length	TDI	(#0^Arch_Length)
						TDO	(SavedTAGMap);
	setpin ISPEN HIGH;						
	
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (ArchArray_TDI,SavedTAGMap);
	fclose 	NewFile;
}
function SPISVF_FLASH_TAG_SAVE {
	setpin ISPEN LOW;
	! Shift in VERIFY TAG(0x4E) opcode;
    SDR 32	TDI	(0xFFFFFF72);
	! Shift Out TAG Memory Data;
    SDR_VERIFY	Arch_Length	TDI	(#0^Arch_Length)
							TDO	(#1^Arch_Length)
							MASK (#0^Arch_Length);
	setpin ISPEN HIGH;								
}
function SPICHECK_PROTECT_KEY 
{
	datastream SavedSTATUS[1][8];
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
			setpin ISPEN HIGH;
		}
		ELSE
		{	
			setpin ISPEN HIGH;			  
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
			setpin ISPEN HIGH;
		}
		ELSE
		{				  
			setpin ISPEN HIGH;
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (1,"The Encryption key is not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			setpin ISPEN LOW;
			! Shift in PROTECT_SHIFT(0x82) opcode;
			SDR 32 TDI(0xFFFFFF41);
			SDR  64  TDI(ProtectKey[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWV;
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;						  
			}
			ELSE
			{				  
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
		ELSE
		{
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;			  
			}
			ELSE
			{
				setpin ISPEN HIGH;				  
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}
		}
	}
	ELSE
	{
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x40);
			setpin ISPEN HIGH;
		}
		ELSE
		{	
			setpin ISPEN HIGH;			  
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (0,"The device Encryption Feature is on.");
			print (0,"Please erase the Feature Row or ");
			print (1,"use an Encrypted JEDEC file.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x24)
							  MASK(0x20); 
				setpin ISPEN HIGH;
			}
			ELSE
			{	
				setpin ISPEN HIGH;
				print (0,"Note: The device does not need a Flash Protect key.");
			}
			setpin ISPEN LOW;
			! Shift in PROTECT_SHIFT(0x82) opcode;
			SDR 32 TDI(0xFFFFFF41);
			SDR  64  TDI(ProtectKey[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWV;  
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;						  
			}
			ELSE
			{				  
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
		ELSE
		{
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;
			}
			ELSE
			{	
				setpin ISPEN HIGH;			  
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}
		}
	}	
}
function SPICHECK_KEYLOCK 
{
	IF (ISENCRYPTED == 1)
	{
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
			setpin ISPEN HIGH;
		}
		ELSE
		{	
			setpin ISPEN HIGH;			  
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x40)
						  MASK(0x40);
			setpin ISPEN HIGH;
		}
		ELSE
		{	
			setpin ISPEN HIGH;			  
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (1,"The Encryption Key is not programmed. Cannot continue.");
		}
		IF (ISPROTECTED == 1)
		{
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x04)
							  MASK(0x04); 
				setpin ISPEN HIGH;
			}
			ELSE
			{				  
				setpin ISPEN HIGH;
				print (0,"Note: The device does not need a Flash Protect key.");
			}
			setpin ISPEN LOW;
			! Shift in PROTECT_SHIFT(0x82) opcode;
			SDR 32 TDI(0xFFFFFF41);
			SDR  64  TDI(ProtectKey[1]);
			setpin ISPEN HIGH;
			RUN_TEST TCK 3 DELAY PWV;
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;						  
			}
			ELSE
			{				  
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (0,"The Flash Protect key does not match the Flash Protect key in the device.");
				print (1,"Please re-enter the Flash Protect key.");
			}
		}
		ELSE
		{
			TRY 1 {
				setpin ISPEN LOW;
				! Shift in READ STATUS(0x4D) opcode;
				SDR 32 TDI (0xFFFFFFB2);
				SDR_VERIFY  8 TDI(0x00)
							  TDO(0x00)
							  MASK(0x04);
				setpin ISPEN HIGH;
							  
			}
			ELSE
			{				  
				setpin ISPEN HIGH;
				setpin ISPEN LOW;
				! Shift in ISC DISABLE(0x78) opcode;
			    SDR	32 	TDI (0xFFFFFF1E);
				setpin ISPEN HIGH;
				set_return_code (-93);
				print (1,"A Flash Protect key is required. Please provide the Flash Protect key.");
			}
		}
	}
	ELSE
	{
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x10);
			setpin ISPEN HIGH;
		}
		ELSE
		{	
			setpin ISPEN HIGH;			  
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (1,"The OTP is set. Cannot continue.");
		}
		TRY 1{
			setpin ISPEN LOW;
			! Shift in READ STATUS(0x4D) opcode;
			SDR 32 TDI (0xFFFFFFB2);
			SDR_VERIFY  8 TDI(0x00)
						  TDO(0x00)
						  MASK(0x40);
			setpin ISPEN HIGH;
		}
		ELSE
		{				  
			setpin ISPEN HIGH;
			setpin ISPEN LOW;
			! Shift in ISC DISABLE(0x78) opcode;
		    SDR	32 	TDI (0xFFFFFF1E);
			setpin ISPEN HIGH;
			print (0,"The device Encryption Feature is on.");
			print (0,"Please erase the Feature Row or ");
			print (1,"use an Encrypted JEDEC file.");
		}	
	}
}
function SPIPROGRAM_SED_CRC {
	IF (SEDArray_TDI.row = 1)
	{
		! Program and Verify 32 bits SED_CRC;
		setpin ISPEN LOW;
		! Shift in PROGRAM_SED_CRC(0xA2) opcode;
		SDR 32 TDI (0xFFFFFF45);
		! Shift in SED_CRC Data; 
		SDR	32	TDI	(SEDArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 DELAY PWP; 
		setpin ISPEN LOW;
		! Shift in READ_SED_CRC(0x22) opcode;
		SDR 32 TDI (0xFFFFFF44);
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x01);
		setpin ISPEN HIGH;						
	} 
}
function SPIPROGRAM_SED_CRC_STATUS {
	IF (SEDArray_TDI.row = 1)
	{
		! Program and Verify 32 bits SED_CRC;
		setpin ISPEN LOW;
		! Shift in PROGRAM_SED_CRC(0xA2) opcode;
		SDR 32 TDI (0xFFFFFF45);
		! Shift in SED_CRC Data; 
		SDR	32	TDI	(SEDArray_TDI[1]);
		setpin ISPEN HIGH;
		RUN_TEST TCK 3 ;
		loop PWP {
			RUN_TEST DELAY PWV;
			setpin ISPEN LOW;
			! Shift in ISC PROGRAM/STATUS(0x4A) opcode;
			SDR 32	TDI (0xFFFFFF52);
			SDR_VERIFY 1 TDI(#0) TDO(#1);
			setpin ISPEN HIGH;
		}
		setpin ISPEN HIGH; 
		setpin ISPEN LOW;
		! Shift in READ_SED_CRC(0x22) opcode;
		SDR 32 TDI (0xFFFFFF44);
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		setpin ISPEN HIGH;
		setpin ISPEN LOW;
		! Shift in READ STATUS(0x4D) opcode;
		SDR 32 TDI (0xFFFFFFB2);
		SDR_VERIFY  8 TDI(0x00)
					  TDO(0x00)
					  MASK(0x01);
		setpin ISPEN HIGH;						
	} 
}
function SPIVERIFY_SED_CRC {
	IF (SEDArray_TDI.row = 1)
	{
		! Verify 32 bits SED_CRC;
		
		setpin ISPEN LOW;
		! Shift in READ_SED_CRC(0x22) opcode;
		SDR 32 TDI (0xFFFFFF44);
		! Shift out SED_CRC Data; 
		SDR_VERIFY	32	TDI	(#0^32)
						TDO (SEDArray_TDI[1]);
		setpin ISPEN HIGH;
			
	} 
}
function SPISAVE_SED_CRC {
	datastream SavedSEDMap[1][32];
	file NewFile = "FILE_SAVE";
	
	setpin ISPEN LOW;
	! Shift in READ_SED_CRC(0x22) opcode;
	SDR 32 TDI (0xFFFFFF44);
	! Shift out SED_CRC Data; 
	SDR	32	TDI	(#0^32)
			TDO (SavedSEDMap);
	setpin ISPEN HIGH;						
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (SEDArray_TDI,SavedSEDMap);
	fclose 	NewFile;
}	
function SPISVF_SAVE_SED_CRC {
	setpin ISPEN LOW;
	! Shift in READ_SED_CRC(0x22) opcode;
	SDR 32 TDI (0xFFFFFF44);
	! Shift out SED_CRC Data; 
	SDR_VERIFY	32	TDI	(#0^32)
					TDO (#1^32)
					MASK(#0^32);
	setpin ISPEN HIGH;
}
function SPISAVE_SED{
	datastream SavedSEDMap[1][32];
	file NewFile = "FILE_SAVE";
	
	setpin ISPEN LOW;
	! Shift in READ_SED_CRC(0x22) opcode;
	SDR 32 TDI (0xFFFFFF44);
	! Shift out SED_CRC Data; 
	SDR	32	TDI	(#0^32)
			TDO (SavedSEDMap);
	setpin ISPEN HIGH;						
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (Usercode_TDI,SavedSEDMap);
	fclose 	NewFile;
}	
function SPIREFRESH {
	setpin ISPEN LOW;
	! Shift in REFRESH(0xC4) opcode;
    SDR 32	TDI (0xFFFFFF23);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 200; 
	setpin ISPEN LOW;
	! Shift in BYPASS(0xFF) opcode;
    SDR 32	TDI (0xFFFFFFFF);
    setpin ISPEN HIGH;
	RUN_TEST TCK 3 DELAY 200; 
}


function SAVE_COMPARE_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";

	//! Shift in LSCC RESET ADDRESS(0x21) instruction;
    //SIR Instruction_Length	TDI (LSCC_RESET_ADDRESS);
	//RUN_TEST	IDLE TCK 3 DELAY 	PWV;
		
	! Shift in PROTECT_SHIFT(0x41) instruction;
	SIR Instruction_Length TDI (PROTECT_SHIFT);
	SDR  64  TDI(ProtectKey[1]);
	RUN_TEST IDLE TCK 3 DELAY PWP; 
		
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR	8	TDI(#1^8)
			TDO(SavedSTATUS[1]);
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}

function SAVE_FEATURE_ROW_STATUS {
	datastream SavedSTATUS[1][8];
	file NewFile = "FILE_SAVE";
	SecurityKey.row = 1;

		
	! Shift in PROTECT_SHIFT(0x41) instruction;
	SIR Instruction_Length TDI (PROTECT_SHIFT);
	SDR  128  TDI(SecurityKey[1]);
	RUN_TEST IDLE TCK 3 DELAY PWP; 
		
	! Shift in READ STATUS(0xB2) instruction;
	SIR Instruction_Length TDI (READ_STATUS);
	RUN_TEST IDLE TCK 3 DELAY PWV; 
	SDR	8	TDI(#1^8)
			TDO(SavedSTATUS[1]);
	print (0,SavedSTATUS);
	// Write To file 
	fopen NewFile att "wa"
					 format "SVF_Plus";	
	fwrite NewFile (STATUS_BIT, SavedSTATUS);
	fclose 	NewFile;
}

]]>
</Script>
</SVF_Plus>