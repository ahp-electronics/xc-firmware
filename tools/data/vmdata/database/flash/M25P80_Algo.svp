DATA:
    PATTERN  (--, --, FILE(--, --));      
    WREN   ( 1, 1, b01100000);
    WRDI   ( 1, 1, b00100000);
    RDSR   ( 1, 1, b10100000);
    READ   ( 1, 1, b11000000);
    FAST_READ   ( 1, 1, b11010000);
    PP   ( 1, 1, b01000000);
    BE   ( 1, 1, b11100011);
    SE   ( 1, 1, b00011011);
    DP   ( 1, 1, b10011101);
    RES   ( 1, 1, b11010101);  	
    RDID   ( 1, 1, b00001001); 
    DEVICE_ID  (1,1,FILE(ID, --));
    VENDOR_ID  (1,1,FILE(VENDOR, --));  
DATA_END;

PROTOCOL:	PCM;

SIGNAL_DECL: 
	inout L_f_cs;
	buffer  clock;
SIGNAL_DECL_END;
             
BUS_DECL: 
    /CE = L_f_cs;
BUS_DECL_END;

FUNCTION INITIAL;
#	SIR	8	TDI(18) ;
	SIR	8	TDI(FF) ;
	SETPIN jtagISPEN_PIN 1;
#	SETPIN jtagTMS_PIN   0;
	SETPIN jtagTMS_PIN   1;
#	SETPIN jtagTRST_PIN 1;
	SETPIN jtagTRST_PIN 0;
	clock   HIGH;
	SET_ROW (PATTERN, 0);
	Addr = START_ADDRESS;
END_FUNCTION;

FUNCTION FINALIZE;
	SETPIN jtagTRST_PIN 1;
END_FUNCTION;

FUNCTION CHECK_ID;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,RES,--);
	SEND_BYTE (3,h00,--);
	RECEIVE_BYTE (1,DEVICE_ID,hFF,BREAK);
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;

FUNCTION CHECK_RDID;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,RDID,--);
	SEND_BYTE (3,h00,--);
	RECEIVE_BYTE (1,VENDOR_ID,hFF,BREAK);
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;

FUNCTION ENABLE;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,WREN,--);
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;

FUNCTION ERASE_ALL;
	SETPIN jtagISPEN_PIN b0;
	SEND_BYTE (1,BE,--);
	SETPIN jtagISPEN_PIN 1;
	SETPIN jtagISPEN_PIN b0;
	SEND_BYTE (1,RDSR,--);
	LOOP 100;
	LDELAY  1.00E SEC;
		RECEIVE_BYTE (1,h00,hFF,BREAK);
	END_LOOP;
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;
FUNCTION ERASE;
	INT32 AddrIdx = 0;
	INT32 EndAddrIdx = 0;
	Addr = START_ADDRESS;
	EndAddrIdx = END_ADDRESS;
	IF (Addr Equal 0);
		AddrIdx = 0;
	ELSE;
		AddrIdx = Addr/65536;
	END_IF;
	IF (EndAddrIdx Equal 0);
		EndAddrIdx = DEVICE_SIZE;
	ELSE;
		EndAddrIdx = EndAddrIdx/65536;
		EndAddrIdx = EndAddrIdx +1;
	END_IF;
	AddrIdx = EndAddrIdx - AddrIdx;	
	REPEAT AddrIdx;
		Call ENABLE;
		SETPIN jtagISPEN_PIN b0;
		SEND_BYTE (1,SE,--);
		SEND_BYTE (3,Addr,--);
		SETPIN jtagISPEN_PIN 1;
		SETPIN jtagISPEN_PIN b0;
		SEND_BYTE (1,RDSR,--);
		LOOP 100;
		LDELAY  1.00E-001 SEC;
			RECEIVE_BYTE (1,h00,hFF,BREAK);
		END_LOOP;
		SETPIN jtagISPEN_PIN 1;
		Addr = Addr+65536;
	END_REPEAT;

	
END_FUNCTION;

FUNCTION PROGRAM;
	Addr = START_ADDRESS;
	INT32 BuffAddr = 0;
	RESET_BURST;
	REPEAT 0;
		IF (PATTERN[BuffAddr...256] NotEqual hFF);
			Call ENABLE;
			SETPIN jtagISPEN_PIN b0;
			SEND_BYTE (1,PP,--);
			SEND_BYTE (3,Addr,--);
			BURST (0,PATTERN);
			SETPIN jtagISPEN_PIN 1;
			SETPIN jtagISPEN_PIN b0;
			SEND_BYTE (1,RDSR,--);
			LOOP 25;
			LDELAY  1.00E-003 SEC;
				RECEIVE_BYTE (1,h00,h01,BREAK);
			END_LOOP;
			SETPIN jtagISPEN_PIN 1;
			Addr = Addr +256;
			BuffAddr = BuffAddr +256;
		ELSE;
			Addr = Addr +256;
			BuffAddr = BuffAddr +256;
		END_IF;		
    END_REPEAT;
END_FUNCTION;

FUNCTION DISABLE;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,WRDI,--);
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;

FUNCTION VERIFY;
	Addr = START_ADDRESS;
	RESET_BURST;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,FAST_READ,--);
	SEND_BYTE (4,Addr,--);
	VERIFY_BURST (0,PATTERN);
	SETPIN jtagISPEN_PIN 1;
	
END_FUNCTION;

FUNCTION BLANK_CHECK;
	Addr = START_ADDRESS;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,FAST_READ,--);
	SEND_BYTE (4,Addr,--);
	VERIFY_BURST (0,hFF);
	SETPIN jtagISPEN_PIN 1;
	
END_FUNCTION;

FUNCTION READBACK;
	Addr = START_ADDRESS;
	SETPIN jtagISPEN_PIN 0;
	SEND_BYTE (1,FAST_READ,--);
	SEND_BYTE (4,Addr,--);
	VERIFY_BURST (0,?);
	SETPIN jtagISPEN_PIN 1;
END_FUNCTION;

OPERATION Verify ID;
  	INT32 Addr = 0;
    Call INITIAL;
    Call CHECK_ID;
END_OPERATION;

OPERATION Erase,Program,Verify;
  	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;	
    
    $ IDCode Checking...
	Call CHECK_ID;
	
    $ Enabling...
	Call ENABLE;
    	
    $ Erasing...
	Call ERASE;

	$ Disabling...
	Call DISABLE;
	
	$ Enabling...
	Call ENABLE;
	
    $ Programming...
	Call PROGRAM;

    $ Disabling...
	Call DISABLE;

    $ Verifying...
	Call VERIFY;

    $ Finalizing...
	Call FINALIZE;	
       
END_OPERATION;

OPERATION Program;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;
	
	$ IDCode Checking...
	Call CHECK_ID;
	
    $ Enabling...
	Call ENABLE;
    	
    $ Erasing...
	Call ERASE;

	$ Disabling...
	Call DISABLE;
	
    $ Programming...
	Call PROGRAM;

	# Disabling...
	Call DISABLE;
    
    $ Finalizing...
	Call FINALIZE;	

END_OPERATION;

OPERATION Verify Only;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;
	
	$ IDCode Checking...
	Call CHECK_ID;
	
    $ Verifying...
	Call VERIFY;

    $ Finalizing...
	Call FINALIZE;	
    
END_OPERATION;

OPERATION Read and Save;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;	
    
    $ IDCode Checking...
	Call CHECK_ID;
	
    $ Reading Back...
	Call READBACK;

    $ Finalizing...
	Call FINALIZE;	

END_OPERATION;

OPERATION Erase Only;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;	
    
    $ IDCode Checking...
	Call CHECK_ID;
	
    $ Enabling...
	Call ENABLE;
		
    $ Erasing All...
	Call ERASE_ALL;
	
	$ Disabling...
	Call DISABLE;
	
    $ Finalizing...
	Call FINALIZE;	
    
END_OPERATION;

OPERATION Erase All;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;	
    
    $ IDCode Checking...
	Call CHECK_ID;
	
    $ Enabling...
	Call ENABLE;
		
    $ Erasing All...
	Call ERASE_ALL;
	
	$ Disabling...
	Call DISABLE;
	
    $ Finalizing...
	Call FINALIZE;	
    
END_OPERATION;

OPERATION Erase Sector(s) Only;
	INT32 Addr = 0;
    $ Initializing...
	Call INITIAL;	
    
    $ IDCode Checking...
	Call CHECK_ID;
	
    $ Enabling...
	Call ENABLE;
		
    $ Erasing Sector(s)...
	Call ERASE;
	
	$ Disabling...
	Call DISABLE;
	
    $ Finalizing...
	Call FINALIZE;	
    
END_OPERATION;

OPERATION Blank Check;
	INT32 Addr = 0;
    
    $ Initializing...
	Call INITIAL;	
	
	$ IDCode Checking...
	Call CHECK_ID;
	
    $ Blank Checking...
	Call BLANK_CHECK;
    
    $ Finalizing...
	Call FINALIZE;	

END_OPERATION;

OPERATION Disabled;
    INT32 Idx1 = 0;
    $ Resetting...
    SIR	8	TDI (18) ;
	RUNTEST	IDLE	3 TCK	2.00E-002 SEC;
	$ FPGA Loader Disabled.Please Reset the target FPGA device...
END_OPERATION;
OPERATION Uploaded;
    INT32 Idx1 = 0;
    $ Uploading...
    SIR	8	TDI (23) ;
	RUNTEST	IDLE	3 TCK	2.00E-002 SEC;
END_OPERATION;
OPERATION Bypass;
	INT32 Addr = 0;
END_OPERATION;            
            
